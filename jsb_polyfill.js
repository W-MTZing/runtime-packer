(function() {
(function(i, n, r) {
var s = "function" == ("object" === (e = typeof require) ? t(require) : e) && require;
function a(r, o) {
var h = n[r];
if (!h) {
var l = i[r];
if (!l) {
var c = "function" == ("object" === (e = typeof require) ? t(require) : e) && require;
if (!o && c) return c(r, !0);
if (s) return s(r, !0);
var u = new Error("Cannot find module '" + r + "'");
u.code = "MODULE_NOT_FOUND";
throw u;
}
var _ = {};
h = n[r] = {
exports: _
};
l[0]((function(t) {
return a(l[1][t] || t);
}), h, _);
}
return h.exports;
}
for (var o = 0; o < r.length; o++) a(r[o]);
})({
1: [ (function(t, e, i) {
e.exports = {
"1001": "cocos2d: removeAction: Target not found",
"1002": "cc.ActionManager.removeActionByTag(): an invalid tag",
"1003": "cc.ActionManager.removeActionByTag(): target must be non-null",
"1004": "cc.ActionManager.getActionByTag(): an invalid tag",
"1005": "cocos2d : getActionByTag(tag = %s): Action not found",
"1006": "[Action step]. override me",
"1007": "[Action update]. override me",
"1008": "cocos2d: FiniteTimeAction#reverse: Implement me",
"1009": "cc.EaseElastic.reverse(): it should be overridden in subclass.",
"1010": "cc.IntervalAction: reverse not implemented.",
"1011": "cc.ActionInterval.setAmplitudeRate(): it should be overridden in subclass.",
"1012": "cc.ActionInterval.getAmplitudeRate(): it should be overridden in subclass.",
"1013": "The speed parameter error",
"1014": "The repeat parameter error",
"1015": "parameters should not be ending with null in Javascript",
"1016": "cc.RotateTo.reverse(): it should be overridden in subclass.",
"1019": "Failed to construct, Sequence construction needs two or more actions.",
"1020": "Failed to construct, Spawn construction needs two or more actions.",
"1021": "cc.Speed.initWithAction(): action must be non nil",
"1022": "cc.Follow.initWithAction(): followedNode must be non nil",
"1023": "cc.ActionEase.initWithAction(): action must be non nil",
"1024": "Invalid configuration. It must at least have one control point",
"1025": "cc.Sequence.initWithTwoActions(): arguments must all be non nil",
"1026": "cc.RepeatForever.initWithAction(): action must be non null",
"1027": "cc.Spawn.initWithTwoActions(): arguments must all be non null",
"1028": "cc.ReverseTime.initWithAction(): action must be non null",
"1029": "cc.ReverseTime.initWithAction(): the action was already passed in.",
"1030": "cc.Animate.initWithAnimation(): animation must be non-NULL",
"1100": "Expected 'data' dict, but not found. Config file: %s",
"1101": "Please load the resource first : %s",
"1200": "cocos2d: Director: Error in gettimeofday",
"1201": "cocos2d: Director: unrecognized projection",
"1203": "cocos2d: Director: Error in gettimeofday",
"1204": "running scene should not null",
"1205": "the scene should not null",
"1206": "loadScene: The scene index to load (%s) is out of range.",
"1207": "loadScene: Unknown name type to load: '%s'",
"1208": "loadScene: Failed to load scene '%s' because '%s' is already loading",
"1209": "loadScene: Can not load the scene '%s' because it was not in the build settings before playing.",
"1210": "Failed to preload '%s', %s",
"1211": "loadScene: The scene index to load (%s) is out of range.",
"1212": "loadScene: Unknown name type to load: '%s'",
"1213": "loadScene: Failed to load scene '%s' because '%s' is already loading",
"1214": "loadScene: Can not load the scene '%s' because it was not in the build settings before playing.",
"1215": "Failed to preload '%s', %s",
"1216": "Director.runSceneImmediate: scene is not valid",
"1300": "element type is wrong!",
"1400": "'%s' is deprecated, please use '%s' instead.",
"1401": "The first argument should be the destination object",
"1402": "The 'visible' property of %s is deprecated, use 'enabled' instead please.",
"1403": "Sorry, cc.audioEngine.willPlayMusic is removed.",
"1404": "cc.spriteFrameCache is removed, please use cc.loader to load and cache sprite frames of atlas format.",
"1405": "The '%s' will be removed in v2.0, please use '%s' instead. 😥",
"1406": "'%s.%s' is removed",
"1407": "cc.pool is being removed from v2.0, you are getting cc.js.Pool instead",
"1502": "cc.scheduler.scheduleCallbackForTarget(): target should be non-null.",
"1503": "cc.Scheduler.pauseTarget():target should be non-null",
"1504": "cc.Scheduler.resumeTarget():target should be non-null",
"1505": "cc.Scheduler.isTargetPaused():target should be non-null",
"1506": "warning: you CANNOT change update priority in scheduled function",
"1507": "CCScheduler#scheduleSelector. Selector already scheduled. Updating interval from: %.4f to %.4f",
"1508": "Argument callback must not be empty",
"1509": "Argument target must be non-nullptr",
"1510": "cc.Scheduler: Illegal target which doesn't have uuid or instanceId.",
"1511": "cc.Scheduler: pause state of the scheduled task doesn't match the element pause state in Scheduler, the given paused state will be ignored.",
"1512": "cc.Scheduler: updateFunc parameter is deprecated in scheduleUpdate function, and will be removed in v2.0",
"1513": "cc.Scheduler: scheduler stopped using `__instanceId` as id since v2.0, you should do scheduler.enableForTarget(target) before all scheduler API usage on target",
"1600": "getZOrder is deprecated. Please use getLocalZOrder instead.",
"1601": "setZOrder is deprecated. Please use setLocalZOrder instead.",
"1602": "RotationX != RotationY. Don't know which one to return",
"1603": "ScaleX != ScaleY. Don't know which one to return",
"1605": "child already added. It can't be added again",
"1606": "child must be non-null",
"1607": "removeFromParentAndCleanup is deprecated. Use removeFromParent instead",
"1608": "boundingBox is deprecated. Use getBoundingBox instead",
"1609": "argument tag is an invalid tag",
"1610": "cocos2d: removeChildByTag(tag = %s): child not found!",
"1612": "cc.Node.stopActionBy(): argument tag an invalid tag",
"1613": "cc.Node.getActionByTag(): argument tag is an invalid tag",
"1614": "resumeSchedulerAndActions is deprecated, please use resume instead.",
"1615": "pauseSchedulerAndActions is deprecated, please use pause instead.",
"1617": "child must be non-null",
"1618": "cc.Node.runAction(): action must be non-null",
"1619": "callback function must be non-null",
"1620": "interval must be positive",
"1622": "_ccsg.Node._requestDirtyFlag: failed to satisfy the request, key (%s) for flag have already been taken",
"1623": "Set '%s' to normal node (not persist root node).",
"1624": "Replacing with the same sgNode",
"1625": "The replacement sgNode should not contain any child.",
"1626": "Should not set alpha via 'color', set 'opacity' please.",
"1627": "Not support for asynchronous creating node in SG",
"1628": "Renderer error: Size of the cc._RendererInSG._sgNode must be zero",
"1629": "The node '%s' has a component inherited from 'cc._RendererInSG'",
"1630": "JSB environment is not support invoke node.runAction before the 'cc._RendererInSG' component enabled.",
"1631": "Please use runAction in the method 'start' instead.",
"1632": "Node name can not include '/'.",
"1633": "Internal error, should not remove unknown node from parent.",
"1634": "addChild: The child to add must be instance of cc.Node, not %s.",
"1635": "reorderChild: this child is not in children list.",
"1636": "Node's zIndex value can't be greater than cc.macro.MAX_ZINDEX, setting to the maximum value",
"1637": "Node's zIndex value can't be smaller than cc.macro.MIN_ZINDEX, setting to the minimum value",
"1638": "Private node's zIndex can't be set, it will keep cc.macro.MIN_ZINDEX as its value",
"1800": "cc._EventListenerKeyboard.checkAvailable(): Invalid EventListenerKeyboard!",
"1801": "cc._EventListenerTouchOneByOne.checkAvailable(): Invalid EventListenerTouchOneByOne!",
"1802": "cc._EventListenerTouchAllAtOnce.checkAvailable(): Invalid EventListenerTouchAllAtOnce!",
"1803": "cc._EventListenerAcceleration.checkAvailable(): _onAccelerationEvent must be non-nil",
"1900": "Invalid parameter.",
"2000": "Don't call this method if the event is for touch.",
"2200": "Resolution not valid",
"2201": "should set resolutionPolicy",
"2300": "The touches is more than MAX_TOUCHES, nUnusedIndex = %s",
"2400": "WebGL error %s",
"2602": "cc.Sprite.setDisplayFrameWithAnimationName(): Frame not found",
"2603": "cc.Sprite.setDisplayFrameWithAnimationName(): Invalid frame index",
"2604": "setDisplayFrame is deprecated, please use setSpriteFrame instead.",
"2606": "cc.Sprite.initWithSpriteFrame(): spriteFrame should be non-null",
"2607": "cc.Sprite.initWithSpriteFrameName(): spriteFrameName should be non-null",
"2608": "%s is null, please check.",
"2609": "cc.Sprite.initWithFile(): filename should be non-null",
"2610": "cc.Sprite.setDisplayFrameWithAnimationName(): animationName must be non-null",
"2614": "cc.Sprite.addChild(): child should be non-null",
"2616": "cc.SpriteBatchNode.updateQuadFromSprite(): cc.SpriteBatchNode only supports cc.Sprites as children",
"2617": "cc.SpriteBatchNode.insertQuadFromSprite(): cc.SpriteBatchNode only supports cc.Sprites as children",
"2618": "cc.SpriteBatchNode.addChild(): cc.SpriteBatchNode only supports cc.Sprites as children",
"2619": "cc.SpriteBatchNode.addChild(): cc.Sprite is not using the same texture",
"2623": "cc.SpriteBatchNode.updateQuadFromSprite(): sprite should be non-null",
"2625": "too many tiles, only 16384 tiles will be show",
"2626": "Unrecognized fill type in bar fill",
"2627": "Can not generate quad",
"2628": "%s does not exist",
"2710": "Sprite.initWithTexture(): Argument must be non-nil",
"2712": "Invalid spriteFrameName",
"3002": "textureForKey is deprecated. Please use getTextureForKey instead.",
"3005": "cocos2d: '%s' id=%s %s x %s",
"3006": "cocos2d: '%s' id= HTMLCanvasElement %s x %s",
"3007": "cocos2d: TextureCache dumpDebugInfo: %s textures, HTMLCanvasElement for %s KB (%s MB)",
"3103": "cc.Texture.addImage(): path should be non-null",
"3112": "cc.Texture.addImage(): path should be non-null",
"3113": "NSInternalInconsistencyException",
"3116": "WebGLRenderingContext.CLAMP_TO_EDGE should be used in NPOT textures",
"3117": "Mimpap texture only works in POT textures",
"3118": "contentSize parameter is deprecated and ignored for cc.Texture2D initWithData function.",
"3119": "Lazy init texture with image element failed due to image loading failure: %s",
"3300": "Rect width exceeds maximum margin: %s",
"3400": "Rect height exceeds maximum margin: %s",
"3500": "0 priority is forbidden for fixed priority since it's used for scene graph based priority.",
"3501": "Invalid listener type!",
"3502": "Can't set fixed priority with scene graph based listener.",
"3503": "Invalid parameters.",
"3504": "listener must be a cc.EventListener object when adding a fixed priority listener",
"3505": "The listener has been registered, please don't register it again.",
"3506": "Unsupported listener target.",
"3507": "Invalid scene graph priority!",
"3508": "If program goes here, there should be event in dispatch.",
"3509": "_inDispatch should be 1 here.",
"3510": "%s's scene graph node not contains in the parent's children",
"3511": "event is undefined",
"3600": "cc.Class will automatically call super constructor of %s, you should not call it manually.",
"3601": "The editor property 'playOnFocus' should be used with 'executeInEditMode' in class '%s'",
"3602": "Unknown editor property '%s' in class '%s'.",
"3603": "Use 'cc.Float' or 'cc.Integer' instead of 'cc.Number' please. 😂",
"3604": "Can only indicate one type attribute for %s.",
"3605": "The default value of %s is not instance of %s.",
"3606": "No needs to indicate the '%s' attribute for %s, which its default value is type of %s.",
"3607": "The default value of %s must be an empty string.",
"3608": "The type of %s must be cc.String, not String.",
"3609": "The type of %s must be cc.Boolean, not Boolean.",
"3610": "The type of %s must be cc.Float or cc.Integer, not Number.",
"3611": "Can not indicate the '%s' attribute for %s, which its default value is type of %s.",
"3612": "%s Just set the default value to 'new %s()' and it will be handled properly.",
"3613": "'No need to use 'serializable: false' or 'editorOnly: true' for the getter of '%s.%s', every getter is actually non-serialized.",
"3614": "Should not define constructor for cc.Component %s.",
"3615": "Each script can have at most one Component.",
"3616": "Should not specify class name %s for Component which defines in project.",
"3617": "Can not instantiate CCClass '%s' with arguments.",
"3618": "ctor of '%s' can not be another CCClass",
"3619": "ctor of '%s' must be function type",
"3620": "this._super declared in '%s.%s' but no super method defined",
"3621": "Unknown type of %s.%s, maybe you want is '%s'.",
"3622": "Unknown type of %s.%s, property should be defined in 'properties' or 'ctor'",
"3623": "Can not use 'editor' attribute, '%s' not inherits from Components.",
"3624": "'%s' overrided '%s' but '%s' is defined as 'false' so the super method will not be called. You can set '%s' to null to disable this warning.",
"3625": "[isChildClassOf] superclass should be function type, not",
"3626": "Can't remove '%s' because '%s' depends on it.",
"3627": "Should not add renderer component (%s) to a Canvas node.",
"3628": "Should not add %s to a node which size is already used by its other component.",
"3629": "attribute must be type object",
"3633": "Properties function of '%s' should return an object!",
"3634": "Disallow to use '.' in property name",
"3635": "Default array must be empty, set default value of %s.%s to [], and initialize in 'onLoad' or 'ctor' please. (just like 'this.%s = [...];')",
"3636": "Do not set default value to non-empty object, unless the object defines its own 'clone' function. Set default value of %s.%s to null or {}, and initialize in 'onLoad' or 'ctor' please. (just like 'this.%s = {foo: bar};')",
"3637": "Can not declare %s.%s, it is already defined in the prototype of %s",
"3638": "'%s': the getter of '%s' is already defined!",
"3639": "Can not apply the specified attribute to the getter of '%s.%s', attribute index: %s",
"3640": "'%s': the setter of '%s' is already defined!",
"3641": "Can not construct %s because it contains object property.",
"3642": "Cannot define %s.%s because static member name can not be '%s'.",
"3643": "Can not define a member called 'constructor' in the class '%s', please use 'ctor' instead.",
"3644": "Please define 'type' parameter of %s.%s as the actual constructor.",
"3645": "Please define 'type' parameter of %s.%s as the constructor of %s.",
"3646": "Unknown 'type' parameter of %s.%s：%s",
"3647": "The length of range array must be equal or greater than 2",
"3648": "Can not declare %s.%s method, it is already defined in the properties of %s.",
"3649": "CCClass %s have conflict between its ctor and __ctor__.",
"3651": 'Can not call `_super` or `prototype.ctor` in ES6 Classes "%s", use `super` instead please.',
"3652": 'Failed to construct a dummy instance of the "%s" class using `new` behind the scenes. This is for getting default values declared in TypeScript. Please ensure the class will be able to construct during script\'s initialization. %s.',
"3653": 'Please do not specifiy "default" attribute in decorator of "%s" property in "%s" class.  \nDefault value must be initialized at their declaration: 😰\n \n// Before:\n@property({\n  type: cc.Integer\n  default: 0  // <--\n})\nvalue;\n// After:\n@property({\n  type: cc.Integer\n})\nvalue = 0;    // <--',
"3654": 'Please specifiy a default value for "%s" property at its declaration: 😰\n \n// Before:\n@property(...)\nvalue; \n// After:\n@property(...)\nvalue = 0',
"3655": 'Can not specifiy "get" or "set"  attribute in decorator for "%s" property in "%s" class.  \nPlease use:\n \n@property(...)\nget %s () {\n    ...\n}\n@property\nset %s (value) {\n    ...\n}',
"3656": "The default value of %s.%s must be an empty string. (changed since 1.8)",
"3657": "The value assigned to %s should be Texture2D object, not url string. Since 1.8,  \nyou can declare a texture object directly in properties by using:  \n \n{\n    default: null,\n    type: cc.Texture2D  // use 'type:' instead of 'url:'\n}",
"3658": "browser does not support getters",
"3700": "internal error: _prefab is undefined",
"3701": "Failed to load prefab asset for node '%s'",
"3800": "The target can not be made persist because it's not a cc.Node or it doesn't have _id property.",
"3801": "The node can not be made persist because it's not under root node.",
"3802": "The node can not be made persist because it's not in current scene.",
"3803": "The target can not be made persist because it's not a cc.Node or it doesn't have _id property.",
"3804": "getComponent: Type must be non-nil",
"3805": "Can't add component '%s' because %s already contains the same component.",
"3806": "Can't add component '%s' to %s because it conflicts with the existing '%s' derived component.",
"3807": "addComponent: Failed to get class '%s'",
"3808": "addComponent: Should not add component ('%s') when the scripts are still loading.",
"3809": "addComponent: The component to add must be a constructor",
"3810": "addComponent: The component to add must be child class of cc.Component",
"3811": "_addComponentAt: The component to add must be a constructor",
"3812": "_addComponentAt: Index out of range",
"3813": "removeComponent: Component must be non-nil",
"3814": "Argument must be non-nil",
"3815": "Component not owned by this entity",
"3816": "Node '%s' is already activating",
"3817": "Sorry, the component of '%s' which with an index of %s is corrupted! It has been removed.",
"3818": "Failed to read or parse project.json",
"3819": "Warning: target element is not a DIV or CANVAS",
"3820": "The renderer doesn't support the renderMode %s",
"3821": "Cannot change hierarchy while activating or deactivating the parent.",
"3900": "Invalid clip to add",
"3901": "Invalid clip to remove",
"3902": "clip is defaultClip, set force to true to force remove clip and animation state",
"3903": "animation state is playing, set force to true to force stop and remove clip and animation state",
"3904": "motion path of target [%s] in prop [%s] frame [%s] is not valid",
"3905": "sprite frames must be an Array.",
"3906": "Can't find easing type [%s]",
"3907": "animator not added or already removed",
"3908": "animation not added or already removed",
"3912": "already-playing",
"4000": "Sorry, the cc.Font has been modified from Raw Asset to Asset. Please load the font asset before using.",
"4002": "_ccsg.Label._initBMFontWithString(): re-init is no longer supported",
"4003": "Label font size can't be shirnked less than 0!",
"4004": "force notify all fonts loaded!",
"4011": "Property spriteFrame of Font '%s' is invalid. Using system font instead.",
"4012": "The texture of Font '%s' must be already loaded on JSB. Using system font instead.",
"4013": "Sorry, lineHeight of system font not supported on JSB.",
"4100": "Property padding is deprecated, please use paddingLeft, paddingRight, paddingTop and paddingBottom instead",
"4200": "MaskType: IMAGE_STENCIL only support WebGL mode.",
"4201": "The alphaThreshold invalid in Canvas Mode.",
"4202": "The inverted invalid in Canvas Mode.",
"4300": "can not found the %s page.",
"4400": "Invalid RichText img tag! The sprite frame name can't be found in the ImageAtlas!",
"4600": "Script attached to '%s' is missing or invalid.",
"4700": "The dom control is not created!",
"4800": "unknown asset type",
"4901": "loadRes: should not specify the extname in %s %s",
"4902": "No need to release non-cached asset.",
"4903": "Can not get class '%s'",
"4914": "Resources url '%s' does not exist.",
"4915": "Pack indices and data do not match in size",
"4916": "Failed to download package for %s",
"4920": "Sorry, you shouldn't use id as item identity any more, please use url or uuid instead, the current id is being set as url: (%s)",
"4921": "Invalid pipe or invalid index provided!",
"4922": "The pipe to be inserted is already in the pipeline!",
"4923": "Uuid Loader: Parse asset [ %s ] failed : %s",
"4924": "JSON Loader: Input item doesn't contain string content",
"4925": "Uuid Loader: Deserialize asset [ %s ] failed : %s",
"4926": "Audio Downloader: no web audio context.",
"4927": "Audio Downloader: audio not supported on this browser!",
"4928": "Load %s failed!",
"4929": "Load Webp ( %s ) failed",
"4930": "Load image ( %s ) failed",
"4931": "Download Uuid: can not find type of raw asset[ %s ]: %s",
"4932": 'Since v1.10, for any atlas ("%s") in the "resources" directory, it is not possible to find the contained SpriteFrames via `loadRes`, `getRes` or `releaseRes`. Load the SpriteAtlas first and then use `spriteAtlas.getSpriteFrame(name)` instead please.',
"5000": "object already destroyed",
"5001": "object not yet destroyed",
"5100": "Not a plist file!",
"5200": "Warning: localStorage isn't enabled. Please confirm browser cookie or privacy option",
"5201": "browser don't support web audio",
"5202": "This feature supports WebGL render mode only.",
"5300": "Type of target to deserialize not matched with data: target is %s, data is %s",
"5301": "Can not find script '%s'",
"5302": "Can not find class '%s'",
"5400": "'%s' is deprecated, use '%s' instead please.",
"5401": "'%s' is deprecated, use '%s' instead please.",
"5402": "cc.js.addon called on non-object:",
"5403": "cc.js.mixin: arguments must be type object:",
"5404": "The base class to extend from must be non-nil",
"5405": "The class to extend must be non-nil",
"5406": "Class should be extended before assigning any prototype members.",
"5500": "'notify' can't work with 'get/set' !",
"5501": "'notify' must work with 'default' !",
"5502": "Invalid url of %s.%s",
"5503": "The 'url' attribute of '%s.%s' is undefined when loading script.",
"5504": "The 'url' type of '%s.%s' must be child class of cc.RawAsset.",
"5505": "The 'url' type of '%s.%s' must not be child class of cc.Asset, otherwise you should use 'type: %s' instead.",
"5506": "Can not specify 'type' attribute for '%s.%s', because its 'url' is already defined.",
"5507": "The 'default' attribute of '%s.%s' must be an array",
"5508": "Invalid type of %s.%s",
"5510": "The 'type' attribute of '%s.%s' can not be 'Number', use 'Float' or 'Integer' instead please.",
"5511": "The 'type' attribute of '%s.%s' is undefined when loading script",
"5512": "Can not serialize '%s.%s' because the specified type is anonymous, please provide a class name or set the 'serializable' attribute of '%s.%s' to 'false'.",
"5513": "The 'default' value of '%s.%s' should not be used with a 'get' function.",
"5514": "The 'default' value of '%s.%s' should not be used with a 'set' function.",
"5515": "The 'default' value of '%s.%s' can not be an constructor. Set default to null please.",
"5516": "Property '%s.%s' must define at least one of 'default', 'get' or 'set'.",
"5517": "'%s.%s' hides inherited property '%s.%s'. To make the current property override that implementation, add the `override: true` attribute please.",
"5600": "Argument must be non-nil",
"5601": "Can not get current scene.",
"5602": "Scene is destroyed",
"5603": "reference node is destroyed",
"5700": "no %s or %s on %s",
"5800": "%s.lerp not yet implemented.",
"5801": "%s.clone not yet implemented.",
"5802": "%s.equals not yet implemented.",
"5900": "MotionStreak only support WebGL mode.",
"5901": "cc.MotionStreak.getOpacity has not been supported.",
"5902": "cc.MotionStreak.setOpacity has not been supported.",
"6000": "Custom should not be false if file is not specified.",
"6001": "The new %s must not be NaN",
"6008": "_ccsg.ParticleSystem.initWithFile(): Particles: file not found",
"6009": "_ccsg.ParticleSystem.initWithDictionary(): Invalid emitterType in config file",
"6010": "_ccsg.ParticleSystem: error decoding or ungzipping textureImageData",
"6011": "_ccsg.ParticleSystem: unknown image format with Data",
"6012": "_ccsg.ParticleSystem.initWithDictionary() : error loading the texture",
"6013": "Particle system: not enough memory",
"6015": "_ccsg.ParticleSystem.setDisplayFrame(): QuadParticle only supports SpriteFrames with no offsets",
"6017": "Incomplete or corrupt PNG file",
"6018": "Invalid filter algorithm: %s",
"6019": "Invalid byte order value.",
"6020": "You forgot your towel!",
"6021": "Unknown Field Tag: %s",
"6022": "Too many bits requested",
"6023": "No bits requested",
"6024": "Cannot recover from missing StripByteCounts",
"6025": "Cannot handle sub-byte bits per sample",
"6026": "Cannot handle sub-byte bits per pixel",
"6027": "Palette image missing color map",
"6028": "Unknown Photometric Interpretation: %s",
"6029": "Unkown error",
"6200": "Canvas doesn't support mesh slot!",
"6300": "only cc.DrawNode is accepted as stencil",
"6301": "Stencil buffer is not enabled.",
"6302": "Nesting more than %d stencils is not supported. Everything will be drawn without stencil for this node and its children.",
"6400": "asset.url is not usable in core process",
"6401": "asset.urls is not usable in core process",
"6402": "AssetLibrary has already been initialized!",
"6500": "Widget target must be one of the parent nodes of it",
"6600": "collider not added or already removed",
"6601": "Can't find testFunc for (%s, $s).",
"6700": "Can't init canvas '%s' because it conflicts with the existing '%s', the scene should only have one active canvas at the same time",
"6701": "Should not add Canvas to a node which already contains a renderer component (%s).",
"6702": "Should not add Canvas to a node which size is already used by its other component.",
"6703": "Can't initialise DrawingPrimitiveWebGL. context need is WebGLRenderingContext",
"6704": "Polygon's point must greater than 2",
"6705": "Argument must be non-nil",
"6800": "Callback of event must be non-nil",
"6801": "The message must be provided",
"6900": "The thing you want to instantiate must be an object",
"6901": "The thing you want to instantiate is nil",
"6902": "The thing you want to instantiate is destroyed",
"6903": "The instantiate method for given asset do not implemented",
"6904": "Can not instantiate array",
"6905": "Can not instantiate DOM element",
"7000": "Failed to init asset's raw path.",
"7001": "Should not load '%s' from script dynamically, unless it is placed in the 'resources' folder.",
"7002": "Sorry can not load '%s' because it is not placed in the 'resources' folder.",
"7003": "Failed to init builtin asset's raw path.",
"7100": "%s already defined in Enum.",
"7101": "Sorry, 'cc.Enum' not available on this platform, please report this error here: https://github.com/cocos-creator/engine/issues/new",
"7200": "Method 'initWithTMXFile' is no effect now, please set property 'tmxAsset' instead.",
"7201": "Method 'initWithXML' is no effect now, please set property 'tmxAsset' instead.",
"7202": "Add component TiledLayer into node failed.",
"7203": "Property 'mapLoaded' is unused now. Please write the logic to the callback 'start'.",
"7204": "_ccsg.TMXLayer.getTileAt(): TMXLayer: the tiles map has been released",
"7205": "_ccsg.TMXLayer.getTileGIDAt(): TMXLayer: the tiles map has been released",
"7206": "_ccsg.TMXLayer.setTileGID(): TMXLayer: the tiles map has been released",
"7207": "_ccsg.TMXLayer.setTileGID(): invalid gid: %s",
"7208": "_ccsg.TMXLayer.getTileFlagsAt(): TMXLayer: the tiles map has been released",
"7209": "_ccsg.TMXLayer.removeTileAt(): TMXLayer: the tiles map has been released",
"7210": "TMX Hexa zOrder not supported",
"7211": "TMX invalid value",
"7212": "_ccsg.TMXTiledMap.initWithTMXFile(): Map not found. Please check the filename.",
"7213": "_ccsg.TMXTiledMap.initWithXML(): Map not found. Please check the filename.",
"7214": "propertiesForGID is deprecated. Please use getPropertiesForGID instead.",
"7215": "cocos2d: Warning: TMX Layer %s has no tiles",
"7216": "cocos2d: TMXFormat: Unsupported TMX version: %s",
"7217": "cocos2d: TMXFomat: Unsupported orientation: %s",
"7218": "cc.TMXMapInfo.parseXMLFile(): unsupported compression method",
"7219": "cc.TMXMapInfo.parseXMLFile(): Only base64 and/or gzip/zlib maps are supported",
"7221": "cc.TMXMapInfo.parseXMLFile(): Texture '%s' not found.",
"7222": "Parse %s failed.",
"7223": "_ccsg.TMXLayer.setTileGID(): pos should be non-null",
"7224": "_ccsg.TMXTiledMap.getLayer(): layerName should be non-null or non-empty string.",
"7225": "_ccsg.TMXTiledMap.getObjectGroup(): groupName should be non-null or non-empty string.",
"7226": "_ccsg.TMXLayer.getTileAt(): pos should be non-null",
"7227": "_ccsg.TMXLayer.getTileAt(): invalid position",
"7228": "_ccsg.TMXLayer.getTileGIDAt(): pos should be non-null",
"7229": "_ccsg.TMXLayer.getTileGIDAt(): invalid position",
"7230": "_ccsg.TMXLayer.setTileGID(): pos should be non-null",
"7231": "_ccsg.TMXLayer.setTileGID(): invalid position",
"7232": "_ccsg.TMXLayer.getTileFlagsAt(): pos should be non-null",
"7233": "_ccsg.TMXLayer.getTileFlagsAt(): invalid position",
"7234": "_ccsg.TMXLayer.removeTileAt(): pos should be non-null",
"7235": "_ccsg.TMXLayer.removeTileAt(): invalid position",
"7401": "Failed to set _defaultArmatureIndex for '%s' because the index is out of range.",
"7402": "Failed to set _animationIndex for '%s' because the index is out of range.",
"7501": "Failed to set _defaultSkinIndex for '%s' because the index is out of range.",
"7502": "Failed to set _animationIndex for '%s' because its skeletonData is invalid.",
"7503": "Failed to set _animationIndex for '%s' because the index is out of range.",
"7504": "Can not render dynamic created SkeletonData",
"7505": "Invalid type of atlasFile, atlas should be registered as raw asset.",
"7506": "Failed to load spine atlas '$s'",
"7507": "Please re-import '%s' because its textures is not initialized! (This workflow will be improved in the future.)",
"7508": "The atlas asset of '%s' is not exists!",
"7509": "Spine: Animation not found: %s",
"7510": "Spine: Animation not found: %s",
"7600": "The context of RenderTexture is invalid.",
"7601": "cc.RenderTexture._initWithWidthAndHeightForWebGL() : only RGB and RGBA formats are valid for a render texture;",
"7602": "Could not attach texture to the framebuffer",
"7603": "clearDepth isn't supported on Cocos2d-Html5",
"7604": "saveToFile isn't supported on Cocos2d-Html5",
"7605": "newCCImage isn't supported on Cocos2d-Html5",
"7700": "On the web is always keep the aspect ratio",
"7701": "Can't know status",
"7702": "Video player's duration is not ready to get now!",
"7800": "Web does not support loading",
"7801": "Web does not support query history",
"7802": "Web does not support query history",
"7803": "The current browser does not support the GoBack",
"7804": "The current browser does not support the GoForward",
"7805": "Web does not support zoom",
"7900": "cc.math.Matrix3.assign(): current matrix equals matIn",
"7901": "cc.math.mat4Assign(): pOut equals pIn",
"7902": "cc.mat.Matrix4.assignFrom(): mat4 equals current matrix",
"7903": "cc.math.Matrix4 equal: pMat1 and pMat2 are same object.",
"7904": "cc.math.Matrix4.extractPlane: Invalid plane index",
"7905": "cc.math.mat4Assign(): pOut equals pIn",
"7906": "cc.mat.Matrix4.assignFrom(): mat4 equals current matrix",
"7907": "cc.math.Matrix4 equals: pMat1 and pMat2 are same object.",
"7908": "Invalid matrix mode specified",
"7909": "current quaternion is an invalid value",
"8000": "Can't handle this field type or size",
"8001": "No bytes requested",
"8002": "Too many bytes requested",
"8003": "Missing StripByteCounts!",
"8100": "cocos2d: ERROR: Failed to compile shader:\n %s",
"8101": "cocos2d: ERROR: Failed to compile vertex shader",
"8102": "cocos2d: ERROR: Failed to compile fragment shader",
"8103": "cc.GLProgram.link(): Cannot link invalid program",
"8104": "cocos2d: ERROR: Failed to link program: %s",
"8105": "cocos2d: cc.shaderCache._loadDefaultShader, error shader type",
"8106": "Please load the resource firset : %s",
"8107": "cc.GLProgram.getUniformLocationForName(): uniform name should be non-null",
"8108": "cc.GLProgram.getUniformLocationForName(): Invalid operation. Cannot get uniform location when program is not initialized",
"8109": "modelView matrix is undefined.",
"8200": "Please set node's active instead of rigidbody's enabled.",
"8300": "Should only one camera exists, please check your project.",
"8301": "Camera does not support Canvas Mode.",
"8400": "Wrong type arguments, 'filePath' must be a String.",
"8401": "Since 1.10, `%s` accept %s instance directly, not a URL string. Please directly reference the %s object in your script, or load %s by loader first. Don't use %s's URL anymore.",
"9000": "Stencil manager does not support level bigger than %d in this device.",
"9001": "Stencil manager is already empty, cannot pop any mask",
"0100": "%s not yet implemented."
};
}), {} ],
2: [ (function(t, e, i) {
t("../core/platform/CCClass");
var n = t("../core/utils/misc");
cc.Action = cc.Class({
name: "cc.Action",
ctor: function() {
this.originalTarget = null;
this.target = null;
this.tag = cc.Action.TAG_INVALID;
},
clone: function() {
var t = new cc.Action();
t.originalTarget = null;
t.target = null;
t.tag = this.tag;
return t;
},
isDone: function() {
return !0;
},
startWithTarget: function(t) {
this.originalTarget = t;
this.target = t;
},
stop: function() {
this.target = null;
},
step: function(t) {
cc.logID(1006);
},
update: function(t) {
cc.logID(1007);
},
getTarget: function() {
return this.target;
},
setTarget: function(t) {
this.target = t;
},
getOriginalTarget: function() {
return this.originalTarget;
},
setOriginalTarget: function(t) {
this.originalTarget = t;
},
getTag: function() {
return this.tag;
},
setTag: function(t) {
this.tag = t;
},
retain: function() {},
release: function() {}
});
cc.Action.TAG_INVALID = -1;
cc.FiniteTimeAction = cc.Class({
name: "cc.FiniteTimeAction",
extends: cc.Action,
ctor: function() {
this._duration = 0;
},
getDuration: function() {
return this._duration * (this._timesForRepeat || 1);
},
setDuration: function(t) {
this._duration = t;
},
reverse: function() {
cc.logID(1008);
return null;
},
clone: function() {
return new cc.FiniteTimeAction();
}
});
cc.Speed = cc.Class({
name: "cc.Speed",
extends: cc.Action,
ctor: function(t, e) {
this._speed = 0;
this._innerAction = null;
t && this.initWithAction(t, e);
},
getSpeed: function() {
return this._speed;
},
setSpeed: function(t) {
this._speed = t;
},
initWithAction: function(t, e) {
if (!t) {
cc.errorID(1021);
return !1;
}
this._innerAction = t;
this._speed = e;
return !0;
},
clone: function() {
var t = new cc.Speed();
t.initWithAction(this._innerAction.clone(), this._speed);
return t;
},
startWithTarget: function(t) {
cc.Action.prototype.startWithTarget.call(this, t);
this._innerAction.startWithTarget(t);
},
stop: function() {
this._innerAction.stop();
cc.Action.prototype.stop.call(this);
},
step: function(t) {
this._innerAction.step(t * this._speed);
},
isDone: function() {
return this._innerAction.isDone();
},
reverse: function() {
return new cc.Speed(this._innerAction.reverse(), this._speed);
},
setInnerAction: function(t) {
this._innerAction !== t && (this._innerAction = t);
},
getInnerAction: function() {
return this._innerAction;
}
});
cc.speed = function(t, e) {
return new cc.Speed(t, e);
};
cc.Follow = cc.Class({
name: "cc.Follow",
extends: cc.Action,
ctor: function(t, e) {
this._followedNode = null;
this._boundarySet = !1;
this._boundaryFullyCovered = !1;
this._halfScreenSize = null;
this._fullScreenSize = null;
this.leftBoundary = 0;
this.rightBoundary = 0;
this.topBoundary = 0;
this.bottomBoundary = 0;
this._worldRect = cc.rect(0, 0, 0, 0);
t && (e ? this.initWithTarget(t, e) : this.initWithTarget(t));
},
clone: function() {
var t = new cc.Follow(), e = this._worldRect, i = new cc.Rect(e.x, e.y, e.width, e.height);
t.initWithTarget(this._followedNode, i);
return t;
},
isBoundarySet: function() {
return this._boundarySet;
},
setBoudarySet: function(t) {
this._boundarySet = t;
},
initWithTarget: function(t, e) {
if (!t) {
cc.errorID(1022);
return !1;
}
var i = this;
e = e || cc.rect(0, 0, 0, 0);
i._followedNode = t;
i._worldRect = e;
i._boundarySet = !(0 === e.width && 0 === e.height);
i._boundaryFullyCovered = !1;
var n = cc.director.getWinSize();
i._fullScreenSize = cc.v2(n.width, n.height);
i._halfScreenSize = i._fullScreenSize.mul(.5);
if (i._boundarySet) {
i.leftBoundary = -(e.x + e.width - i._fullScreenSize.x);
i.rightBoundary = -e.x;
i.topBoundary = -e.y;
i.bottomBoundary = -(e.y + e.height - i._fullScreenSize.y);
i.rightBoundary < i.leftBoundary && (i.rightBoundary = i.leftBoundary = (i.leftBoundary + i.rightBoundary) / 2);
i.topBoundary < i.bottomBoundary && (i.topBoundary = i.bottomBoundary = (i.topBoundary + i.bottomBoundary) / 2);
i.topBoundary === i.bottomBoundary && i.leftBoundary === i.rightBoundary && (i._boundaryFullyCovered = !0);
}
return !0;
},
step: function(t) {
var e = this.target.convertToWorldSpaceAR(cc.Vec2.ZERO), i = this._followedNode.convertToWorldSpaceAR(cc.Vec2.ZERO), r = e.sub(i), s = this.target.parent.convertToNodeSpaceAR(r.add(this._halfScreenSize));
if (this._boundarySet) {
if (this._boundaryFullyCovered) return;
this.target.setPosition(n.clampf(s.x, this.leftBoundary, this.rightBoundary), n.clampf(s.y, this.bottomBoundary, this.topBoundary));
} else this.target.setPosition(s.x, s.y);
},
isDone: function() {
return !this._followedNode.activeInHierarchy;
},
stop: function() {
this.target = null;
cc.Action.prototype.stop.call(this);
}
});
cc.follow = function(t, e) {
return new cc.Follow(t, e);
};
}), {
"../core/platform/CCClass": 153,
"../core/utils/misc": 231
} ],
3: [ (function(t, e, i) {
function n(t, e) {
return t[Math.min(t.length - 1, Math.max(e, 0))];
}
function r(t) {
for (var e = [], i = t.length - 1; i >= 0; i--) e.push(cc.v2(t[i].x, t[i].y));
return e;
}
function s(t) {
for (var e = [], i = 0; i < t.length; i++) e.push(cc.v2(t[i].x, t[i].y));
return e;
}
cc.CardinalSplineTo = cc.Class({
name: "cc.CardinalSplineTo",
extends: cc.ActionInterval,
ctor: function(t, e, i) {
this._points = [];
this._deltaT = 0;
this._tension = 0;
this._previousPosition = null;
this._accumulatedDiff = null;
void 0 !== i && cc.CardinalSplineTo.prototype.initWithDuration.call(this, t, e, i);
},
initWithDuration: function(t, e, i) {
if (!e || 0 === e.length) {
cc.errorID(1024);
return !1;
}
if (cc.ActionInterval.prototype.initWithDuration.call(this, t)) {
this.setPoints(e);
this._tension = i;
return !0;
}
return !1;
},
clone: function() {
var t = new cc.CardinalSplineTo();
t.initWithDuration(this._duration, s(this._points), this._tension);
return t;
},
startWithTarget: function(t) {
cc.ActionInterval.prototype.startWithTarget.call(this, t);
this._deltaT = 1 / (this._points.length - 1);
this._previousPosition = cc.v2(this.target.x, this.target.y);
this._accumulatedDiff = cc.v2(0, 0);
},
update: function(t) {
t = this._computeEaseTime(t);
var e, i, r = this._points;
if (1 === t) {
e = r.length - 1;
i = 1;
} else {
var s = this._deltaT;
i = (t - s * (e = 0 | t / s)) / s;
}
var a = (function(t, e, i, n, r, s) {
var a = s * s, o = a * s, h = (1 - r) / 2, l = h * (2 * a - o - s), c = h * (-o + a) + (2 * o - 3 * a + 1), u = h * (o - 2 * a + s) + (-2 * o + 3 * a), _ = h * (o - a), m = t.x * l + e.x * c + i.x * u + n.x * _, f = t.y * l + e.y * c + i.y * u + n.y * _;
return cc.v2(m, f);
})(n(r, e - 1), n(r, e - 0), n(r, e + 1), n(r, e + 2), this._tension, i);
if (cc.macro.ENABLE_STACKABLE_ACTIONS) {
var o, h;
o = this.target.x - this._previousPosition.x;
h = this.target.y - this._previousPosition.y;
if (0 !== o || 0 !== h) {
var l = this._accumulatedDiff;
o = l.x + o;
h = l.y + h;
l.x = o;
l.y = h;
a.x += o;
a.y += h;
}
}
this.updatePosition(a);
},
reverse: function() {
var t = r(this._points);
return cc.cardinalSplineTo(this._duration, t, this._tension);
},
updatePosition: function(t) {
this.target.setPosition(t);
this._previousPosition = t;
},
getPoints: function() {
return this._points;
},
setPoints: function(t) {
this._points = t;
}
});
cc.cardinalSplineTo = function(t, e, i) {
return new cc.CardinalSplineTo(t, e, i);
};
cc.CardinalSplineBy = cc.Class({
name: "cc.CardinalSplineBy",
extends: cc.CardinalSplineTo,
ctor: function(t, e, i) {
this._startPosition = cc.v2(0, 0);
void 0 !== i && this.initWithDuration(t, e, i);
},
startWithTarget: function(t) {
cc.CardinalSplineTo.prototype.startWithTarget.call(this, t);
this._startPosition.x = t.x;
this._startPosition.y = t.y;
},
reverse: function() {
for (var t, e = this._points.slice(), i = e[0], n = 1; n < e.length; ++n) {
t = e[n];
e[n] = t.sub(i);
i = t;
}
var s = r(e);
i = s[s.length - 1];
s.pop();
i.x = -i.x;
i.y = -i.y;
s.unshift(i);
for (n = 1; n < s.length; ++n) {
(t = s[n]).x = -t.x;
t.y = -t.y;
t.x += i.x;
t.y += i.y;
s[n] = t;
i = t;
}
return cc.cardinalSplineBy(this._duration, s, this._tension);
},
updatePosition: function(t) {
var e = this._startPosition, i = t.x + e.x, n = t.y + e.y;
this._previousPosition.x = i;
this._previousPosition.y = n;
this.target.setPosition(i, n);
},
clone: function() {
var t = new cc.CardinalSplineBy();
t.initWithDuration(this._duration, s(this._points), this._tension);
return t;
}
});
cc.cardinalSplineBy = function(t, e, i) {
return new cc.CardinalSplineBy(t, e, i);
};
cc.CatmullRomTo = cc.Class({
name: "cc.CatmullRomTo",
extends: cc.CardinalSplineTo,
ctor: function(t, e) {
e && this.initWithDuration(t, e);
},
initWithDuration: function(t, e) {
return cc.CardinalSplineTo.prototype.initWithDuration.call(this, t, e, .5);
},
clone: function() {
var t = new cc.CatmullRomTo();
t.initWithDuration(this._duration, s(this._points));
return t;
}
});
cc.catmullRomTo = function(t, e) {
return new cc.CatmullRomTo(t, e);
};
cc.CatmullRomBy = cc.Class({
name: "cc.CatmullRomBy",
extends: cc.CardinalSplineBy,
ctor: function(t, e) {
e && this.initWithDuration(t, e);
},
initWithDuration: function(t, e) {
return cc.CardinalSplineTo.prototype.initWithDuration.call(this, t, e, .5);
},
clone: function() {
var t = new cc.CatmullRomBy();
t.initWithDuration(this._duration, s(this._points));
return t;
}
});
cc.catmullRomBy = function(t, e) {
return new cc.CatmullRomBy(t, e);
};
}), {} ],
4: [ (function(t, e, i) {
cc.easeIn = function(t) {
return {
_rate: t,
easing: function(t) {
return Math.pow(t, this._rate);
},
reverse: function() {
return cc.easeIn(1 / this._rate);
}
};
};
cc.easeOut = function(t) {
return {
_rate: t,
easing: function(t) {
return Math.pow(t, 1 / this._rate);
},
reverse: function() {
return cc.easeOut(1 / this._rate);
}
};
};
cc.easeInOut = function(t) {
return {
_rate: t,
easing: function(t) {
return (t *= 2) < 1 ? .5 * Math.pow(t, this._rate) : 1 - .5 * Math.pow(2 - t, this._rate);
},
reverse: function() {
return cc.easeInOut(this._rate);
}
};
};
var n = {
easing: function(t) {
return 0 === t ? 0 : Math.pow(2, 10 * (t - 1));
},
reverse: function() {
return r;
}
};
cc.easeExponentialIn = function() {
return n;
};
var r = {
easing: function(t) {
return 1 === t ? 1 : 1 - Math.pow(2, -10 * t);
},
reverse: function() {
return n;
}
};
cc.easeExponentialOut = function() {
return r;
};
var s = {
easing: function(t) {
return 1 !== t && 0 !== t ? (t *= 2) < 1 ? .5 * Math.pow(2, 10 * (t - 1)) : .5 * (2 - Math.pow(2, -10 * (t - 1))) : t;
},
reverse: function() {
return s;
}
};
cc.easeExponentialInOut = function() {
return s;
};
var a = {
easing: function(t) {
return 0 === t || 1 === t ? t : -1 * Math.cos(t * Math.PI / 2) + 1;
},
reverse: function() {
return o;
}
};
cc.easeSineIn = function() {
return a;
};
var o = {
easing: function(t) {
return 0 === t || 1 === t ? t : Math.sin(t * Math.PI / 2);
},
reverse: function() {
return a;
}
};
cc.easeSineOut = function() {
return o;
};
var h = {
easing: function(t) {
return 0 === t || 1 === t ? t : -.5 * (Math.cos(Math.PI * t) - 1);
},
reverse: function() {
return h;
}
};
cc.easeSineInOut = function() {
return h;
};
var l = {
easing: function(t) {
if (0 === t || 1 === t) return t;
t -= 1;
return -Math.pow(2, 10 * t) * Math.sin((t - .075) * Math.PI * 2 / .3);
},
reverse: function() {
return c;
}
};
cc.easeElasticIn = function(t) {
return t && .3 !== t ? {
_period: t,
easing: function(t) {
if (0 === t || 1 === t) return t;
t -= 1;
return -Math.pow(2, 10 * t) * Math.sin((t - this._period / 4) * Math.PI * 2 / this._period);
},
reverse: function() {
return cc.easeElasticOut(this._period);
}
} : l;
};
var c = {
easing: function(t) {
return 0 === t || 1 === t ? t : Math.pow(2, -10 * t) * Math.sin((t - .075) * Math.PI * 2 / .3) + 1;
},
reverse: function() {
return l;
}
};
cc.easeElasticOut = function(t) {
return t && .3 !== t ? {
_period: t,
easing: function(t) {
return 0 === t || 1 === t ? t : Math.pow(2, -10 * t) * Math.sin((t - this._period / 4) * Math.PI * 2 / this._period) + 1;
},
reverse: function() {
return cc.easeElasticIn(this._period);
}
} : c;
};
cc.easeElasticInOut = function(t) {
return {
_period: t = t || .3,
easing: function(t) {
var e = 0, i = this._period;
if (0 === t || 1 === t) e = t; else {
t *= 2;
i || (i = this._period = .3 * 1.5);
var n = i / 4;
e = (t -= 1) < 0 ? -.5 * Math.pow(2, 10 * t) * Math.sin((t - n) * Math.PI * 2 / i) : Math.pow(2, -10 * t) * Math.sin((t - n) * Math.PI * 2 / i) * .5 + 1;
}
return e;
},
reverse: function() {
return cc.easeElasticInOut(this._period);
}
};
};
function u(t) {
return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;
}
var _ = {
easing: function(t) {
return 1 - u(1 - t);
},
reverse: function() {
return m;
}
};
cc.easeBounceIn = function() {
return _;
};
var m = {
easing: function(t) {
return u(t);
},
reverse: function() {
return _;
}
};
cc.easeBounceOut = function() {
return m;
};
var f = {
easing: function(t) {
return t < .5 ? .5 * (1 - u(1 - (t *= 2))) : .5 * u(2 * t - 1) + .5;
},
reverse: function() {
return f;
}
};
cc.easeBounceInOut = function() {
return f;
};
var d = {
easing: function(t) {
return 0 === t || 1 === t ? t : t * t * (2.70158 * t - 1.70158);
},
reverse: function() {
return p;
}
};
cc.easeBackIn = function() {
return d;
};
var p = {
easing: function(t) {
return (t -= 1) * t * (2.70158 * t + 1.70158) + 1;
},
reverse: function() {
return d;
}
};
cc.easeBackOut = function() {
return p;
};
var g = {
easing: function(t) {
var e = 2.5949095;
return (t *= 2) < 1 ? t * t * ((e + 1) * t - e) / 2 : (t -= 2) * t * ((e + 1) * t + e) / 2 + 1;
},
reverse: function() {
return g;
}
};
cc.easeBackInOut = function() {
return g;
};
cc.easeBezierAction = function(t, e, i, n) {
return {
easing: function(r) {
return Math.pow(1 - r, 3) * t + 3 * r * Math.pow(1 - r, 2) * e + 3 * Math.pow(r, 2) * (1 - r) * i + Math.pow(r, 3) * n;
},
reverse: function() {
return cc.easeBezierAction(n, i, e, t);
}
};
};
var y = {
easing: function(t) {
return Math.pow(t, 2);
},
reverse: function() {
return y;
}
};
cc.easeQuadraticActionIn = function() {
return y;
};
var v = {
easing: function(t) {
return -t * (t - 2);
},
reverse: function() {
return v;
}
};
cc.easeQuadraticActionOut = function() {
return v;
};
var x = {
easing: function(t) {
return (t *= 2) < 1 ? t * t * .5 : -.5 * (--t * (t - 2) - 1);
},
reverse: function() {
return x;
}
};
cc.easeQuadraticActionInOut = function() {
return x;
};
var A = {
easing: function(t) {
return t * t * t * t;
},
reverse: function() {
return A;
}
};
cc.easeQuarticActionIn = function() {
return A;
};
var b = {
easing: function(t) {
return -((t -= 1) * t * t * t - 1);
},
reverse: function() {
return b;
}
};
cc.easeQuarticActionOut = function() {
return b;
};
var T = {
easing: function(t) {
return (t *= 2) < 1 ? .5 * t * t * t * t : -.5 * ((t -= 2) * t * t * t - 2);
},
reverse: function() {
return T;
}
};
cc.easeQuarticActionInOut = function() {
return T;
};
var C = {
easing: function(t) {
return t * t * t * t * t;
},
reverse: function() {
return C;
}
};
cc.easeQuinticActionIn = function() {
return C;
};
var w = {
easing: function(t) {
return (t -= 1) * t * t * t * t + 1;
},
reverse: function() {
return w;
}
};
cc.easeQuinticActionOut = function() {
return w;
};
var S = {
easing: function(t) {
return (t *= 2) < 1 ? .5 * t * t * t * t * t : .5 * ((t -= 2) * t * t * t * t + 2);
},
reverse: function() {
return S;
}
};
cc.easeQuinticActionInOut = function() {
return S;
};
var E = {
easing: function(t) {
return -1 * (Math.sqrt(1 - t * t) - 1);
},
reverse: function() {
return E;
}
};
cc.easeCircleActionIn = function() {
return E;
};
var D = {
easing: function(t) {
t -= 1;
return Math.sqrt(1 - t * t);
},
reverse: function() {
return D;
}
};
cc.easeCircleActionOut = function() {
return D;
};
var M = {
easing: function(t) {
if ((t *= 2) < 1) return -.5 * (Math.sqrt(1 - t * t) - 1);
t -= 2;
return .5 * (Math.sqrt(1 - t * t) + 1);
},
reverse: function() {
return M;
}
};
cc.easeCircleActionInOut = function() {
return M;
};
var I = {
easing: function(t) {
return t * t * t;
},
reverse: function() {
return I;
}
};
cc.easeCubicActionIn = function() {
return I;
};
var P = {
easing: function(t) {
return (t -= 1) * t * t + 1;
},
reverse: function() {
return P;
}
};
cc.easeCubicActionOut = function() {
return P;
};
var B = {
easing: function(t) {
return (t *= 2) < 1 ? .5 * t * t * t : .5 * ((t -= 2) * t * t + 2);
},
reverse: function() {
return B;
}
};
cc.easeCubicActionInOut = function() {
return B;
};
}), {} ],
5: [ (function(t, e, i) {
cc.ActionInstant = cc.Class({
name: "cc.ActionInstant",
extends: cc.FiniteTimeAction,
isDone: function() {
return !0;
},
step: function(t) {
this.update(1);
},
update: function(t) {},
reverse: function() {
return this.clone();
},
clone: function() {
return new cc.ActionInstant();
}
});
cc.Show = cc.Class({
name: "cc.Show",
extends: cc.ActionInstant,
update: function(t) {
for (var e = this.target.getComponentsInChildren(cc.RenderComponent), i = 0; i < e.length; ++i) {
e[i].enabled = !0;
}
},
reverse: function() {
return new cc.Hide();
},
clone: function() {
return new cc.Show();
}
});
cc.show = function() {
return new cc.Show();
};
cc.Hide = cc.Class({
name: "cc.Hide",
extends: cc.ActionInstant,
update: function(t) {
for (var e = this.target.getComponentsInChildren(cc.RenderComponent), i = 0; i < e.length; ++i) {
e[i].enabled = !1;
}
},
reverse: function() {
return new cc.Show();
},
clone: function() {
return new cc.Hide();
}
});
cc.hide = function() {
return new cc.Hide();
};
cc.ToggleVisibility = cc.Class({
name: "cc.ToggleVisibility",
extends: cc.ActionInstant,
update: function(t) {
for (var e = this.target.getComponentsInChildren(cc.RenderComponent), i = 0; i < e.length; ++i) {
var n = e[i];
n.enabled = !n.enabled;
}
},
reverse: function() {
return new cc.ToggleVisibility();
},
clone: function() {
return new cc.ToggleVisibility();
}
});
cc.toggleVisibility = function() {
return new cc.ToggleVisibility();
};
cc.RemoveSelf = cc.Class({
name: "cc.RemoveSelf",
extends: cc.ActionInstant,
ctor: function(t) {
this._isNeedCleanUp = !0;
void 0 !== t && this.init(t);
},
update: function(t) {
this.target.removeFromParent(this._isNeedCleanUp);
},
init: function(t) {
this._isNeedCleanUp = t;
return !0;
},
reverse: function() {
return new cc.RemoveSelf(this._isNeedCleanUp);
},
clone: function() {
return new cc.RemoveSelf(this._isNeedCleanUp);
}
});
cc.removeSelf = function(t) {
return new cc.RemoveSelf(t);
};
cc.FlipX = cc.Class({
name: "cc.FlipX",
extends: cc.ActionInstant,
ctor: function(t) {
this._flippedX = !1;
void 0 !== t && this.initWithFlipX(t);
},
initWithFlipX: function(t) {
this._flippedX = t;
return !0;
},
update: function(t) {
this.target.scaleX = Math.abs(this.target.scaleX) * (this._flippedX ? -1 : 1);
},
reverse: function() {
return new cc.FlipX(!this._flippedX);
},
clone: function() {
var t = new cc.FlipX();
t.initWithFlipX(this._flippedX);
return t;
}
});
cc.flipX = function(t) {
return new cc.FlipX(t);
};
cc.FlipY = cc.Class({
name: "cc.FlipY",
extends: cc.ActionInstant,
ctor: function(t) {
this._flippedY = !1;
void 0 !== t && this.initWithFlipY(t);
},
initWithFlipY: function(t) {
this._flippedY = t;
return !0;
},
update: function(t) {
this.target.scaleY = Math.abs(this.target.scaleY) * (this._flippedY ? -1 : 1);
},
reverse: function() {
return new cc.FlipY(!this._flippedY);
},
clone: function() {
var t = new cc.FlipY();
t.initWithFlipY(this._flippedY);
return t;
}
});
cc.flipY = function(t) {
return new cc.FlipY(t);
};
cc.Place = cc.Class({
name: "cc.Place",
extends: cc.ActionInstant,
ctor: function(t, e) {
this._x = 0;
this._y = 0;
if (void 0 !== t) {
if (void 0 !== t.x) {
e = t.y;
t = t.x;
}
this.initWithPosition(t, e);
}
},
initWithPosition: function(t, e) {
this._x = t;
this._y = e;
return !0;
},
update: function(t) {
this.target.setPosition(this._x, this._y);
},
clone: function() {
var t = new cc.Place();
t.initWithPosition(this._x, this._y);
return t;
}
});
cc.place = function(t, e) {
return new cc.Place(t, e);
};
cc.CallFunc = cc.Class({
name: "cc.CallFunc",
extends: cc.ActionInstant,
ctor: function(t, e, i) {
this._selectorTarget = null;
this._function = null;
this._data = null;
this.initWithFunction(t, e, i);
},
initWithFunction: function(t, e, i) {
t && (this._function = t);
e && (this._selectorTarget = e);
void 0 !== i && (this._data = i);
return !0;
},
execute: function() {
this._function && this._function.call(this._selectorTarget, this.target, this._data);
},
update: function(t) {
this.execute();
},
getTargetCallback: function() {
return this._selectorTarget;
},
setTargetCallback: function(t) {
if (t !== this._selectorTarget) {
this._selectorTarget && (this._selectorTarget = null);
this._selectorTarget = t;
}
},
clone: function() {
var t = new cc.CallFunc();
t.initWithFunction(this._function, this._selectorTarget, this._data);
return t;
}
});
cc.callFunc = function(t, e, i) {
return new cc.CallFunc(t, e, i);
};
}), {} ],
6: [ (function(t, e, i) {
cc.ActionInterval = cc.Class({
name: "cc.ActionInterval",
extends: cc.FiniteTimeAction,
ctor: function(t) {
this.MAX_VALUE = 2;
this._elapsed = 0;
this._firstTick = !1;
this._easeList = null;
this._speed = 1;
this._timesForRepeat = 1;
this._repeatForever = !1;
this._repeatMethod = !1;
this._speedMethod = !1;
void 0 !== t && cc.ActionInterval.prototype.initWithDuration.call(this, t);
},
getElapsed: function() {
return this._elapsed;
},
initWithDuration: function(t) {
this._duration = 0 === t ? cc.macro.FLT_EPSILON : t;
this._elapsed = 0;
this._firstTick = !0;
return !0;
},
isDone: function() {
return this._elapsed >= this._duration;
},
_cloneDecoration: function(t) {
t._repeatForever = this._repeatForever;
t._speed = this._speed;
t._timesForRepeat = this._timesForRepeat;
t._easeList = this._easeList;
t._speedMethod = this._speedMethod;
t._repeatMethod = this._repeatMethod;
},
_reverseEaseList: function(t) {
if (this._easeList) {
t._easeList = [];
for (var e = 0; e < this._easeList.length; e++) t._easeList.push(this._easeList[e].reverse());
}
},
clone: function() {
var t = new cc.ActionInterval(this._duration);
this._cloneDecoration(t);
return t;
},
easing: function(t) {
this._easeList ? this._easeList.length = 0 : this._easeList = [];
for (var e = 0; e < arguments.length; e++) this._easeList.push(arguments[e]);
return this;
},
_computeEaseTime: function(t) {
var e = this._easeList;
if (!e || 0 === e.length) return t;
for (var i = 0, n = e.length; i < n; i++) t = e[i].easing(t);
return t;
},
step: function(t) {
if (this._firstTick) {
this._firstTick = !1;
this._elapsed = 0;
} else this._elapsed += t;
var e = this._elapsed / (this._duration > 1.192092896e-7 ? this._duration : 1.192092896e-7);
e = 1 > e ? e : 1;
this.update(e > 0 ? e : 0);
if (this._repeatMethod && this._timesForRepeat > 1 && this.isDone()) {
this._repeatForever || this._timesForRepeat--;
this.startWithTarget(this.target);
this.step(this._elapsed - this._duration);
}
},
startWithTarget: function(t) {
cc.Action.prototype.startWithTarget.call(this, t);
this._elapsed = 0;
this._firstTick = !0;
},
reverse: function() {
cc.logID(1010);
return null;
},
setAmplitudeRate: function(t) {
cc.logID(1011);
},
getAmplitudeRate: function() {
cc.logID(1012);
return 0;
},
speed: function(t) {
if (t <= 0) {
cc.logID(1013);
return this;
}
this._speedMethod = !0;
this._speed *= t;
return this;
},
getSpeed: function() {
return this._speed;
},
setSpeed: function(t) {
this._speed = t;
return this;
},
repeat: function(t) {
t = Math.round(t);
if (isNaN(t) || t < 1) {
cc.logID(1014);
return this;
}
this._repeatMethod = !0;
this._timesForRepeat *= t;
return this;
},
repeatForever: function() {
this._repeatMethod = !0;
this._timesForRepeat = this.MAX_VALUE;
this._repeatForever = !0;
return this;
}
});
cc.actionInterval = function(t) {
return new cc.ActionInterval(t);
};
cc.Sequence = cc.Class({
name: "cc.Sequence",
extends: cc.ActionInterval,
ctor: function(t) {
this._actions = [];
this._split = null;
this._last = 0;
this._reversed = !1;
var e = t instanceof Array ? t : arguments;
if (1 !== e.length) {
var i = e.length - 1;
i >= 0 && null == e[i] && cc.logID(1015);
if (i >= 0) {
for (var n, r = e[0], s = 1; s < i; s++) if (e[s]) {
n = r;
r = cc.Sequence._actionOneTwo(n, e[s]);
}
this.initWithTwoActions(r, e[i]);
}
} else cc.errorID(1019);
},
initWithTwoActions: function(t, e) {
if (!t || !e) {
cc.errorID(1025);
return !1;
}
var i = t._duration, n = e._duration, r = (i *= t._repeatMethod ? t._timesForRepeat : 1) + (n *= e._repeatMethod ? e._timesForRepeat : 1);
this.initWithDuration(r);
this._actions[0] = t;
this._actions[1] = e;
return !0;
},
clone: function() {
var t = new cc.Sequence();
this._cloneDecoration(t);
t.initWithTwoActions(this._actions[0].clone(), this._actions[1].clone());
return t;
},
startWithTarget: function(t) {
cc.ActionInterval.prototype.startWithTarget.call(this, t);
this._split = this._actions[0]._duration / this._duration;
this._split *= this._actions[0]._repeatMethod ? this._actions[0]._timesForRepeat : 1;
this._last = -1;
},
stop: function() {
-1 !== this._last && this._actions[this._last].stop();
cc.Action.prototype.stop.call(this);
},
update: function(t) {
var e, i, n = 0, r = this._split, s = this._actions, a = this._last;
if ((t = this._computeEaseTime(t)) < r) {
e = 0 !== r ? t / r : 1;
if (0 === n && 1 === a && this._reversed) {
s[1].update(0);
s[1].stop();
}
} else {
n = 1;
e = 1 === r ? 1 : (t - r) / (1 - r);
if (-1 === a) {
s[0].startWithTarget(this.target);
s[0].update(1);
s[0].stop();
}
if (0 === a) {
s[0].update(1);
s[0].stop();
}
}
i = s[n];
if (a !== n || !i.isDone()) {
a !== n && i.startWithTarget(this.target);
e *= i._timesForRepeat;
i.update(e > 1 ? e % 1 : e);
this._last = n;
}
},
reverse: function() {
var t = cc.Sequence._actionOneTwo(this._actions[1].reverse(), this._actions[0].reverse());
this._cloneDecoration(t);
this._reverseEaseList(t);
t._reversed = !0;
return t;
}
});
cc.sequence = function(t) {
var e = t instanceof Array ? t : arguments;
if (1 === e.length) {
cc.errorID(1019);
return null;
}
var i = e.length - 1;
i >= 0 && null == e[i] && cc.logID(1015);
var n = null;
if (i >= 0) {
n = e[0];
for (var r = 1; r <= i; r++) e[r] && (n = cc.Sequence._actionOneTwo(n, e[r]));
}
return n;
};
cc.Sequence._actionOneTwo = function(t, e) {
var i = new cc.Sequence();
i.initWithTwoActions(t, e);
return i;
};
cc.Repeat = cc.Class({
name: "cc.Repeat",
extends: cc.ActionInterval,
ctor: function(t, e) {
this._times = 0;
this._total = 0;
this._nextDt = 0;
this._actionInstant = !1;
this._innerAction = null;
void 0 !== e && this.initWithAction(t, e);
},
initWithAction: function(t, e) {
var i = t._duration * e;
if (this.initWithDuration(i)) {
this._times = e;
this._innerAction = t;
if (t instanceof cc.ActionInstant) {
this._actionInstant = !0;
this._times -= 1;
}
this._total = 0;
return !0;
}
return !1;
},
clone: function() {
var t = new cc.Repeat();
this._cloneDecoration(t);
t.initWithAction(this._innerAction.clone(), this._times);
return t;
},
startWithTarget: function(t) {
this._total = 0;
this._nextDt = this._innerAction._duration / this._duration;
cc.ActionInterval.prototype.startWithTarget.call(this, t);
this._innerAction.startWithTarget(t);
},
stop: function() {
this._innerAction.stop();
cc.Action.prototype.stop.call(this);
},
update: function(t) {
t = this._computeEaseTime(t);
var e = this._innerAction, i = this._duration, n = this._times, r = this._nextDt;
if (t >= r) {
for (;t > r && this._total < n; ) {
e.update(1);
this._total++;
e.stop();
e.startWithTarget(this.target);
r += e._duration / i;
this._nextDt = r > 1 ? 1 : r;
}
if (t >= 1 && this._total < n) {
e.update(1);
this._total++;
}
this._actionInstant || (this._total === n ? e.stop() : e.update(t - (r - e._duration / i)));
} else e.update(t * n % 1);
},
isDone: function() {
return this._total === this._times;
},
reverse: function() {
var t = new cc.Repeat(this._innerAction.reverse(), this._times);
this._cloneDecoration(t);
this._reverseEaseList(t);
return t;
},
setInnerAction: function(t) {
this._innerAction !== t && (this._innerAction = t);
},
getInnerAction: function() {
return this._innerAction;
}
});
cc.repeat = function(t, e) {
return new cc.Repeat(t, e);
};
cc.RepeatForever = cc.Class({
name: "cc.RepeatForever",
extends: cc.ActionInterval,
ctor: function(t) {
this._innerAction = null;
t && this.initWithAction(t);
},
initWithAction: function(t) {
if (!t) {
cc.errorID(1026);
return !1;
}
this._innerAction = t;
return !0;
},
clone: function() {
var t = new cc.RepeatForever();
this._cloneDecoration(t);
t.initWithAction(this._innerAction.clone());
return t;
},
startWithTarget: function(t) {
cc.ActionInterval.prototype.startWithTarget.call(this, t);
this._innerAction.startWithTarget(t);
},
step: function(t) {
var e = this._innerAction;
e.step(t);
if (e.isDone()) {
e.startWithTarget(this.target);
e.step(e.getElapsed() - e._duration);
}
},
isDone: function() {
return !1;
},
reverse: function() {
var t = new cc.RepeatForever(this._innerAction.reverse());
this._cloneDecoration(t);
this._reverseEaseList(t);
return t;
},
setInnerAction: function(t) {
this._innerAction !== t && (this._innerAction = t);
},
getInnerAction: function() {
return this._innerAction;
}
});
cc.repeatForever = function(t) {
return new cc.RepeatForever(t);
};
cc.Spawn = cc.Class({
name: "cc.Spawn",
extends: cc.ActionInterval,
ctor: function(t) {
this._one = null;
this._two = null;
var e = t instanceof Array ? t : arguments;
if (1 !== e.length) {
var i = e.length - 1;
i >= 0 && null == e[i] && cc.logID(1015);
if (i >= 0) {
for (var n, r = e[0], s = 1; s < i; s++) if (e[s]) {
n = r;
r = cc.Spawn._actionOneTwo(n, e[s]);
}
this.initWithTwoActions(r, e[i]);
}
} else cc.errorID(1020);
},
initWithTwoActions: function(t, e) {
if (!t || !e) {
cc.errorID(1027);
return !1;
}
var i = !1, n = t._duration, r = e._duration;
if (this.initWithDuration(Math.max(n, r))) {
this._one = t;
this._two = e;
n > r ? this._two = cc.Sequence._actionOneTwo(e, cc.delayTime(n - r)) : n < r && (this._one = cc.Sequence._actionOneTwo(t, cc.delayTime(r - n)));
i = !0;
}
return i;
},
clone: function() {
var t = new cc.Spawn();
this._cloneDecoration(t);
t.initWithTwoActions(this._one.clone(), this._two.clone());
return t;
},
startWithTarget: function(t) {
cc.ActionInterval.prototype.startWithTarget.call(this, t);
this._one.startWithTarget(t);
this._two.startWithTarget(t);
},
stop: function() {
this._one.stop();
this._two.stop();
cc.Action.prototype.stop.call(this);
},
update: function(t) {
t = this._computeEaseTime(t);
this._one && this._one.update(t);
this._two && this._two.update(t);
},
reverse: function() {
var t = cc.Spawn._actionOneTwo(this._one.reverse(), this._two.reverse());
this._cloneDecoration(t);
this._reverseEaseList(t);
return t;
}
});
cc.spawn = function(t) {
var e = t instanceof Array ? t : arguments;
if (1 === e.length) {
cc.errorID(1020);
return null;
}
e.length > 0 && null == e[e.length - 1] && cc.logID(1015);
for (var i = e[0], n = 1; n < e.length; n++) null != e[n] && (i = cc.Spawn._actionOneTwo(i, e[n]));
return i;
};
cc.Spawn._actionOneTwo = function(t, e) {
var i = new cc.Spawn();
i.initWithTwoActions(t, e);
return i;
};
cc.RotateTo = cc.Class({
name: "cc.RotateTo",
extends: cc.ActionInterval,
ctor: function(t, e, i) {
this._dstAngleX = 0;
this._startAngleX = 0;
this._diffAngleX = 0;
this._dstAngleY = 0;
this._startAngleY = 0;
this._diffAngleY = 0;
void 0 !== e && this.initWithDuration(t, e, i);
},
initWithDuration: function(t, e, i) {
if (cc.ActionInterval.prototype.initWithDuration.call(this, t)) {
this._dstAngleX = e || 0;
this._dstAngleY = void 0 !== i ? i : this._dstAngleX;
return !0;
}
return !1;
},
clone: function() {
var t = new cc.RotateTo();
this._cloneDecoration(t);
t.initWithDuration(this._duration, this._dstAngleX, this._dstAngleY);
return t;
},
startWithTarget: function(t) {
cc.ActionInterval.prototype.startWithTarget.call(this, t);
var e = t.rotationX % 360, i = this._dstAngleX - e;
i > 180 && (i -= 360);
i < -180 && (i += 360);
this._startAngleX = e;
this._diffAngleX = i;
this._startAngleY = t.rotationY % 360;
var n = this._dstAngleY - this._startAngleY;
n > 180 && (n -= 360);
n < -180 && (n += 360);
this._diffAngleY = n;
},
reverse: function() {
cc.logID(1016);
},
update: function(t) {
t = this._computeEaseTime(t);
if (this.target) {
this.target.rotationX = this._startAngleX + this._diffAngleX * t;
this.target.rotationY = this._startAngleY + this._diffAngleY * t;
}
}
});
cc.rotateTo = function(t, e, i) {
return new cc.RotateTo(t, e, i);
};
cc.RotateBy = cc.Class({
name: "cc.RotateBy",
extends: cc.ActionInterval,
ctor: function(t, e, i) {
this._angleX = 0;
this._startAngleX = 0;
this._angleY = 0;
this._startAngleY = 0;
void 0 !== e && this.initWithDuration(t, e, i);
},
initWithDuration: function(t, e, i) {
if (cc.ActionInterval.prototype.initWithDuration.call(this, t)) {
this._angleX = e || 0;
this._angleY = void 0 !== i ? i : this._angleX;
return !0;
}
return !1;
},
clone: function() {
var t = new cc.RotateBy();
this._cloneDecoration(t);
t.initWithDuration(this._duration, this._angleX, this._angleY);
return t;
},
startWithTarget: function(t) {
cc.ActionInterval.prototype.startWithTarget.call(this, t);
this._startAngleX = t.rotationX;
this._startAngleY = t.rotationY;
},
update: function(t) {
t = this._computeEaseTime(t);
if (this.target) {
this.target.rotationX = this._startAngleX + this._angleX * t;
this.target.rotationY = this._startAngleY + this._angleY * t;
}
},
reverse: function() {
var t = new cc.RotateBy(this._duration, -this._angleX, -this._angleY);
this._cloneDecoration(t);
this._reverseEaseList(t);
return t;
}
});
cc.rotateBy = function(t, e, i) {
return new cc.RotateBy(t, e, i);
};
cc.MoveBy = cc.Class({
name: "cc.MoveBy",
extends: cc.ActionInterval,
ctor: function(t, e, i) {
this._positionDelta = cc.v2(0, 0);
this._startPosition = cc.v2(0, 0);
this._previousPosition = cc.v2(0, 0);
void 0 !== e && cc.MoveBy.prototype.initWithDuration.call(this, t, e, i);
},
initWithDuration: function(t, e, i) {
if (cc.ActionInterval.prototype.initWithDuration.call(this, t)) {
if (void 0 !== e.x) {
i = e.y;
e = e.x;
}
this._positionDelta.x = e;
this._positionDelta.y = i;
return !0;
}
return !1;
},
clone: function() {
var t = new cc.MoveBy();
this._cloneDecoration(t);
t.initWithDuration(this._duration, this._positionDelta);
return t;
},
startWithTarget: function(t) {
cc.ActionInterval.prototype.startWithTarget.call(this, t);
var e = t.x, i = t.y;
this._previousPosition.x = e;
this._previousPosition.y = i;
this._startPosition.x = e;
this._startPosition.y = i;
},
update: function(t) {
t = this._computeEaseTime(t);
if (this.target) {
var e = this._positionDelta.x * t, i = this._positionDelta.y * t, n = this._startPosition;
if (cc.macro.ENABLE_STACKABLE_ACTIONS) {
var r = this.target.x, s = this.target.y, a = this._previousPosition;
n.x = n.x + r - a.x;
n.y = n.y + s - a.y;
e += n.x;
i += n.y;
a.x = e;
a.y = i;
this.target.setPosition(e, i);
} else this.target.setPosition(n.x + e, n.y + i);
}
},
reverse: function() {
var t = new cc.MoveBy(this._duration, cc.v2(-this._positionDelta.x, -this._positionDelta.y));
this._cloneDecoration(t);
this._reverseEaseList(t);
return t;
}
});
cc.moveBy = function(t, e, i) {
return new cc.MoveBy(t, e, i);
};
cc.MoveTo = cc.Class({
name: "cc.MoveTo",
extends: cc.MoveBy,
ctor: function(t, e, i) {
this._endPosition = cc.v2(0, 0);
void 0 !== e && this.initWithDuration(t, e, i);
},
initWithDuration: function(t, e, i) {
if (cc.MoveBy.prototype.initWithDuration.call(this, t, e, i)) {
if (void 0 !== e.x) {
i = e.y;
e = e.x;
}
this._endPosition.x = e;
this._endPosition.y = i;
return !0;
}
return !1;
},
clone: function() {
var t = new cc.MoveTo();
this._cloneDecoration(t);
t.initWithDuration(this._duration, this._endPosition);
return t;
},
startWithTarget: function(t) {
cc.MoveBy.prototype.startWithTarget.call(this, t);
this._positionDelta.x = this._endPosition.x - t.x;
this._positionDelta.y = this._endPosition.y - t.y;
}
});
cc.moveTo = function(t, e, i) {
return new cc.MoveTo(t, e, i);
};
cc.SkewTo = cc.Class({
name: "cc.SkewTo",
extends: cc.ActionInterval,
ctor: function(t, e, i) {
this._skewX = 0;
this._skewY = 0;
this._startSkewX = 0;
this._startSkewY = 0;
this._endSkewX = 0;
this._endSkewY = 0;
this._deltaX = 0;
this._deltaY = 0;
void 0 !== i && cc.SkewTo.prototype.initWithDuration.call(this, t, e, i);
},
initWithDuration: function(t, e, i) {
var n = !1;
if (cc.ActionInterval.prototype.initWithDuration.call(this, t)) {
this._endSkewX = e;
this._endSkewY = i;
n = !0;
}
return n;
},
clone: function() {
var t = new cc.SkewTo();
this._cloneDecoration(t);
t.initWithDuration(this._duration, this._endSkewX, this._endSkewY);
return t;
},
startWithTarget: function(t) {
cc.ActionInterval.prototype.startWithTarget.call(this, t);
this._startSkewX = t.skewX % 180;
this._deltaX = this._endSkewX - this._startSkewX;
this._deltaX > 180 && (this._deltaX -= 360);
this._deltaX < -180 && (this._deltaX += 360);
this._startSkewY = t.skewY % 360;
this._deltaY = this._endSkewY - this._startSkewY;
this._deltaY > 180 && (this._deltaY -= 360);
this._deltaY < -180 && (this._deltaY += 360);
},
update: function(t) {
t = this._computeEaseTime(t);
this.target.skewX = this._startSkewX + this._deltaX * t;
this.target.skewY = this._startSkewY + this._deltaY * t;
}
});
cc.skewTo = function(t, e, i) {
return new cc.SkewTo(t, e, i);
};
cc.SkewBy = cc.Class({
name: "cc.SkewBy",
extends: cc.SkewTo,
ctor: function(t, e, i) {
void 0 !== i && this.initWithDuration(t, e, i);
},
initWithDuration: function(t, e, i) {
var n = !1;
if (cc.SkewTo.prototype.initWithDuration.call(this, t, e, i)) {
this._skewX = e;
this._skewY = i;
n = !0;
}
return n;
},
clone: function() {
var t = new cc.SkewBy();
this._cloneDecoration(t);
t.initWithDuration(this._duration, this._skewX, this._skewY);
return t;
},
startWithTarget: function(t) {
cc.SkewTo.prototype.startWithTarget.call(this, t);
this._deltaX = this._skewX;
this._deltaY = this._skewY;
this._endSkewX = this._startSkewX + this._deltaX;
this._endSkewY = this._startSkewY + this._deltaY;
},
reverse: function() {
var t = new cc.SkewBy(this._duration, -this._skewX, -this._skewY);
this._cloneDecoration(t);
this._reverseEaseList(t);
return t;
}
});
cc.skewBy = function(t, e, i) {
return new cc.SkewBy(t, e, i);
};
cc.JumpBy = cc.Class({
name: "cc.JumpBy",
extends: cc.ActionInterval,
ctor: function(t, e, i, n, r) {
this._startPosition = cc.v2(0, 0);
this._previousPosition = cc.v2(0, 0);
this._delta = cc.v2(0, 0);
this._height = 0;
this._jumps = 0;
void 0 !== n && cc.JumpBy.prototype.initWithDuration.call(this, t, e, i, n, r);
},
initWithDuration: function(t, e, i, n, r) {
if (cc.ActionInterval.prototype.initWithDuration.call(this, t)) {
if (void 0 === r) {
r = n;
n = i;
i = e.y;
e = e.x;
}
this._delta.x = e;
this._delta.y = i;
this._height = n;
this._jumps = r;
return !0;
}
return !1;
},
clone: function() {
var t = new cc.JumpBy();
this._cloneDecoration(t);
t.initWithDuration(this._duration, this._delta, this._height, this._jumps);
return t;
},
startWithTarget: function(t) {
cc.ActionInterval.prototype.startWithTarget.call(this, t);
var e = t.x, i = t.y;
this._previousPosition.x = e;
this._previousPosition.y = i;
this._startPosition.x = e;
this._startPosition.y = i;
},
update: function(t) {
t = this._computeEaseTime(t);
if (this.target) {
var e = t * this._jumps % 1, i = 4 * this._height * e * (1 - e);
i += this._delta.y * t;
var n = this._delta.x * t, r = this._startPosition;
if (cc.macro.ENABLE_STACKABLE_ACTIONS) {
var s = this.target.x, a = this.target.y, o = this._previousPosition;
r.x = r.x + s - o.x;
r.y = r.y + a - o.y;
n += r.x;
i += r.y;
o.x = n;
o.y = i;
this.target.setPosition(n, i);
} else this.target.setPosition(r.x + n, r.y + i);
}
},
reverse: function() {
var t = new cc.JumpBy(this._duration, cc.v2(-this._delta.x, -this._delta.y), this._height, this._jumps);
this._cloneDecoration(t);
this._reverseEaseList(t);
return t;
}
});
cc.jumpBy = function(t, e, i, n, r) {
return new cc.JumpBy(t, e, i, n, r);
};
cc.JumpTo = cc.Class({
name: "cc.JumpTo",
extends: cc.JumpBy,
ctor: function(t, e, i, n, r) {
this._endPosition = cc.v2(0, 0);
void 0 !== n && this.initWithDuration(t, e, i, n, r);
},
initWithDuration: function(t, e, i, n, r) {
if (cc.JumpBy.prototype.initWithDuration.call(this, t, e, i, n, r)) {
if (void 0 === r) {
i = e.y;
e = e.x;
}
this._endPosition.x = e;
this._endPosition.y = i;
return !0;
}
return !1;
},
startWithTarget: function(t) {
cc.JumpBy.prototype.startWithTarget.call(this, t);
this._delta.x = this._endPosition.x - this._startPosition.x;
this._delta.y = this._endPosition.y - this._startPosition.y;
},
clone: function() {
var t = new cc.JumpTo();
this._cloneDecoration(t);
t.initWithDuration(this._duration, this._endPosition, this._height, this._jumps);
return t;
}
});
cc.jumpTo = function(t, e, i, n, r) {
return new cc.JumpTo(t, e, i, n, r);
};
function n(t, e, i, n, r) {
return Math.pow(1 - r, 3) * t + 3 * r * Math.pow(1 - r, 2) * e + 3 * Math.pow(r, 2) * (1 - r) * i + Math.pow(r, 3) * n;
}
cc.BezierBy = cc.Class({
name: "cc.BezierBy",
extends: cc.ActionInterval,
ctor: function(t, e) {
this._config = [];
this._startPosition = cc.v2(0, 0);
this._previousPosition = cc.v2(0, 0);
e && cc.BezierBy.prototype.initWithDuration.call(this, t, e);
},
initWithDuration: function(t, e) {
if (cc.ActionInterval.prototype.initWithDuration.call(this, t)) {
this._config = e;
return !0;
}
return !1;
},
clone: function() {
var t = new cc.BezierBy();
this._cloneDecoration(t);
for (var e = [], i = 0; i < this._config.length; i++) {
var n = this._config[i];
e.push(cc.v2(n.x, n.y));
}
t.initWithDuration(this._duration, e);
return t;
},
startWithTarget: function(t) {
cc.ActionInterval.prototype.startWithTarget.call(this, t);
var e = t.x, i = t.y;
this._previousPosition.x = e;
this._previousPosition.y = i;
this._startPosition.x = e;
this._startPosition.y = i;
},
update: function(t) {
t = this._computeEaseTime(t);
if (this.target) {
var e = this._config, i = e[0].x, r = e[1].x, s = e[2].x, a = e[0].y, o = e[1].y, h = e[2].y, l = n(0, i, r, s, t), c = n(0, a, o, h, t), u = this._startPosition;
if (cc.macro.ENABLE_STACKABLE_ACTIONS) {
var _ = this.target.x, m = this.target.y, f = this._previousPosition;
u.x = u.x + _ - f.x;
u.y = u.y + m - f.y;
l += u.x;
c += u.y;
f.x = l;
f.y = c;
this.target.setPosition(l, c);
} else this.target.setPosition(u.x + l, u.y + c);
}
},
reverse: function() {
var t = this._config, e = t[0].x, i = t[0].y, n = t[1].x, r = t[1].y, s = t[2].x, a = t[2].y, o = [ cc.v2(n - s, r - a), cc.v2(e - s, i - a), cc.v2(-s, -a) ], h = new cc.BezierBy(this._duration, o);
this._cloneDecoration(h);
this._reverseEaseList(h);
return h;
}
});
cc.bezierBy = function(t, e) {
return new cc.BezierBy(t, e);
};
cc.BezierTo = cc.Class({
name: "cc.BezierTo",
extends: cc.BezierBy,
ctor: function(t, e) {
this._toConfig = [];
e && this.initWithDuration(t, e);
},
initWithDuration: function(t, e) {
if (cc.ActionInterval.prototype.initWithDuration.call(this, t)) {
this._toConfig = e;
return !0;
}
return !1;
},
clone: function() {
var t = new cc.BezierTo();
this._cloneDecoration(t);
t.initWithDuration(this._duration, this._toConfig);
return t;
},
startWithTarget: function(t) {
cc.BezierBy.prototype.startWithTarget.call(this, t);
var e = this._startPosition, i = this._toConfig, n = this._config;
n[0] = i[0].sub(e);
n[1] = i[1].sub(e);
n[2] = i[2].sub(e);
}
});
cc.bezierTo = function(t, e) {
return new cc.BezierTo(t, e);
};
cc.ScaleTo = cc.Class({
name: "cc.ScaleTo",
extends: cc.ActionInterval,
ctor: function(t, e, i) {
this._scaleX = 1;
this._scaleY = 1;
this._startScaleX = 1;
this._startScaleY = 1;
this._endScaleX = 0;
this._endScaleY = 0;
this._deltaX = 0;
this._deltaY = 0;
void 0 !== e && cc.ScaleTo.prototype.initWithDuration.call(this, t, e, i);
},
initWithDuration: function(t, e, i) {
if (cc.ActionInterval.prototype.initWithDuration.call(this, t)) {
this._endScaleX = e;
this._endScaleY = null != i ? i : e;
return !0;
}
return !1;
},
clone: function() {
var t = new cc.ScaleTo();
this._cloneDecoration(t);
t.initWithDuration(this._duration, this._endScaleX, this._endScaleY);
return t;
},
startWithTarget: function(t) {
cc.ActionInterval.prototype.startWithTarget.call(this, t);
this._startScaleX = t.scaleX;
this._startScaleY = t.scaleY;
this._deltaX = this._endScaleX - this._startScaleX;
this._deltaY = this._endScaleY - this._startScaleY;
},
update: function(t) {
t = this._computeEaseTime(t);
if (this.target) {
this.target.scaleX = this._startScaleX + this._deltaX * t;
this.target.scaleY = this._startScaleY + this._deltaY * t;
}
}
});
cc.scaleTo = function(t, e, i) {
return new cc.ScaleTo(t, e, i);
};
cc.ScaleBy = cc.Class({
name: "cc.ScaleBy",
extends: cc.ScaleTo,
startWithTarget: function(t) {
cc.ScaleTo.prototype.startWithTarget.call(this, t);
this._deltaX = this._startScaleX * this._endScaleX - this._startScaleX;
this._deltaY = this._startScaleY * this._endScaleY - this._startScaleY;
},
reverse: function() {
var t = new cc.ScaleBy(this._duration, 1 / this._endScaleX, 1 / this._endScaleY);
this._cloneDecoration(t);
this._reverseEaseList(t);
return t;
},
clone: function() {
var t = new cc.ScaleBy();
this._cloneDecoration(t);
t.initWithDuration(this._duration, this._endScaleX, this._endScaleY);
return t;
}
});
cc.scaleBy = function(t, e, i) {
return new cc.ScaleBy(t, e, i);
};
cc.Blink = cc.Class({
name: "cc.Blink",
extends: cc.ActionInterval,
ctor: function(t, e) {
this._times = 0;
this._originalState = !1;
void 0 !== e && this.initWithDuration(t, e);
},
initWithDuration: function(t, e) {
if (cc.ActionInterval.prototype.initWithDuration.call(this, t)) {
this._times = e;
return !0;
}
return !1;
},
clone: function() {
var t = new cc.Blink();
this._cloneDecoration(t);
t.initWithDuration(this._duration, this._times);
return t;
},
update: function(t) {
t = this._computeEaseTime(t);
if (this.target && !this.isDone()) {
var e = 1 / this._times, i = t % e;
this.target.opacity = i > e / 2 ? 255 : 0;
}
},
startWithTarget: function(t) {
cc.ActionInterval.prototype.startWithTarget.call(this, t);
this._originalState = t.opacity;
},
stop: function() {
this.target.opacity = this._originalState;
cc.ActionInterval.prototype.stop.call(this);
},
reverse: function() {
var t = new cc.Blink(this._duration, this._times);
this._cloneDecoration(t);
this._reverseEaseList(t);
return t;
}
});
cc.blink = function(t, e) {
return new cc.Blink(t, e);
};
cc.FadeTo = cc.Class({
name: "cc.FadeTo",
extends: cc.ActionInterval,
ctor: function(t, e) {
this._toOpacity = 0;
this._fromOpacity = 0;
void 0 !== e && cc.FadeTo.prototype.initWithDuration.call(this, t, e);
},
initWithDuration: function(t, e) {
if (cc.ActionInterval.prototype.initWithDuration.call(this, t)) {
this._toOpacity = e;
return !0;
}
return !1;
},
clone: function() {
var t = new cc.FadeTo();
this._cloneDecoration(t);
t.initWithDuration(this._duration, this._toOpacity);
return t;
},
update: function(t) {
t = this._computeEaseTime(t);
var e = void 0 !== this._fromOpacity ? this._fromOpacity : 255;
this.target.opacity = e + (this._toOpacity - e) * t;
},
startWithTarget: function(t) {
cc.ActionInterval.prototype.startWithTarget.call(this, t);
this._fromOpacity = t.opacity;
}
});
cc.fadeTo = function(t, e) {
return new cc.FadeTo(t, e);
};
cc.FadeIn = cc.Class({
name: "cc.FadeIn",
extends: cc.FadeTo,
ctor: function(t) {
null == t && (t = 0);
this._reverseAction = null;
this.initWithDuration(t, 255);
},
reverse: function() {
var t = new cc.FadeOut();
t.initWithDuration(this._duration, 0);
this._cloneDecoration(t);
this._reverseEaseList(t);
return t;
},
clone: function() {
var t = new cc.FadeIn();
this._cloneDecoration(t);
t.initWithDuration(this._duration, this._toOpacity);
return t;
},
startWithTarget: function(t) {
this._reverseAction && (this._toOpacity = this._reverseAction._fromOpacity);
cc.FadeTo.prototype.startWithTarget.call(this, t);
}
});
cc.fadeIn = function(t) {
return new cc.FadeIn(t);
};
cc.FadeOut = cc.Class({
name: "cc.FadeOut",
extends: cc.FadeTo,
ctor: function(t) {
null == t && (t = 0);
this._reverseAction = null;
this.initWithDuration(t, 0);
},
reverse: function() {
var t = new cc.FadeIn();
t._reverseAction = this;
t.initWithDuration(this._duration, 255);
this._cloneDecoration(t);
this._reverseEaseList(t);
return t;
},
clone: function() {
var t = new cc.FadeOut();
this._cloneDecoration(t);
t.initWithDuration(this._duration, this._toOpacity);
return t;
}
});
cc.fadeOut = function(t) {
return new cc.FadeOut(t);
};
cc.TintTo = cc.Class({
name: "cc.TintTo",
extends: cc.ActionInterval,
ctor: function(t, e, i, n) {
this._to = cc.color(0, 0, 0);
this._from = cc.color(0, 0, 0);
if (e instanceof cc.Color) {
n = e.b;
i = e.g;
e = e.r;
}
void 0 !== n && this.initWithDuration(t, e, i, n);
},
initWithDuration: function(t, e, i, n) {
if (cc.ActionInterval.prototype.initWithDuration.call(this, t)) {
this._to = cc.color(e, i, n);
return !0;
}
return !1;
},
clone: function() {
var t = new cc.TintTo();
this._cloneDecoration(t);
var e = this._to;
t.initWithDuration(this._duration, e.r, e.g, e.b);
return t;
},
startWithTarget: function(t) {
cc.ActionInterval.prototype.startWithTarget.call(this, t);
this._from = this.target.color;
},
update: function(t) {
t = this._computeEaseTime(t);
var e = this._from, i = this._to;
e && (this.target.color = cc.color(e.r + (i.r - e.r) * t, e.g + (i.g - e.g) * t, e.b + (i.b - e.b) * t));
}
});
cc.tintTo = function(t, e, i, n) {
return new cc.TintTo(t, e, i, n);
};
cc.TintBy = cc.Class({
name: "cc.TintBy",
extends: cc.ActionInterval,
ctor: function(t, e, i, n) {
this._deltaR = 0;
this._deltaG = 0;
this._deltaB = 0;
this._fromR = 0;
this._fromG = 0;
this._fromB = 0;
void 0 !== n && this.initWithDuration(t, e, i, n);
},
initWithDuration: function(t, e, i, n) {
if (cc.ActionInterval.prototype.initWithDuration.call(this, t)) {
this._deltaR = e;
this._deltaG = i;
this._deltaB = n;
return !0;
}
return !1;
},
clone: function() {
var t = new cc.TintBy();
this._cloneDecoration(t);
t.initWithDuration(this._duration, this._deltaR, this._deltaG, this._deltaB);
return t;
},
startWithTarget: function(t) {
cc.ActionInterval.prototype.startWithTarget.call(this, t);
var e = t.color;
this._fromR = e.r;
this._fromG = e.g;
this._fromB = e.b;
},
update: function(t) {
t = this._computeEaseTime(t);
this.target.color = cc.color(this._fromR + this._deltaR * t, this._fromG + this._deltaG * t, this._fromB + this._deltaB * t);
},
reverse: function() {
var t = new cc.TintBy(this._duration, -this._deltaR, -this._deltaG, -this._deltaB);
this._cloneDecoration(t);
this._reverseEaseList(t);
return t;
}
});
cc.tintBy = function(t, e, i, n) {
return new cc.TintBy(t, e, i, n);
};
cc.DelayTime = cc.Class({
name: "cc.DelayTime",
extends: cc.ActionInterval,
update: function(t) {},
reverse: function() {
var t = new cc.DelayTime(this._duration);
this._cloneDecoration(t);
this._reverseEaseList(t);
return t;
},
clone: function() {
var t = new cc.DelayTime();
this._cloneDecoration(t);
t.initWithDuration(this._duration);
return t;
}
});
cc.delayTime = function(t) {
return new cc.DelayTime(t);
};
cc.ReverseTime = cc.Class({
name: "cc.ReverseTime",
extends: cc.ActionInterval,
ctor: function(t) {
this._other = null;
t && this.initWithAction(t);
},
initWithAction: function(t) {
if (!t) {
cc.errorID(1028);
return !1;
}
if (t === this._other) {
cc.errorID(1029);
return !1;
}
if (cc.ActionInterval.prototype.initWithDuration.call(this, t._duration)) {
this._other = t;
return !0;
}
return !1;
},
clone: function() {
var t = new cc.ReverseTime();
this._cloneDecoration(t);
t.initWithAction(this._other.clone());
return t;
},
startWithTarget: function(t) {
cc.ActionInterval.prototype.startWithTarget.call(this, t);
this._other.startWithTarget(t);
},
update: function(t) {
t = this._computeEaseTime(t);
this._other && this._other.update(1 - t);
},
reverse: function() {
return this._other.clone();
},
stop: function() {
this._other.stop();
cc.Action.prototype.stop.call(this);
}
});
cc.reverseTime = function(t) {
return new cc.ReverseTime(t);
};
cc.TargetedAction = cc.Class({
name: "cc.TargetedAction",
extends: cc.ActionInterval,
ctor: function(t, e) {
this._action = null;
this._forcedTarget = null;
e && this.initWithTarget(t, e);
},
initWithTarget: function(t, e) {
if (this.initWithDuration(e._duration)) {
this._forcedTarget = t;
this._action = e;
return !0;
}
return !1;
},
clone: function() {
var t = new cc.TargetedAction();
this._cloneDecoration(t);
t.initWithTarget(this._forcedTarget, this._action.clone());
return t;
},
startWithTarget: function(t) {
cc.ActionInterval.prototype.startWithTarget.call(this, t);
this._action.startWithTarget(this._forcedTarget);
},
stop: function() {
this._action.stop();
},
update: function(t) {
t = this._computeEaseTime(t);
this._action.update(t);
},
getForcedTarget: function() {
return this._forcedTarget;
},
setForcedTarget: function(t) {
this._forcedTarget !== t && (this._forcedTarget = t);
}
});
cc.targetedAction = function(t, e) {
return new cc.TargetedAction(t, e);
};
}), {} ],
7: [ (function(t, e, i) {
t("../core/platform/CCClass");
var n = t("../core/platform/js");
cc.ActionManager = function() {
this._hashTargets = n.createMap(!0);
this._arrayTargets = [];
this._currentTarget = null;
cc.director._scheduler && cc.director._scheduler.enableForTarget(this);
};
cc.ActionManager.prototype = {
constructor: cc.ActionManager,
_elementPool: [],
_searchElementByTarget: function(t, e) {
for (var i = 0; i < t.length; i++) if (e === t[i].target) return t[i];
return null;
},
_getElement: function(t, e) {
var i = this._elementPool.pop();
i || (i = new function() {
this.actions = [];
this.target = null;
this.actionIndex = 0;
this.currentAction = null;
this.paused = !1;
this.lock = !1;
}());
i.target = t;
i.paused = !!e;
return i;
},
_putElement: function(t) {
t.actions.length = 0;
t.actionIndex = 0;
t.currentAction = null;
t.paused = !1;
t.target = null;
t.lock = !1;
this._elementPool.push(t);
},
addAction: function(t, e, i) {
if (t && e) {
var n = this._hashTargets[e._id];
if (n) n.actions || (n.actions = []); else {
n = this._getElement(e, i);
this._hashTargets[e._id] = n;
this._arrayTargets.push(n);
}
n.actions.push(t);
t.startWithTarget(e);
} else cc.errorID(1e3);
},
removeAllActions: function() {
for (var t = this._arrayTargets, e = 0; e < t.length; e++) {
var i = t[e];
i && this.removeAllActionsFromTarget(i.target, !0);
}
},
removeAllActionsFromTarget: function(t, e) {
if (null != t) {
var i = this._hashTargets[t._id];
if (i) {
i.actions.length = 0;
this._deleteHashElement(i);
}
}
},
removeAction: function(t) {
if (null != t) {
var e = t.getOriginalTarget(), i = this._hashTargets[e._id];
if (i) {
for (var n = 0; n < i.actions.length; n++) if (i.actions[n] === t) {
i.actions.splice(n, 1);
i.actionIndex >= n && i.actionIndex--;
break;
}
} else cc.logID(1001);
}
},
removeActionByTag: function(t, e) {
t === cc.Action.TAG_INVALID && cc.logID(1002);
cc.assertID(e, 1003);
var i = this._hashTargets[e._id];
if (i) for (var n = i.actions.length, r = 0; r < n; ++r) {
var s = i.actions[r];
if (s && s.getTag() === t && s.getOriginalTarget() === e) {
this._removeActionAtIndex(r, i);
break;
}
}
},
getActionByTag: function(t, e) {
t === cc.Action.TAG_INVALID && cc.logID(1004);
var i = this._hashTargets[e._id];
if (i) {
if (null != i.actions) for (var n = 0; n < i.actions.length; ++n) {
var r = i.actions[n];
if (r && r.getTag() === t) return r;
}
cc.logID(1005, t);
}
return null;
},
getNumberOfRunningActionsInTarget: function(t) {
var e = this._hashTargets[t._id];
return e && e.actions ? e.actions.length : 0;
},
pauseTarget: function(t) {
var e = this._hashTargets[t._id];
e && (e.paused = !0);
},
resumeTarget: function(t) {
var e = this._hashTargets[t._id];
e && (e.paused = !1);
},
pauseAllRunningActions: function() {
for (var t = [], e = this._arrayTargets, i = 0; i < e.length; i++) {
var n = e[i];
if (n && !n.paused) {
n.paused = !0;
t.push(n.target);
}
}
return t;
},
resumeTargets: function(t) {
if (t) for (var e = 0; e < t.length; e++) t[e] && this.resumeTarget(t[e]);
},
pauseTargets: function(t) {
if (t) for (var e = 0; e < t.length; e++) t[e] && this.pauseTarget(t[e]);
},
purgeSharedManager: function() {
cc.director.getScheduler().unscheduleUpdate(this);
},
_removeActionAtIndex: function(t, e) {
e.actions[t];
e.actions.splice(t, 1);
e.actionIndex >= t && e.actionIndex--;
0 === e.actions.length && this._deleteHashElement(e);
},
_deleteHashElement: function(t) {
var e = !1;
if (t && !t.lock && this._hashTargets[t.target._id]) {
delete this._hashTargets[t.target._id];
for (var i = this._arrayTargets, n = 0, r = i.length; n < r; n++) if (i[n] === t) {
i.splice(n, 1);
break;
}
this._putElement(t);
e = !0;
}
return e;
},
update: function(t) {
for (var e, i = this._arrayTargets, n = 0; n < i.length; n++) {
this._currentTarget = i[n];
if (!(e = this._currentTarget).paused && e.actions) {
e.lock = !0;
for (e.actionIndex = 0; e.actionIndex < e.actions.length; e.actionIndex++) {
e.currentAction = e.actions[e.actionIndex];
if (e.currentAction) {
e.currentAction.step(t * (e.currentAction._speedMethod ? e.currentAction._speed : 1));
if (e.currentAction && e.currentAction.isDone()) {
e.currentAction.stop();
var r = e.currentAction;
e.currentAction = null;
this.removeAction(r);
}
e.currentAction = null;
}
}
e.lock = !1;
}
0 === e.actions.length && this._deleteHashElement(e) && n--;
}
}
};
0;
}), {
"../core/platform/CCClass": 153,
"../core/platform/js": 173
} ],
8: [ (function(t, e, i) {
t("./CCActionManager");
t("./CCAction");
t("./CCActionInterval");
t("./CCActionInstant");
t("./CCActionEase");
t("./CCActionCatmullRom");
}), {
"./CCAction": 2,
"./CCActionCatmullRom": 3,
"./CCActionEase": 4,
"./CCActionInstant": 5,
"./CCActionInterval": 6,
"./CCActionManager": 7
} ],
9: [ (function(i, n, r) {
var s = cc.js, a = i("./playable"), o = i("./animation-curves").DynamicAnimCurve, h = i("./animation-curves").quickFindIndex, l = i("./motion-path-helper").sampleMotionPaths, c = i("./animation-curves").EventAnimCurve, u = i("./animation-curves").EventInfo, _ = i("./types").WrapModeMask, m = i("../core/utils/binary-search").binarySearchEpsilon;
function f(t, e) {
a.call(this);
this.target = t;
this.animation = e;
this._anims = new s.array.MutableForwardIterator([]);
}
s.extend(f, a);
var d = f.prototype;
d.playState = function(i, n) {
if (i.clip) {
i.curveLoaded || p(this.target, i);
i.animator = this;
i.play();
"number" === ("object" === (e = typeof n) ? t(n) : e) && i.setTime(n);
this.play();
}
};
d.stopStatesExcept = function(t) {
var e = this._anims, i = e.array;
for (e.i = 0; e.i < i.length; ++e.i) {
var n = i[e.i];
n !== t && this.stopState(n);
}
};
d.addAnimation = function(t) {
-1 === this._anims.array.indexOf(t) && this._anims.push(t);
t._setListeners(this.animation);
};
d.removeAnimation = function(t) {
var e = this._anims.array.indexOf(t);
if (e >= 0) {
this._anims.fastRemoveAt(e);
0 === this._anims.array.length && this.stop();
} else cc.errorID(3908);
t.animator = null;
};
d.sample = function() {
var t = this._anims, e = t.array;
for (t.i = 0; t.i < e.length; ++t.i) {
e[t.i].sample();
}
};
d.stopState = function(t) {
t && t.stop();
};
d.pauseState = function(t) {
t && t.pause();
};
d.resumeState = function(t) {
t && t.resume();
this.isPaused && this.resume();
};
d.setStateTime = function(t, e) {
if (void 0 !== e) {
if (t) {
t.setTime(e);
t.sample();
}
} else {
e = t;
for (var i = this._anims.array, n = 0; n < i.length; ++n) {
var r = i[n];
r.setTime(e);
r.sample();
}
}
};
d.onStop = function() {
var t = this._anims, e = t.array;
for (t.i = 0; t.i < e.length; ++t.i) {
e[t.i].stop();
}
};
d.onPause = function() {
for (var t = this._anims.array, e = 0; e < t.length; ++e) {
var i = t[e];
i.pause();
i.animator = null;
}
};
d.onResume = function() {
for (var t = this._anims.array, e = 0; e < t.length; ++e) {
var i = t[e];
i.animator = this;
i.resume();
}
};
d._reloadClip = function(t) {
p(this.target, t);
};
0;
function p(i, n) {
var r = n.clip, s = n.curves;
s.length = 0;
n.duration = r.duration;
n.speed = r.speed;
n.wrapMode = r.wrapMode;
n.frameRate = r.sample;
(n.wrapMode & _.Loop) === _.Loop ? n.repeatCount = Infinity : n.repeatCount = 1;
function a(t) {
if (!Array.isArray(t)) return !1;
for (var e = 0, i = t.length; e < i; e++) {
var n = t[e];
if (!Array.isArray(n) || 6 !== n.length) return !1;
}
return !0;
}
function f(i, s, c) {
var u, _ = i instanceof cc.Node && "position" === s, f = [], d = new o();
d.target = i;
var p = s.indexOf(".");
-1 !== p ? i[u = s.slice(0, p)] : u = s;
d.prop = u;
d.subProps = (function(t) {
var e = t.split(".");
e.shift();
return e.length > 0 ? e : null;
})(s);
for (var g = 0, y = c.length; g < y; g++) {
var v = c[g], x = v.frame / n.duration;
d.ratios.push(x);
if (_) {
var A = v.motionPath;
if (A && !a(A)) {
cc.errorID(3904, i.name, s, g);
A = null;
}
f.push(A);
}
var b = v.value;
d.values.push(b);
var T = v.curve;
if (T) {
if ("string" === ("object" === (e = typeof T) ? t(T) : e)) {
d.types.push(T);
continue;
}
if (Array.isArray(T)) {
T[0] === T[1] && T[2] === T[3] ? d.types.push(o.Linear) : d.types.push(o.Bezier(T));
continue;
}
}
d.types.push(o.Linear);
}
_ && l(f, d, r.duration, r.sample);
for (var C, w, S = d.ratios, E = !0, D = 1, M = S.length; D < M; D++) {
C = S[D] - S[D - 1];
if (1 === D) w = C; else if (Math.abs(C - w) > 1e-6) {
E = !1;
break;
}
}
d._findFrameIndex = E ? h : m;
return d;
}
function d(t, e) {
var i = e.props, n = e.comps;
if (i) for (var r in i) {
var a = f(t, r, i[r]);
s.push(a);
}
if (n) for (var o in n) {
var h = t.getComponent(o);
if (h) {
var l = n[o];
for (var r in l) {
a = f(h, r, l[r]);
s.push(a);
}
}
}
}
var p = r.curveData, g = p.paths;
d(i, p);
for (var y in g) {
var v = cc.find(y, i);
if (v) {
d(v, g[y]);
}
}
var x = r.events;
if (x) for (var A, b = 0, T = x.length; b < T; b++) {
if (!A) {
(A = new c()).target = i;
s.push(A);
}
var C, w = x[b], S = w.frame / n.duration, E = m(A.ratios, S);
if (E >= 0) C = A.events[E]; else {
C = new u();
A.ratios.push(S);
A.events.push(C);
}
C.add(w.func, w.params);
}
}
0;
n.exports = f;
}), {
"../core/utils/binary-search": 225,
"./animation-curves": 11,
"./motion-path-helper": 17,
"./playable": 18,
"./types": 19
} ],
10: [ (function(t, e, i) {
var n = cc.Class({
name: "cc.AnimationClip",
extends: cc.Asset,
properties: {
_duration: {
default: 0,
type: "Float"
},
duration: {
get: function() {
return this._duration;
}
},
sample: {
default: 60
},
speed: {
default: 1
},
wrapMode: {
default: cc.WrapMode.Normal
},
curveData: {
default: {},
visible: !1
},
events: {
default: [],
visible: !1
}
},
statics: {
createWithSpriteFrames: function(t, e) {
if (!Array.isArray(t)) {
cc.errorID(3905);
return null;
}
var i = new n();
i.sample = e || i.sample;
i._duration = t.length / i.sample;
for (var r = [], s = 1 / i.sample, a = 0, o = t.length; a < o; a++) r[a] = {
frame: a * s,
value: t[a]
};
i.curveData = {
comps: {
"cc.Sprite": {
spriteFrame: r
}
}
};
return i;
}
}
});
cc.AnimationClip = e.exports = n;
}), {} ],
11: [ (function(i, n, r) {
var s = i("./bezier").bezierByTime, a = i("../core/utils/binary-search").binarySearchEpsilon, o = i("./types").WrapModeMask, h = i("./types").WrappedInfo;
function l(i, n) {
if ("string" === ("object" === (e = typeof n) ? t(n) : e)) {
var r = cc.Easing[n];
r ? i = r(i) : cc.errorID(3906, n);
} else Array.isArray(n) && (i = s(n, i));
return i;
}
var c = cc.Class({
name: "cc.AnimCurve",
sample: function(t, e, i) {},
onTimeChangedManually: void 0
});
var u = cc.Class({
name: "cc.DynamicAnimCurve",
extends: c,
properties: {
target: null,
prop: "",
values: [],
ratios: [],
types: [],
subProps: null
},
_findFrameIndex: a,
sample: function(i, n, r) {
var s = this.values, a = this.ratios, o = a.length;
if (0 !== o) {
var h, c = this._findFrameIndex(a, n);
if (c < 0) if ((c = ~c) <= 0) h = s[0]; else if (c >= o) h = s[o - 1]; else {
var u = s[c - 1], _ = "number" === ("object" === (e = typeof u) ? t(u) : e), m = u && u.lerp;
if (_ || m) {
var f = a[c - 1], d = a[c], p = this.types[c - 1], g = (n - f) / (d - f);
p && (g = l(g, p));
var y = s[c];
_ ? h = u + (y - u) * g : m && (h = u.lerp(y, g));
} else h = u;
} else h = s[c];
var v = this.subProps;
if (v) {
for (var x = this.target[this.prop], A = x, b = 0; b < v.length - 1; b++) {
var T = v[b];
if (!A) return;
A = A[T];
}
var C = v[v.length - 1];
if (!A) return;
A[C] = h;
h = x;
}
this.target[this.prop] = h;
}
}
});
u.Linear = null;
u.Bezier = function(t) {
return t;
};
var _ = function() {
this.events = [];
};
_.prototype.add = function(t, e) {
this.events.push({
func: t || "",
params: e || []
});
};
var m = cc.Class({
name: "cc.EventAnimCurve",
extends: c,
properties: {
target: null,
ratios: [],
events: [],
_wrappedInfo: {
default: function() {
return new h();
}
},
_lastWrappedInfo: null,
_ignoreIndex: NaN
},
_wrapIterations: function(t) {
t - (0 | t) == 0 && (t -= 1);
return 0 | t;
},
sample: function(t, e, i) {
var n = this.ratios.length, r = i.getWrappedInfo(i.time, this._wrappedInfo), s = r.direction, l = a(this.ratios, r.ratio);
if (l < 0) {
l = ~l - 1;
s < 0 && (l += 1);
}
this._ignoreIndex !== l && (this._ignoreIndex = NaN);
r.frameIndex = l;
if (this._lastWrappedInfo) {
var c = i.wrapMode, u = this._wrapIterations(r.iterations), _ = this._lastWrappedInfo, m = this._wrapIterations(_.iterations), f = _.frameIndex, d = _.direction, p = -1 !== m && u !== m;
if (f === l && p && 1 === n) this._fireEvent(0); else if (f !== l || p) {
s = d;
do {
if (f !== l) {
if (-1 === s && 0 === f && l > 0) {
(c & o.PingPong) === o.PingPong ? s *= -1 : f = n;
m++;
} else if (1 === s && f === n - 1 && l < n - 1) {
(c & o.PingPong) === o.PingPong ? s *= -1 : f = -1;
m++;
}
if (f === l) break;
if (m > u) break;
}
f += s;
cc.director.getAnimationManager().pushDelayEvent(this, "_fireEvent", [ f ]);
} while (f !== l && f > -1 && f < n);
}
this._lastWrappedInfo.set(r);
} else {
this._fireEvent(l);
this._lastWrappedInfo = new h(r);
}
},
_fireEvent: function(t) {
if (!(t < 0 || t >= this.events.length || this._ignoreIndex === t)) {
var e = this.events[t].events;
if (this.target.isValid) for (var i = this.target._components, n = 0; n < e.length; n++) for (var r = e[n], s = r.func, a = 0; a < i.length; a++) {
var o = i[a], h = o[s];
h && h.apply(o, r.params);
}
}
},
onTimeChangedManually: function(t, e) {
this._lastWrappedInfo = null;
this._ignoreIndex = NaN;
var i = e.getWrappedInfo(t, this._wrappedInfo), n = i.direction, r = a(this.ratios, i.ratio);
if (r < 0) {
r = ~r - 1;
n < 0 && (r += 1);
this._ignoreIndex = r;
}
}
});
0;
n.exports = {
AnimCurve: c,
DynamicAnimCurve: u,
EventAnimCurve: m,
EventInfo: _,
computeRatioByType: l,
quickFindIndex: function(t, e) {
var i = t.length - 1;
if (0 === i) return 0;
var n = t[0];
if (e < n) return 0;
var r = t[i];
if (e > r) return i;
var s = (e = (e - n) / (r - n)) / (1 / i), a = 0 | s;
return s - a < 1e-6 ? a : ~(a + 1);
}
};
}), {
"../core/utils/binary-search": 225,
"./bezier": 14,
"./types": 19
} ],
12: [ (function(t, e, i) {
var n = cc.js, r = cc.Class({
ctor: function() {
this._anims = new n.array.MutableForwardIterator([]);
this._delayEvents = [];
cc.director._scheduler && cc.director._scheduler.enableForTarget(this);
},
update: function(t) {
var e = this._anims, i = e.array;
for (e.i = 0; e.i < i.length; ++e.i) {
var n = i[e.i];
n._isPlaying && !n._isPaused && n.update(t);
}
for (var r = this._delayEvents, s = 0, a = r.length; s < a; s++) {
var o = r[s];
o.target[o.func].apply(o.target, o.args);
}
r.length = 0;
},
destruct: function() {},
addAnimation: function(t) {
-1 === this._anims.array.indexOf(t) && this._anims.push(t);
},
removeAnimation: function(t) {
var e = this._anims.array.indexOf(t);
e >= 0 ? this._anims.fastRemoveAt(e) : cc.errorID(3907);
},
pushDelayEvent: function(t, e, i) {
this._delayEvents.push({
target: t,
func: e,
args: i
});
}
});
cc.AnimationManager = e.exports = r;
}), {} ],
13: [ (function(i, n, r) {
var s = cc.js, a = i("./playable"), o = i("./types"), h = o.WrappedInfo, l = o.WrapMode, c = o.WrapModeMask;
function u(t, e) {
a.call(this);
this._currentFramePlayed = !1;
this._delay = 0;
this._delayTime = 0;
this._wrappedInfo = new h();
this._lastWrappedInfo = null;
this._process = m;
this._clip = t;
this._name = e || t && t.name;
this.animator = null;
this.curves = [];
this.delay = 0;
this.repeatCount = 1;
this.duration = 1;
this.speed = 1;
this.wrapMode = l.Normal;
this.time = 0;
this._target = null;
this._lastframeEventOn = !1;
this.emit = function() {
for (var t = new Array(arguments.length), e = 0, i = t.length; e < i; e++) t[e] = arguments[e];
cc.director.getAnimationManager().pushDelayEvent(this, "_emit", t);
};
}
s.extend(u, a);
var _ = u.prototype;
_._emit = function(t, e) {
this._target && this._target.isValid && this._target.emit(t, t, e);
};
_.on = function(t, e, i) {
if (this._target && this._target.isValid) {
"lastframe" === t && (this._lastframeEventOn = !0);
return this._target.on(t, e, i);
}
return null;
};
_.once = function(i, n, r) {
var s = this;
if (!this._target || !this._target.isValid) return null;
var a = (function() {
"lastframe" === i && (s._lastframeEventOn = !0);
var t = s;
return {
v: s._target.once(i, (function(e) {
n.call(r, e);
t._lastframeEventOn = !1;
}))
};
})();
return "object" === ("object" === (e = typeof a) ? t(a) : e) ? a.v : void 0;
};
_.off = function(t, e, i) {
if (this._target && this._target.isValid) {
"lastframe" === t && (this._target.hasEventListener(t) || (this._lastframeEventOn = !1));
this._target.off(t, e, i);
}
};
_._setListeners = function(t) {
this._target = t;
};
_.onPlay = function() {
this.setTime(0);
this._delayTime = this._delay;
cc.director.getAnimationManager().addAnimation(this);
this.animator && this.animator.addAnimation(this);
this.emit("play", this);
};
_.onStop = function() {
this.isPaused || cc.director.getAnimationManager().removeAnimation(this);
this.animator && this.animator.removeAnimation(this);
this.emit("stop", this);
};
_.onResume = function() {
cc.director.getAnimationManager().addAnimation(this);
this.emit("resume", this);
};
_.onPause = function() {
cc.director.getAnimationManager().removeAnimation(this);
this.emit("pause", this);
};
_.setTime = function(t) {
this._currentFramePlayed = !1;
this.time = t || 0;
for (var e = this.curves, i = 0, n = e.length; i < n; i++) {
var r = e[i];
r.onTimeChangedManually && r.onTimeChangedManually(t, this);
}
};
function m() {
var t = this.sample();
if (this._lastframeEventOn) {
var e;
e = this._lastWrappedInfo ? this._lastWrappedInfo : this._lastWrappedInfo = new h(t);
this.repeatCount > 1 && (0 | t.iterations) > (0 | e.iterations) && this.emit("lastframe", this);
e.set(t);
}
if (t.stopped) {
this.stop();
this.emit("finished", this);
}
}
function f() {
var t = this.time, e = this.duration;
t > e ? 0 === (t %= e) && (t = e) : t < 0 && 0 !== (t %= e) && (t += e);
for (var i = t / e, n = this.curves, r = 0, s = n.length; r < s; r++) {
n[r].sample(t, i, this);
}
if (this._lastframeEventOn) {
void 0 === this._lastIterations && (this._lastIterations = i);
(this.time > 0 && this._lastIterations > i || this.time < 0 && this._lastIterations < i) && this.emit("lastframe", this);
this._lastIterations = i;
}
}
_.update = function(t) {
if (this._delayTime > 0) {
this._delayTime -= t;
if (this._delayTime > 0) return;
}
this._currentFramePlayed ? this.time += t * this.speed : this._currentFramePlayed = !0;
this._process();
};
_._needRevers = function(t) {
var e = this.wrapMode, i = !1;
if ((e & c.PingPong) === c.PingPong) {
t - (0 | t) == 0 && t > 0 && (t -= 1);
1 & t && (i = !i);
}
(e & c.Reverse) === c.Reverse && (i = !i);
return i;
};
_.getWrappedInfo = function(t, e) {
e = e || new h();
var i = !1, n = this.duration, r = this.repeatCount, s = t > 0 ? t / n : -t / n;
if (s >= r) {
s = r;
i = !0;
var a = r - (0 | r);
0 === a && (a = 1);
t = a * n * (t > 0 ? 1 : -1);
}
if (t > n) {
var o = t % n;
t = 0 === o ? n : o;
} else t < 0 && 0 !== (t %= n) && (t += n);
var l = !1, u = this._wrapMode & c.ShouldWrap;
u && (l = this._needRevers(s));
var _ = l ? -1 : 1;
this.speed < 0 && (_ *= -1);
u && l && (t = n - t);
e.ratio = t / n;
e.time = t;
e.direction = _;
e.stopped = i;
e.iterations = s;
return e;
};
_.sample = function() {
for (var t = this.getWrappedInfo(this.time, this._wrappedInfo), e = this.curves, i = 0, n = e.length; i < n; i++) {
e[i].sample(t.time, t.ratio, this);
}
return t;
};
s.get(_, "clip", (function() {
return this._clip;
}));
s.get(_, "name", (function() {
return this._name;
}));
s.obsolete(_, "AnimationState.length", "duration");
s.getset(_, "curveLoaded", (function() {
return this.curves.length > 0;
}), (function() {
this.curves.length = 0;
}));
s.getset(_, "wrapMode", (function() {
return this._wrapMode;
}), (function(t) {
this._wrapMode = t;
0;
this.time = 0;
t & c.Loop ? this.repeatCount = Infinity : this.repeatCount = 1;
}));
s.getset(_, "repeatCount", (function() {
return this._repeatCount;
}), (function(t) {
this._repeatCount = t;
var e = this._wrapMode & c.ShouldWrap, i = (this.wrapMode & c.Reverse) === c.Reverse;
this._process = Infinity !== t || e || i ? m : f;
}));
s.getset(_, "delay", (function() {
return this._delay;
}), (function(t) {
this._delayTime = this._delay = t;
}));
cc.AnimationState = n.exports = u;
}), {
"./playable": 18,
"./types": 19
} ],
14: [ (function(t, e, i) {
function n(t, e, i, n, r) {
var s = 1 - r;
return t * s * s * s + 3 * e * s * s * r + 3 * i * s * r * r + n * r * r * r;
}
var r = Math.cos, s = Math.acos, a = Math.max, o = 2 * Math.PI, h = Math.sqrt;
function l(t) {
return t < 0 ? -Math.pow(-t, 1 / 3) : Math.pow(t, 1 / 3);
}
function c(t, e) {
var i = (function(t, e) {
var i, n, c, u, _ = e - 0, m = e - t[0], f = 3 * _, d = 3 * m, p = 3 * (e - t[2]), g = 1 / (-_ + d - p + (e - 1)), y = (f - 6 * m + p) * g, v = y * (1 / 3), x = (-f + d) * g, A = 1 / 3 * (3 * x - y * y), b = A * (1 / 3), T = (2 * y * y * y - 9 * y * x + _ * g * 27) / 27, C = T / 2, w = C * C + b * b * b;
if (w < 0) {
var S = 1 / 3 * -A, E = h(S * S * S), D = -T / (2 * E), M = s(D < -1 ? -1 : D > 1 ? 1 : D), I = 2 * l(E);
n = I * r(M * (1 / 3)) - v;
c = I * r((M + o) * (1 / 3)) - v;
u = I * r((M + 2 * o) * (1 / 3)) - v;
return 0 <= n && n <= 1 ? 0 <= c && c <= 1 ? 0 <= u && u <= 1 ? a(n, c, u) : a(n, c) : 0 <= u && u <= 1 ? a(n, u) : n : 0 <= c && c <= 1 ? 0 <= u && u <= 1 ? a(c, u) : c : u;
}
if (0 === w) {
c = -(i = C < 0 ? l(-C) : -l(C)) - v;
return 0 <= (n = 2 * i - v) && n <= 1 ? 0 <= c && c <= 1 ? a(n, c) : n : c;
}
var P = h(w);
return n = (i = l(-C + P)) - l(C + P) - v;
})(t, e), n = 1 - i;
return 0 * n * n * n + 3 * t[1] * i * n * n + 3 * t[3] * i * i * n + 1 * i * i * i;
}
0;
e.exports = {
bezier: n,
bezierByTime: c
};
}), {} ],
15: [ (function(t, e, i) {
var n = {
constant: function() {
return 0;
},
linear: function(t) {
return t;
},
quadIn: function(t) {
return t * t;
},
quadOut: function(t) {
return t * (2 - t);
},
quadInOut: function(t) {
return (t *= 2) < 1 ? .5 * t * t : -.5 * (--t * (t - 2) - 1);
},
cubicIn: function(t) {
return t * t * t;
},
cubicOut: function(t) {
return --t * t * t + 1;
},
cubicInOut: function(t) {
return (t *= 2) < 1 ? .5 * t * t * t : .5 * ((t -= 2) * t * t + 2);
},
quartIn: function(t) {
return t * t * t * t;
},
quartOut: function(t) {
return 1 - --t * t * t * t;
},
quartInOut: function(t) {
return (t *= 2) < 1 ? .5 * t * t * t * t : -.5 * ((t -= 2) * t * t * t - 2);
},
quintIn: function(t) {
return t * t * t * t * t;
},
quintOut: function(t) {
return --t * t * t * t * t + 1;
},
quintInOut: function(t) {
return (t *= 2) < 1 ? .5 * t * t * t * t * t : .5 * ((t -= 2) * t * t * t * t + 2);
},
sineIn: function(t) {
return 1 - Math.cos(t * Math.PI / 2);
},
sineOut: function(t) {
return Math.sin(t * Math.PI / 2);
},
sineInOut: function(t) {
return .5 * (1 - Math.cos(Math.PI * t));
},
expoIn: function(t) {
return 0 === t ? 0 : Math.pow(1024, t - 1);
},
expoOut: function(t) {
return 1 === t ? 1 : 1 - Math.pow(2, -10 * t);
},
expoInOut: function(t) {
return 0 === t ? 0 : 1 === t ? 1 : (t *= 2) < 1 ? .5 * Math.pow(1024, t - 1) : .5 * (2 - Math.pow(2, -10 * (t - 1)));
},
circIn: function(t) {
return 1 - Math.sqrt(1 - t * t);
},
circOut: function(t) {
return Math.sqrt(1 - --t * t);
},
circInOut: function(t) {
return (t *= 2) < 1 ? -.5 * (Math.sqrt(1 - t * t) - 1) : .5 * (Math.sqrt(1 - (t -= 2) * t) + 1);
},
elasticIn: function(t) {
var e, i = .1;
if (0 === t) return 0;
if (1 === t) return 1;
if (!i || i < 1) {
i = 1;
e = .1;
} else e = .4 * Math.asin(1 / i) / (2 * Math.PI);
return -i * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - e) * (2 * Math.PI) / .4);
},
elasticOut: function(t) {
var e, i = .1;
if (0 === t) return 0;
if (1 === t) return 1;
if (!i || i < 1) {
i = 1;
e = .1;
} else e = .4 * Math.asin(1 / i) / (2 * Math.PI);
return i * Math.pow(2, -10 * t) * Math.sin((t - e) * (2 * Math.PI) / .4) + 1;
},
elasticInOut: function(t) {
var e, i = .1;
if (0 === t) return 0;
if (1 === t) return 1;
if (!i || i < 1) {
i = 1;
e = .1;
} else e = .4 * Math.asin(1 / i) / (2 * Math.PI);
return (t *= 2) < 1 ? i * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - e) * (2 * Math.PI) / .4) * -.5 : i * Math.pow(2, -10 * (t -= 1)) * Math.sin((t - e) * (2 * Math.PI) / .4) * .5 + 1;
},
backIn: function(t) {
return t * t * (2.70158 * t - 1.70158);
},
backOut: function(t) {
return --t * t * (2.70158 * t + 1.70158) + 1;
},
backInOut: function(t) {
var e = 2.5949095;
return (t *= 2) < 1 ? t * t * ((e + 1) * t - e) * .5 : .5 * ((t -= 2) * t * ((e + 1) * t + e) + 2);
},
bounceOut: function(t) {
return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;
},
smooth: function(t) {
return t <= 0 ? 0 : t >= 1 ? 1 : t * t * (3 - 2 * t);
},
fade: function(t) {
return t <= 0 ? 0 : t >= 1 ? 1 : t * t * t * (t * (6 * t - 15) + 10);
}
};
function r(t, e) {
return function(i) {
return i < .5 ? e(2 * i) / 2 : t(2 * i - 1) / 2 + .5;
};
}
n.quadOutIn = r(n.quadIn, n.quadOut);
n.cubicOutIn = r(n.cubicIn, n.cubicOut);
n.quartOutIn = r(n.quartIn, n.quartOut);
n.quintOutIn = r(n.quintIn, n.quintOut);
n.sineOutIn = r(n.sineIn, n.sineOut);
n.expoOutIn = r(n.expoIn, n.expoOut);
n.circOutIn = r(n.circIn, n.circOut);
n.backOutIn = r(n.backIn, n.backOut);
n.backOutIn = r(n.backIn, n.backOut);
n.bounceIn = function(t) {
return 1 - n.bounceOut(1 - t);
};
n.bounceInOut = function(t) {
return t < .5 ? .5 * n.bounceIn(2 * t) : .5 * n.bounceOut(2 * t - 1) + .5;
};
n.bounceOutIn = r(n.bounceIn, n.bounceOut);
cc.Easing = e.exports = n;
}), {} ],
16: [ (function(t, e, i) {
t("./bezier");
t("./easing");
t("./types");
t("./motion-path-helper");
t("./animation-curves");
t("./animation-clip");
t("./animation-manager");
t("./animation-state");
t("./animation-animator");
}), {
"./animation-animator": 9,
"./animation-clip": 10,
"./animation-curves": 11,
"./animation-manager": 12,
"./animation-state": 13,
"./bezier": 14,
"./easing": 15,
"./motion-path-helper": 17,
"./types": 19
} ],
17: [ (function(t, e, i) {
var n = t("./animation-curves").DynamicAnimCurve, r = t("./animation-curves").computeRatioByType, s = t("./bezier").bezier, a = t("../core/utils/binary-search").binarySearchEpsilon, o = cc.v2;
function h(t) {
this.points = t || [];
this.beziers = [];
this.ratios = [];
this.progresses = [];
this.length = 0;
this.computeBeziers();
}
h.prototype.computeBeziers = function() {
this.beziers.length = 0;
this.ratios.length = 0;
this.progresses.length = 0;
this.length = 0;
for (var t, e = 1; e < this.points.length; e++) {
var i = this.points[e - 1], n = this.points[e];
(t = new l()).start = i.pos;
t.startCtrlPoint = i.out;
t.end = n.pos;
t.endCtrlPoint = n.in;
this.beziers.push(t);
this.length += t.getLength();
}
var r = 0;
for (e = 0; e < this.beziers.length; e++) {
t = this.beziers[e];
this.ratios[e] = t.getLength() / this.length;
this.progresses[e] = r += this.ratios[e];
}
return this.beziers;
};
function l() {
this.start = o();
this.end = o();
this.startCtrlPoint = o();
this.endCtrlPoint = o();
}
l.prototype.getPointAt = function(t) {
var e = this.getUtoTmapping(t);
return this.getPoint(e);
};
l.prototype.getPoint = function(t) {
var e = s(this.start.x, this.startCtrlPoint.x, this.endCtrlPoint.x, this.end.x, t), i = s(this.start.y, this.startCtrlPoint.y, this.endCtrlPoint.y, this.end.y, t);
return new o(e, i);
};
l.prototype.getLength = function() {
var t = this.getLengths();
return t[t.length - 1];
};
l.prototype.getLengths = function(t) {
t || (t = this.__arcLengthDivisions ? this.__arcLengthDivisions : 200);
if (this.cacheArcLengths && this.cacheArcLengths.length === t + 1) return this.cacheArcLengths;
var e, i, n = [], r = this.getPoint(0), s = o(), a = 0;
n.push(0);
for (i = 1; i <= t; i++) {
e = this.getPoint(i / t);
s.x = r.x - e.x;
s.y = r.y - e.y;
a += s.mag();
n.push(a);
r = e;
}
this.cacheArcLengths = n;
return n;
};
l.prototype.getUtoTmapping = function(t, e) {
var i, n = this.getLengths(), r = 0, s = n.length;
i = e || t * n[s - 1];
for (var a, o = 0, h = s - 1; o <= h; ) if ((a = n[r = Math.floor(o + (h - o) / 2)] - i) < 0) o = r + 1; else {
if (!(a > 0)) {
h = r;
break;
}
h = r - 1;
}
if (n[r = h] === i) {
return r / (s - 1);
}
var l = n[r];
return (r + (i - l) / (n[r + 1] - l)) / (s - 1);
};
function c(t, e, i, s) {
function l(t) {
return t instanceof cc.Vec2 ? {
in: t,
pos: t,
out: t
} : Array.isArray(t) && 6 === t.length ? {
in: o(t[2], t[3]),
pos: o(t[0], t[1]),
out: o(t[4], t[5])
} : {
in: cc.Vec2.ZERO,
pos: cc.Vec2.ZERO,
out: cc.Vec2.ZERO
};
}
var c = e.values;
if (0 !== t.length && 0 !== c.length) if (1 !== (c = c.map((function(t) {
return o(t[0], t[1]);
}))).length) {
for (var u = e.types, _ = e.ratios, m = e.values = [], f = e.types = [], d = e.ratios = [], p = 0, g = n.Linear, y = 0, v = t.length; y < v - 1; y++) {
var x, A = t[y], b = _[y], T = _[y + 1] - b, C = c[y], w = c[y + 1], S = u[y], E = [], D = p / T, M = 1 / (T * i * s);
if (A && A.length > 0) {
var I = [];
I.push(l(C));
for (var P = 0, B = A.length; P < B; P++) {
var R = l(A[P]);
I.push(R);
}
I.push(l(w));
var L = new h(I);
L.computeBeziers();
for (var O = L.progresses; 1 - D > 1e-6; ) {
var F, N, k, z;
if ((x = r(x = D, S)) < 0) {
z = (0 - x) * (N = L.beziers[0]).getLength();
k = N.start.sub(N.endCtrlPoint).normalize();
F = N.start.add(k.mul(z));
} else if (x > 1) {
z = (x - 1) * (N = L.beziers[L.beziers.length - 1]).getLength();
k = N.end.sub(N.startCtrlPoint).normalize();
F = N.end.add(k.mul(z));
} else {
var G = a(O, x);
G < 0 && (G = ~G);
x -= G > 0 ? O[G - 1] : 0;
x /= L.ratios[G];
F = L.beziers[G].getPointAt(x);
}
E.push(F);
D += M;
}
} else for (;1 - D > 1e-6; ) {
x = r(x = D, S);
E.push(C.lerp(w, x));
D += M;
}
g = "constant" === S ? S : n.Linear;
for (P = 0, B = E.length; P < B; P++) {
var U = b + p + M * P * T;
V(E[P], g, U);
}
p = Math.abs(D - 1) > 1e-6 ? (D - 1) * T : 0;
}
_[_.length - 1] !== d[d.length - 1] && V(c[c.length - 1], g, _[_.length - 1]);
} else e.values = c;
function V(t, e, i) {
m.push(t);
f.push(e);
d.push(i);
}
}
0;
e.exports = {
sampleMotionPaths: c,
Curve: h,
Bezier: l
};
}), {
"../core/utils/binary-search": 225,
"./animation-curves": 11,
"./bezier": 14
} ],
18: [ (function(t, e, i) {
var n = cc.js, r = t("../core/CCDebug");
function s() {
this._isPlaying = !1;
this._isPaused = !1;
this._stepOnce = !1;
}
var a = s.prototype;
n.get(a, "isPlaying", (function() {
return this._isPlaying;
}), !0);
n.get(a, "isPaused", (function() {
return this._isPaused;
}), !0);
var o = function() {};
a.onPlay = o;
a.onPause = o;
a.onResume = o;
a.onStop = o;
a.onError = o;
a.play = function() {
if (this._isPlaying) if (this._isPaused) {
this._isPaused = !1;
this.onResume();
} else this.onError(r.getError(3912)); else {
this._isPlaying = !0;
this.onPlay();
}
};
a.stop = function() {
if (this._isPlaying) {
this._isPlaying = !1;
this.onStop();
this._isPaused = !1;
}
};
a.pause = function() {
if (this._isPlaying && !this._isPaused) {
this._isPaused = !0;
this.onPause();
}
};
a.resume = function() {
if (this._isPlaying && this._isPaused) {
this._isPaused = !1;
this.onResume();
}
};
a.step = function() {
this.pause();
this._stepOnce = !0;
this._isPlaying || this.play();
};
e.exports = s;
}), {
"../core/CCDebug": 25
} ],
19: [ (function(t, e, i) {
cc.js;
var n = {
Loop: 2,
ShouldWrap: 4,
PingPong: 22,
Reverse: 36
}, r = cc.Enum({
Default: 0,
Normal: 1,
Reverse: n.Reverse,
Loop: n.Loop,
LoopReverse: n.Loop | n.Reverse,
PingPong: n.PingPong,
PingPongReverse: n.PingPong | n.Reverse
});
cc.WrapMode = r;
function s(t) {
if (t) this.set(t); else {
this.ratio = 0;
this.time = 0;
this.direction = 1;
this.stopped = !0;
this.iterations = 0;
this.frameIndex = void 0;
}
}
s.prototype.set = function(t) {
this.ratio = t.ratio;
this.time = t.time;
this.direction = t.direction;
this.stopped = t.stopped;
this.iterations = t.iterations;
this.frameIndex = t.frameIndex;
};
e.exports = {
WrapModeMask: n,
WrapMode: r,
WrappedInfo: s
};
}), {} ],
20: [ (function(i, n, r) {
var s = i("./CCAudio"), a = i("../core/assets/CCAudioClip"), o = cc.js, h = 0, l = o.createMap(!0), c = {}, u = [], _ = function(t) {
var e = h++, i = c[t];
i || (i = c[t] = []);
if (f._maxAudioInstance <= i.length) {
var n = i.shift();
m(n).stop();
}
var r = u.pop() || new s(), a = function() {
if (m(this.id)) {
delete l[this.id];
var t = i.indexOf(this.id);
cc.js.array.fastRemoveAt(i, t);
}
(function(t) {
if (u.length < 32) {
t.off("ended");
t.off("stop");
t.src = null;
u.push(t);
} else t.destroy();
})(this);
};
r.on("ended", a, r);
r.on("stop", a, r);
r.id = e;
l[e] = r;
i.push(e);
return r;
}, m = function(t) {
return l[t];
}, f = {
AudioState: s.State,
_maxWebAudioSize: 2097152,
_maxAudioInstance: 24,
_id2audio: l,
play: function(i, n, r) {
var s, o = i;
if ("string" === ("object" === (e = typeof i) ? t(i) : e)) {
cc.warnID(8401, "cc.audioEngine", "cc.AudioClip", "AudioClip", "cc.AudioClip", "audio");
s = _(o = i);
a._loadByUrl(o, (function(t, e) {
e && (s.src = e);
}));
} else {
if (!i) return;
o = i.nativeUrl;
(s = _(o)).src = i;
}
s.setLoop(n || !1);
"number" !== ("object" === (e = typeof r) ? t(r) : e) && (r = 1);
s.setVolume(r);
s.play();
return s.id;
},
setLoop: function(t, e) {
var i = m(t);
i && i.setLoop && i.setLoop(e);
},
isLoop: function(t) {
var e = m(t);
return !(!e || !e.isLoop) && e.isLoop();
},
setVolume: function(t, e) {
var i = m(t);
i && i.setVolume(e);
},
getVolume: function(t) {
var e = m(t);
return e ? e.getVolume() : 1;
},
setCurrentTime: function(t, e) {
var i = m(t);
if (i) {
i.setCurrentTime(e);
return !0;
}
return !1;
},
getCurrentTime: function(t) {
var e = m(t);
return e ? e.getCurrentTime() : 0;
},
getDuration: function(t) {
var e = m(t);
return e ? e.getDuration() : 0;
},
getState: function(t) {
var e = m(t);
return e ? e.getState() : this.AudioState.ERROR;
},
setFinishCallback: function(t, e) {
var i = m(t);
if (i) {
i.off("ended", i._finishCallback);
i._finishCallback = e;
i.on("ended", i._finishCallback);
}
},
pause: function(t) {
var e = m(t);
if (e) {
e.pause();
return !0;
}
return !1;
},
_pauseIDCache: [],
pauseAll: function() {
for (var t in l) {
var e = l[t];
if (e.getState() === s.State.PLAYING) {
this._pauseIDCache.push(t);
e.pause();
}
}
},
resume: function(t) {
var e = m(t);
e && e.resume();
},
resumeAll: function() {
for (var t = 0; t < this._pauseIDCache.length; ++t) {
var e = this._pauseIDCache[t], i = m(e);
i && i.resume();
}
this._pauseIDCache.length = 0;
},
stop: function(t) {
var e = m(t);
if (e) {
e.stop();
return !0;
}
return !1;
},
stopAll: function() {
for (var t in l) {
var e = l[t];
e && e.stop();
}
},
setMaxAudioInstance: function(t) {
this._maxAudioInstance = t;
},
getMaxAudioInstance: function() {
return this._maxAudioInstance;
},
uncache: function(i) {
var n = i;
if ("string" === ("object" === (e = typeof i) ? t(i) : e)) {
cc.warnID(8401, "cc.audioEngine", "cc.AudioClip", "AudioClip", "cc.AudioClip", "audio");
n = i;
} else {
if (!i) return;
n = i.nativeUrl;
}
var r = c[n];
if (r) for (;r.length > 0; ) {
var s = r.pop(), a = l[s];
if (a) {
a.stop();
delete l[s];
}
}
},
uncacheAll: function() {
this.stopAll();
var t = void 0;
for (var e in l) (t = l[e]) && t.destroy();
for (;t = u.pop(); ) t.destroy();
l = o.createMap(!0);
c = {};
},
getProfile: function(t) {},
preload: function(t, e) {
0;
cc.loader.load(t, e && function(t) {
t || e();
});
},
setMaxWebAudioSize: function(t) {
this._maxWebAudioSize = 1024 * t;
},
_breakCache: null,
_break: function() {
this._breakCache = [];
for (var t in l) {
var e = l[t];
if (e.getState() === s.State.PLAYING) {
this._breakCache.push(t);
e.pause();
}
}
},
_restore: function() {
if (this._breakCache) {
for (;this._breakCache.length > 0; ) {
var t = this._breakCache.pop(), e = m(t);
e && e.resume && e.resume();
}
this._breakCache = null;
}
},
_music: {
id: -1,
loop: !1,
volume: 1
},
_effect: {
volume: 1,
pauseCache: []
},
playMusic: function(t, e) {
var i = this._music;
this.stop(i.id);
i.id = this.play(t, e, i.volume);
i.loop = e;
return i.id;
},
stopMusic: function() {
this.stop(this._music.id);
},
pauseMusic: function() {
this.pause(this._music.id);
return this._music.id;
},
resumeMusic: function() {
this.resume(this._music.id);
return this._music.id;
},
getMusicVolume: function() {
return this._music.volume;
},
setMusicVolume: function(t) {
var e = this._music;
e.volume = t;
this.setVolume(e.id, e.volume);
return e.volume;
},
isMusicPlaying: function() {
return this.getState(this._music.id) === this.AudioState.PLAYING;
},
playEffect: function(t, e) {
return this.play(t, e || !1, this._effect.volume);
},
setEffectsVolume: function(t) {
var e = this._music.id;
this._effect.volume = t;
for (var i in l) i !== e && f.setVolume(i, t);
},
getEffectsVolume: function() {
return this._effect.volume;
},
pauseEffect: function(t) {
return this.pause(t);
},
pauseAllEffects: function() {
var t = this._music.id, e = this._effect;
e.pauseCache.length = 0;
for (var i in l) if (i !== t) {
var n = l[i];
if (n.getState() === this.AudioState.PLAYING) {
e.pauseCache.push(i);
n.pause();
}
}
},
resumeEffect: function(t) {
this.resume(t);
},
resumeAllEffects: function() {
for (var t = this._effect.pauseCache, e = 0; e < t.length; ++e) {
var i = t[e], n = l[i];
n && n.resume();
}
},
stopEffect: function(t) {
return this.stop(t);
},
stopAllEffects: function() {
var t = this._music.id;
for (var e in l) if (e !== t) {
var i = l[e];
i.getState() === f.AudioState.PLAYING && i.stop();
}
}
};
n.exports = cc.audioEngine = f;
}), {
"../core/assets/CCAudioClip": 33,
"./CCAudio": 296
} ],
21: [ (function(t, e, i) {
var n = {
name: "Jacob__Codec"
};
n.Base64 = t("./base64");
n.GZip = t("./gzip");
n.unzip = function() {
return n.GZip.gunzip.apply(n.GZip, arguments);
};
n.unzipBase64 = function() {
var t = n.Base64.decode.apply(n.Base64, arguments);
try {
return n.GZip.gunzip.call(n.GZip, t);
} catch (e) {
return t.slice(7);
}
};
n.unzipBase64AsArray = function(t, e) {
e = e || 1;
var i, n, r, s = this.unzipBase64(t), a = [];
for (i = 0, r = s.length / e; i < r; i++) {
a[i] = 0;
for (n = e - 1; n >= 0; --n) a[i] += s.charCodeAt(i * e + n) << 8 * n;
}
return a;
};
n.unzipAsArray = function(t, e) {
e = e || 1;
var i, n, r, s = this.unzip(t), a = [];
for (i = 0, r = s.length / e; i < r; i++) {
a[i] = 0;
for (n = e - 1; n >= 0; --n) a[i] += s.charCodeAt(i * e + n) << 8 * n;
}
return a;
};
cc.codec = e.exports = n;
}), {
"./base64": 22,
"./gzip": 23
} ],
22: [ (function(t, e, i) {
var n = t("../core/utils/misc").BASE64_VALUES, r = {
name: "Jacob__Codec__Base64",
decode: function(t) {
var e, i, r, s, a, o, h, l = [], c = 0;
t = t.replace(/[^A-Za-z0-9\+\/\=]/g, "");
for (;c < t.length; ) {
s = n[t.charCodeAt(c++)];
a = n[t.charCodeAt(c++)];
o = n[t.charCodeAt(c++)];
h = n[t.charCodeAt(c++)];
e = s << 2 | a >> 4;
i = (15 & a) << 4 | o >> 2;
r = (3 & o) << 6 | h;
l.push(String.fromCharCode(e));
64 !== o && l.push(String.fromCharCode(i));
64 !== h && l.push(String.fromCharCode(r));
}
return l = l.join("");
},
decodeAsArray: function(t, e) {
var i, n, r, s = this.decode(t), a = [];
for (i = 0, r = s.length / e; i < r; i++) {
a[i] = 0;
for (n = e - 1; n >= 0; --n) a[i] += s.charCodeAt(i * e + n) << 8 * n;
}
return a;
}
};
e.exports = r;
}), {
"../core/utils/misc": 231
} ],
23: [ (function(t, e, i) {
var n = function(t) {
this.data = t;
this.debug = !1;
this.gpflags = void 0;
this.files = 0;
this.unzipped = [];
this.buf32k = new Array(32768);
this.bIdx = 0;
this.modeZIP = !1;
this.bytepos = 0;
this.bb = 1;
this.bits = 0;
this.nameBuf = [];
this.fileout = void 0;
this.literalTree = new Array(n.LITERALS);
this.distanceTree = new Array(32);
this.treepos = 0;
this.Places = null;
this.len = 0;
this.fpos = new Array(17);
this.fpos[0] = 0;
this.flens = void 0;
this.fmax = void 0;
};
n.gunzip = function(t) {
t.constructor === Array || (t.constructor, String);
return new n(t).gunzip()[0][0];
};
n.HufNode = function() {
this.b0 = 0;
this.b1 = 0;
this.jump = null;
this.jumppos = -1;
};
n.LITERALS = 288;
n.NAMEMAX = 256;
n.bitReverse = [ 0, 128, 64, 192, 32, 160, 96, 224, 16, 144, 80, 208, 48, 176, 112, 240, 8, 136, 72, 200, 40, 168, 104, 232, 24, 152, 88, 216, 56, 184, 120, 248, 4, 132, 68, 196, 36, 164, 100, 228, 20, 148, 84, 212, 52, 180, 116, 244, 12, 140, 76, 204, 44, 172, 108, 236, 28, 156, 92, 220, 60, 188, 124, 252, 2, 130, 66, 194, 34, 162, 98, 226, 18, 146, 82, 210, 50, 178, 114, 242, 10, 138, 74, 202, 42, 170, 106, 234, 26, 154, 90, 218, 58, 186, 122, 250, 6, 134, 70, 198, 38, 166, 102, 230, 22, 150, 86, 214, 54, 182, 118, 246, 14, 142, 78, 206, 46, 174, 110, 238, 30, 158, 94, 222, 62, 190, 126, 254, 1, 129, 65, 193, 33, 161, 97, 225, 17, 145, 81, 209, 49, 177, 113, 241, 9, 137, 73, 201, 41, 169, 105, 233, 25, 153, 89, 217, 57, 185, 121, 249, 5, 133, 69, 197, 37, 165, 101, 229, 21, 149, 85, 213, 53, 181, 117, 245, 13, 141, 77, 205, 45, 173, 109, 237, 29, 157, 93, 221, 61, 189, 125, 253, 3, 131, 67, 195, 35, 163, 99, 227, 19, 147, 83, 211, 51, 179, 115, 243, 11, 139, 75, 203, 43, 171, 107, 235, 27, 155, 91, 219, 59, 187, 123, 251, 7, 135, 71, 199, 39, 167, 103, 231, 23, 151, 87, 215, 55, 183, 119, 247, 15, 143, 79, 207, 47, 175, 111, 239, 31, 159, 95, 223, 63, 191, 127, 255 ];
n.cplens = [ 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0 ];
n.cplext = [ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 99, 99 ];
n.cpdist = [ 1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577 ];
n.cpdext = [ 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13 ];
n.border = [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];
n.prototype.gunzip = function() {
this.outputArr = [];
this.nextFile();
return this.unzipped;
};
n.prototype.readByte = function() {
this.bits += 8;
return this.bytepos < this.data.length ? this.data.charCodeAt(this.bytepos++) : -1;
};
n.prototype.byteAlign = function() {
this.bb = 1;
};
n.prototype.readBit = function() {
var t;
this.bits++;
t = 1 & this.bb;
this.bb >>= 1;
if (0 === this.bb) {
this.bb = this.readByte();
t = 1 & this.bb;
this.bb = this.bb >> 1 | 128;
}
return t;
};
n.prototype.readBits = function(t) {
for (var e = 0, i = t; i--; ) e = e << 1 | this.readBit();
t && (e = n.bitReverse[e] >> 8 - t);
return e;
};
n.prototype.flushBuffer = function() {
this.bIdx = 0;
};
n.prototype.addBuffer = function(t) {
this.buf32k[this.bIdx++] = t;
this.outputArr.push(String.fromCharCode(t));
32768 === this.bIdx && (this.bIdx = 0);
};
n.prototype.IsPat = function() {
for (;;) {
if (this.fpos[this.len] >= this.fmax) return -1;
if (this.flens[this.fpos[this.len]] === this.len) return this.fpos[this.len]++;
this.fpos[this.len]++;
}
};
n.prototype.Rec = function() {
var t, e = this.Places[this.treepos];
if (17 === this.len) return -1;
this.treepos++;
this.len++;
if ((t = this.IsPat()) >= 0) e.b0 = t; else {
e.b0 = 32768;
if (this.Rec()) return -1;
}
if ((t = this.IsPat()) >= 0) {
e.b1 = t;
e.jump = null;
} else {
e.b1 = 32768;
e.jump = this.Places[this.treepos];
e.jumppos = this.treepos;
if (this.Rec()) return -1;
}
this.len--;
return 0;
};
n.prototype.CreateTree = function(t, e, i, n) {
var r;
this.Places = t;
this.treepos = 0;
this.flens = i;
this.fmax = e;
for (r = 0; r < 17; r++) this.fpos[r] = 0;
this.len = 0;
return this.Rec() ? -1 : 0;
};
n.prototype.DecodeValue = function(t) {
for (var e, i, n = 0, r = t[n]; ;) if (this.readBit()) {
if (!(32768 & r.b1)) return r.b1;
r = r.jump;
e = t.length;
for (i = 0; i < e; i++) if (t[i] === r) {
n = i;
break;
}
} else {
if (!(32768 & r.b0)) return r.b0;
r = t[++n];
}
return -1;
};
n.prototype.DeflateLoop = function() {
var t, e, i;
do {
t = this.readBit();
if (0 === (e = this.readBits(2))) {
var r, s;
this.byteAlign();
r = this.readByte();
r |= this.readByte() << 8;
s = this.readByte();
65535 & (r ^ ~(s |= this.readByte() << 8)) && document.write("BlockLen checksum mismatch\n");
for (;r--; ) {
a = this.readByte();
this.addBuffer(a);
}
} else if (1 === e) for (;;) {
(o = n.bitReverse[this.readBits(7)] >> 1) > 23 ? (o = o << 1 | this.readBit()) > 199 ? o = (o -= 128) << 1 | this.readBit() : (o -= 48) > 143 && (o += 136) : o += 256;
if (o < 256) this.addBuffer(o); else {
if (256 === o) break;
o -= 257;
d = this.readBits(n.cplext[o]) + n.cplens[o];
o = n.bitReverse[this.readBits(5)] >> 3;
if (n.cpdext[o] > 8) {
p = this.readBits(8);
p |= this.readBits(n.cpdext[o] - 8) << 8;
} else p = this.readBits(n.cpdext[o]);
p += n.cpdist[o];
for (o = 0; o < d; o++) {
var a = this.buf32k[this.bIdx - p & 32767];
this.addBuffer(a);
}
}
} else if (2 === e) {
var o, h, l, c, u, _ = new Array(320);
l = 257 + this.readBits(5);
c = 1 + this.readBits(5);
u = 4 + this.readBits(4);
for (o = 0; o < 19; o++) _[o] = 0;
for (o = 0; o < u; o++) _[n.border[o]] = this.readBits(3);
d = this.distanceTree.length;
for (i = 0; i < d; i++) this.distanceTree[i] = new n.HufNode();
if (this.CreateTree(this.distanceTree, 19, _, 0)) {
this.flushBuffer();
return 1;
}
h = l + c;
i = 0;
for (;i < h; ) {
0;
if ((o = this.DecodeValue(this.distanceTree)) < 16) _[i++] = o; else if (16 === o) {
var m;
if (i + (o = 3 + this.readBits(2)) > h) {
this.flushBuffer();
return 1;
}
m = i ? _[i - 1] : 0;
for (;o--; ) _[i++] = m;
} else {
if (i + (o = 17 === o ? 3 + this.readBits(3) : 11 + this.readBits(7)) > h) {
this.flushBuffer();
return 1;
}
for (;o--; ) _[i++] = 0;
}
}
d = this.literalTree.length;
for (i = 0; i < d; i++) this.literalTree[i] = new n.HufNode();
if (this.CreateTree(this.literalTree, l, _, 0)) {
this.flushBuffer();
return 1;
}
d = this.literalTree.length;
for (i = 0; i < d; i++) this.distanceTree[i] = new n.HufNode();
var f = new Array();
for (i = l; i < _.length; i++) f[i - l] = _[i];
if (this.CreateTree(this.distanceTree, c, f, 0)) {
this.flushBuffer();
return 1;
}
for (;;) if ((o = this.DecodeValue(this.literalTree)) >= 256) {
var d, p;
if (0 === (o -= 256)) break;
o--;
d = this.readBits(n.cplext[o]) + n.cplens[o];
o = this.DecodeValue(this.distanceTree);
if (n.cpdext[o] > 8) {
p = this.readBits(8);
p |= this.readBits(n.cpdext[o] - 8) << 8;
} else p = this.readBits(n.cpdext[o]);
p += n.cpdist[o];
for (;d--; ) {
a = this.buf32k[this.bIdx - p & 32767];
this.addBuffer(a);
}
} else this.addBuffer(o);
}
} while (!t);
this.flushBuffer();
this.byteAlign();
return 0;
};
n.prototype.unzipFile = function(t) {
var e;
this.gunzip();
for (e = 0; e < this.unzipped.length; e++) if (this.unzipped[e][1] === t) return this.unzipped[e][0];
};
n.prototype.nextFile = function() {
this.outputArr = [];
this.modeZIP = !1;
var t = [];
t[0] = this.readByte();
t[1] = this.readByte();
if (120 === t[0] && 218 === t[1]) {
this.DeflateLoop();
this.unzipped[this.files] = [ this.outputArr.join(""), "geonext.gxt" ];
this.files++;
}
if (31 === t[0] && 139 === t[1]) {
this.skipdir();
this.unzipped[this.files] = [ this.outputArr.join(""), "file" ];
this.files++;
}
if (80 === t[0] && 75 === t[1]) {
this.modeZIP = !0;
t[2] = this.readByte();
t[3] = this.readByte();
if (3 === t[2] && 4 === t[3]) {
t[0] = this.readByte();
t[1] = this.readByte();
this.gpflags = this.readByte();
this.gpflags |= this.readByte() << 8;
var e = this.readByte();
e |= this.readByte() << 8;
this.readByte();
this.readByte();
this.readByte();
this.readByte();
this.readByte();
this.readByte() << 8;
this.readByte() << 16;
this.readByte() << 24;
this.readByte();
this.readByte() << 8;
this.readByte() << 16;
this.readByte() << 24;
var i = this.readByte();
i |= this.readByte() << 8;
var r = this.readByte();
r |= this.readByte() << 8;
a = 0;
this.nameBuf = [];
for (;i--; ) {
var s = this.readByte();
"/" === s | ":" === s ? a = 0 : a < n.NAMEMAX - 1 && (this.nameBuf[a++] = String.fromCharCode(s));
}
this.fileout || (this.fileout = this.nameBuf);
for (var a = 0; a < r; ) {
s = this.readByte();
a++;
}
if (8 === e) {
this.DeflateLoop();
this.unzipped[this.files] = [ this.outputArr.join(""), this.nameBuf.join("") ];
this.files++;
}
this.skipdir();
}
}
};
n.prototype.skipdir = function() {
var t, e, i = [];
if (8 & this.gpflags) {
i[0] = this.readByte();
i[1] = this.readByte();
i[2] = this.readByte();
i[3] = this.readByte();
this.readByte();
this.readByte() << 8;
this.readByte() << 16;
this.readByte() << 24;
this.readByte();
this.readByte() << 8;
this.readByte() << 16;
this.readByte() << 24;
}
this.modeZIP && this.nextFile();
i[0] = this.readByte();
if (8 !== i[0]) return 0;
this.gpflags = this.readByte();
this.readByte();
this.readByte();
this.readByte();
this.readByte();
this.readByte();
this.readByte();
if (4 & this.gpflags) {
i[0] = this.readByte();
i[2] = this.readByte();
this.len = i[0] + 256 * i[1];
for (t = 0; t < this.len; t++) this.readByte();
}
if (8 & this.gpflags) {
t = 0;
this.nameBuf = [];
for (;e = this.readByte(); ) {
"7" !== e && ":" !== e || (t = 0);
t < n.NAMEMAX - 1 && (this.nameBuf[t++] = e);
}
}
if (16 & this.gpflags) for (;e = this.readByte(); ) ;
if (2 & this.gpflags) {
this.readByte();
this.readByte();
}
this.DeflateLoop();
this.readByte();
this.readByte() << 8;
this.readByte() << 16;
this.readByte() << 24;
this.modeZIP && this.nextFile();
};
e.exports = n;
}), {} ],
24: [ (function(i, n, r) {
(function() {
"use strict";
function i(t) {
throw t;
}
var n = void 0, r = !0, s = this;
function a(t, e) {
var i, r = t.split("."), a = s;
!(r[0] in a) && a.execScript && a.execScript("var " + r[0]);
for (;r.length && (i = r.shift()); ) r.length || e === n ? a = a[i] ? a[i] : a[i] = {} : a[i] = e;
}
var o = "undefined" !== ("object" === (e = typeof Uint8Array) ? t(Uint8Array) : e) && "undefined" !== ("object" === (e = typeof Uint16Array) ? t(Uint16Array) : e) && "undefined" !== ("object" === (e = typeof Uint32Array) ? t(Uint32Array) : e);
function h(i) {
if ("string" === ("object" === (e = typeof i) ? t(i) : e)) {
var n, r, s = i.split("");
n = 0;
for (r = s.length; n < r; n++) s[n] = (255 & s[n].charCodeAt(0)) >>> 0;
i = s;
}
for (var a, o = 1, h = 0, l = i.length, c = 0; 0 < l; ) {
l -= a = 1024 < l ? 1024 : l;
do {
h += o += i[c++];
} while (--a);
o %= 65521;
h %= 65521;
}
return (h << 16 | o) >>> 0;
}
function l(n, r) {
this.index = "number" === ("object" === (e = typeof r) ? t(r) : e) ? r : 0;
this.i = 0;
this.buffer = n instanceof (o ? Uint8Array : Array) ? n : new (o ? Uint8Array : Array)(32768);
2 * this.buffer.length <= this.index && i(Error("invalid index"));
this.buffer.length <= this.index && this.f();
}
l.prototype.f = function() {
var t, e = this.buffer, i = e.length, n = new (o ? Uint8Array : Array)(i << 1);
if (o) n.set(e); else for (t = 0; t < i; ++t) n[t] = e[t];
return this.buffer = n;
};
l.prototype.d = function(t, e, i) {
var n, r = this.buffer, s = this.index, a = this.i, o = r[s];
i && 1 < e && (t = 8 < e ? (d[255 & t] << 24 | d[t >>> 8 & 255] << 16 | d[t >>> 16 & 255] << 8 | d[t >>> 24 & 255]) >> 32 - e : d[t] >> 8 - e);
if (8 > e + a) o = o << e | t, a += e; else for (n = 0; n < e; ++n) o = o << 1 | t >> e - n - 1 & 1, 
8 == ++a && (a = 0, r[s++] = d[o], o = 0, s === r.length && (r = this.f()));
r[s] = o;
this.buffer = r;
this.i = a;
this.index = s;
};
l.prototype.finish = function() {
var t, e = this.buffer, i = this.index;
0 < this.i && (e[i] <<= 8 - this.i, e[i] = d[e[i]], i++);
o ? t = e.subarray(0, i) : (e.length = i, t = e);
return t;
};
var c, u = new (o ? Uint8Array : Array)(256);
for (c = 0; 256 > c; ++c) {
for (var _ = f = c, m = 7, f = f >>> 1; f; f >>>= 1) _ <<= 1, _ |= 1 & f, --m;
u[c] = (_ << m & 255) >>> 0;
}
var d = u;
o && new Uint32Array([ 0, 1996959894, 3993919788, 2567524794, 124634137, 1886057615, 3915621685, 2657392035, 249268274, 2044508324, 3772115230, 2547177864, 162941995, 2125561021, 3887607047, 2428444049, 498536548, 1789927666, 4089016648, 2227061214, 450548861, 1843258603, 4107580753, 2211677639, 325883990, 1684777152, 4251122042, 2321926636, 335633487, 1661365465, 4195302755, 2366115317, 997073096, 1281953886, 3579855332, 2724688242, 1006888145, 1258607687, 3524101629, 2768942443, 901097722, 1119000684, 3686517206, 2898065728, 853044451, 1172266101, 3705015759, 2882616665, 651767980, 1373503546, 3369554304, 3218104598, 565507253, 1454621731, 3485111705, 3099436303, 671266974, 1594198024, 3322730930, 2970347812, 795835527, 1483230225, 3244367275, 3060149565, 1994146192, 31158534, 2563907772, 4023717930, 1907459465, 112637215, 2680153253, 3904427059, 2013776290, 251722036, 2517215374, 3775830040, 2137656763, 141376813, 2439277719, 3865271297, 1802195444, 476864866, 2238001368, 4066508878, 1812370925, 453092731, 2181625025, 4111451223, 1706088902, 314042704, 2344532202, 4240017532, 1658658271, 366619977, 2362670323, 4224994405, 1303535960, 984961486, 2747007092, 3569037538, 1256170817, 1037604311, 2765210733, 3554079995, 1131014506, 879679996, 2909243462, 3663771856, 1141124467, 855842277, 2852801631, 3708648649, 1342533948, 654459306, 3188396048, 3373015174, 1466479909, 544179635, 3110523913, 3462522015, 1591671054, 702138776, 2966460450, 3352799412, 1504918807, 783551873, 3082640443, 3233442989, 3988292384, 2596254646, 62317068, 1957810842, 3939845945, 2647816111, 81470997, 1943803523, 3814918930, 2489596804, 225274430, 2053790376, 3826175755, 2466906013, 167816743, 2097651377, 4027552580, 2265490386, 503444072, 1762050814, 4150417245, 2154129355, 426522225, 1852507879, 4275313526, 2312317920, 282753626, 1742555852, 4189708143, 2394877945, 397917763, 1622183637, 3604390888, 2714866558, 953729732, 1340076626, 3518719985, 2797360999, 1068828381, 1219638859, 3624741850, 2936675148, 906185462, 1090812512, 3747672003, 2825379669, 829329135, 1181335161, 3412177804, 3160834842, 628085408, 1382605366, 3423369109, 3138078467, 570562233, 1426400815, 3317316542, 2998733608, 733239954, 1555261956, 3268935591, 3050360625, 752459403, 1541320221, 2607071920, 3965973030, 1969922972, 40735498, 2617837225, 3943577151, 1913087877, 83908371, 2512341634, 3803740692, 2075208622, 213261112, 2463272603, 3855990285, 2094854071, 198958881, 2262029012, 4057260610, 1759359992, 534414190, 2176718541, 4139329115, 1873836001, 414664567, 2282248934, 4279200368, 1711684554, 285281116, 2405801727, 4167216745, 1634467795, 376229701, 2685067896, 3608007406, 1308918612, 956543938, 2808555105, 3495958263, 1231636301, 1047427035, 2932959818, 3654703836, 1088359270, 936918e3, 2847714899, 3736837829, 1202900863, 817233897, 3183342108, 3401237130, 1404277552, 615818150, 3134207493, 3453421203, 1423857449, 601450431, 3009837614, 3294710456, 1567103746, 711928724, 3020668471, 3272380065, 1510334235, 755167117 ]);
function p(t) {
this.buffer = new (o ? Uint16Array : Array)(2 * t);
this.length = 0;
}
p.prototype.getParent = function(t) {
return 2 * ((t - 2) / 4 | 0);
};
p.prototype.push = function(t, e) {
var i, n, r, s = this.buffer;
i = this.length;
s[this.length++] = e;
for (s[this.length++] = t; 0 < i && (n = this.getParent(i), s[i] > s[n]); ) r = s[i], 
s[i] = s[n], s[n] = r, r = s[i + 1], s[i + 1] = s[n + 1], s[n + 1] = r, i = n;
return this.length;
};
p.prototype.pop = function() {
var t, e, i, n, r, s = this.buffer;
e = s[0];
t = s[1];
this.length -= 2;
s[0] = s[this.length];
s[1] = s[this.length + 1];
for (r = 0; !((n = 2 * r + 2) >= this.length); ) {
n + 2 < this.length && s[n + 2] > s[n] && (n += 2);
if (!(s[n] > s[r])) break;
i = s[r], s[r] = s[n], s[n] = i, i = s[r + 1], s[r + 1] = s[n + 1], s[n + 1] = i;
r = n;
}
return {
index: t,
value: e,
length: this.length
};
};
function g(t) {
var e, i, n, r, s, a, h, l, c, u = t.length, _ = 0, m = Number.POSITIVE_INFINITY;
for (l = 0; l < u; ++l) t[l] > _ && (_ = t[l]), t[l] < m && (m = t[l]);
e = 1 << _;
i = new (o ? Uint32Array : Array)(e);
n = 1;
r = 0;
for (s = 2; n <= _; ) {
for (l = 0; l < u; ++l) if (t[l] === n) {
a = 0;
h = r;
for (c = 0; c < n; ++c) a = a << 1 | 1 & h, h >>= 1;
for (c = a; c < e; c += s) i[c] = n << 16 | l;
++r;
}
++n;
r <<= 1;
s <<= 1;
}
return [ i, _, m ];
}
function y(i, n) {
this.h = x;
this.w = 0;
this.input = i;
this.b = 0;
n && (n.lazy && (this.w = n.lazy), "number" === ("object" === (e = typeof n.compressionType) ? t(n.compressionType) : e) && (this.h = n.compressionType), 
n.outputBuffer && (this.a = o && n.outputBuffer instanceof Array ? new Uint8Array(n.outputBuffer) : n.outputBuffer), 
"number" === ("object" === (e = typeof n.outputIndex) ? t(n.outputIndex) : e) && (this.b = n.outputIndex));
this.a || (this.a = new (o ? Uint8Array : Array)(32768));
}
var v, x = 2, A = {
NONE: 0,
r: 1,
j: x,
N: 3
}, b = [];
for (v = 0; 288 > v; v++) switch (r) {
case 143 >= v:
b.push([ v + 48, 8 ]);
break;

case 255 >= v:
b.push([ v - 144 + 400, 9 ]);
break;

case 279 >= v:
b.push([ v - 256 + 0, 7 ]);
break;

case 287 >= v:
b.push([ v - 280 + 192, 8 ]);
break;

default:
i("invalid literal: " + v);
}
y.prototype.n = function() {
var t, e, s, a, h = this.input;
switch (this.h) {
case 0:
s = 0;
for (a = h.length; s < a; ) {
var c, u, _, m = e = o ? h.subarray(s, s + 65535) : h.slice(s, s + 65535), f = (s += e.length) === a, d = n, p = n, g = this.a, y = this.b;
if (o) {
for (g = new Uint8Array(this.a.buffer); g.length <= y + m.length + 5; ) g = new Uint8Array(g.length << 1);
g.set(this.a);
}
c = f ? 1 : 0;
g[y++] = 0 | c;
_ = 65536 + ~(u = m.length) & 65535;
g[y++] = 255 & u;
g[y++] = u >>> 8 & 255;
g[y++] = 255 & _;
g[y++] = _ >>> 8 & 255;
if (o) g.set(m, y), y += m.length, g = g.subarray(0, y); else {
d = 0;
for (p = m.length; d < p; ++d) g[y++] = m[d];
g.length = y;
}
this.b = y;
this.a = g;
}
break;

case 1:
var v = new l(new Uint8Array(this.a.buffer), this.b);
v.d(1, 1, r);
v.d(1, 2, r);
var A, T, C, w = M(this, h);
A = 0;
for (T = w.length; A < T; A++) if (C = w[A], l.prototype.d.apply(v, b[C]), 256 < C) v.d(w[++A], w[++A], r), 
v.d(w[++A], 5), v.d(w[++A], w[++A], r); else if (256 === C) break;
this.a = v.finish();
this.b = this.a.length;
break;

case x:
var S, E, D, B, R, L, O, F, N, k, z, G, U, V, j, W = new l(new Uint8Array(this.a), this.b), H = [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ], q = Array(19);
S = x;
W.d(1, 1, r);
W.d(S, 2, r);
E = M(this, h);
O = P(L = I(this.L, 15));
N = P(F = I(this.K, 7));
for (D = 286; 257 < D && 0 === L[D - 1]; D--) ;
for (B = 30; 1 < B && 0 === F[B - 1]; B--) ;
var X, Y, J, Z, K, Q, $ = D, tt = B, et = new (o ? Uint32Array : Array)($ + tt), it = new (o ? Uint32Array : Array)(316), nt = new (o ? Uint8Array : Array)(19);
for (X = Y = 0; X < $; X++) et[Y++] = L[X];
for (X = 0; X < tt; X++) et[Y++] = F[X];
if (!o) {
X = 0;
for (Z = nt.length; X < Z; ++X) nt[X] = 0;
}
X = K = 0;
for (Z = et.length; X < Z; X += Y) {
for (Y = 1; X + Y < Z && et[X + Y] === et[X]; ++Y) ;
J = Y;
if (0 === et[X]) if (3 > J) for (;0 < J--; ) it[K++] = 0, nt[0]++; else for (;0 < J; ) (Q = 138 > J ? J : 138) > J - 3 && Q < J && (Q = J - 3), 
10 >= Q ? (it[K++] = 17, it[K++] = Q - 3, nt[17]++) : (it[K++] = 18, it[K++] = Q - 11, 
nt[18]++), J -= Q; else if (it[K++] = et[X], nt[et[X]]++, J--, 3 > J) for (;0 < J--; ) it[K++] = et[X], 
nt[et[X]]++; else for (;0 < J; ) (Q = 6 > J ? J : 6) > J - 3 && Q < J && (Q = J - 3), 
it[K++] = 16, it[K++] = Q - 3, nt[16]++, J -= Q;
}
t = o ? it.subarray(0, K) : it.slice(0, K);
k = I(nt, 7);
for (V = 0; 19 > V; V++) q[V] = k[H[V]];
for (R = 19; 4 < R && 0 === q[R - 1]; R--) ;
z = P(k);
W.d(D - 257, 5, r);
W.d(B - 1, 5, r);
W.d(R - 4, 4, r);
for (V = 0; V < R; V++) W.d(q[V], 3, r);
V = 0;
for (j = t.length; V < j; V++) if (G = t[V], W.d(z[G], k[G], r), 16 <= G) {
V++;
switch (G) {
case 16:
U = 2;
break;

case 17:
U = 3;
break;

case 18:
U = 7;
break;

default:
i("invalid code: " + G);
}
W.d(t[V], U, r);
}
var rt, st, at, ot, ht, lt, ct, ut, _t = [ O, L ], mt = [ N, F ];
ht = _t[0];
lt = _t[1];
ct = mt[0];
ut = mt[1];
rt = 0;
for (st = E.length; rt < st; ++rt) if (at = E[rt], W.d(ht[at], lt[at], r), 256 < at) W.d(E[++rt], E[++rt], r), 
ot = E[++rt], W.d(ct[ot], ut[ot], r), W.d(E[++rt], E[++rt], r); else if (256 === at) break;
this.a = W.finish();
this.b = this.a.length;
break;

default:
i("invalid compression type");
}
return this.a;
};
function T(t, e) {
this.length = t;
this.G = e;
}
function C() {
var t = w;
switch (r) {
case 3 === t:
return [ 257, t - 3, 0 ];

case 4 === t:
return [ 258, t - 4, 0 ];

case 5 === t:
return [ 259, t - 5, 0 ];

case 6 === t:
return [ 260, t - 6, 0 ];

case 7 === t:
return [ 261, t - 7, 0 ];

case 8 === t:
return [ 262, t - 8, 0 ];

case 9 === t:
return [ 263, t - 9, 0 ];

case 10 === t:
return [ 264, t - 10, 0 ];

case 12 >= t:
return [ 265, t - 11, 1 ];

case 14 >= t:
return [ 266, t - 13, 1 ];

case 16 >= t:
return [ 267, t - 15, 1 ];

case 18 >= t:
return [ 268, t - 17, 1 ];

case 22 >= t:
return [ 269, t - 19, 2 ];

case 26 >= t:
return [ 270, t - 23, 2 ];

case 30 >= t:
return [ 271, t - 27, 2 ];

case 34 >= t:
return [ 272, t - 31, 2 ];

case 42 >= t:
return [ 273, t - 35, 3 ];

case 50 >= t:
return [ 274, t - 43, 3 ];

case 58 >= t:
return [ 275, t - 51, 3 ];

case 66 >= t:
return [ 276, t - 59, 3 ];

case 82 >= t:
return [ 277, t - 67, 4 ];

case 98 >= t:
return [ 278, t - 83, 4 ];

case 114 >= t:
return [ 279, t - 99, 4 ];

case 130 >= t:
return [ 280, t - 115, 4 ];

case 162 >= t:
return [ 281, t - 131, 5 ];

case 194 >= t:
return [ 282, t - 163, 5 ];

case 226 >= t:
return [ 283, t - 195, 5 ];

case 257 >= t:
return [ 284, t - 227, 5 ];

case 258 === t:
return [ 285, t - 258, 0 ];

default:
i("invalid length: " + t);
}
}
var w, S, E = [];
for (w = 3; 258 >= w; w++) S = C(), E[w] = S[2] << 24 | S[1] << 16 | S[0];
var D = o ? new Uint32Array(E) : E;
function M(t, e) {
function s(t, e) {
var n, s, a, o, h = t.G, l = [], c = 0;
n = D[t.length];
l[c++] = 65535 & n;
l[c++] = n >> 16 & 255;
l[c++] = n >> 24;
switch (r) {
case 1 === h:
s = [ 0, h - 1, 0 ];
break;

case 2 === h:
s = [ 1, h - 2, 0 ];
break;

case 3 === h:
s = [ 2, h - 3, 0 ];
break;

case 4 === h:
s = [ 3, h - 4, 0 ];
break;

case 6 >= h:
s = [ 4, h - 5, 1 ];
break;

case 8 >= h:
s = [ 5, h - 7, 1 ];
break;

case 12 >= h:
s = [ 6, h - 9, 2 ];
break;

case 16 >= h:
s = [ 7, h - 13, 2 ];
break;

case 24 >= h:
s = [ 8, h - 17, 3 ];
break;

case 32 >= h:
s = [ 9, h - 25, 3 ];
break;

case 48 >= h:
s = [ 10, h - 33, 4 ];
break;

case 64 >= h:
s = [ 11, h - 49, 4 ];
break;

case 96 >= h:
s = [ 12, h - 65, 5 ];
break;

case 128 >= h:
s = [ 13, h - 97, 5 ];
break;

case 192 >= h:
s = [ 14, h - 129, 6 ];
break;

case 256 >= h:
s = [ 15, h - 193, 6 ];
break;

case 384 >= h:
s = [ 16, h - 257, 7 ];
break;

case 512 >= h:
s = [ 17, h - 385, 7 ];
break;

case 768 >= h:
s = [ 18, h - 513, 8 ];
break;

case 1024 >= h:
s = [ 19, h - 769, 8 ];
break;

case 1536 >= h:
s = [ 20, h - 1025, 9 ];
break;

case 2048 >= h:
s = [ 21, h - 1537, 9 ];
break;

case 3072 >= h:
s = [ 22, h - 2049, 10 ];
break;

case 4096 >= h:
s = [ 23, h - 3073, 10 ];
break;

case 6144 >= h:
s = [ 24, h - 4097, 11 ];
break;

case 8192 >= h:
s = [ 25, h - 6145, 11 ];
break;

case 12288 >= h:
s = [ 26, h - 8193, 12 ];
break;

case 16384 >= h:
s = [ 27, h - 12289, 12 ];
break;

case 24576 >= h:
s = [ 28, h - 16385, 13 ];
break;

case 32768 >= h:
s = [ 29, h - 24577, 13 ];
break;

default:
i("invalid distance");
}
n = s;
l[c++] = n[0];
l[c++] = n[1];
l[c++] = n[2];
a = 0;
for (o = l.length; a < o; ++a) g[y++] = l[a];
x[l[0]]++;
A[l[3]]++;
v = t.length + e - 1;
f = null;
}
var a, h, l, c, u, _, m, f, d, p = {}, g = o ? new Uint16Array(2 * e.length) : [], y = 0, v = 0, x = new (o ? Uint32Array : Array)(286), A = new (o ? Uint32Array : Array)(30), b = t.w;
if (!o) {
for (l = 0; 285 >= l; ) x[l++] = 0;
for (l = 0; 29 >= l; ) A[l++] = 0;
}
x[256] = 1;
a = 0;
for (h = e.length; a < h; ++a) {
l = u = 0;
for (c = 3; l < c && a + l !== h; ++l) u = u << 8 | e[a + l];
p[u] === n && (p[u] = []);
_ = p[u];
if (!(0 < v--)) {
for (;0 < _.length && 32768 < a - _[0]; ) _.shift();
if (a + 3 >= h) {
f && s(f, -1);
l = 0;
for (c = h - a; l < c; ++l) d = e[a + l], g[y++] = d, ++x[d];
break;
}
if (0 < _.length) {
var C = n, w = n, S = 0, E = n, M = n, I = n, P = e.length, B = (M = 0, _.length);
t: for (;M < B; M++) {
C = _[B - M - 1];
E = 3;
if (3 < S) {
for (I = S; 3 < I; I--) if (e[C + I - 1] !== e[a + I - 1]) continue t;
E = S;
}
for (;258 > E && a + E < P && e[C + E] === e[a + E]; ) ++E;
E > S && (w = C, S = E);
if (258 === E) break;
}
m = new T(S, a - w);
f ? f.length < m.length ? (d = e[a - 1], g[y++] = d, ++x[d], s(m, 0)) : s(f, -1) : m.length < b ? f = m : s(m, 0);
} else f ? s(f, -1) : (d = e[a], g[y++] = d, ++x[d]);
}
_.push(a);
}
g[y++] = 256;
x[256]++;
t.L = x;
t.K = A;
return o ? g.subarray(0, y) : g;
}
function I(t, e) {
function i(t) {
var e = T[t][C[t]];
e === y ? (i(t + 1), i(t + 1)) : --A[e];
++C[t];
}
var n, r, s, a, h, l = t.length, c = new p(572), u = new (o ? Uint8Array : Array)(l);
if (!o) for (a = 0; a < l; a++) u[a] = 0;
for (a = 0; a < l; ++a) 0 < t[a] && c.push(a, t[a]);
n = Array(c.length / 2);
r = new (o ? Uint32Array : Array)(c.length / 2);
if (1 === n.length) return u[c.pop().index] = 1, u;
a = 0;
for (h = c.length / 2; a < h; ++a) n[a] = c.pop(), r[a] = n[a].value;
var _, m, f, d, g, y = r.length, v = new (o ? Uint16Array : Array)(e), x = new (o ? Uint8Array : Array)(e), A = new (o ? Uint8Array : Array)(y), b = Array(e), T = Array(e), C = Array(e), w = (1 << e) - y, S = 1 << e - 1;
v[e - 1] = y;
for (m = 0; m < e; ++m) w < S ? x[m] = 0 : (x[m] = 1, w -= S), w <<= 1, v[e - 2 - m] = (v[e - 1 - m] / 2 | 0) + y;
v[0] = x[0];
b[0] = Array(v[0]);
T[0] = Array(v[0]);
for (m = 1; m < e; ++m) v[m] > 2 * v[m - 1] + x[m] && (v[m] = 2 * v[m - 1] + x[m]), 
b[m] = Array(v[m]), T[m] = Array(v[m]);
for (_ = 0; _ < y; ++_) A[_] = e;
for (f = 0; f < v[e - 1]; ++f) b[e - 1][f] = r[f], T[e - 1][f] = f;
for (_ = 0; _ < e; ++_) C[_] = 0;
1 === x[e - 1] && (--A[0], ++C[e - 1]);
for (m = e - 2; 0 <= m; --m) {
d = _ = 0;
g = C[m + 1];
for (f = 0; f < v[m]; f++) (d = b[m + 1][g] + b[m + 1][g + 1]) > r[_] ? (b[m][f] = d, 
T[m][f] = y, g += 2) : (b[m][f] = r[_], T[m][f] = _, ++_);
C[m] = 0;
1 === x[m] && i(m);
}
s = A;
a = 0;
for (h = n.length; a < h; ++a) u[n[a].index] = s[a];
return u;
}
function P(t) {
var e, n, r, s, a = new (o ? Uint16Array : Array)(t.length), h = [], l = [], c = 0;
e = 0;
for (n = t.length; e < n; e++) h[t[e]] = 1 + (0 | h[t[e]]);
e = 1;
for (n = 16; e <= n; e++) l[e] = c, (c += 0 | h[e]) > 1 << e && i("overcommitted"), 
c <<= 1;
65536 > c && i("undercommitted");
e = 0;
for (n = t.length; e < n; e++) {
c = l[t[e]];
l[t[e]] += 1;
r = a[e] = 0;
for (s = t[e]; r < s; r++) a[e] = a[e] << 1 | 1 & c, c >>>= 1;
}
return a;
}
function B(i, n) {
this.input = i;
this.a = new (o ? Uint8Array : Array)(32768);
this.h = R.j;
var r, s = {};
!n && (n = {}) || "number" !== ("object" === (e = typeof n.compressionType) ? t(n.compressionType) : e) || (this.h = n.compressionType);
for (r in n) s[r] = n[r];
s.outputBuffer = this.a;
this.z = new y(this.input, s);
}
var R = A;
B.prototype.n = function() {
var t, e, n, r, s, a, l, c = 0;
l = this.a;
switch (t = _t) {
case _t:
e = Math.LOG2E * Math.log(32768) - 8;
break;

default:
i(Error("invalid compression method"));
}
n = e << 4 | t;
l[c++] = n;
switch (t) {
case _t:
switch (this.h) {
case R.NONE:
s = 0;
break;

case R.r:
s = 1;
break;

case R.j:
s = 2;
break;

default:
i(Error("unsupported compression type"));
}
break;

default:
i(Error("invalid compression method"));
}
r = s << 6 | 0;
l[c++] = r | 31 - (256 * n + r) % 31;
a = h(this.input);
this.z.b = c;
c = (l = this.z.n()).length;
o && ((l = new Uint8Array(l.buffer)).length <= c + 4 && (this.a = new Uint8Array(l.length + 4), 
this.a.set(l), l = this.a), l = l.subarray(0, c + 4));
l[c++] = a >> 24 & 255;
l[c++] = a >> 16 & 255;
l[c++] = a >> 8 & 255;
l[c++] = 255 & a;
return l;
};
a("Zlib.Deflate", B);
a("Zlib.Deflate.compress", (function(t, e) {
return new B(t, e).n();
}));
a("Zlib.Deflate.CompressionType", R);
a("Zlib.Deflate.CompressionType.NONE", R.NONE);
a("Zlib.Deflate.CompressionType.FIXED", R.r);
a("Zlib.Deflate.CompressionType.DYNAMIC", R.j);
function L(t, e) {
this.k = [];
this.l = 32768;
this.e = this.g = this.c = this.q = 0;
this.input = o ? new Uint8Array(t) : t;
this.s = !1;
this.m = F;
this.B = !1;
!e && (e = {}) || (e.index && (this.c = e.index), e.bufferSize && (this.l = e.bufferSize), 
e.bufferType && (this.m = e.bufferType), e.resize && (this.B = e.resize));
switch (this.m) {
case O:
this.b = 32768;
this.a = new (o ? Uint8Array : Array)(32768 + this.l + 258);
break;

case F:
this.b = 0;
this.a = new (o ? Uint8Array : Array)(this.l);
this.f = this.J;
this.t = this.H;
this.o = this.I;
break;

default:
i(Error("invalid inflate mode"));
}
}
var O = 0, F = 1, N = {
D: O,
C: F
};
L.prototype.p = function() {
for (;!this.s; ) {
var t = it(this, 3);
1 & t && (this.s = r);
switch (t >>>= 1) {
case 0:
var e = this.input, s = this.c, a = this.a, h = this.b, l = n, c = n, u = n, _ = a.length, m = n;
this.e = this.g = 0;
(l = e[s++]) === n && i(Error("invalid uncompressed block header: LEN (first byte)"));
c = l;
(l = e[s++]) === n && i(Error("invalid uncompressed block header: LEN (second byte)"));
c |= l << 8;
(l = e[s++]) === n && i(Error("invalid uncompressed block header: NLEN (first byte)"));
u = l;
(l = e[s++]) === n && i(Error("invalid uncompressed block header: NLEN (second byte)"));
c === ~(u |= l << 8) && i(Error("invalid uncompressed block header: length verify"));
s + c > e.length && i(Error("input buffer is broken"));
switch (this.m) {
case O:
for (;h + c > a.length; ) {
c -= m = _ - h;
if (o) a.set(e.subarray(s, s + m), h), h += m, s += m; else for (;m--; ) a[h++] = e[s++];
this.b = h;
a = this.f();
h = this.b;
}
break;

case F:
for (;h + c > a.length; ) a = this.f({
v: 2
});
break;

default:
i(Error("invalid inflate mode"));
}
if (o) a.set(e.subarray(s, s + c), h), h += c, s += c; else for (;c--; ) a[h++] = e[s++];
this.c = s;
this.b = h;
this.a = a;
break;

case 1:
this.o($, et);
break;

case 2:
rt(this);
break;

default:
i(Error("unknown BTYPE: " + t));
}
}
return this.t();
};
var k, z, G = [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ], U = o ? new Uint16Array(G) : G, V = [ 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 258, 258 ], j = o ? new Uint16Array(V) : V, W = [ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0 ], H = o ? new Uint8Array(W) : W, q = [ 1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577 ], X = o ? new Uint16Array(q) : q, Y = [ 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13 ], J = o ? new Uint8Array(Y) : Y, Z = new (o ? Uint8Array : Array)(288);
k = 0;
for (z = Z.length; k < z; ++k) Z[k] = 143 >= k ? 8 : 255 >= k ? 9 : 279 >= k ? 7 : 8;
var K, Q, $ = g(Z), tt = new (o ? Uint8Array : Array)(30);
K = 0;
for (Q = tt.length; K < Q; ++K) tt[K] = 5;
var et = g(tt);
function it(t, e) {
for (var r, s = t.g, a = t.e, o = t.input, h = t.c; a < e; ) (r = o[h++]) === n && i(Error("input buffer is broken")), 
s |= r << a, a += 8;
r = s & (1 << e) - 1;
t.g = s >>> e;
t.e = a - e;
t.c = h;
return r;
}
function nt(t, e) {
for (var r, s, a, o = t.g, h = t.e, l = t.input, c = t.c, u = e[0], _ = e[1]; h < _; ) (r = l[c++]) === n && i(Error("input buffer is broken")), 
o |= r << h, h += 8;
a = (s = u[o & (1 << _) - 1]) >>> 16;
t.g = o >> a;
t.e = h - a;
t.c = c;
return 65535 & s;
}
function rt(t) {
function e(t, e, i) {
var n, r, s, a;
for (a = 0; a < t; ) switch (n = nt(this, e)) {
case 16:
for (s = 3 + it(this, 2); s--; ) i[a++] = r;
break;

case 17:
for (s = 3 + it(this, 3); s--; ) i[a++] = 0;
r = 0;
break;

case 18:
for (s = 11 + it(this, 7); s--; ) i[a++] = 0;
r = 0;
break;

default:
r = i[a++] = n;
}
return i;
}
var i, n, r, s, a = it(t, 5) + 257, h = it(t, 5) + 1, l = it(t, 4) + 4, c = new (o ? Uint8Array : Array)(U.length);
for (s = 0; s < l; ++s) c[U[s]] = it(t, 3);
i = g(c);
n = new (o ? Uint8Array : Array)(a);
r = new (o ? Uint8Array : Array)(h);
t.o(g(e.call(t, a, i, n)), g(e.call(t, h, i, r)));
}
L.prototype.o = function(t, e) {
var i = this.a, n = this.b;
this.u = t;
for (var r, s, a, o, h = i.length - 258; 256 !== (r = nt(this, t)); ) if (256 > r) n >= h && (this.b = n, 
i = this.f(), n = this.b), i[n++] = r; else {
o = j[s = r - 257];
0 < H[s] && (o += it(this, H[s]));
r = nt(this, e);
a = X[r];
0 < J[r] && (a += it(this, J[r]));
n >= h && (this.b = n, i = this.f(), n = this.b);
for (;o--; ) i[n] = i[n++ - a];
}
for (;8 <= this.e; ) this.e -= 8, this.c--;
this.b = n;
};
L.prototype.I = function(t, e) {
var i = this.a, n = this.b;
this.u = t;
for (var r, s, a, o, h = i.length; 256 !== (r = nt(this, t)); ) if (256 > r) n >= h && (i = this.f(), 
h = i.length), i[n++] = r; else {
o = j[s = r - 257];
0 < H[s] && (o += it(this, H[s]));
r = nt(this, e);
a = X[r];
0 < J[r] && (a += it(this, J[r]));
n + o > h && (h = (i = this.f()).length);
for (;o--; ) i[n] = i[n++ - a];
}
for (;8 <= this.e; ) this.e -= 8, this.c--;
this.b = n;
};
L.prototype.f = function() {
var t, e, i = new (o ? Uint8Array : Array)(this.b - 32768), n = this.b - 32768, r = this.a;
if (o) i.set(r.subarray(32768, i.length)); else {
t = 0;
for (e = i.length; t < e; ++t) i[t] = r[t + 32768];
}
this.k.push(i);
this.q += i.length;
if (o) r.set(r.subarray(n, n + 32768)); else for (t = 0; 32768 > t; ++t) r[t] = r[n + t];
this.b = 32768;
return r;
};
L.prototype.J = function(i) {
var n, r, s, a = this.input.length / this.c + 1 | 0, h = this.input, l = this.a;
i && ("number" === ("object" === (e = typeof i.v) ? t(i.v) : e) && (a = i.v), "number" === ("object" === (e = typeof i.F) ? t(i.F) : e) && (a += i.F));
2 > a ? r = (s = (h.length - this.c) / this.u[2] / 2 * 258 | 0) < l.length ? l.length + s : l.length << 1 : r = l.length * a;
o ? (n = new Uint8Array(r)).set(l) : n = l;
return this.a = n;
};
L.prototype.t = function() {
var t, e, i, n, r, s = 0, a = this.a, h = this.k, l = new (o ? Uint8Array : Array)(this.q + (this.b - 32768));
if (0 === h.length) return o ? this.a.subarray(32768, this.b) : this.a.slice(32768, this.b);
e = 0;
for (i = h.length; e < i; ++e) {
t = h[e];
n = 0;
for (r = t.length; n < r; ++n) l[s++] = t[n];
}
e = 32768;
for (i = this.b; e < i; ++e) l[s++] = a[e];
this.k = [];
return this.buffer = l;
};
L.prototype.H = function() {
var t, e = this.b;
o ? this.B ? (t = new Uint8Array(e)).set(this.a.subarray(0, e)) : t = this.a.subarray(0, e) : (this.a.length > e && (this.a.length = e), 
t = this.a);
return this.buffer = t;
};
function st(t, e) {
var n, r;
this.input = t;
this.c = 0;
!e && (e = {}) || (e.index && (this.c = e.index), e.verify && (this.M = e.verify));
n = t[this.c++];
r = t[this.c++];
switch (15 & n) {
case _t:
this.method = _t;
break;

default:
i(Error("unsupported compression method"));
}
0 != ((n << 8) + r) % 31 && i(Error("invalid fcheck flag:" + ((n << 8) + r) % 31));
32 & r && i(Error("fdict flag is not supported"));
this.A = new L(t, {
index: this.c,
bufferSize: e.bufferSize,
bufferType: e.bufferType,
resize: e.resize
});
}
st.prototype.p = function() {
var t, e = this.input;
t = this.A.p();
this.c = this.A.c;
this.M && ((e[this.c++] << 24 | e[this.c++] << 16 | e[this.c++] << 8 | e[this.c++]) >>> 0 !== h(t) && i(Error("invalid adler-32 checksum")));
return t;
};
a("Zlib.Inflate", st);
a("Zlib.Inflate.BufferType", N);
N.ADAPTIVE = N.C;
N.BLOCK = N.D;
a("Zlib.Inflate.prototype.decompress", st.prototype.p);
o && new Uint16Array([ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ]);
o && new Uint16Array([ 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 258, 258 ]);
o && new Uint8Array([ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0 ]);
o && new Uint16Array([ 1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577 ]);
o && new Uint8Array([ 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13 ]);
var at, ot, ht = new (o ? Uint8Array : Array)(288);
at = 0;
for (ot = ht.length; at < ot; ++at) ht[at] = 143 >= at ? 8 : 255 >= at ? 9 : 279 >= at ? 7 : 8;
g(ht);
var lt, ct, ut = new (o ? Uint8Array : Array)(30);
lt = 0;
for (ct = ut.length; lt < ct; ++lt) ut[lt] = 5;
g(ut);
var _t = 8;
}).call(window);
var s = window.Zlib;
s.Deflate = s.Deflate;
s.Deflate.compress = s.Deflate.compress;
s.Inflate = s.Inflate;
s.Inflate.BufferType = s.Inflate.BufferType;
s.Inflate.prototype.decompress = s.Inflate.prototype.decompress;
n.exports = s;
}), {} ],
25: [ (function(t, e, i) {
var n = t("./platform/CCEnum"), r = (t("../../DebugInfos"), "https://github.com/cocos-creator/engine/blob/master/EngineErrorMap.md"), s = void 0;
cc._throw = function(t) {
var e = t.stack;
e ? cc.error(t + "\n" + e) : cc.error(t);
};
function a(t) {
return function() {
var e = arguments[0], i = t + " " + e + ", please go to " + r + "#" + e + " to see details.";
if (1 === arguments.length) return i;
if (2 === arguments.length) return i + " Arguments: " + arguments[1];
var n = cc.js.shiftArguments.apply(null, arguments);
return i + " Arguments: " + n.join(", ");
};
}
var o = a("Log");
cc.logID = function() {
cc.log(o.apply(null, arguments));
};
var h = a("Warning");
cc.warnID = function() {
cc.warn(h.apply(null, arguments));
};
var l = a("Error");
cc.errorID = function() {
cc.error(l.apply(null, arguments));
};
var c = a("Assert");
cc.assertID = function(t) {
"use strict";
t || cc.assert(!1, c.apply(null, cc.js.shiftArguments.apply(null, arguments)));
};
var u = n({
NONE: 0,
INFO: 1,
WARN: 2,
ERROR: 3,
INFO_FOR_WEB_PAGE: 4,
WARN_FOR_WEB_PAGE: 5,
ERROR_FOR_WEB_PAGE: 6
});
e.exports = cc.debug = {
DebugMode: u,
_resetDebugSetting: function(t) {
cc.log = cc.warn = cc.error = cc.assert = function() {};
if (t !== u.NONE) {
if (t > u.ERROR) (function() {
function e(t) {
if (cc.game.canvas) {
if (!s) {
var e = document.createElement("Div");
e.setAttribute("id", "logInfoDiv");
e.setAttribute("width", "200");
e.setAttribute("height", cc.game.canvas.height);
var i = e.style;
i.zIndex = "99999";
i.position = "absolute";
i.top = i.left = "0";
(s = document.createElement("textarea")).setAttribute("rows", "20");
s.setAttribute("cols", "30");
s.setAttribute("disabled", "true");
var n = s.style;
n.backgroundColor = "transparent";
n.borderBottom = "1px solid #cccccc";
n.borderTopWidth = n.borderLeftWidth = n.borderRightWidth = "0px";
n.borderTopStyle = n.borderLeftStyle = n.borderRightStyle = "none";
n.padding = "0px";
n.margin = 0;
e.appendChild(s);
cc.game.canvas.parentNode.appendChild(e);
}
s.value = s.value + t + "\r\n";
s.scrollTop = s.scrollHeight;
}
}
cc.error = function() {
e("ERROR :  " + cc.js.formatStr.apply(null, arguments));
};
cc.assert = function(t, i) {
"use strict";
!t && i && e("ASSERT: " + (i = cc.js.formatStr.apply(null, cc.js.shiftArguments.apply(null, arguments))));
};
t !== u.ERROR_FOR_WEB_PAGE && (cc.warn = function() {
e("WARN :  " + cc.js.formatStr.apply(null, arguments));
});
t === u.INFO_FOR_WEB_PAGE && (cc.log = cc.info = function() {
e(cc.js.formatStr.apply(null, arguments));
});
})(); else if (console && console.log.apply) {
console.error || (console.error = console.log);
console.warn || (console.warn = console.log);
console.error.bind ? cc.error = console.error.bind(console) : cc.error = console.error;
cc.assert = function(t, e) {
if (!t) {
e && (e = cc.js.formatStr.apply(null, cc.js.shiftArguments.apply(null, arguments)));
throw new Error(e);
}
};
}
t !== u.ERROR && (console.warn.bind ? cc.warn = console.warn.bind(console) : cc.warn = console.warn);
if (t === u.INFO) {
"JavaScriptCore" === scriptEngineType ? cc.log = function() {
return console.log.apply(console, arguments);
} : cc.log = console.log;
cc.info = "JavaScriptCore" === scriptEngineType ? function() {
(console.info || console.log).apply(console, arguments);
} : console.info || console.log;
}
}
},
getError: a("ERROR"),
isDisplayStats: function() {
return !!cc.profiler && cc.profiler.isShowingStats();
},
setDisplayStats: function(t) {
if (cc.profiler) {
t ? cc.profiler.showStats() : cc.profiler.hideStats();
cc.game.config[cc.game.CONFIG_KEY.showFPS] = !!t;
}
}
};
}), {
"../../DebugInfos": 1,
"./platform/CCEnum": 155
} ],
26: [ (function(i, n, r) {
var s = i("./event/event-target"), a = i("./load-pipeline/auto-release-utils"), o = i("./component-scheduler"), h = i("./node-activator"), l = (i("./event/event-listeners"), 
i("./platform/CCObject")), c = i("./renderer"), u = i("./event-manager");
cc.Director = function() {
s.call(this);
this.invalid = !1;
this._paused = !1;
this._purgeDirectorInNextLoop = !1;
this._winSizeInPoints = null;
this._loadingScene = "";
this._scene = null;
this._totalFrames = 0;
this._lastUpdate = performance.now();
this._deltaTime = 0;
this._scheduler = null;
this._compScheduler = null;
this._nodeActivator = null;
this._actionManager = null;
var t = this;
cc.game.on(cc.game.EVENT_SHOW, (function() {
t._lastUpdate = performance.now();
}));
};
cc.Director.prototype = {
constructor: cc.Director,
init: function() {
this._totalFrames = 0;
this._lastUpdate = performance.now();
this._paused = !1;
this._purgeDirectorInNextLoop = !1;
this._winSizeInPoints = cc.size(0, 0);
this._scheduler = new cc.Scheduler();
if (cc.ActionManager) {
this._actionManager = new cc.ActionManager();
this._scheduler.scheduleUpdate(this._actionManager, cc.Scheduler.PRIORITY_SYSTEM, !1);
} else this._actionManager = null;
cc.game.renderType === cc.game.RENDER_TYPE_WEBGL && (cc.dynamicAtlasManager.enabled = !0);
this.sharedInit();
return !0;
},
sharedInit: function() {
this._compScheduler = new o();
this._nodeActivator = new h();
u && u.setEnabled(!0);
if (cc.AnimationManager) {
this._animationManager = new cc.AnimationManager();
this._scheduler.scheduleUpdate(this._animationManager, cc.Scheduler.PRIORITY_SYSTEM, !1);
} else this._animationManager = null;
if (cc.CollisionManager) {
this._collisionManager = new cc.CollisionManager();
this._scheduler.scheduleUpdate(this._collisionManager, cc.Scheduler.PRIORITY_SYSTEM, !1);
} else this._collisionManager = null;
if (cc.PhysicsManager) {
this._physicsManager = new cc.PhysicsManager();
this._scheduler.scheduleUpdate(this._physicsManager, cc.Scheduler.PRIORITY_SYSTEM, !1);
} else this._physicsManager = null;
cc._widgetManager && cc._widgetManager.init(this);
cc.loader.init(this);
},
calculateDeltaTime: function() {
var t = performance.now();
this._deltaTime = (t - this._lastUpdate) / 1e3;
0;
this._lastUpdate = t;
},
convertToGL: function(t) {
var e = cc.game.container, i = cc.view, n = e.getBoundingClientRect(), r = n.left + window.pageXOffset - e.clientLeft, s = n.top + window.pageYOffset - e.clientTop, a = i._devicePixelRatio * (t.x - r), o = i._devicePixelRatio * (s + n.height - t.y);
return i._isRotated ? {
x: i._viewportRect.width - o,
y: a
} : {
x: a,
y: o
};
},
convertToUI: function(t) {
var e = cc.game.container, i = cc.view, n = e.getBoundingClientRect(), r = n.left + window.pageXOffset - e.clientLeft, s = n.top + window.pageYOffset - e.clientTop, a = {
x: 0,
y: 0
};
if (i._isRotated) {
a.x = r + t.y / i._devicePixelRatio;
a.y = s + n.height - (i._viewportRect.width - t.x) / i._devicePixelRatio;
} else {
a.x = r + t.x * i._devicePixelRatio;
a.y = s + n.height - t.y * i._devicePixelRatio;
}
return a;
},
end: function() {
this._purgeDirectorInNextLoop = !0;
},
getWinSize: function() {
return cc.size(this._winSizeInPoints);
},
getWinSizeInPixels: function() {
return cc.size(this._winSizeInPoints.width, this._winSizeInPoints.height);
},
pause: function() {
this._paused || (this._paused = !0);
},
purgeCachedData: function() {
cc.loader.releaseAll();
},
purgeDirector: function() {
this._scheduler.unscheduleAll();
this._compScheduler.unscheduleAll();
this._nodeActivator.reset();
u && u.setEnabled(!1);
cc.renderer.clear();
cc.isValid(this._scene) && this._scene.destroy();
this._scene = null;
this.stopAnimation();
cc.loader.releaseAll();
},
reset: function() {
this.purgeDirector();
u && u.setEnabled(!0);
this._actionManager && this._scheduler.scheduleUpdate(this._actionManager, cc.Scheduler.PRIORITY_SYSTEM, !1);
this._animationManager && this._scheduler.scheduleUpdate(this._animationManager, cc.Scheduler.PRIORITY_SYSTEM, !1);
this._collisionManager && this._scheduler.scheduleUpdate(this._collisionManager, cc.Scheduler.PRIORITY_SYSTEM, !1);
this._physicsManager && this._scheduler.scheduleUpdate(this._physicsManager, cc.Scheduler.PRIORITY_SYSTEM, !1);
this.startAnimation();
},
runSceneImmediate: function(t, e, i) {
cc.assertID(t instanceof cc.Scene, 1216);
t._load();
for (var n = cc.game, r = Object.keys(n._persistRootNodes).map((function(t) {
return n._persistRootNodes[t];
})), s = 0; s < r.length; s++) {
var o = r[s];
n._ignoreRemovePersistNode = o;
o.parent = null;
n._ignoreRemovePersistNode = null;
}
var h = this._scene, c = h && h.autoReleaseAssets && h.dependAssets;
a.autoRelease(c, t.dependAssets, r);
cc.isValid(h) && h.destroy();
this._scene = null;
l._deferredDestroy();
e && e();
this.emit(cc.Director.EVENT_BEFORE_SCENE_LAUNCH, t);
this._scene = t;
for (var u = 0; u < r.length; u++) {
var _ = r[u], m = t.getChildByUuid(_.uuid);
if (m) {
var f = m.getSiblingIndex();
m._destroyImmediate();
t.insertChild(_, f);
} else _.parent = t;
}
t._activate();
this.startAnimation();
i && i(null, t);
this.emit(cc.Director.EVENT_AFTER_SCENE_LAUNCH, t);
},
runScene: function(t, e, i) {
cc.assertID(t, 1205);
cc.assertID(t instanceof cc.Scene, 1216);
t._load();
this.once(cc.Director.EVENT_AFTER_UPDATE, (function() {
this.runSceneImmediate(t, e, i);
}), this);
},
_getSceneUuid: function(i) {
var n = cc.game._sceneInfos;
if ("string" === ("object" === (e = typeof i) ? t(i) : e)) {
i.endsWith(".fire") || (i += ".fire");
"/" === i[0] || i.startsWith("db://assets/") || (i = "/" + i);
for (var r = 0; r < n.length; r++) {
var s = n[r];
if (s.url.endsWith(i)) return s;
}
} else if ("number" === (e = typeof i, "object" === e ? t(i) : e)) {
if (0 <= i && i < n.length) return n[i];
cc.errorID(1206, i);
} else cc.errorID(1207, i);
return null;
},
loadScene: function(t, e, i) {
if (this._loadingScene) {
cc.errorID(1208, t, this._loadingScene);
return !1;
}
var n = this._getSceneUuid(t);
if (n) {
var r = n.uuid;
this.emit(cc.Director.EVENT_BEFORE_SCENE_LOADING, t);
this._loadingScene = t;
this._loadSceneByUuid(r, e, i);
return !0;
}
cc.errorID(1209, t);
return !1;
},
preloadScene: function(t, e, i) {
if (void 0 === i) {
i = e;
e = null;
}
var n = this._getSceneUuid(t);
if (n) {
this.emit(cc.Director.EVENT_BEFORE_SCENE_LOADING, t);
cc.loader.load({
uuid: n.uuid,
type: "uuid"
}, (function(t, i, n) {
e && e(t, i, n);
}), (function(e, n) {
e && cc.errorID(1210, t, e.message);
i && i(e, n);
}));
} else {
var r = 'Can not preload the scene "' + t + '" because it is not in the build settings.';
i(new Error(r));
cc.error("preloadScene: " + r);
}
},
_loadSceneByUuid: function(t, e, i, n) {
0;
console.time("LoadScene " + t);
cc.AssetLibrary.loadAsset(t, (function(n, r) {
console.timeEnd("LoadScene " + t);
var s = cc.director;
s._loadingScene = "";
if (n) {
n = "Failed to load scene: " + n;
cc.error(n);
} else {
if (r instanceof cc.SceneAsset) {
var a = r.scene;
a._id = r._uuid;
a._name = r._name;
s.runSceneImmediate(a, i, e);
return;
}
n = "The asset " + t + " is not a scene";
cc.error(n);
}
e && e(n);
}));
},
resume: function() {
if (this._paused) {
this._lastUpdate = performance.now();
this._lastUpdate || cc.logID(1200);
this._paused = !1;
this._deltaTime = 0;
}
},
setDepthTest: function(t) {
cc.Camera.main && (cc.Camera.main.depth = !!t);
},
setClearColor: function(t) {
cc.Camera.main && (cc.Camera.main.backgroundColor = t);
},
getRunningScene: function() {
return this._scene;
},
getScene: function() {
return this._scene;
},
getAnimationInterval: function() {
return 1e3 / cc.game.getFrameRate();
},
setAnimationInterval: function(t) {
cc.game.setFrameRate(Math.round(1e3 / t));
},
getDeltaTime: function() {
return this._deltaTime;
},
getTotalFrames: function() {
return this._totalFrames;
},
isPaused: function() {
return this._paused;
},
getScheduler: function() {
return this._scheduler;
},
setScheduler: function(t) {
this._scheduler !== t && (this._scheduler = t);
},
getActionManager: function() {
return this._actionManager;
},
setActionManager: function(t) {
if (this._actionManager !== t) {
this._actionManager && this._scheduler.unscheduleUpdate(this._actionManager);
this._actionManager = t;
this._scheduler.scheduleUpdate(this._actionManager, cc.Scheduler.PRIORITY_SYSTEM, !1);
}
},
getAnimationManager: function() {
return this._animationManager;
},
getCollisionManager: function() {
return this._collisionManager;
},
getPhysicsManager: function() {
return this._physicsManager;
},
startAnimation: function() {
this.invalid = !1;
this._lastUpdate = performance.now();
},
stopAnimation: function() {
this.invalid = !0;
},
mainLoop: function() {
if (this._purgeDirectorInNextLoop) {
this._purgeDirectorInNextLoop = !1;
this.purgeDirector();
} else if (!this.invalid) {
this.calculateDeltaTime();
if (!this._paused) {
this.emit(cc.Director.EVENT_BEFORE_UPDATE);
this._compScheduler.startPhase();
this._compScheduler.updatePhase(this._deltaTime);
this._scheduler.update(this._deltaTime);
this._compScheduler.lateUpdatePhase(this._deltaTime);
this.emit(cc.Director.EVENT_AFTER_UPDATE);
l._deferredDestroy();
}
this.emit(cc.Director.EVENT_BEFORE_DRAW);
c.render(this._scene);
this.emit(cc.Director.EVENT_AFTER_DRAW);
u.frameUpdateListeners();
this._totalFrames++;
}
},
__fastOn: function(t, e, i) {
this.add(t, e, i);
},
__fastOff: function(t, e, i) {
this.remove(t, e, i);
}
};
cc.js.addon(cc.Director.prototype, s.prototype);
cc.Director.EVENT_PROJECTION_CHANGED = "director_projection_changed";
cc.Director.EVENT_BEFORE_SCENE_LOADING = "director_before_scene_loading";
cc.Director.EVENT_BEFORE_SCENE_LAUNCH = "director_before_scene_launch";
cc.Director.EVENT_AFTER_SCENE_LAUNCH = "director_after_scene_launch";
cc.Director.EVENT_BEFORE_UPDATE = "director_before_update";
cc.Director.EVENT_AFTER_UPDATE = "director_after_update";
cc.Director.EVENT_BEFORE_VISIT = "director_before_draw";
cc.Director.EVENT_AFTER_VISIT = "director_before_draw";
cc.Director.EVENT_BEFORE_DRAW = "director_before_draw";
cc.Director.EVENT_AFTER_DRAW = "director_after_draw";
cc.Director.PROJECTION_2D = 0;
cc.Director.PROJECTION_3D = 1;
cc.Director.PROJECTION_CUSTOM = 3;
cc.Director.PROJECTION_DEFAULT = cc.Director.PROJECTION_2D;
}), {
"./component-scheduler": 59,
"./event-manager": 96,
"./event/event-listeners": 97,
"./event/event-target": 98,
"./load-pipeline/auto-release-utils": 111,
"./node-activator": 125,
"./platform/CCObject": 159,
"./renderer": 194
} ],
27: [ (function(i, n, r) {
var s, a = i("./event/event-target");
s = i("./platform/CCView");
i("../audio/CCAudioEngine");
var o = i("./CCDebug"), h = i("./renderer/index.js"), l = i("./platform/CCInputManager"), c = {
EVENT_HIDE: "game_on_hide",
EVENT_SHOW: "game_on_show",
EVENT_GAME_INITED: "game_inited",
EVENT_RENDERER_INITED: "renderer_inited",
RENDER_TYPE_CANVAS: 0,
RENDER_TYPE_WEBGL: 1,
RENDER_TYPE_OPENGL: 2,
_persistRootNodes: {},
_ignoreRemovePersistNode: null,
CONFIG_KEY: {
width: "width",
height: "height",
debugMode: "debugMode",
exposeClassName: "exposeClassName",
showFPS: "showFPS",
frameRate: "frameRate",
id: "id",
renderMode: "renderMode",
registerSystemEvent: "registerSystemEvent",
jsList: "jsList",
scenes: "scenes"
},
_paused: !0,
_configLoaded: !1,
_isCloning: !1,
_prepareCalled: !1,
_prepared: !1,
_rendererInitialized: !1,
_renderContext: null,
_intervalId: null,
_lastTime: null,
_frameTime: null,
_sceneInfos: [],
frame: null,
container: null,
canvas: null,
renderType: -1,
config: null,
onStart: null,
setFrameRate: function(t) {
this.config[this.CONFIG_KEY.frameRate] = t;
this._intervalId && window.cancelAnimFrame(this._intervalId);
this._intervalId = 0;
this._paused = !0;
this._setAnimFrame();
this._runMainLoop();
},
getFrameRate: function() {
return this.config[this.CONFIG_KEY.frameRate];
},
step: function() {
cc.director.mainLoop();
},
pause: function() {
if (!this._paused) {
this._paused = !0;
cc.audioEngine && cc.audioEngine._break();
this._intervalId && window.cancelAnimFrame(this._intervalId);
this._intervalId = 0;
}
},
resume: function() {
if (this._paused) {
this._paused = !1;
cc.audioEngine && cc.audioEngine._restore();
this._runMainLoop();
}
},
isPaused: function() {
return this._paused;
},
restart: function() {
cc.director.once(cc.Director.EVENT_AFTER_DRAW, (function() {
for (var t in c._persistRootNodes) c.removePersistRootNode(c._persistRootNodes[t]);
cc.director.getScene().destroy();
cc.Object._deferredDestroy();
cc.director.purgeDirector();
cc.audioEngine && cc.audioEngine.uncacheAll();
cc.director.reset();
c.onStart();
}));
},
end: function() {
close();
},
_initEngine: function() {
if (!cc.director) {
cc.director = new cc.Director();
this._initRenderer(this.config[this.CONFIG_KEY.width], this.config[this.CONFIG_KEY.height]);
cc.view = s ? s._getInstance() : null;
cc.director.init();
cc.winSize = cc.director.getWinSize();
this._initEvents();
}
},
prepare: function(t) {
if (this._prepared) t && t(); else {
this._initEngine();
console.log("Cocos Creator v" + cc.ENGINE_VERSION);
this._setAnimFrame();
this._runMainLoop();
var e = this.config[this.CONFIG_KEY.jsList];
if (e && e.length > 0) {
var i = this;
cc.loader.load(e, (function(e) {
if (e) throw new Error(JSON.stringify(e));
i._prepared = !0;
t && t();
i.emit(i.EVENT_GAME_INITED);
}));
} else {
t && t();
this.emit(this.EVENT_GAME_INITED);
}
}
},
run: function(t, e) {
this._initConfig(t);
this.onStart = e;
this.prepare(c.onStart && c.onStart.bind(c));
},
addPersistRootNode: function(t) {
if (cc.Node.isNode(t) && t.uuid) {
var e = t.uuid;
if (!this._persistRootNodes[e]) {
var i = cc.director._scene;
if (cc.isValid(i)) if (t.parent) {
if (!(t.parent instanceof cc.Scene)) {
cc.warnID(3801);
return;
}
if (t.parent !== i) {
cc.warnID(3802);
return;
}
} else t.parent = i;
this._persistRootNodes[e] = t;
t._persistNode = !0;
}
} else cc.warnID(3800);
},
removePersistRootNode: function(t) {
if (t !== this._ignoreRemovePersistNode) {
var e = t.uuid || "";
if (t === this._persistRootNodes[e]) {
delete this._persistRootNodes[e];
t._persistNode = !1;
}
}
},
isPersistRootNode: function(t) {
return t._persistNode;
},
_setAnimFrame: function() {
this._lastTime = new Date();
var t = c.config[c.CONFIG_KEY.frameRate];
this._frameTime = 1e3 / t;
jsb.setPreferredFramesPerSecond(t);
window.requestAnimFrame = window.requestAnimationFrame;
window.cancelAnimFrame = window.cancelAnimationFrame;
},
_stTime: function(t) {
var e = new Date().getTime(), i = Math.max(0, c._frameTime - (e - c._lastTime)), n = window.setTimeout((function() {
t();
}), i);
c._lastTime = e + i;
return n;
},
_ctTime: function(t) {
window.clearTimeout(t);
},
_runMainLoop: function() {
var t, e = this, i = e.config, n = e.CONFIG_KEY, r = cc.director;
i[n.frameRate];
o.setDisplayStats(i[n.showFPS]);
t = function() {
if (!e._paused) {
e._intervalId = window.requestAnimFrame(t);
0;
r.mainLoop();
}
};
e._intervalId = window.requestAnimFrame(t);
e._paused = !1;
},
_initConfig: function(i) {
var n = this.CONFIG_KEY;
"number" !== ("object" === (e = typeof i[n.debugMode]) ? t(i[n.debugMode]) : e) && (i[n.debugMode] = 0);
i[n.exposeClassName] = !!i[n.exposeClassName];
"number" !== ("object" === (e = typeof i[n.frameRate]) ? t(i[n.frameRate]) : e) && (i[n.frameRate] = 60);
var r = i[n.renderMode];
("number" !== ("object" === (e = typeof r) ? t(r) : e) || r > 2 || r < 0) && (i[n.renderMode] = 0);
"boolean" !== ("object" === (e = typeof i[n.registerSystemEvent]) ? t(i[n.registerSystemEvent]) : e) && (i[n.registerSystemEvent] = !0);
i[n.showFPS] = !(n.showFPS in i) || !!i[n.showFPS];
this._sceneInfos = i[n.scenes] || [];
this.collisionMatrix = i.collisionMatrix || [];
this.groupList = i.groupList || [];
o._resetDebugSetting(i[n.debugMode]);
this.config = i;
this._configLoaded = !0;
},
_determineRenderType: function() {
var t = this.CONFIG_KEY, e = this.config, i = parseInt(e[t.renderMode]) || 0;
this.renderType = this.RENDER_TYPE_CANVAS;
var n = !1;
if (0 === i) {
if (cc.sys.capabilities.opengl) {
this.renderType = this.RENDER_TYPE_WEBGL;
n = !0;
} else if (cc.sys.capabilities.canvas) {
this.renderType = this.RENDER_TYPE_CANVAS;
n = !0;
}
} else if (1 === i && cc.sys.capabilities.canvas) {
this.renderType = this.RENDER_TYPE_CANVAS;
n = !0;
} else if (2 === i && cc.sys.capabilities.opengl) {
this.renderType = this.RENDER_TYPE_WEBGL;
n = !0;
}
if (!n) throw new Error(o.getError(3820, i));
},
_initRenderer: function(t, e) {
if (!this._rendererInitialized) {
this.config[c.CONFIG_KEY.id], window;
var i, n, r = cc.sys.platform === cc.sys.WECHAT_GAME;
cc.sys.platform, cc.sys.QQ_PLAY;
this.container = n = document.createElement("DIV");
this.frame = n.parentNode === document.body ? document.documentElement : n.parentNode;
if (cc.sys.browserType === cc.sys.BROWSER_TYPE_WECHAT_GAME_SUB) i = wx.getSharedCanvas(); else {
i = window.__cccanvas;
}
this.canvas = i;
this._determineRenderType();
if (this.renderType === this.RENDER_TYPE_WEBGL) {
var s = {
stencil: !0,
antialias: cc.macro.ENABLE_WEBGL_ANTIALIAS,
alpha: cc.macro.ENABLE_TRANSPARENT_CANVAS
};
r && (s.preserveDrawingBuffer = !0);
h.initWebGL(i, s);
this._renderContext = h.device._gl;
}
if (!this._renderContext) {
this.renderType = this.RENDER_TYPE_CANVAS;
h.initCanvas(i);
this._renderContext = h.device._ctx;
}
cc.renderer = h;
this.canvas.oncontextmenu = function() {
if (!cc._isContextMenuEnable) return !1;
};
this.emit(this.EVENT_RENDERER_INITED);
this._rendererInitialized = !0;
}
},
_initEvents: function() {
var i, n = window;
this.config[this.CONFIG_KEY.registerSystemEvent] && l.registerSystemEvent(this.canvas);
"undefined" !== ("object" === (e = typeof document.hidden) ? t(document.hidden) : e) ? i = "hidden" : "undefined" !== ("object" === (e = typeof document.mozHidden) ? t(document.mozHidden) : e) ? i = "mozHidden" : "undefined" !== ("object" === (e = typeof document.msHidden) ? t(document.msHidden) : e) ? i = "msHidden" : "undefined" !== ("object" === (e = typeof document.webkitHidden) ? t(document.webkitHidden) : e) && (i = "webkitHidden");
var r = !1;
function s() {
if (!r) {
r = !0;
c.emit(c.EVENT_HIDE);
}
}
function a() {
if (r) {
r = !1;
c.emit(c.EVENT_SHOW);
}
}
if (i) for (var o = [ "visibilitychange", "mozvisibilitychange", "msvisibilitychange", "webkitvisibilitychange", "qbrowserVisibilityChange" ], h = 0; h < o.length; h++) document.addEventListener(o[h], (function(t) {
var e = document[i];
(e = e || t.hidden) ? s() : a();
})); else {
n.addEventListener("blur", s);
n.addEventListener("focus", a);
}
navigator.userAgent.indexOf("MicroMessenger") > -1 && (n.onfocus = a);
0;
if ("onpageshow" in window && "onpagehide" in window) {
n.addEventListener("pagehide", s);
n.addEventListener("pageshow", a);
document.addEventListener("pagehide", s);
document.addEventListener("pageshow", a);
}
this.on(c.EVENT_HIDE, (function() {
c.pause();
}));
this.on(c.EVENT_SHOW, (function() {
c.resume();
}));
}
};
a.call(c);
cc.js.addon(c, a.prototype);
cc.game = n.exports = c;
}), {
"../audio/CCAudioEngine": 20,
"./CCDebug": 25,
"./event/event-target": 98,
"./platform/BKInputManager": 151,
"./platform/CCInputManager": 157,
"./platform/CCView": 163,
"./renderer/index.js": 194
} ],
28: [ (function(i, n, r) {
"use strict";
var s = i("./utils/base-node"), a = i("./utils/prefab-helper"), o = i("./utils/math-pools"), h = i("./renderer/render-engine"), l = i("./utils/affine-transform"), c = h.math, u = i("./event-manager"), _ = i("./platform/CCMacro"), m = i("./utils/misc"), f = i("./platform/js"), d = (i("./event/event"), 
i("./event/event-target")), p = i("./renderer/render-flow"), g = cc.Object.Flags.Destroying, y = Math.PI / 180, v = !!cc.ActionManager, x = function() {}, A = c.mat4.create(), b = c.vec3.create(), T = c.quat.create(), C = 1, w = new Array(16);
w.length = 0;
var S = cc.Enum({
DEBUG: 31
}), E = cc.Enum({
POSITION: 1,
SCALE: 2,
ROTATION: 4,
SKEW: 8,
RT: 7,
ALL: 65535
}), D = cc.Enum({
TOUCH_START: "touchstart",
TOUCH_MOVE: "touchmove",
TOUCH_END: "touchend",
TOUCH_CANCEL: "touchcancel",
MOUSE_DOWN: "mousedown",
MOUSE_MOVE: "mousemove",
MOUSE_ENTER: "mouseenter",
MOUSE_LEAVE: "mouseleave",
MOUSE_UP: "mouseup",
MOUSE_WHEEL: "mousewheel",
POSITION_CHANGED: "position-changed",
ROTATION_CHANGED: "rotation-changed",
SCALE_CHANGED: "scale-changed",
SIZE_CHANGED: "size-changed",
ANCHOR_CHANGED: "anchor-changed",
CHILD_ADDED: "child-added",
CHILD_REMOVED: "child-removed",
CHILD_REORDER: "child-reorder",
GROUP_CHANGED: "group-changed"
}), M = [ D.TOUCH_START, D.TOUCH_MOVE, D.TOUCH_END, D.TOUCH_CANCEL ], I = [ D.MOUSE_DOWN, D.MOUSE_ENTER, D.MOUSE_MOVE, D.MOUSE_LEAVE, D.MOUSE_UP, D.MOUSE_WHEEL ], P = null, B = function(t, e) {
var i = t.getLocation(), n = this.owner;
if (n._hitTest(i, this)) {
e.type = D.TOUCH_START;
e.touch = t;
e.bubbles = !0;
n.dispatchEvent(e);
return !0;
}
return !1;
}, R = function(t, e) {
var i = this.owner;
e.type = D.TOUCH_MOVE;
e.touch = t;
e.bubbles = !0;
i.dispatchEvent(e);
}, L = function(t, e) {
var i = t.getLocation(), n = this.owner;
n._hitTest(i, this) ? e.type = D.TOUCH_END : e.type = D.TOUCH_CANCEL;
e.touch = t;
e.bubbles = !0;
n.dispatchEvent(e);
}, O = function(t, e) {
t.getLocation();
var i = this.owner;
e.type = D.TOUCH_CANCEL;
e.touch = t;
e.bubbles = !0;
i.dispatchEvent(e);
}, F = function(t) {
var e = t.getLocation(), i = this.owner;
if (i._hitTest(e, this)) {
t.type = D.MOUSE_DOWN;
t.bubbles = !0;
i.dispatchEvent(t);
}
}, N = function(t) {
var e = t.getLocation(), i = this.owner;
if (i._hitTest(e, this)) {
if (!this._previousIn) {
if (P && P._mouseListener) {
t.type = D.MOUSE_LEAVE;
P.dispatchEvent(t);
P._mouseListener._previousIn = !1;
}
P = this.owner;
t.type = D.MOUSE_ENTER;
i.dispatchEvent(t);
this._previousIn = !0;
}
t.type = D.MOUSE_MOVE;
t.bubbles = !0;
i.dispatchEvent(t);
} else {
if (!this._previousIn) return;
t.type = D.MOUSE_LEAVE;
i.dispatchEvent(t);
this._previousIn = !1;
P = null;
}
t.stopPropagation();
}, k = function(t) {
var e = t.getLocation(), i = this.owner;
if (i._hitTest(e, this)) {
t.type = D.MOUSE_UP;
t.bubbles = !0;
i.dispatchEvent(t);
t.stopPropagation();
}
}, z = function(t) {
var e = t.getLocation(), i = this.owner;
if (i._hitTest(e, this)) {
t.type = D.MOUSE_WHEEL;
t.bubbles = !0;
i.dispatchEvent(t);
t.stopPropagation();
}
};
function G(t) {
var e = cc.Mask;
if (e) for (var i = 0, n = t; n && cc.Node.isNode(n); n = n._parent, ++i) if (n.getComponent(e)) return {
index: i,
node: n
};
return null;
}
function U(t, e) {
if (!(t._objFlags & g)) {
var i = 0;
if (t._bubblingListeners) for (;i < e.length; ++i) if (t._bubblingListeners.hasEventListener(e[i])) return !0;
if (t._capturingListeners) for (;i < e.length; ++i) if (t._capturingListeners.hasEventListener(e[i])) return !0;
return !1;
}
return !0;
}
var V = cc.Class({
name: "cc.Node",
extends: s,
properties: {
_opacity: 255,
_color: cc.Color.WHITE,
_contentSize: cc.Size,
_anchorPoint: cc.v2(.5, .5),
_position: cc.Vec3,
_scaleX: {
default: void 0,
type: cc.Float
},
_scaleY: {
default: void 0,
type: cc.Float
},
_scale: cc.Vec3,
_rotationX: 0,
_rotationY: 0,
_quat: cc.Quat,
_skewX: 0,
_skewY: 0,
_localZOrder: 0,
groupIndex: {
default: 0,
type: cc.Integer
},
group: {
get: function() {
return cc.game.groupList[this.groupIndex] || "";
},
set: function(t) {
this.groupIndex = cc.game.groupList.indexOf(t);
this.emit(D.GROUP_CHANGED, this);
}
},
x: {
get: function() {
return this._position.x;
},
set: function(t) {
var e = this._position;
if (t !== e.x) {
e.x = t;
this.setLocalDirty(E.POSITION);
this._renderFlag |= p.FLAG_WORLD_TRANSFORM;
1 & this._eventMask && this.emit(D.POSITION_CHANGED);
}
}
},
y: {
get: function() {
return this._position.y;
},
set: function(t) {
var e = this._position;
if (t !== e.y) {
e.y = t;
this.setLocalDirty(E.POSITION);
this._renderFlag |= p.FLAG_WORLD_TRANSFORM;
1 & this._eventMask && this.emit(D.POSITION_CHANGED);
}
}
},
z: {
get: function() {
return this._position.z;
},
set: function(t) {
var e = this._position;
if (t !== e.z) {
e.z = t;
this.setLocalDirty(E.POSITION);
this._renderFlag |= p.FLAG_WORLD_TRANSFORM;
1 & this._eventMask && this.emit(D.POSITION_CHANGED);
}
}
},
rotation: {
get: function() {
this._rotationX !== this._rotationY && cc.logID(1602);
return this._rotationX;
},
set: function(t) {
if (this._rotationX !== t || this._rotationY !== t) {
this._rotationX = this._rotationY = t;
c.quat.fromEuler(this._quat, 0, 0, -t);
this.setLocalDirty(E.ROTATION);
this._renderFlag |= p.FLAG_TRANSFORM;
4 & this._eventMask && this.emit(D.ROTATION_CHANGED);
}
}
},
rotationX: {
get: function() {
return this._rotationX;
},
set: function(t) {
if (this._rotationX !== t) {
this._rotationX = t;
this._rotationX === this._rotationY ? c.quat.fromEuler(this._quat, 0, 0, -t) : c.quat.fromEuler(this._quat, t, this._rotationY, 0);
this.setLocalDirty(E.ROTATION);
this._renderFlag |= p.FLAG_TRANSFORM;
4 & this._eventMask && this.emit(D.ROTATION_CHANGED);
}
}
},
rotationY: {
get: function() {
return this._rotationY;
},
set: function(t) {
if (this._rotationY !== t) {
this._rotationY = t;
this._rotationX === this._rotationY ? c.quat.fromEuler(this._quat, 0, 0, -t) : c.quat.fromEuler(this._quat, this._rotationX, t, 0);
this.setLocalDirty(E.ROTATION);
this._renderFlag |= p.FLAG_TRANSFORM;
4 & this._eventMask && this.emit(D.ROTATION_CHANGED);
}
}
},
scaleX: {
get: function() {
return this._scale.x;
},
set: function(t) {
if (this._scale.x !== t) {
this._scale.x = t;
this.setLocalDirty(E.SCALE);
this._renderFlag |= p.FLAG_TRANSFORM;
2 & this._eventMask && this.emit(D.SCALE_CHANGED);
}
}
},
scaleY: {
get: function() {
return this._scale.y;
},
set: function(t) {
if (this._scale.y !== t) {
this._scale.y = t;
this.setLocalDirty(E.SCALE);
this._renderFlag |= p.FLAG_TRANSFORM;
2 & this._eventMask && this.emit(D.SCALE_CHANGED);
}
}
},
skewX: {
get: function() {
return this._skewX;
},
set: function(t) {
this._skewX = t;
this.setLocalDirty(E.SKEW);
this._renderFlag |= p.FLAG_TRANSFORM;
}
},
skewY: {
get: function() {
return this._skewY;
},
set: function(t) {
this._skewY = t;
this.setLocalDirty(E.SKEW);
this._renderFlag |= p.FLAG_TRANSFORM;
}
},
opacity: {
get: function() {
return this._opacity;
},
set: function(t) {
if (this._opacity !== t) {
this._opacity = t;
this._renderFlag |= p.FLAG_OPACITY | p.FLAG_COLOR;
}
},
range: [ 0, 255 ]
},
color: {
get: function() {
return this._color.clone();
},
set: function(t) {
if (!this._color.equals(t)) {
this._color.fromColor(t);
0;
this._renderComponent && (this._renderFlag |= p.FLAG_COLOR);
}
}
},
anchorX: {
get: function() {
return this._anchorPoint.x;
},
set: function(t) {
var e = this._anchorPoint;
if (e.x !== t) {
e.x = t;
16 & this._eventMask && this.emit(D.ANCHOR_CHANGED);
}
}
},
anchorY: {
get: function() {
return this._anchorPoint.y;
},
set: function(t) {
var e = this._anchorPoint;
if (e.y !== t) {
e.y = t;
16 & this._eventMask && this.emit(D.ANCHOR_CHANGED);
}
}
},
width: {
get: function() {
return this._contentSize.width;
},
set: function(t) {
if (t !== this._contentSize.width) {
this._contentSize.width = t;
8 & this._eventMask && this.emit(D.SIZE_CHANGED);
}
}
},
height: {
get: function() {
return this._contentSize.height;
},
set: function(t) {
if (t !== this._contentSize.height) {
this._contentSize.height = t;
8 & this._eventMask && this.emit(D.SIZE_CHANGED);
}
}
},
zIndex: {
get: function() {
return (4294901760 & this._localZOrder) >> 16;
},
set: function(t) {
if (t > _.MAX_ZINDEX) {
cc.warnID(1636);
t = _.MAX_ZINDEX;
} else if (t < _.MIN_ZINDEX) {
cc.warnID(1637);
t = _.MIN_ZINDEX;
}
if ((4294901760 & this._localZOrder) >> 16 !== t) {
this._localZOrder = 65535 & this._localZOrder | t << 16;
this._parent && this._parent._delaySort();
}
}
}
},
ctor: function(t) {
this._reorderChildDirty = !1;
this._widget = null;
this._renderComponent = null;
this._capturingListeners = null;
this._bubblingListeners = null;
this._touchListener = null;
this._mouseListener = null;
this._scale.x = 1;
this._scale.y = 1;
this._scale.z = 1;
this._matrix = o.mat4.get();
this._worldMatrix = o.mat4.get();
this._localMatDirty = E.ALL;
this._worldMatDirty = !0;
this._eventMask = 0;
this._cullingMask = 1 << this.groupIndex;
},
statics: {
EventType: D,
_LocalDirtyFlag: E,
isNode: function(t) {
return t instanceof V && (t.constructor === V || !(t instanceof cc.Scene));
},
BuiltinGroupIndex: S
},
_onSiblingIndexChanged: function(t) {
for (var e, i = this._parent, n = i._children, r = 0, s = n.length; r < s; r++) {
(e = n[r])._updateOrderOfArrival();
u._setDirtyForNode(e);
}
i._delaySort();
},
_onPreDestroy: function() {
this._onPreDestroyBase();
v && cc.director.getActionManager().removeAllActionsFromTarget(this);
P === this && (P = null);
if (this._touchListener || this._mouseListener) {
u.removeListeners(this);
if (this._touchListener) {
this._touchListener.owner = null;
this._touchListener.mask = null;
this._touchListener = null;
}
if (this._mouseListener) {
this._mouseListener.owner = null;
this._mouseListener.mask = null;
this._mouseListener = null;
}
}
o.mat4.put(this._matrix);
o.mat4.put(this._worldMatrix);
this._matrix = this._worldMatrix = null;
this._reorderChildDirty && cc.director.__fastOff(cc.Director.EVENT_AFTER_UPDATE, this.sortAllChildren, this);
},
_onPostActivated: function(t) {
var e = v ? cc.director.getActionManager() : null;
if (t) {
this._renderFlag |= p.FLAG_WORLD_TRANSFORM;
e && e.resumeTarget(this);
u.resumeTarget(this);
if (this._touchListener) {
var i = this._touchListener.mask = G(this);
this._mouseListener && (this._mouseListener.mask = i);
} else this._mouseListener && (this._mouseListener.mask = G(this));
} else {
e && e.pauseTarget(this);
u.pauseTarget(this);
}
},
_onHierarchyChanged: function(t) {
this._updateOrderOfArrival();
this._parent && this._parent._delaySort();
this._renderFlag |= p.FLAG_WORLD_TRANSFORM;
this._onHierarchyChangedBase(t);
cc._widgetManager._nodesOrderDirty = !0;
},
_upgrade_1x_to_2x: function() {
if (void 0 !== this._scaleX) {
this._scale.x = this._scaleX;
this._scaleX = void 0;
}
if (void 0 !== this._scaleY) {
this._scale.y = this._scaleY;
this._scaleY = void 0;
}
if (0 !== this._rotationX || 0 !== this._rotationY) this._rotationX === this._rotationY ? c.quat.fromEuler(this._quat, 0, 0, -this._rotationX) : c.quat.fromEuler(this._quat, this._rotationX, this._rotationY, 0); else {
var t = this._quat.getRoll(), e = this._quat.getPitch();
if (0 === t && 0 === e) this._rotationX = this._rotationY = -this._quat.getYaw(); else {
this._rotationX = t;
this._rotationY = e;
}
}
if (this._color.a < 255 && 255 === this._opacity) {
this._opacity = this._color.a;
this._color.a = 255;
}
},
_onBatchCreated: function() {
this._upgrade_1x_to_2x();
this._updateOrderOfArrival();
var t = this._prefab;
if (t && t.sync && t.root === this) {
0;
a.syncWithPrefab(this);
}
if (!this._activeInHierarchy) {
v && cc.director.getActionManager().pauseTarget(this);
u.pauseTarget(this);
}
for (var e = this._children, i = 0, n = e.length; i < n; i++) e[i]._onBatchCreated();
e.length > 0 && (this._renderFlag |= p.FLAG_CHILDREN);
},
_onBatchRestored: function() {
this._upgrade_1x_to_2x();
if (!this._activeInHierarchy) {
v && cc.director.getActionManager().pauseTarget(this);
u.pauseTarget(this);
}
for (var t = this._children, e = 0, i = t.length; e < i; e++) t[e]._onBatchRestored();
t.length > 0 && (this._renderFlag |= p.FLAG_CHILDREN);
},
on: function(t, e, i, n) {
var r = !1, s = !1;
if (-1 !== M.indexOf(t)) {
if (!this._touchListener) {
this._touchListener = cc.EventListener.create({
event: cc.EventListener.TOUCH_ONE_BY_ONE,
swallowTouches: !0,
owner: this,
mask: G(this),
onTouchBegan: B,
onTouchMoved: R,
onTouchEnded: L,
onTouchCancelled: O
});
u.addListener(this._touchListener, this);
r = !0;
}
s = !0;
} else if (-1 !== I.indexOf(t)) {
if (!this._mouseListener) {
this._mouseListener = cc.EventListener.create({
event: cc.EventListener.MOUSE,
_previousIn: !1,
owner: this,
mask: G(this),
onMouseDown: F,
onMouseMove: N,
onMouseUp: k,
onMouseScroll: z
});
u.addListener(this._mouseListener, this);
r = !0;
}
s = !0;
}
r && !this._activeInHierarchy && cc.director.getScheduler().schedule((function() {
this._activeInHierarchy || u.pauseTarget(this);
}), this, 0, 0, 0, !1);
if (s) return this._onDispatch(t, e, i, n);
switch (t) {
case D.POSITION_CHANGED:
this._eventMask |= 1;
break;

case D.SCALE_CHANGED:
this._eventMask |= 2;
break;

case D.ROTATION_CHANGED:
this._eventMask |= 4;
break;

case D.SIZE_CHANGED:
this._eventMask |= 8;
break;

case D.ANCHOR_CHANGED:
this._eventMask |= 16;
}
this._bubblingListeners || (this._bubblingListeners = new d());
return this._bubblingListeners.on(t, e, i);
},
_onDispatch: function(i, n, r, s) {
if ("boolean" === ("object" === (e = typeof r) ? t(r) : e)) {
s = r;
r = void 0;
} else s = !!s;
if (n) {
var a = null;
if (!(a = s ? this._capturingListeners = this._capturingListeners || new d() : this._bubblingListeners = this._bubblingListeners || new d()).hasEventListener(i, n, r)) {
a.add(i, n, r);
r && r.__eventTargets && r.__eventTargets.push(this);
}
return n;
}
cc.errorID(6800);
},
_onceDispatch: function(t, e, i, n) {
var r = "__ONCE_FLAG:" + t, s = n ? this._capturingListeners : this._bubblingListeners;
if (!(s && s.hasEventListener(r, e, i))) {
var a = this, o = function(h) {
a._offDispatch(t, o, i, n);
s.remove(r, e, i);
e.call(this, h);
};
this._onDispatch(t, o, i, n);
s || (s = n ? this._capturingListeners : this._bubblingListeners);
s.add(r, e, i);
}
},
off: function(t, e, i, n) {
var r = -1 !== M.indexOf(t), s = !r && -1 !== I.indexOf(t);
if (r || s) {
this._offDispatch(t, e, i, n);
if (r) {
if (this._touchListener && !U(this, M)) {
u.removeListener(this._touchListener);
this._touchListener = null;
}
} else if (s && this._mouseListener && !U(this, I)) {
u.removeListener(this._mouseListener);
this._mouseListener = null;
}
} else if (this._bubblingListeners) {
this._bubblingListeners.off(t, e, i);
if (!this._bubblingListeners.hasEventListener(t)) switch (t) {
case D.POSITION_CHANGED:
this._eventMask &= -2;
break;

case D.SCALE_CHANGED:
this._eventMask &= -3;
break;

case D.ROTATION_CHANGED:
this._eventMask &= -5;
break;

case D.SIZE_CHANGED:
this._eventMask &= -9;
break;

case D.ANCHOR_CHANGED:
this._eventMask &= -17;
}
}
},
_offDispatch: function(i, n, r, s) {
if ("boolean" === ("object" === (e = typeof r) ? t(r) : e)) {
s = r;
r = void 0;
} else s = !!s;
if (n) {
var a = s ? this._capturingListeners : this._bubblingListeners;
if (a) {
a.remove(i, n, r);
r && r.__eventTargets && f.array.fastRemove(r.__eventTargets, this);
}
} else {
this._capturingListeners && this._capturingListeners.removeAll(i);
this._bubblingListeners && this._bubblingListeners.removeAll(i);
}
},
targetOff: function(t) {
var e = this._bubblingListeners;
if (e) {
e.targetOff(t);
1 & this._eventMask && !e.hasEventListener(D.POSITION_CHANGED) && (this._eventMask &= -2);
2 & this._eventMask && !e.hasEventListener(D.SCALE_CHANGED) && (this._eventMask &= -3);
4 & this._eventMask && !e.hasEventListener(D.ROTATION_CHANGED) && (this._eventMask &= -5);
8 & this._eventMask && !e.hasEventListener(D.SIZE_CHANGED) && (this._eventMask &= -9);
16 & this._eventMask && !e.hasEventListener(D.ANCHOR_CHANGED) && (this._eventMask &= -17);
}
this._capturingListeners && this._capturingListeners.targetOff(t);
if (this._touchListener && !U(this, M)) {
u.removeListener(this._touchListener);
this._touchListener = null;
}
if (this._mouseListener && !U(this, I)) {
u.removeListener(this._mouseListener);
this._mouseListener = null;
}
},
hasEventListener: function(t) {
var e = !1;
this._bubblingListeners && (e = this._bubblingListeners.hasEventListener(t));
!e && this._capturingListeners && (e = this._capturingListeners.hasEventListener(t));
return e;
},
emit: function(t, e, i, n, r, s) {
this._bubblingListeners && this._bubblingListeners.emit(t, e, i, n, r, s);
},
dispatchEvent: function(t) {
(function(t, e) {
var i, n;
e.target = t;
w.length = 0;
t._getCapturingTargets(e.type, w);
e.eventPhase = 1;
for (n = w.length - 1; n >= 0; --n) if ((i = w[n])._capturingListeners) {
e.currentTarget = i;
i._capturingListeners.emit(e.type, e, w);
if (e._propagationStopped) {
w.length = 0;
return;
}
}
w.length = 0;
e.eventPhase = 2;
e.currentTarget = t;
t._capturingListeners && t._capturingListeners.emit(e.type, e);
!e._propagationImmediateStopped && t._bubblingListeners && t._bubblingListeners.emit(e.type, e);
if (!e._propagationStopped && e.bubbles) {
t._getBubblingTargets(e.type, w);
e.eventPhase = 3;
for (n = 0; n < w.length; ++n) if ((i = w[n])._bubblingListeners) {
e.currentTarget = i;
i._bubblingListeners.emit(e.type, e);
if (e._propagationStopped) {
w.length = 0;
return;
}
}
}
w.length = 0;
})(this, t);
w.length = 0;
},
pauseSystemEvents: function(t) {
u.pauseTarget(this, t);
},
resumeSystemEvents: function(t) {
u.resumeTarget(this, t);
},
_hitTest: function(t, e) {
var i, n = this.width, r = this.height, s = cc.Camera.findCamera(this);
i = s ? s.getCameraToWorldPoint(t) : cc.v2(t);
this._updateWorldMatrix();
c.mat4.invert(A, this._worldMatrix);
c.vec2.transformMat4(i, i, A);
i.x += this._anchorPoint.x * this._contentSize.width;
i.y += this._anchorPoint.y * this._contentSize.height;
if (i.x >= 0 && i.y >= 0 && i.x <= n && i.y <= r) {
if (e && e.mask) {
for (var a = e.mask, o = this, h = 0; o && h < a.index; ++h, o = o.parent) ;
if (o === a.node) {
var l = o.getComponent(cc.Mask);
return !l || !l.enabledInHierarchy || l._hitTest(t);
}
e.mask = null;
return !0;
}
return !0;
}
return !1;
},
_getCapturingTargets: function(t, e) {
for (var i = this.parent; i; ) {
i._capturingListeners && i._capturingListeners.hasEventListener(t) && e.push(i);
i = i.parent;
}
},
_getBubblingTargets: function(t, e) {
for (var i = this.parent; i; ) {
i._bubblingListeners && i._bubblingListeners.hasEventListener(t) && e.push(i);
i = i.parent;
}
},
runAction: v ? function(t) {
if (this.active) {
cc.assertID(t, 1618);
cc.director.getActionManager().addAction(t, this, !1);
return t;
}
} : x,
pauseAllActions: v ? function() {
cc.director.getActionManager().pauseTarget(this);
} : x,
resumeAllActions: v ? function() {
cc.director.getActionManager().resumeTarget(this);
} : x,
stopAllActions: v ? function() {
cc.director.getActionManager().removeAllActionsFromTarget(this);
} : x,
stopAction: v ? function(t) {
cc.director.getActionManager().removeAction(t);
} : x,
stopActionByTag: v ? function(t) {
t !== cc.Action.TAG_INVALID ? cc.director.getActionManager().removeActionByTag(t, this) : cc.logID(1612);
} : x,
getActionByTag: v ? function(t) {
if (t === cc.Action.TAG_INVALID) {
cc.logID(1613);
return null;
}
return cc.director.getActionManager().getActionByTag(t, this);
} : function() {
return null;
},
getNumberOfRunningActions: v ? function() {
return cc.director.getActionManager().getNumberOfRunningActionsInTarget(this);
} : function() {
return 0;
},
getPosition: function() {
return new cc.Vec2(this._position);
},
setPosition: function(t, e) {
var i;
if (void 0 === e) {
i = t.x;
e = t.y;
} else i = t;
var n = this._position;
if (n.x !== i || n.y !== e) {
n.x = i;
n.y = e;
this.setLocalDirty(E.POSITION);
this._renderFlag |= p.FLAG_WORLD_TRANSFORM;
1 & this._eventMask && this.emit(D.POSITION_CHANGED);
}
},
getScale: function() {
this._scale.x !== this._scale.y && cc.logID(1603);
return this._scale.x;
},
setScale: function(i, n) {
if (i && "number" !== ("object" === (e = typeof i) ? t(i) : e)) {
n = i.y;
i = i.x;
} else void 0 === n && (n = i);
if (this._scale.x !== i || this._scale.y !== n) {
this._scale.x = i;
this._scale.y = n;
this.setLocalDirty(E.SCALE);
this._renderFlag |= p.FLAG_TRANSFORM;
2 & this._eventMask && this.emit(D.SCALE_CHANGED);
}
},
getContentSize: function() {
return cc.size(this._contentSize.width, this._contentSize.height);
},
setContentSize: function(t, e) {
var i = this._contentSize;
if (void 0 === e) {
if (t.width === i.width && t.height === i.height) return;
0;
i.width = t.width;
i.height = t.height;
} else {
if (t === i.width && e === i.height) return;
0;
i.width = t;
i.height = e;
}
8 & this._eventMask && this.emit(D.SIZE_CHANGED);
},
getAnchorPoint: function() {
return cc.v2(this._anchorPoint);
},
setAnchorPoint: function(t, e) {
var i = this._anchorPoint;
if (void 0 === e) {
if (t.x === i.x && t.y === i.y) return;
i.x = t.x;
i.y = t.y;
} else {
if (t === i.x && e === i.y) return;
i.x = t;
i.y = e;
}
this.setLocalDirty(E.POSITION);
16 & this._eventMask && this.emit(D.ANCHOR_CHANGED);
},
_invTransformPoint: function(t, e) {
this._parent ? this._parent._invTransformPoint(t, e) : c.vec3.copy(t, e);
c.vec3.sub(t, t, this._position);
c.quat.conjugate(T, this._quat);
c.vec3.transformQuat(t, t, T);
c.vec3.inverseSafe(b, this._scale);
c.vec3.mul(t, t, b);
return t;
},
getWorldPos: function(t) {
c.vec3.copy(t, this._position);
for (var e = this._parent; e; ) {
c.vec3.mul(t, t, e._scale);
c.vec3.transformQuat(t, t, e._quat);
c.vec3.add(t, t, e._position);
e = e._parent;
}
return t;
},
setWorldPos: function(t) {
this._parent ? this._parent._invTransformPoint(this._position, t) : c.vec3.copy(this._position, t);
this.setLocalDirty(E.POSITION);
1 & this._eventMask && this.emit(D.POSITION_CHANGED);
},
getWorldRot: function(t) {
c.quat.copy(t, this._quat);
for (var e = this._parent; e; ) {
c.quat.mul(t, e._quat, t);
e = e._parent;
}
return t;
},
setWorldRot: function(t) {
if (this._parent) {
this._parent.getWorldRot(this._quat);
c.quat.conjugate(this._quat, this._quat);
c.quat.mul(this._quat, this._quat, t);
} else c.quat.copy(this._quat, t);
this.setLocalDirty(E.ROTATION);
},
getWorldRT: function(t) {
var e = b, i = T;
c.vec3.copy(e, this._position);
c.quat.copy(i, this._quat);
for (var n = this._parent; n; ) {
c.vec3.mul(e, e, n._scale);
c.vec3.transformQuat(e, e, n._quat);
c.vec3.add(e, e, n._position);
c.quat.mul(i, n._quat, i);
n = n._parent;
}
c.mat4.fromRT(t, i, e);
return t;
},
lookAt: function(t, e) {
this.getWorldPos(b);
c.vec3.sub(b, b, t);
c.vec3.normalize(b, b);
c.quat.fromViewUp(T, b, e);
this.setWorldRot(T);
},
_updateLocalMatrix: function() {
var t = this._localMatDirty;
if (t) {
var e = this._matrix;
if (t & E.RT) {
var i = this._rotationX || this._rotationY, n = this._skewX || this._skewY, r = this._scale.x, s = this._scale.y;
if (i || n) {
var a = 1, o = 0, h = 0, l = 1;
if (i) {
var c = this._rotationX * y;
h = Math.sin(c);
l = Math.cos(c);
if (this._rotationY === this._rotationX) {
a = l;
o = -h;
} else {
var u = this._rotationY * y;
a = Math.cos(u);
o = -Math.sin(u);
}
}
e.m00 = a *= r;
e.m01 = o *= r;
e.m04 = h *= s;
e.m05 = l *= s;
if (n) {
var _ = e.m00, m = e.m01, f = e.m04, d = e.m05, p = Math.tan(this._skewX * y), g = Math.tan(this._skewY * y);
Infinity === p && (p = 99999999);
Infinity === g && (g = 99999999);
e.m00 = _ + f * g;
e.m01 = m + d * g;
e.m04 = f + _ * p;
e.m05 = d + m * p;
}
} else {
e.m00 = r;
e.m01 = 0;
e.m04 = 0;
e.m05 = s;
}
}
e.m12 = this._position.x;
e.m13 = this._position.y;
this._localMatDirty = 0;
this._worldMatDirty = !0;
}
},
_calculWorldMatrix: function() {
this._localMatDirty && this._updateLocalMatrix();
var t = this._parent;
if (t) {
var e = t._worldMatrix, i = this._matrix, n = this._worldMatrix, r = i.m00, s = i.m01, a = i.m04, o = i.m05, h = i.m12, l = i.m13, u = e.m00, _ = e.m01, m = e.m04, f = e.m05, d = e.m12, p = e.m13;
if (0 !== _ || 0 !== m) {
n.m00 = r * u + s * m;
n.m01 = r * _ + s * f;
n.m04 = a * u + o * m;
n.m05 = a * _ + o * f;
n.m12 = u * h + m * l + d;
n.m13 = _ * h + f * l + p;
} else {
n.m00 = r * u;
n.m01 = s * f;
n.m04 = a * u;
n.m05 = o * f;
n.m12 = u * h + d;
n.m13 = f * l + p;
}
} else c.mat4.copy(this._worldMatrix, this._matrix);
this._worldMatDirty = !1;
},
_updateWorldMatrix: function() {
this._parent && this._parent._updateWorldMatrix();
if (this._worldMatDirty) {
this._calculWorldMatrix();
for (var t = this._children, e = 0, i = t.length; e < i; e++) t[e]._worldMatDirty = !0;
}
},
setLocalDirty: function(t) {
this._localMatDirty = this._localMatDirty | t;
this._worldMatDirty = !0;
},
setWorldDirty: function() {
this._worldMatDirty = !0;
},
getLocalMatrix: function(t) {
this._updateLocalMatrix();
return c.mat4.copy(t, this._matrix);
},
getWorldMatrix: function(t) {
this._updateWorldMatrix();
return c.mat4.copy(t, this._worldMatrix);
},
convertToNodeSpace: function(t) {
this._updateWorldMatrix();
c.mat4.invert(A, this._worldMatrix);
var e = new cc.Vec2();
c.vec2.transformMat4(e, t, A);
e.x += this._anchorPoint.x * this._contentSize.width;
e.y += this._anchorPoint.y * this._contentSize.height;
return e;
},
convertToWorldSpace: function(t) {
this._updateWorldMatrix();
var e = new cc.Vec2(t.x - this._anchorPoint.x * this._contentSize.width, t.y - this._anchorPoint.y * this._contentSize.height);
return c.vec2.transformMat4(e, e, this._worldMatrix);
},
convertToNodeSpaceAR: function(t) {
this._updateWorldMatrix();
c.mat4.invert(A, this._worldMatrix);
var e = new cc.Vec2();
return c.vec2.transformMat4(e, t, A);
},
convertToWorldSpaceAR: function(t) {
this._updateWorldMatrix();
var e = new cc.Vec2();
return c.vec2.transformMat4(e, t, this._worldMatrix);
},
getNodeToParentTransform: function(t) {
t || (t = l.identity());
this._updateLocalMatrix();
var e = this._contentSize;
b.x = -this._anchorPoint.x * e.width;
b.y = -this._anchorPoint.y * e.height;
c.mat4.copy(A, this._matrix);
c.mat4.translate(A, A, b);
return l.fromMat4(t, A);
},
getNodeToParentTransformAR: function(t) {
t || (t = l.identity());
this._updateLocalMatrix();
return l.fromMat4(t, this._matrix);
},
getNodeToWorldTransform: function(t) {
t || (t = l.identity());
this._updateWorldMatrix();
var e = this._contentSize;
b.x = -this._anchorPoint.x * e.width;
b.y = -this._anchorPoint.y * e.height;
c.mat4.copy(A, this._worldMatrix);
c.mat4.translate(A, A, b);
return l.fromMat4(t, A);
},
getNodeToWorldTransformAR: function(t) {
t || (t = l.identity());
this._updateWorldMatrix();
return l.fromMat4(t, this._worldMatrix);
},
getParentToNodeTransform: function(t) {
t || (t = l.identity());
this._updateLocalMatrix();
c.mat4.invert(A, this._matrix);
return l.fromMat4(t, A);
},
getWorldToNodeTransform: function(t) {
t || (t = l.identity());
this._updateWorldMatrix();
c.mat4.invert(A, this._worldMatrix);
return l.fromMat4(t, A);
},
convertTouchToNodeSpace: function(t) {
return this.convertToNodeSpace(t.getLocation());
},
convertTouchToNodeSpaceAR: function(t) {
return this.convertToNodeSpaceAR(t.getLocation());
},
getBoundingBox: function() {
this._updateLocalMatrix();
var t = this._contentSize.width, e = this._contentSize.height, i = cc.rect(-this._anchorPoint.x * t, -this._anchorPoint.y * e, t, e);
return i.transformMat4(i, this._matrix);
},
getBoundingBoxToWorld: function() {
if (this._parent) {
this._parent._updateWorldMatrix();
return this._getBoundingBoxTo(this._parent._worldMatrix);
}
return this.getBoundingBox();
},
_getBoundingBoxTo: function(t) {
this._updateLocalMatrix();
var e = this._contentSize.width, i = this._contentSize.height, n = cc.rect(-this._anchorPoint.x * e, -this._anchorPoint.y * i, e, i);
t = c.mat4.mul(this._worldMatrix, t, this._matrix);
n.transformMat4(n, t);
if (!this._children) return n;
for (var r = this._children, s = 0; s < r.length; s++) {
var a = r[s];
if (a && a.active) {
var o = a._getBoundingBoxTo(t);
o && n.union(n, o);
}
}
return n;
},
_updateOrderOfArrival: function() {
var t = ++C;
this._localZOrder = 4294901760 & this._localZOrder | t;
},
addChild: function(t, e, i) {
0;
cc.assertID(t, 1606);
cc.assertID(null === t._parent, 1605);
t.parent = this;
void 0 !== e && (t.zIndex = e);
void 0 !== i && (t.name = i);
},
cleanup: function() {
v && cc.director.getActionManager().removeAllActionsFromTarget(this);
u.removeListeners(this);
var t, e, i = this._children.length;
for (t = 0; t < i; ++t) (e = this._children[t]) && e.cleanup();
},
sortAllChildren: function() {
if (this._reorderChildDirty) {
this._reorderChildDirty = !1;
var t = this._children;
if (t.length > 1) {
var e, i, n, r = t.length;
for (e = 1; e < r; e++) {
n = t[e];
i = e - 1;
for (;i >= 0 && n._localZOrder < t[i]._localZOrder; ) {
t[i + 1] = t[i];
i--;
}
t[i + 1] = n;
}
this.emit(D.CHILD_REORDER, this);
}
cc.director.__fastOff(cc.Director.EVENT_AFTER_UPDATE, this.sortAllChildren, this);
}
},
_delaySort: function() {
if (!this._reorderChildDirty) {
this._reorderChildDirty = !0;
cc.director.__fastOn(cc.Director.EVENT_AFTER_UPDATE, this.sortAllChildren, this);
}
},
_restoreProperties: function() {
this._matrix || (this._matrix = o.mat4.get());
this._worldMatrix || (this._worldMatrix = o.mat4.get());
this._localMatDirty = E.ALL;
this._worldMatDirty = !0;
this._renderFlag |= p.FLAG_TRANSFORM;
if (this._renderComponent) {
this._renderFlag |= p.FLAG_COLOR;
this._renderComponent.markForUpdateRenderData(!0);
}
},
onRestore: !1
});
m.propertyDefine(V, [ "parent", "position", "scale", "rotation" ]);
cc.Node = n.exports = V;
}), {
"./event-manager": 96,
"./event/event": 99,
"./event/event-target": 98,
"./platform/CCMacro": 158,
"./platform/js": 173,
"./renderer/render-engine": 195,
"./renderer/render-flow": 196,
"./utils/affine-transform": 223,
"./utils/base-node": 224,
"./utils/math-pools": 230,
"./utils/misc": 231,
"./utils/prefab-helper": 234
} ],
29: [ (function(t, e, i) {
"use strict";
var n = t("./CCNode"), r = t("./renderer/render-flow"), s = t("./renderer/render-engine").math, a = n._LocalDirtyFlag, o = (s.vec3.create(), 
cc.Class({
name: "cc.PrivateNode",
extends: n,
properties: {
x: {
get: function() {
return this._originPos.x;
},
set: function(t) {
var e = this._originPos;
if (t !== e.x) {
e.x = t;
this._posDirty(!0);
}
},
override: !0
},
y: {
get: function() {
return this._originPos.y;
},
set: function(t) {
var e = this._originPos;
if (t !== e.y) {
e.y = t;
this._posDirty(!0);
}
},
override: !0
},
zIndex: {
get: function() {
return cc.macro.MIN_ZINDEX;
},
set: function() {
cc.warnID(1638);
},
override: !0
}
},
ctor: function(t) {
this._localZOrder = cc.macro.MIN_ZINDEX << 16;
this._originPos = cc.v2();
},
_posDirty: function(t) {
this.setLocalDirty(a.POSITION);
this._renderFlag |= r.FLAG_LOCAL_TRANSFORM;
!0 === t && 1 & this._eventMask && this.emit(n.EventType.POSITION_CHANGED);
},
_updateLocalMatrix: function() {
if (this._localMatDirty) {
this._position.x = this._originPos.x - (this.parent._anchorPoint.x - .5) * this.parent._contentSize.width;
this._position.y = this._originPos.y - (this.parent._anchorPoint.y - .5) * this.parent._contentSize.height;
this._super();
}
},
getPosition: function() {
return new cc.Vec2(this._originPos);
},
setPosition: function(t, e) {
void 0 === e && (e = (t = t.x).y);
var i = this._originPos;
if (i.x !== t || i.y !== e) {
i.x = t;
i.y = e;
this._posDirty(!0);
}
},
setParent: function(t) {
var e = this._parent;
this._super(t);
if (e !== t) {
e && e.off(n.EventType.ANCHOR_CHANGED, this._posDirty, this);
t && t.on(n.EventType.ANCHOR_CHANGED, this._posDirty, this);
}
},
_updateOrderOfArrival: function() {}
}));
cc.js.getset(o.prototype, "parent", o.prototype.getParent, o.prototype.setParent);
cc.js.getset(o.prototype, "position", o.prototype.getPosition, o.prototype.setPosition);
cc.PrivateNode = e.exports = o;
}), {
"./CCNode": 28,
"./renderer/render-engine": 195,
"./renderer/render-flow": 196
} ],
30: [ (function(t, e, i) {
cc.Scene = cc.Class({
name: "cc.Scene",
extends: t("./CCNode"),
properties: {
autoReleaseAssets: {
default: void 0,
type: cc.Boolean
}
},
ctor: function() {
this._anchorPoint.x = 0;
this._anchorPoint.y = 0;
this._activeInHierarchy = !1;
this._inited = !cc.game._isCloning;
0;
this.dependAssets = null;
},
destroy: function() {
this._super();
this._activeInHierarchy = !1;
},
_onHierarchyChanged: function() {},
_instantiate: null,
_load: function() {
if (!this._inited) {
0;
this._onBatchCreated();
this._inited = !0;
}
},
_activate: function(t) {
t = !1 !== t;
0;
cc.director._nodeActivator.activateNode(this, t);
}
});
e.exports = cc.Scene;
}), {
"./CCNode": 28
} ],
31: [ (function(i, n, r) {
var s = i("./platform/js"), a = new (i("./platform/id-generater"))("Scheduler"), o = function(t, e, i, n) {
this.target = t;
this.priority = e;
this.paused = i;
this.markedForDeletion = n;
}, h = [];
o.get = function(t, e, i, n) {
var r = h.pop();
if (r) {
r.target = t;
r.priority = e;
r.paused = i;
r.markedForDeletion = n;
} else r = new o(t, e, i, n);
return r;
};
o.put = function(t) {
if (h.length < 20) {
t.target = null;
h.push(t);
}
};
var l = function(t, e, i, n) {
this.list = t;
this.entry = e;
this.target = i;
this.callback = n;
}, c = [];
l.get = function(t, e, i, n) {
var r = c.pop();
if (r) {
r.list = t;
r.entry = e;
r.target = i;
r.callback = n;
} else r = new l(t, e, i, n);
return r;
};
l.put = function(t) {
if (c.length < 20) {
t.list = t.entry = t.target = t.callback = null;
c.push(t);
}
};
var u = function(t, e, i, n, r, s) {
var a = this;
a.timers = t;
a.target = e;
a.timerIndex = i;
a.currentTimer = n;
a.currentTimerSalvaged = r;
a.paused = s;
}, _ = [];
u.get = function(t, e, i, n, r, s) {
var a = _.pop();
if (a) {
a.timers = t;
a.target = e;
a.timerIndex = i;
a.currentTimer = n;
a.currentTimerSalvaged = r;
a.paused = s;
} else a = new u(t, e, i, n, r, s);
return a;
};
u.put = function(t) {
if (_.length < 20) {
t.timers = t.target = t.currentTimer = null;
_.push(t);
}
};
function m() {
this._lock = !1;
this._scheduler = null;
this._elapsed = -1;
this._runForever = !1;
this._useDelay = !1;
this._timesExecuted = 0;
this._repeat = 0;
this._delay = 0;
this._interval = 0;
this._target = null;
this._callback = null;
}
var f = m.prototype;
f.initWithCallback = function(t, e, i, n, r, s) {
this._lock = !1;
this._scheduler = t;
this._target = i;
this._callback = e;
this._elapsed = -1;
this._interval = n;
this._delay = s;
this._useDelay = this._delay > 0;
this._repeat = r;
this._runForever = this._repeat === cc.macro.REPEAT_FOREVER;
return !0;
};
f.getInterval = function() {
return this._interval;
};
f.setInterval = function(t) {
this._interval = t;
};
f.update = function(t) {
if (-1 === this._elapsed) {
this._elapsed = 0;
this._timesExecuted = 0;
} else {
this._elapsed += t;
if (this._runForever && !this._useDelay) {
if (this._elapsed >= this._interval) {
this.trigger();
this._elapsed = 0;
}
} else {
if (this._useDelay) {
if (this._elapsed >= this._delay) {
this.trigger();
this._elapsed -= this._delay;
this._timesExecuted += 1;
this._useDelay = !1;
}
} else if (this._elapsed >= this._interval) {
this.trigger();
this._elapsed = 0;
this._timesExecuted += 1;
}
this._callback && !this._runForever && this._timesExecuted > this._repeat && this.cancel();
}
}
};
f.getCallback = function() {
return this._callback;
};
f.trigger = function() {
if (this._target && this._callback) {
this._lock = !0;
this._callback.call(this._target, this._elapsed);
this._lock = !1;
}
};
f.cancel = function() {
this._scheduler.unschedule(this._callback, this._target);
};
var d = [];
m.get = function() {
return d.pop() || new m();
};
m.put = function(t) {
if (d.length < 20 && !t._lock) {
t._scheduler = t._target = t._callback = null;
d.push(t);
}
};
cc.Scheduler = function() {
this._timeScale = 1;
this._updatesNegList = [];
this._updates0List = [];
this._updatesPosList = [];
this._hashForUpdates = s.createMap(!0);
this._hashForTimers = s.createMap(!0);
this._currentTarget = null;
this._currentTargetSalvaged = !1;
this._updateHashLocked = !1;
this._arrayForTimers = [];
};
cc.Scheduler.prototype = {
constructor: cc.Scheduler,
_removeHashElement: function(t) {
delete this._hashForTimers[t.target._id];
for (var e = this._arrayForTimers, i = 0, n = e.length; i < n; i++) if (e[i] === t) {
e.splice(i, 1);
break;
}
u.put(t);
},
_removeUpdateFromHash: function(t) {
var e = t.target._id, i = this._hashForUpdates[e];
if (i) {
for (var n = i.list, r = i.entry, s = 0, a = n.length; s < a; s++) if (n[s] === r) {
n.splice(s, 1);
break;
}
delete this._hashForUpdates[e];
o.put(r);
l.put(i);
}
},
_priorityIn: function(t, e, i) {
for (var n = 0; n < t.length; n++) if (i < t[n].priority) {
t.splice(n, 0, e);
return;
}
t.push(e);
},
_appendIn: function(t, e) {
t.push(e);
},
enableForTarget: function(t) {
t._id || (t.__instanceId ? cc.warnID(1513) : t._id = a.getNewId());
},
setTimeScale: function(t) {
this._timeScale = t;
},
getTimeScale: function() {
return this._timeScale;
},
update: function(t) {
this._updateHashLocked = !0;
1 !== this._timeScale && (t *= this._timeScale);
var e, i, n, r;
for (e = 0, n = (i = this._updatesNegList).length; e < n; e++) (r = i[e]).paused || r.markedForDeletion || r.target.update(t);
for (e = 0, n = (i = this._updates0List).length; e < n; e++) (r = i[e]).paused || r.markedForDeletion || r.target.update(t);
for (e = 0, n = (i = this._updatesPosList).length; e < n; e++) (r = i[e]).paused || r.markedForDeletion || r.target.update(t);
var s, a = this._arrayForTimers;
for (e = 0; e < a.length; e++) {
s = a[e];
this._currentTarget = s;
this._currentTargetSalvaged = !1;
if (!s.paused) for (s.timerIndex = 0; s.timerIndex < s.timers.length; ++s.timerIndex) {
s.currentTimer = s.timers[s.timerIndex];
s.currentTimerSalvaged = !1;
s.currentTimer.update(t);
s.currentTimer = null;
}
if (this._currentTargetSalvaged && 0 === this._currentTarget.timers.length) {
this._removeHashElement(this._currentTarget);
--e;
}
}
for (e = 0, i = this._updatesNegList; e < i.length; ) (r = i[e]).markedForDeletion ? this._removeUpdateFromHash(r) : e++;
for (e = 0, i = this._updates0List; e < i.length; ) (r = i[e]).markedForDeletion ? this._removeUpdateFromHash(r) : e++;
for (e = 0, i = this._updatesPosList; e < i.length; ) (r = i[e]).markedForDeletion ? this._removeUpdateFromHash(r) : e++;
this._updateHashLocked = !1;
this._currentTarget = null;
},
schedule: function(i, n, r, s, a, o) {
"use strict";
if ("function" !== ("object" === (e = typeof i) ? t(i) : e)) {
var h = i;
i = n;
n = h;
}
if (4 === arguments.length || 5 === arguments.length) {
o = !!s;
s = cc.macro.REPEAT_FOREVER;
a = 0;
}
cc.assertID(n, 1502);
var l = n._id;
if (!l) if (n.__instanceId) {
cc.warnID(1513);
l = n._id = n.__instanceId;
} else cc.errorID(1510);
var c, _, f = this._hashForTimers[l];
if (f) f.paused !== o && cc.warnID(1511); else {
f = u.get(null, n, 0, null, null, o);
this._arrayForTimers.push(f);
this._hashForTimers[l] = f;
}
if (null == f.timers) f.timers = []; else for (_ = 0; _ < f.timers.length; ++_) if ((c = f.timers[_]) && i === c._callback) {
cc.logID(1507, c.getInterval(), r);
c._interval = r;
return;
}
(c = m.get()).initWithCallback(this, i, n, r, s, a);
f.timers.push(c);
this._currentTarget === f && this._currentTargetSalvaged && (this._currentTargetSalvaged = !1);
},
scheduleUpdate: function(t, e, i) {
var n = t._id;
if (!n) if (t.__instanceId) {
cc.warnID(1513);
n = t._id = t.__instanceId;
} else cc.errorID(1510);
var r = this._hashForUpdates[n];
if (r && r.entry) {
if (r.entry.priority === e) {
r.entry.markedForDeletion = !1;
r.entry.paused = i;
return;
}
if (this._updateHashLocked) {
cc.logID(1506);
r.entry.markedForDeletion = !1;
r.entry.paused = i;
return;
}
this.unscheduleUpdate(t);
}
var s, a = o.get(t, e, i, !1);
if (0 === e) {
s = this._updates0List;
this._appendIn(s, a);
} else {
s = e < 0 ? this._updatesNegList : this._updatesPosList;
this._priorityIn(s, a, e);
}
this._hashForUpdates[n] = l.get(s, a, t, null);
},
unschedule: function(t, e) {
if (e && t) {
var i = e._id;
if (!i) if (e.__instanceId) {
cc.warnID(1513);
i = e._id = e.__instanceId;
} else cc.errorID(1510);
var n = this._hashForTimers[i];
if (n) for (var r = n.timers, s = 0, a = r.length; s < a; s++) {
var o = r[s];
if (t === o._callback) {
o !== n.currentTimer || n.currentTimerSalvaged || (n.currentTimerSalvaged = !0);
r.splice(s, 1);
m.put(o);
n.timerIndex >= s && n.timerIndex--;
0 === r.length && (this._currentTarget === n ? this._currentTargetSalvaged = !0 : this._removeHashElement(n));
return;
}
}
}
},
unscheduleUpdate: function(t) {
if (t) {
var e = t._id;
if (!e) if (t.__instanceId) {
cc.warnID(1513);
e = t._id = t.__instanceId;
} else cc.errorID(1510);
var i = this._hashForUpdates[e];
i && (this._updateHashLocked ? i.entry.markedForDeletion = !0 : this._removeUpdateFromHash(i.entry));
}
},
unscheduleAllForTarget: function(t) {
if (t) {
var e = t._id;
if (!e) if (t.__instanceId) {
cc.warnID(1513);
e = t._id = t.__instanceId;
} else cc.errorID(1510);
var i = this._hashForTimers[e];
if (i) {
var n = i.timers;
n.indexOf(i.currentTimer) > -1 && !i.currentTimerSalvaged && (i.currentTimerSalvaged = !0);
for (var r = 0, s = n.length; r < s; r++) m.put(n[r]);
n.length = 0;
this._currentTarget === i ? this._currentTargetSalvaged = !0 : this._removeHashElement(i);
}
this.unscheduleUpdate(t);
}
},
unscheduleAll: function() {
this.unscheduleAllWithMinPriority(cc.Scheduler.PRIORITY_SYSTEM);
},
unscheduleAllWithMinPriority: function(t) {
var e, i, n, r = this._arrayForTimers;
for (e = r.length - 1; e >= 0; e--) {
i = r[e];
this.unscheduleAllForTarget(i.target);
}
var s = 0;
if (t < 0) for (e = 0; e < this._updatesNegList.length; ) {
s = this._updatesNegList.length;
(n = this._updatesNegList[e]) && n.priority >= t && this.unscheduleUpdate(n.target);
s == this._updatesNegList.length && e++;
}
if (t <= 0) for (e = 0; e < this._updates0List.length; ) {
s = this._updates0List.length;
(n = this._updates0List[e]) && this.unscheduleUpdate(n.target);
s == this._updates0List.length && e++;
}
for (e = 0; e < this._updatesPosList.length; ) {
s = this._updatesPosList.length;
(n = this._updatesPosList[e]) && n.priority >= t && this.unscheduleUpdate(n.target);
s == this._updatesPosList.length && e++;
}
},
isScheduled: function(t, e) {
cc.assertID(t, 1508);
cc.assertID(e, 1509);
var i = e._id;
if (!i) if (e.__instanceId) {
cc.warnID(1513);
i = e._id = e.__instanceId;
} else cc.errorID(1510);
var n = this._hashForTimers[i];
if (!n) return !1;
if (null == n.timers) return !1;
for (var r = n.timers, s = 0; s < r.length; ++s) {
if (t === r[s]._callback) return !0;
}
return !1;
},
pauseAllTargets: function() {
return this.pauseAllTargetsWithMinPriority(cc.Scheduler.PRIORITY_SYSTEM);
},
pauseAllTargetsWithMinPriority: function(t) {
var e, i, n, r, s = [], a = this._arrayForTimers;
for (i = 0, n = a.length; i < n; i++) if (e = a[i]) {
e.paused = !0;
s.push(e.target);
}
if (t < 0) for (i = 0; i < this._updatesNegList.length; i++) if ((r = this._updatesNegList[i]) && r.priority >= t) {
r.paused = !0;
s.push(r.target);
}
if (t <= 0) for (i = 0; i < this._updates0List.length; i++) if (r = this._updates0List[i]) {
r.paused = !0;
s.push(r.target);
}
for (i = 0; i < this._updatesPosList.length; i++) if ((r = this._updatesPosList[i]) && r.priority >= t) {
r.paused = !0;
s.push(r.target);
}
return s;
},
resumeTargets: function(t) {
if (t) for (var e = 0; e < t.length; e++) this.resumeTarget(t[e]);
},
pauseTarget: function(t) {
cc.assertID(t, 1503);
var e = t._id;
if (!e) if (t.__instanceId) {
cc.warnID(1513);
e = t._id = t.__instanceId;
} else cc.errorID(1510);
var i = this._hashForTimers[e];
i && (i.paused = !0);
var n = this._hashForUpdates[e];
n && (n.entry.paused = !0);
},
resumeTarget: function(t) {
cc.assertID(t, 1504);
var e = t._id;
if (!e) if (t.__instanceId) {
cc.warnID(1513);
e = t._id = t.__instanceId;
} else cc.errorID(1510);
var i = this._hashForTimers[e];
i && (i.paused = !1);
var n = this._hashForUpdates[e];
n && (n.entry.paused = !1);
},
isTargetPaused: function(t) {
cc.assertID(t, 1505);
var e = t._id;
if (!e) if (t.__instanceId) {
cc.warnID(1513);
e = t._id = t.__instanceId;
} else cc.errorID(1510);
var i = this._hashForTimers[e];
if (i) return i.paused;
var n = this._hashForUpdates[e];
return !!n && n.entry.paused;
}
};
cc.Scheduler.PRIORITY_SYSTEM = 1 << 31;
cc.Scheduler.PRIORITY_NON_SYSTEM = cc.Scheduler.PRIORITY_SYSTEM + 1;
}), {
"./platform/id-generater": 169,
"./platform/js": 173
} ],
32: [ (function(t, e, i) {
var n = t("./CCRawAsset");
cc.js;
cc.Asset = cc.Class({
name: "cc.Asset",
extends: n,
ctor: function() {
this.loaded = !0;
},
properties: {
nativeUrl: {
get: function() {
if (this._native) {
var t = this._native;
if (47 === t.charCodeAt(0)) return t.slice(1);
if (cc.AssetLibrary) {
var e = cc.AssetLibrary.getLibUrlNoExt(this._uuid, !0);
return 46 === t.charCodeAt(0) ? e + t : e + "/" + t;
}
cc.errorID(6400);
}
return "";
},
visible: !1
},
_native: "",
_nativeAsset: {
get: function() {},
set: function(t) {}
}
},
statics: {
deserialize: !1,
preventDeferredLoadDependents: !1,
preventPreloadNativeObject: !1
},
toString: function() {
return this.nativeUrl;
},
serialize: !1,
createNode: null,
_setRawAsset: function(t, e) {
this._native = !1 !== e ? t || void 0 : "/" + t;
}
});
e.exports = cc.Asset;
}), {
"./CCRawAsset": 39
} ],
33: [ (function(t, e, i) {
var n = t("./CCAsset"), r = t("../event/event-target"), s = cc.Enum({
WEB_AUDIO: 0,
DOM_AUDIO: 1
}), a = cc.Class({
name: "cc.AudioClip",
extends: n,
mixins: [ r ],
ctor: function() {
this.loaded = !1;
this._audio = null;
},
properties: {
loadMode: {
default: s.WEB_AUDIO,
type: s
},
_nativeAsset: {
get: function() {
return this._audio;
},
set: function(t) {
this._audio = t;
if (t) {
this.loaded = !0;
this.emit("load");
}
},
override: !0
}
},
statics: {
LoadMode: s,
_loadByUrl: function(t, e) {
var i = cc.loader.getItem(t) || cc.loader.getItem(t + "?useDom=1");
i && i.complete ? i._owner instanceof a ? e(null, i._owner) : e(null, i.content) : cc.loader.load(t, (function(n, r) {
if (n) return e(n);
i = cc.loader.getItem(t) || cc.loader.getItem(t + "?useDom=1");
e(null, i.content);
}));
}
},
destroy: function() {
cc.audioEngine.uncache(this);
this._super();
}
});
cc.AudioClip = a;
e.exports = a;
}), {
"../event/event-target": 98,
"./CCAsset": 32
} ],
34: [ (function(t, e, i) {
var n = cc.Class({
name: "cc.BitmapFont",
extends: cc.Font,
properties: {
fntDataStr: {
default: ""
},
spriteFrame: {
default: null,
type: cc.SpriteFrame
},
fontSize: {
default: -1
},
_fntConfig: null
}
});
cc.BitmapFont = n;
e.exports = n;
}), {} ],
35: [ (function(t, e, i) {
var n = cc.Class({
name: "cc.Font",
extends: cc.Asset
});
cc.Font = e.exports = n;
}), {} ],
36: [ (function(t, e, i) {
var n = cc.Class({
name: "cc.JsonAsset",
extends: cc.Asset,
properties: {
json: null
}
});
e.exports = cc.JsonAsset = n;
}), {} ],
37: [ (function(t, e, i) {
var n = cc.Class({
name: "cc.LabelAtlas",
extends: cc.BitmapFont
});
cc.LabelAtlas = n;
e.exports = n;
}), {} ],
38: [ (function(t, e, i) {
var n = cc.Enum({
AUTO: 0,
SINGLE_INSTANCE: 1,
MULTI_INSTANCE: 2
}), r = cc.Class({
name: "cc.Prefab",
extends: cc.Asset,
ctor: function() {
this._createFunction = null;
this._instantiatedTimes = 0;
},
properties: {
data: null,
optimizationPolicy: n.AUTO,
asyncLoadAssets: !1
},
statics: {
OptimizationPolicy: n,
OptimizationPolicyThreshold: 3
},
createNode: !1,
compileCreateFunction: function() {
var e = t("../platform/instantiate-jit");
this._createFunction = e.compile(this.data);
},
_doInstantiate: function(t) {
this.data._prefab ? this.data._prefab._synced = !0 : cc.warnID(3700);
this._createFunction || this.compileCreateFunction();
return this._createFunction(t);
},
_instantiate: function() {
var t, e = !1;
0;
if (e) {
t = this._doInstantiate();
this.data._instantiate(t);
} else {
this.data._prefab._synced = !0;
t = this.data._instantiate();
}
++this._instantiatedTimes;
return t;
}
});
cc.Prefab = e.exports = r;
cc.js.obsolete(cc, "cc._Prefab", "Prefab");
}), {
"../platform/instantiate-jit": 171
} ],
39: [ (function(t, e, i) {
var n = t("../platform/CCObject"), r = t("../platform/js");
cc.RawAsset = cc.Class({
name: "cc.RawAsset",
extends: n,
ctor: function() {
Object.defineProperty(this, "_uuid", {
value: "",
writable: !0
});
}
});
r.value(cc.RawAsset, "isRawAssetType", (function(t) {
return r.isChildClassOf(t, cc.RawAsset) && !r.isChildClassOf(t, cc.Asset);
}));
r.value(cc.RawAsset, "wasRawAssetType", (function(t) {
return t === cc.Texture2D || t === cc.AudioClip || t === cc.ParticleAsset || t === cc.Asset;
}));
e.exports = cc.RawAsset;
}), {
"../platform/CCObject": 159,
"../platform/js": 173
} ],
40: [ (function(t, e, i) {
var n = t("../renderer"), r = t("../renderer/render-engine"), s = t("./CCTexture2D"), a = cc.Class({
name: "cc.RenderTexture",
extends: s,
ctor: function() {
this._framebuffer = null;
},
initWithSize: function(t, e) {
this.width = Math.floor(t || cc.visibleRect.width);
this.height = Math.floor(e || cc.visibleRect.height);
var i = {};
i.format = this._format;
i.width = t;
i.height = e;
i.images = void 0;
i.wrapS = this._wrapS;
i.wrapT = this._wrapT;
this._texture ? this._texture.update(i) : this._texture = new n.Texture2D(n.device, i);
i = {
colors: [ this._texture ]
};
this._framebuffer && this._framebuffer.destroy();
this._framebuffer = new r.gfx.FrameBuffer(n.device, t, e, i);
this.loaded = !0;
this.emit("load");
},
drawTextureAt: function(t, e, i) {
t._image && this._texture.updateSubImage({
x: e,
y: i,
image: t._image,
width: t.width,
height: t.height,
level: 0,
flipY: !1
});
},
readPixels: function(t, e, i, r, s) {
if (!this._framebuffer || !this._texture) return t;
e = e || 0;
i = i || 0;
var a = r || this.width, o = s || this.height;
t = t || new Uint8Array(a * o * 4);
var h = n._forward._device._gl, l = h.getParameter(h.FRAMEBUFFER_BINDING);
h.bindFramebuffer(h.FRAMEBUFFER, this._framebuffer._glID);
h.framebufferTexture2D(h.FRAMEBUFFER, h.COLOR_ATTACHMENT0, h.TEXTURE_2D, this._texture._glID, 0);
h.readPixels(e, i, a, o, h.RGBA, h.UNSIGNED_BYTE, t);
h.bindFramebuffer(h.FRAMEBUFFER, l);
return t;
},
destroy: function() {
this._super();
this._framebuffer && this._framebuffer.destroy();
}
});
cc.RenderTexture = e.exports = a;
}), {
"../renderer": 194,
"../renderer/render-engine": 195,
"./CCTexture2D": 47
} ],
41: [ (function(t, e, i) {
var n = cc.Class({
name: "cc.SceneAsset",
extends: cc.Asset,
properties: {
scene: null,
asyncLoadAssets: void 0
}
});
cc.SceneAsset = n;
e.exports = n;
}), {} ],
42: [ (function(t, e, i) {
var n = cc.Class({
name: "cc.Script",
extends: cc.Asset
});
cc._Script = n;
var r = cc.Class({
name: "cc.JavaScript",
extends: n
});
cc._JavaScript = r;
var s = cc.Class({
name: "cc.CoffeeScript",
extends: n
});
cc._CoffeeScript = s;
var a = cc.Class({
name: "cc.TypeScript",
extends: n
});
cc._TypeScript = a;
}), {} ],
43: [ (function(t, e, i) {
var n = cc.Class({
name: "cc.SpriteAtlas",
extends: cc.Asset,
properties: {
_spriteFrames: {
default: {}
}
},
getTexture: function() {
var t = Object.keys(this._spriteFrames);
if (t.length > 0) {
var e = this._spriteFrames[t[0]];
return e ? e.getTexture() : null;
}
return null;
},
getSpriteFrame: function(t) {
return this._spriteFrames[t];
},
getSpriteFrames: function() {
var t = [], e = this._spriteFrames;
for (var i in e) t.push(e[i]);
return t;
}
});
cc.SpriteAtlas = n;
e.exports = n;
}), {} ],
44: [ (function(i, n, r) {
var s = i("../event/event-target"), a = i("../utils/texture-util"), o = [ {
u: 0,
v: 0
}, {
u: 0,
v: 0
}, {
u: 0,
v: 0
}, {
u: 0,
v: 0
} ], h = cc.Class({
name: "cc.SpriteFrame",
extends: i("../assets/CCAsset"),
mixins: [ s ],
properties: {
_textureSetter: {
set: function(t) {
if (t) {
0;
this._texture !== t && this._refreshTexture(t);
this._textureFilename = t.url;
}
}
}
},
ctor: function() {
var t = arguments[0], e = arguments[1], i = arguments[2], n = arguments[3], r = arguments[4];
this._rect = null;
this._offset = null;
this._originalSize = null;
this._rotated = !1;
this.insetTop = 0;
this.insetBottom = 0;
this.insetLeft = 0;
this.insetRight = 0;
this.vertices = null;
this.uv = [];
this.uvSliced = [];
this._texture = null;
this._textureFilename = "";
this._original = null;
0;
void 0 !== t && this.setTexture(t, e, i, n, r);
},
textureLoaded: function() {
return this._texture && this._texture.loaded;
},
isRotated: function() {
return this._rotated;
},
setRotated: function(t) {
this._rotated = t;
},
getRect: function() {
return cc.rect(this._rect);
},
setRect: function(t) {
this._rect = t;
},
getOriginalSize: function() {
return cc.size(this._originalSize);
},
setOriginalSize: function(t) {
if (this._originalSize) {
this._originalSize.width = t.width;
this._originalSize.height = t.height;
} else this._originalSize = cc.size(t);
},
getTexture: function() {
return this._texture;
},
_textureLoadedCallback: function() {
var t = this, e = this._texture;
if (e) {
var i = e.width, n = e.height;
if (t._rotated && cc.game.renderType === cc.game.RENDER_TYPE_CANVAS) {
t._rotated = !1;
i = t._texture.width;
n = t._texture.height;
t.setRect(cc.rect(0, 0, i, n));
}
t._rect ? t._checkRect(t._texture) : t.setRect(cc.rect(0, 0, i, n));
t._originalSize || t.setOriginalSize(cc.size(i, n));
t._offset || t.setOffset(cc.v2(0, 0));
t._calculateUV();
t.emit("load");
}
},
_refreshTexture: function(t) {
this._texture = t;
t.loaded ? this._textureLoadedCallback() : t.once("load", this._textureLoadedCallback, this);
},
getOffset: function() {
return cc.v2(this._offset);
},
setOffset: function(t) {
this._offset = cc.v2(t);
},
clone: function() {
return new h(this._texture || this._textureFilename, this._rect, this._rotated, this._offset, this._originalSize);
},
setTexture: function(i, n, r, s, a) {
n ? this.setRect(n) : this._rect = null;
s ? this.setOffset(s) : this._offset = null;
a ? this.setOriginalSize(a) : this._originalSize = null;
this._rotated = r || !1;
var o = i;
if ("string" === ("object" === (e = typeof o) ? t(o) : e) && o) {
this._textureFilename = o;
this._loadTexture();
}
o instanceof cc.Texture2D && this._texture !== o && this._refreshTexture(o);
return !0;
},
_loadTexture: function() {
if (this._textureFilename) {
var t = a.loadImage(this._textureFilename);
this._refreshTexture(t);
}
},
ensureLoadTexture: function() {
if (this._texture) {
if (!this._texture.loaded) {
this._refreshTexture(this._texture);
a.postLoadTexture(this._texture);
}
} else this._textureFilename && this._loadTexture();
},
clearTexture: function() {
this._texture = null;
},
_checkRect: function(t) {
var e = this._rect, i = e.x, n = e.y;
if (this._rotated) {
i += e.height;
n += e.width;
} else {
i += e.width;
n += e.height;
}
i > t.width && cc.errorID(3300, t.url + "/" + this.name, i, t.width);
n > t.height && cc.errorID(3400, t.url + "/" + this.name, n, t.height);
},
_calculateSlicedUV: function() {
var t = this._rect, e = this._texture.width, i = this._texture.height, n = this.insetLeft, r = this.insetRight, s = t.width - n - r, a = this.insetTop, h = this.insetBottom, l = t.height - a - h, c = this.uvSliced;
c.length = 0;
if (this._rotated) {
o[0].u = t.x / e;
o[1].u = (t.x + h) / e;
o[2].u = (t.x + h + l) / e;
o[3].u = (t.x + t.height) / e;
o[3].v = t.y / i;
o[2].v = (t.y + n) / i;
o[1].v = (t.y + n + s) / i;
o[0].v = (t.y + t.width) / i;
for (var u = 0; u < 4; ++u) for (var _ = o[u], m = 0; m < 4; ++m) {
var f = o[3 - m];
c.push({
u: _.u,
v: f.v
});
}
} else {
o[0].u = t.x / e;
o[1].u = (t.x + n) / e;
o[2].u = (t.x + n + s) / e;
o[3].u = (t.x + t.width) / e;
o[3].v = t.y / i;
o[2].v = (t.y + a) / i;
o[1].v = (t.y + a + l) / i;
o[0].v = (t.y + t.height) / i;
for (var d = 0; d < 4; ++d) for (var p = o[d], g = 0; g < 4; ++g) {
var y = o[g];
c.push({
u: y.u,
v: p.v
});
}
}
},
_calculateUV: function() {
var t = this._rect, e = this._texture, i = this.uv, n = e.width, r = e.height;
if (this._rotated) {
var s = 0 === n ? 0 : t.x / n, a = 0 === n ? 0 : (t.x + t.height) / n, o = 0 === r ? 0 : (t.y + t.width) / r, h = 0 === r ? 0 : t.y / r;
i[0] = s;
i[1] = h;
i[2] = s;
i[3] = o;
i[4] = a;
i[5] = h;
i[6] = a;
i[7] = o;
} else {
var l = 0 === n ? 0 : t.x / n, c = 0 === n ? 0 : (t.x + t.width) / n, u = 0 === r ? 0 : (t.y + t.height) / r, _ = 0 === r ? 0 : t.y / r;
i[0] = l;
i[1] = u;
i[2] = c;
i[3] = u;
i[4] = l;
i[5] = _;
i[6] = c;
i[7] = _;
}
var m = this.vertices;
if (m) {
m.nu.length = 0;
m.nv.length = 0;
for (var f = 0; f < m.u.length; f++) {
m.nu[f] = m.u[f] / n;
m.nv[f] = m.v[f] / r;
}
}
this._calculateSlicedUV();
},
_serialize: !1,
_deserialize: function(t, e) {
var i = t.rect;
i && this.setRect(new cc.Rect(i[0], i[1], i[2], i[3]));
t.offset && this.setOffset(new cc.Vec2(t.offset[0], t.offset[1]));
t.originalSize && this.setOriginalSize(new cc.Size(t.originalSize[0], t.originalSize[1]));
this._rotated = 1 === t.rotated;
this._name = t.name;
var n = t.capInsets;
if (n) {
this.insetLeft = n[0];
this.insetTop = n[1];
this.insetRight = n[2];
this.insetBottom = n[3];
}
0;
this.vertices = t.vertices;
if (this.vertices) {
this.vertices.nu = [];
this.vertices.nv = [];
}
var r = t.texture;
r && e.result.push(this, "_textureSetter", r);
}
}), l = h.prototype;
l.copyWithZone = l.clone;
l.copy = l.clone;
l.initWithTexture = l.setTexture;
cc.SpriteFrame = h;
n.exports = h;
}), {
"../assets/CCAsset": 32,
"../event/event-target": 98,
"../utils/texture-util": 239
} ],
45: [ (function(t, e, i) {
var n = cc.Class({
name: "cc.TTFFont",
extends: cc.Font,
statics: {
preventPreloadNativeObject: !0
}
});
cc.TTFFont = e.exports = n;
}), {} ],
46: [ (function(t, e, i) {
var n = cc.Class({
name: "cc.TextAsset",
extends: cc.Asset,
properties: {
text: ""
},
toString: function() {
return this.text;
}
});
e.exports = cc.TextAsset = n;
}), {} ],
47: [ (function(t, e, i) {
var n = t("../event/event-target"), r = (t("../platform/CCSys"), t("../platform/js"), 
t("../utils/misc"), t("../CCGame"), t("../renderer/render-engine")), s = t("../renderer");
t("../platform/CCClass");
r.TextureAsset;
var a = r.gfx, o = new (t("../platform/id-generater"))("Tex"), h = cc.Enum({
RGB565: a.TEXTURE_FMT_R5_G6_B5,
RGB5A1: a.TEXTURE_FMT_R5_G5_B5_A1,
RGBA4444: a.TEXTURE_FMT_R4_G4_B4_A4,
RGB888: a.TEXTURE_FMT_RGB8,
RGBA8888: a.TEXTURE_FMT_RGBA8,
A8: a.TEXTURE_FMT_A8,
I8: a.TEXTURE_FMT_L8,
AI8: a.TEXTURE_FMT_L8_A8
}), l = cc.Enum({
REPEAT: 10497,
CLAMP_TO_EDGE: 33071,
MIRRORED_REPEAT: 33648
}), c = cc.Enum({
LINEAR: 9729,
NEAREST: 9728
}), u = {
9728: 0,
9729: 1
}, _ = [], m = {
width: void 0,
height: void 0,
minFilter: void 0,
magFilter: void 0,
wrapS: void 0,
wrapT: void 0,
format: void 0,
mipmap: void 0,
images: void 0,
image: void 0,
flipY: void 0,
premultiplyAlpha: void 0
};
function f() {
for (var t in m) m[t] = void 0;
_.length = 0;
m.images = _;
m.flipY = !1;
return m;
}
var d = cc.Class({
name: "cc.Texture2D",
extends: t("../assets/CCAsset"),
mixins: [ n ],
properties: {
_nativeAsset: {
get: function() {
return this._image;
},
set: function(t) {
this.initWithElement(t);
},
override: !0
},
_hasMipmap: !1,
_format: h.RGBA8888,
_premultiplyAlpha: !1,
_flipY: !1,
_minFilter: c.LINEAR,
_magFilter: c.LINEAR,
_wrapS: l.CLAMP_TO_EDGE,
_wrapT: l.CLAMP_TO_EDGE
},
statics: {
PixelFormat: h,
WrapMode: l,
Filter: c,
extnames: [ ".png", ".jpg", ".jpeg", ".bmp", ".webp" ]
},
ctor: function() {
this._id = o.getNewId();
this.url = "";
this.loaded = !1;
this.width = 0;
this.height = 0;
this._texture = null;
},
getImpl: function() {
return this._texture;
},
getId: function() {
return this._id;
},
toString: function() {
return this.url || "";
},
update: function(t) {
if (t) {
var e = !1;
void 0 !== t.width && (this.width = t.width);
void 0 !== t.height && (this.height = t.height);
if (void 0 !== t.minFilter) {
this._minFilter = t.minFilter;
t.minFilter = u[t.minFilter];
}
if (void 0 !== t.magFilter) {
this._magFilter = t.magFilter;
t.magFilter = u[t.magFilter];
}
void 0 !== t.wrapS && (this._wrapS = t.wrapS);
void 0 !== t.wrapT && (this._wrapT = t.wrapT);
void 0 !== t.format && (this._format = t.format);
if (void 0 !== t.flipY) {
this._flipY = t.flipY;
e = !0;
}
if (void 0 !== t.premultiplyAlpha) {
this._premultiplyAlpha = t.premultiplyAlpha;
e = !0;
}
void 0 !== t.mipmap && (this._hasMipmap = t.mipmap);
e && this._image && (t.image = this._image);
if (t.images && t.images.length > 0) this._image = t.images[0]; else if (void 0 !== t.image) {
this._image = t.image;
if (!t.images) {
_.length = 0;
t.images = _;
}
t.images.push(t.image);
}
t.images && t.images.length > 0 && this._texture.update(t);
}
},
initWithElement: function(t) {
if (t) {
this._image = t;
if (t.complete || t instanceof HTMLCanvasElement) this.handleLoadedTexture(); else {
var e = this;
t.addEventListener("load", (function() {
e.handleLoadedTexture();
}));
t.addEventListener("error", (function(t) {
cc.warnID(3119, t.message);
}));
}
}
},
initWithData: function(t, e, i, n) {
var r = f();
r.image = t;
r.format = e;
r.width = i;
r.height = n;
this.update(r);
this.width = i;
this.height = n;
this.loaded = !0;
this.emit("load");
return !0;
},
getHtmlElementObj: function() {
return this._image;
},
destroy: function() {
this._image = null;
this._texture && this._texture.destroy();
this._super();
},
getPixelFormat: function() {
return this._format;
},
hasPremultipliedAlpha: function() {
return this._premultiplyAlpha || !1;
},
hasMipmap: function() {
return this._hasMipmap || !1;
},
handleLoadedTexture: function() {
if (this._image && this._image.width && this._image.height) {
this.width = this._image.width;
this.height = this._image.height;
var t = f();
t.image = this._image;
t.images = [ t.image ];
t.width = this.width;
t.height = this.height;
t.hasMipmap = this._hasMipmap;
t.format = this._format;
t.premultiplyAlpha = this._premultiplyAlpha;
t.flipY = this._flipY;
t.minFilter = u[this._minFilter];
t.magFilter = u[this._magFilter];
t.wrapS = this._wrapS;
t.wrapT = this._wrapT;
this._texture ? this._texture.update(t) : this._texture = new s.Texture2D(s.device, t);
this.loaded = !0;
this.emit("load");
}
},
description: function() {
return "<cc.Texture2D | Name = " + this.url + " | Dimensions = " + this.width + " x " + this.height + ">";
},
releaseTexture: function() {
this._image = null;
this._texture && this._texture.destroy();
},
setWrapMode: function(t, e) {
if (this._wrapS !== t || this._wrapT !== e) {
var i = f();
i.wrapS = t;
i.wrapT = e;
this.update(i);
}
},
setFilters: function(t, e) {
if (this._minFilter !== t || this._magFilter !== e) {
var i = f();
i.minFilter = t;
i.magFilter = e;
this.update(i);
}
},
setFlipY: function(t) {
if (this._flipY !== t) {
var e = f();
e.flipY = t;
this.update(e);
}
},
setPremultiplyAlpha: function(t) {
if (this._premultiplyAlpha !== t) {
var e = f();
e.premultiplyAlpha = t;
this.update(e);
}
},
setMipmap: function(t) {
if (this._hasMipmap !== t) {
var e = f();
e.hasMipmap = t;
this.update(e);
}
},
_serialize: !1,
_deserialize: function(t, e) {
var i = t.split(","), n = i[0];
if (n) {
var r = n.charCodeAt(0) - 48, s = d.extnames[r];
this._setRawAsset(s || n);
var a = e.customEnv, o = a && a.uuid;
if (o) {
this._uuid = o;
var h = this.nativeUrl;
this.url = h;
}
}
if (6 === i.length) {
this._minFilter = parseInt(i[1]);
this._magFilter = parseInt(i[2]);
this._wrapS = parseInt(i[3]);
this._wrapT = parseInt(i[4]);
this._premultiplyAlpha = 49 === i[5].charCodeAt(0);
}
}
});
cc.Texture2D = e.exports = d;
}), {
"../CCGame": 27,
"../assets/CCAsset": 32,
"../event/event-target": 98,
"../platform/CCClass": 153,
"../platform/CCSys": 162,
"../platform/id-generater": 169,
"../platform/js": 173,
"../renderer": 194,
"../renderer/render-engine": 195,
"../utils/misc": 231
} ],
48: [ (function(t, e, i) {
t("./CCRawAsset");
t("./CCAsset");
t("./CCFont");
t("./CCPrefab");
t("./CCAudioClip");
t("./CCScripts");
t("./CCSceneAsset");
t("./CCSpriteFrame");
t("./CCTexture2D");
t("./CCRenderTexture");
t("./CCTTFFont");
t("./CCSpriteAtlas");
t("./CCBitmapFont");
t("./CCLabelAtlas");
t("./CCTextAsset");
t("./CCJsonAsset");
}), {
"./CCAsset": 32,
"./CCAudioClip": 33,
"./CCBitmapFont": 34,
"./CCFont": 35,
"./CCJsonAsset": 36,
"./CCLabelAtlas": 37,
"./CCPrefab": 38,
"./CCRawAsset": 39,
"./CCRenderTexture": 40,
"./CCSceneAsset": 41,
"./CCScripts": 42,
"./CCSpriteAtlas": 43,
"./CCSpriteFrame": 44,
"./CCTTFFont": 45,
"./CCTextAsset": 46,
"./CCTexture2D": 47
} ],
49: [ (function(t, e, i) {
t("../event-manager"), t("../CCNode").EventType;
var n = 56, r = 7, s = cc.Enum({
ONCE: 0,
ON_WINDOW_RESIZE: 1,
ALWAYS: 2
});
function a(t) {
return t instanceof cc.Scene ? cc.visibleRect : t._contentSize;
}
function o(t, e, i, n) {
for (var r = t._parent._scale.x, s = t._parent._scale.y, a = 0, o = 0, h = t._parent; ;) {
var l = h._position;
a += l.x;
o += l.y;
if (!(h = h._parent)) {
i.x = i.y = 0;
n.x = n.y = 1;
return;
}
if (h === e) break;
var c = h._scale.x, u = h._scale.y;
a *= c;
o *= u;
r *= c;
s *= u;
}
n.x = 0 !== r ? 1 / r : 1;
n.y = 0 !== s ? 1 / s : 1;
i.x = -a;
i.y = -o;
}
var h = cc.Vec2.ZERO, l = cc.Vec2.ONE;
function c(t, e) {
var i, s, c, u = e._target;
u ? o(t, i = u, s = h, c = l) : i = t._parent;
var _ = a(i), m = i._anchorPoint, f = i instanceof cc.Scene, d = t._position.x, p = t._position.y, g = t._anchorPoint;
if (e._alignFlags & n) {
var y, v, x = _.width;
if (f) {
y = cc.visibleRect.left.x;
v = cc.visibleRect.right.x;
} else v = (y = -m.x * x) + x;
y += e._isAbsLeft ? e._left : e._left * x;
v -= e._isAbsRight ? e._right : e._right * x;
if (u) {
y += s.x;
y *= c.x;
v += s.x;
v *= c.x;
}
var A, b = g.x, T = t._scale.x;
if (T < 0) {
b = 1 - b;
T = -T;
}
if (e.isStretchWidth) {
A = v - y;
0 !== T && (t.width = A / T);
d = y + b * A;
} else {
A = t.width * T;
if (e.isAlignHorizontalCenter) {
var C = e._isAbsHorizontalCenter ? e._horizontalCenter : e._horizontalCenter * x, w = (.5 - m.x) * _.width;
if (u) {
C *= c.x;
w += s.x;
w *= c.x;
}
d = w + (b - .5) * A + C;
} else d = e.isAlignLeft ? y + b * A : v + (b - 1) * A;
}
}
if (e._alignFlags & r) {
var S, E, D = _.height;
if (f) {
E = cc.visibleRect.bottom.y;
S = cc.visibleRect.top.y;
} else S = (E = -m.y * D) + D;
E += e._isAbsBottom ? e._bottom : e._bottom * D;
S -= e._isAbsTop ? e._top : e._top * D;
if (u) {
E += s.y;
E *= c.y;
S += s.y;
S *= c.y;
}
var M, I = g.y, P = t._scale.y;
if (P < 0) {
I = 1 - I;
P = -P;
}
if (e.isStretchHeight) {
M = S - E;
0 !== P && (t.height = M / P);
p = E + I * M;
} else {
M = t.height * P;
if (e.isAlignVerticalCenter) {
var B = e._isAbsVerticalCenter ? e._verticalCenter : e._verticalCenter * D, R = (.5 - m.y) * _.height;
if (u) {
B *= c.y;
R += s.y;
R *= c.y;
}
p = R + (I - .5) * M + B;
} else p = e.isAlignBottom ? E + I * M : S + (I - 1) * M;
}
}
t.setPosition(d, p);
}
function u() {
var t = cc.director.getScene();
if (t) {
m.isAligning = !0;
if (m._nodesOrderDirty) {
_.length = 0;
(function t(e) {
var i = e._widget;
if (i) {
c(e, i);
i.alignMode !== s.ALWAYS ? i.enabled = !1 : _.push(i);
}
for (var n = e._children, r = 0; r < n.length; r++) {
var a = n[r];
a._active && t(a);
}
})(t);
m._nodesOrderDirty = !1;
} else {
var e, i = m._activeWidgetsIterator;
for (i.i = 0; i.i < _.length; ++i.i) c((e = _[i.i]).node, e);
}
m.isAligning = !1;
}
0;
}
var _ = [];
var m = cc._widgetManager = e.exports = {
_AlignFlags: {
TOP: 1,
MID: 2,
BOT: 4,
LEFT: 8,
CENTER: 16,
RIGHT: 32
},
isAligning: !1,
_nodesOrderDirty: !1,
_activeWidgetsIterator: new cc.js.array.MutableForwardIterator(_),
init: function(t) {
t.on(cc.Director.EVENT_AFTER_UPDATE, u);
cc.sys.isMobile ? window.addEventListener("resize", this.onResized.bind(this)) : cc.view.on("canvas-resize", this.onResized, this);
},
add: function(t) {
t.node._widget = t;
this._nodesOrderDirty = !0;
0;
},
remove: function(t) {
t.node._widget = null;
this._activeWidgetsIterator.remove(t);
0;
},
onResized: function() {
var t = cc.director.getScene();
t && this.refreshWidgetOnResized(t);
},
refreshWidgetOnResized: function(t) {
var e = cc.Node.isNode(t) && t.getComponent(cc.Widget);
e && e.alignMode === s.ON_WINDOW_RESIZE && (e.enabled = !0);
for (var i = t._children, n = 0; n < i.length; n++) {
var r = i[n];
this.refreshWidgetOnResized(r);
}
},
updateAlignment: function t(e) {
var i = e._parent;
cc.Node.isNode(i) && t(i);
var n = e._widget || e.getComponent(cc.Widget);
n && c(e, n);
},
AlignMode: s
};
0;
}), {
"../CCNode": 28,
"../event-manager": 96
} ],
50: [ (function(t, e, i) {
var n = t("../utils/affine-transform"), r = t("../renderer/render-engine"), s = t("../renderer/index"), a = t("../CCGame"), o = cc.vmath.mat4, h = cc.vmath.vec2, l = cc.vmath.vec3, c = o.create(), u = o.create(), _ = l.create(), m = (l.create(), 
[]), f = null;
function d() {
if (f) {
var t = f._node, e = cc.visibleRect;
t.z = e.height / 1.1566;
t.x = _.x = e.width / 2;
t.y = _.y = e.height / 2;
_.z = 0;
t.lookAt(_);
}
}
var p = cc.Enum({
COLOR: 1,
DEPTH: 2,
STENCIL: 4
}), g = cc.Class({
name: "cc.Camera",
extends: cc.Component,
ctor: function() {
var t = new r.Camera();
t.setStages([ "transparent" ]);
this._fov = 60 * Math.PI / 180;
t.setFov(this._fov);
t.setNear(.1);
t.setFar(4096);
var e = new r.View();
t.view = e;
t.dirty = !0;
this._matrixDirty = !0;
this._inited = !1;
this._camera = t;
},
editor: !1,
properties: {
_cullingMask: 4294967295,
_clearFlags: 0,
_backgroundColor: cc.color(0, 0, 0, 255),
_depth: 0,
_zoomRatio: 1,
_targetTexture: null,
zoomRatio: {
get: function() {
return this._zoomRatio;
},
set: function(t) {
this._zoomRatio = t;
this._matrixDirty = !0;
}
},
cullingMask: {
get: function() {
return this._cullingMask;
},
set: function(t) {
this._cullingMask = t;
this._updateCameraMask();
}
},
clearFlags: {
get: function() {
return this._clearFlags;
},
set: function(t) {
this._clearFlags = t;
this._camera.setClearFlags(t);
}
},
backgroundColor: {
get: function() {
return this._backgroundColor;
},
set: function(t) {
this._backgroundColor = t;
this._updateBackgroundColor();
}
},
depth: {
get: function() {
return this._depth;
},
set: function(t) {
this._depth = t;
this._camera.setDepth(t);
}
},
targetTexture: {
get: function() {
return this._targetTexture;
},
set: function(t) {
this._targetTexture = t;
this._updateTargetTexture();
}
}
},
statics: {
main: null,
cameras: m,
ClearFlags: p,
findCamera: function(t) {
for (var e = 0, i = m.length; e < i; e++) {
var n = m[e];
if (n.containsNode(t)) return n;
}
return null;
},
_setupDebugCamera: function() {
if (!f) {
var t = new r.Camera();
f = t;
t.setStages([ "transparent" ]);
t.setFov(60 * Math.PI / 180);
t.setNear(.1);
t.setFar(4096);
var e = new r.View();
t.view = e;
t.dirty = !0;
t._cullingMask = t.view._cullingMask = 1 << cc.Node.BuiltinGroupIndex.DEBUG;
t.setDepth(cc.macro.MAX_ZINDEX);
t.setClearFlags(0);
t.setColor(0, 0, 0, 0);
var i = new cc.Node();
t.setNode(i);
d();
cc.view.on("design-resolution-changed", d);
s.scene.addCamera(t);
}
}
},
_updateCameraMask: function() {
var t = this._cullingMask & ~(1 << cc.Node.BuiltinGroupIndex.DEBUG);
this._camera._cullingMask = t;
this._camera.view._cullingMask = t;
},
_updateBackgroundColor: function() {
var t = this._backgroundColor;
this._camera.setColor(t.r / 255, t.g / 255, t.b / 255, t.a / 255);
},
_updateTargetTexture: function() {
var t = this._targetTexture;
this._camera._framebuffer = t ? t._framebuffer : null;
},
_onMatrixDirty: function() {
this._matrixDirty = !0;
},
_init: function() {
if (!this._inited) {
this._inited = !0;
this._camera.setNode(this.node);
this._camera.setClearFlags(this._clearFlags);
this._camera.setDepth(this._depth);
this._updateBackgroundColor();
this._updateCameraMask();
this._updateTargetTexture();
}
},
onLoad: function() {
this._init();
},
onEnable: function() {
this._matrixDirty = !0;
cc.director.on(cc.Director.EVENT_BEFORE_DRAW, this.beforeDraw, this);
a.renderType === a.RENDER_TYPE_WEBGL && s.scene.addCamera(this._camera);
m.push(this);
},
onDisable: function() {
cc.director.off(cc.Director.EVENT_BEFORE_DRAW, this.beforeDraw, this);
a.renderType === a.RENDER_TYPE_WEBGL && s.scene.removeCamera(this._camera);
cc.js.array.remove(m, this);
},
getNodeToCameraTransform: function(t) {
var e = n.identity();
t.getWorldMatrix(u);
if (this.containsNode(t)) {
this.getWorldToCameraMatrix(c);
o.mul(u, u, c);
}
n.fromMat4(e, u);
return e;
},
getCameraToWorldPoint: function(t, e) {
e = e || cc.v2();
this.getCameraToWorldMatrix(c);
h.transformMat4(e, t, c);
return e;
},
getWorldToCameraPoint: function(t, e) {
e = e || cc.v2();
this.getWorldToCameraMatrix(c);
h.transformMat4(e, t, c);
return e;
},
getCameraToWorldMatrix: function(t) {
this.getWorldToCameraMatrix(t);
o.invert(t, t);
return t;
},
getWorldToCameraMatrix: function(t) {
this.node.getWorldRT(c);
var e = this.zoomRatio;
c.m00 *= e;
c.m01 *= e;
c.m04 *= e;
c.m05 *= e;
var i = c.m12, n = c.m13, r = cc.visibleRect.center;
c.m12 = r.x - (c.m00 * i + c.m04 * n);
c.m13 = r.y - (c.m01 * i + c.m05 * n);
t !== c && o.copy(t, c);
return t;
},
containsNode: function(t) {
return t._cullingMask & this.cullingMask;
},
render: function(t) {
if (!(t = t || cc.director.getScene())) return null;
this.node.getWorldMatrix(c);
this.beforeDraw();
s._walker.visit(t);
s._forward.renderCamera(this._camera, s.scene);
},
beforeDraw: function() {
var t = this.node;
if (this._matrixDirty || t._worldMatDirty) {
var e = this._camera, i = 2 * Math.atan(Math.tan(this._fov / 2) / this.zoomRatio);
e.setFov(i);
var n = cc.visibleRect.height, r = this._targetTexture;
r && (n = r.height);
t._updateWorldMatrix();
_.x = t._worldMatrix.m12;
_.y = t._worldMatrix.m13;
_.z = 0;
t.z = n / 1.1566;
t.lookAt(_);
this._matrixDirty = !1;
e.dirty = !0;
}
}
});
e.exports = cc.Camera = g;
}), {
"../CCGame": 27,
"../renderer/index": 194,
"../renderer/render-engine": 195,
"../utils/affine-transform": 223
} ],
51: [ (function(t, e, i) {
cc.Collider.Box = cc.Class({
properties: {
_offset: cc.v2(0, 0),
_size: cc.size(100, 100),
offset: {
tooltip: !1,
get: function() {
return this._offset;
},
set: function(t) {
this._offset = t;
},
type: cc.Vec2
},
size: {
tooltip: !1,
get: function() {
return this._size;
},
set: function(t) {
this._size.width = t.width < 0 ? 0 : t.width;
this._size.height = t.height < 0 ? 0 : t.height;
},
type: cc.Size
}
},
resetInEditor: !1
});
var n = cc.Class({
name: "cc.BoxCollider",
extends: cc.Collider,
mixins: [ cc.Collider.Box ],
editor: !1
});
cc.BoxCollider = e.exports = n;
}), {} ],
52: [ (function(t, e, i) {
cc.Collider.Circle = cc.Class({
properties: {
_offset: cc.v2(0, 0),
_radius: 50,
offset: {
get: function() {
return this._offset;
},
set: function(t) {
this._offset = t;
},
type: cc.Vec2
},
radius: {
tooltip: !1,
get: function() {
return this._radius;
},
set: function(t) {
this._radius = t < 0 ? 0 : t;
}
}
},
resetInEditor: !1
});
var n = cc.Class({
name: "cc.CircleCollider",
extends: cc.Collider,
mixins: [ cc.Collider.Circle ],
editor: !1
});
cc.CircleCollider = e.exports = n;
}), {} ],
53: [ (function(t, e, i) {
var n = cc.Class({
name: "cc.Collider",
extends: cc.Component,
properties: {
editing: {
default: !1,
serializable: !1,
tooltip: !1
},
tag: {
tooltip: !1,
default: 0,
range: [ 0, 1e7 ],
type: cc.Integer
}
},
onDisable: function() {
cc.director.getCollisionManager().removeCollider(this);
},
onEnable: function() {
cc.director.getCollisionManager().addCollider(this);
}
});
cc.Collider = e.exports = n;
}), {} ],
54: [ (function(t, e, i) {
var n = t("./CCContact"), r = n.CollisionType, s = t("../CCNode").EventType, a = cc.vmath, o = cc.v2();
var h = cc.Class({
mixins: [ cc.EventTarget ],
properties: {
enabled: !1,
enabledDrawBoundingBox: !1
},
ctor: function() {
this._contacts = [];
this._colliders = [];
this._debugDrawer = null;
this._enabledDebugDraw = !1;
cc.director._scheduler && cc.director._scheduler.enableForTarget(this);
},
update: function(t) {
if (this.enabled) {
var e = void 0, i = void 0, n = this._colliders;
for (e = 0, i = n.length; e < i; e++) this.updateCollider(n[e]);
var s = this._contacts, a = [];
for (e = 0, i = s.length; e < i; e++) {
var o = s[e].updateState();
o !== r.None && a.push([ o, s[e] ]);
}
for (e = 0, i = a.length; e < i; e++) {
var h = a[e];
this._doCollide(h[0], h[1]);
}
this.drawColliders();
}
},
_doCollide: function(t, e) {
var i = void 0;
switch (t) {
case r.CollisionEnter:
i = "onCollisionEnter";
break;

case r.CollisionStay:
i = "onCollisionStay";
break;

case r.CollisionExit:
i = "onCollisionExit";
}
var n = e.collider1, s = e.collider2, a = n.node._components, o = s.node._components, h = void 0, l = void 0, c = void 0;
for (h = 0, l = a.length; h < l; h++) (c = a[h])[i] && c[i](s, n);
for (h = 0, l = o.length; h < l; h++) (c = o[h])[i] && c[i](n, s);
},
shouldCollide: function(t, e) {
var i = t.node, n = e.node, r = cc.game.collisionMatrix;
return i !== n && r[i.groupIndex][n.groupIndex];
},
initCollider: function(t) {
if (!t.world) {
var e = t.world = {};
e.aabb = cc.rect();
e.preAabb = cc.rect();
e.matrix = a.mat4.create();
e.radius = 0;
if (t instanceof cc.BoxCollider) {
e.position = null;
e.points = [ cc.v2(), cc.v2(), cc.v2(), cc.v2() ];
} else if (t instanceof cc.PolygonCollider) {
e.position = null;
e.points = t.points.map((function(t) {
return cc.v2(t.x, t.y);
}));
} else if (t instanceof cc.CircleCollider) {
e.position = cc.v2();
e.points = null;
}
}
},
updateCollider: function(t) {
var e = t.offset, i = t.world, n = i.aabb, r = i.matrix;
t.node.getWorldMatrix(r);
var s = i.preAabb;
s.x = n.x;
s.y = n.y;
s.width = n.width;
s.height = n.height;
if (t instanceof cc.BoxCollider) {
var h = t.size;
n.x = e.x - h.width / 2;
n.y = e.y - h.height / 2;
n.width = h.width;
n.height = h.height;
var l = i.points, c = l[0], u = l[1], _ = l[2], m = l[3];
(function(t, e, i, n, r, s) {
var a = t.x, o = t.y, h = t.width, l = t.height, c = e.m00, u = e.m01, _ = e.m04, m = e.m05, f = c * a + _ * o + e.m12, d = u * a + m * o + e.m13, p = c * h, g = u * h, y = _ * l, v = m * l;
n.x = f;
n.y = d;
r.x = p + f;
r.y = g + d;
i.x = y + f;
i.y = v + d;
s.x = p + y + f;
s.y = g + v + d;
})(n, r, c, u, _, m);
var f = Math.min(c.x, u.x, _.x, m.x), d = Math.min(c.y, u.y, _.y, m.y), p = Math.max(c.x, u.x, _.x, m.x), g = Math.max(c.y, u.y, _.y, m.y);
n.x = f;
n.y = d;
n.width = p - f;
n.height = g - d;
} else if (t instanceof cc.CircleCollider) {
a.vec2.transformMat4(o, t.offset, r);
i.position.x = o.x;
i.position.y = o.y;
var y = r.m12, v = r.m13;
r.m12 = r.m13 = 0;
o.x = t.radius;
o.y = 0;
a.vec2.transformMat4(o, o, r);
var x = Math.sqrt(o.x * o.x + o.y * o.y);
i.radius = x;
n.x = i.position.x - x;
n.y = i.position.y - x;
n.width = 2 * x;
n.height = 2 * x;
r.m12 = y;
r.m13 = v;
} else if (t instanceof cc.PolygonCollider) {
var A = t.points, b = i.points;
b.length = A.length;
for (var T = 1e6, C = 1e6, w = -1e6, S = -1e6, E = 0, D = A.length; E < D; E++) {
b[E] || (b[E] = cc.v2());
o.x = A[E].x + e.x;
o.y = A[E].y + e.y;
a.vec2.transformMat4(o, o, r);
var M = o.x, I = o.y;
b[E].x = M;
b[E].y = I;
M > w && (w = M);
M < T && (T = M);
I > S && (S = I);
I < C && (C = I);
}
n.x = T;
n.y = C;
n.width = w - T;
n.height = S - C;
}
},
addCollider: function(t) {
var e = this._colliders;
if (-1 === e.indexOf(t)) {
for (var i = 0, r = e.length; i < r; i++) {
var a = e[i];
if (this.shouldCollide(t, a)) {
var o = new n(t, a);
this._contacts.push(o);
}
}
e.push(t);
this.initCollider(t);
}
t.node.on(s.GROUP_CHANGED, this.onNodeGroupChanged, this);
},
removeCollider: function(t) {
var e = this._colliders, i = e.indexOf(t);
if (i >= 0) {
e.splice(i, 1);
for (var n = this._contacts, a = n.length - 1; a >= 0; a--) {
var o = n[a];
if (o.collider1 === t || o.collider2 === t) {
o.touching && this._doCollide(r.CollisionExit, o);
n.splice(a, 1);
}
}
t.node.off(s.GROUP_CHANGED, this.onNodeGroupChanged, this);
} else cc.errorID(6600);
},
onNodeGroupChanged: function(t) {
for (var e = t.getComponents(cc.Collider), i = 0, n = e.length; i < n; i++) {
this.removeCollider(e[i]);
this.addCollider(e[i]);
}
},
drawColliders: function() {
if (this._enabledDebugDraw) {
this._checkDebugDrawValid();
var t = this._debugDrawer;
t.clear();
for (var e = this._colliders, i = 0, n = e.length; i < n; i++) {
var r = e[i];
t.strokeColor = cc.Color.WHITE;
if (r instanceof cc.BoxCollider || r instanceof cc.PolygonCollider) {
var s = r.world.points;
if (s.length > 0) {
t.moveTo(s[0].x, s[0].y);
for (var a = 1; a < s.length; a++) t.lineTo(s[a].x, s[a].y);
t.close();
t.stroke();
}
} else if (r instanceof cc.CircleCollider) {
t.circle(r.world.position.x, r.world.position.y, r.world.radius);
t.stroke();
}
if (this.enabledDrawBoundingBox) {
var o = r.world.aabb;
t.strokeColor = cc.Color.BLUE;
t.moveTo(o.xMin, o.yMin);
t.lineTo(o.xMin, o.yMax);
t.lineTo(o.xMax, o.yMax);
t.lineTo(o.xMax, o.yMin);
t.close();
t.stroke();
}
}
}
},
_checkDebugDrawValid: function() {
if (!this._debugDrawer || !this._debugDrawer.isValid) {
var t = new cc.Node("COLLISION_MANAGER_DEBUG_DRAW");
t.zIndex = cc.macro.MAX_ZINDEX;
cc.game.addPersistRootNode(t);
this._debugDrawer = t.addComponent(cc.Graphics);
}
}
});
cc.js.getset(h.prototype, "enabledDebugDraw", (function() {
return this._enabledDebugDraw;
}), (function(t) {
if (t && !this._enabledDebugDraw) {
this._checkDebugDrawValid();
this._debugDrawer.node.active = !0;
} else if (!t && this._enabledDebugDraw) {
this._debugDrawer.clear(!0);
this._debugDrawer.node.active = !1;
}
this._enabledDebugDraw = t;
}));
cc.CollisionManager = e.exports = h;
}), {
"../CCNode": 28,
"./CCContact": 55
} ],
55: [ (function(t, e, i) {
var n = t("./CCIntersection"), r = cc.Enum({
None: 0,
CollisionEnter: 1,
CollisionStay: 2,
CollisionExit: 3
});
function s(t, e) {
this.collider1 = t;
this.collider2 = e;
this.touching = !1;
var i = t instanceof cc.BoxCollider || t instanceof cc.PolygonCollider, r = e instanceof cc.BoxCollider || e instanceof cc.PolygonCollider, s = t instanceof cc.CircleCollider, a = e instanceof cc.CircleCollider;
if (i && r) this.testFunc = n.polygonPolygon; else if (s && a) this.testFunc = n.circleCircle; else if (i && a) this.testFunc = n.polygonCircle; else if (s && r) {
this.testFunc = n.polygonCircle;
this.collider1 = e;
this.collider2 = t;
} else cc.errorID(6601, cc.js.getClassName(t), cc.js.getClassName(e));
}
s.prototype.test = function() {
var t = this.collider1.world, e = this.collider2.world;
return !!t.aabb.intersects(e.aabb) && (this.testFunc === n.polygonPolygon ? this.testFunc(t.points, e.points) : this.testFunc === n.circleCircle ? this.testFunc(t, e) : this.testFunc === n.polygonCircle && this.testFunc(t.points, e));
};
s.prototype.updateState = function() {
var t = this.test(), e = r.None;
if (t && !this.touching) {
this.touching = !0;
e = r.CollisionEnter;
} else if (t && this.touching) e = r.CollisionStay; else if (!t && this.touching) {
this.touching = !1;
e = r.CollisionExit;
}
return e;
};
s.CollisionType = r;
e.exports = s;
}), {
"./CCIntersection": 56
} ],
56: [ (function(t, e, i) {
var n = {};
function r(t, e, i, n) {
var r = (n.x - i.x) * (t.y - i.y) - (n.y - i.y) * (t.x - i.x), s = (e.x - t.x) * (t.y - i.y) - (e.y - t.y) * (t.x - i.x), a = (n.y - i.y) * (e.x - t.x) - (n.x - i.x) * (e.y - t.y);
if (0 !== a) {
var o = r / a, h = s / a;
if (0 <= o && o <= 1 && 0 <= h && h <= 1) return !0;
}
return !1;
}
n.lineLine = r;
n.lineRect = function(t, e, i) {
var n = new cc.Vec2(i.x, i.y), s = new cc.Vec2(i.x, i.yMax), a = new cc.Vec2(i.xMax, i.yMax), o = new cc.Vec2(i.xMax, i.y);
return !!(r(t, e, n, s) || r(t, e, s, a) || r(t, e, a, o) || r(t, e, o, n));
};
function s(t, e, i) {
for (var n = i.length, s = 0; s < n; ++s) {
if (r(t, e, i[s], i[(s + 1) % n])) return !0;
}
return !1;
}
n.linePolygon = s;
n.rectRect = function(t, e) {
var i = t.x, n = t.y, r = t.x + t.width, s = t.y + t.height, a = e.x, o = e.y, h = e.x + e.width, l = e.y + e.height;
return i <= h && r >= a && n <= l && s >= o;
};
n.rectPolygon = function(t, e) {
var i, n, r = new cc.Vec2(t.x, t.y), o = new cc.Vec2(t.x, t.yMax), h = new cc.Vec2(t.xMax, t.yMax), l = new cc.Vec2(t.xMax, t.y);
if (s(r, o, e)) return !0;
if (s(o, h, e)) return !0;
if (s(h, l, e)) return !0;
if (s(l, r, e)) return !0;
for (i = 0, n = e.length; i < n; ++i) if (a(e[i], t)) return !0;
return !!(a(r, e) || a(o, e) || a(h, e) || a(l, e));
};
n.polygonPolygon = function(t, e) {
var i, n;
for (i = 0, n = t.length; i < n; ++i) if (s(t[i], t[(i + 1) % n], e)) return !0;
for (i = 0, n = e.length; i < n; ++i) if (a(e[i], t)) return !0;
for (i = 0, n = t.length; i < n; ++i) if (a(t[i], e)) return !0;
return !1;
};
n.circleCircle = function(t, e) {
return t.position.sub(e.position).mag() < t.radius + e.radius;
};
n.polygonCircle = function(t, e) {
var i = e.position;
if (a(i, t)) return !0;
for (var n = 0, r = t.length; n < r; n++) if (o(i, 0 === n ? t[t.length - 1] : t[n - 1], t[n], !0) < e.radius) return !0;
return !1;
};
function a(t, e) {
for (var i = !1, n = t.x, r = t.y, s = e.length, a = 0, o = s - 1; a < s; o = a++) {
var h = e[a].x, l = e[a].y, c = e[o].x, u = e[o].y;
l > r != u > r && n < (c - h) * (r - l) / (u - l) + h && (i = !i);
}
return i;
}
n.pointInPolygon = a;
function o(t, e, i, n) {
var r, s = i.x - e.x, a = i.y - e.y, o = s * s + a * a, h = ((t.x - e.x) * s + (t.y - e.y) * a) / o;
r = n ? o ? h < 0 ? e : h > 1 ? i : cc.v2(e.x + h * s, e.y + h * a) : e : cc.v2(e.x + h * s, e.y + h * a);
s = t.x - r.x;
a = t.y - r.y;
return Math.sqrt(s * s + a * a);
}
n.pointLineDistance = o;
cc.Intersection = e.exports = n;
}), {} ],
57: [ (function(t, e, i) {
cc.Collider.Polygon = cc.Class({
properties: {
threshold: {
default: 1,
serializable: !1,
visible: !1
},
_offset: cc.v2(0, 0),
offset: {
get: function() {
return this._offset;
},
set: function(t) {
this._offset = t;
},
type: cc.Vec2
},
points: {
tooltip: !1,
default: function() {
return [ cc.v2(-50, -50), cc.v2(50, -50), cc.v2(50, 50), cc.v2(-50, 50) ];
},
type: [ cc.Vec2 ]
}
},
resetPointsByContour: !1
});
var n = cc.Class({
name: "cc.PolygonCollider",
extends: cc.Collider,
mixins: [ cc.Collider.Polygon ],
editor: !1
});
cc.PolygonCollider = e.exports = n;
}), {} ],
58: [ (function(t, e, i) {
t("./CCCollisionManager");
t("./CCCollider");
t("./CCBoxCollider");
t("./CCCircleCollider");
t("./CCPolygonCollider");
}), {
"./CCBoxCollider": 51,
"./CCCircleCollider": 52,
"./CCCollider": 53,
"./CCCollisionManager": 54,
"./CCPolygonCollider": 57
} ],
59: [ (function(i, n, r) {
i("./platform/CCClass");
var s = i("./platform/CCObject").Flags, a = i("./platform/js").array, o = s.IsStartCalled, h = s.IsOnEnableCalled, l = (s.IsEditorOnEnableCalled, 
function(t) {
t.start();
t._objFlags |= o;
}), c = function(t, e) {
t.update(e);
}, u = function(t, e) {
t.lateUpdate(e);
};
function _(t, e) {
for (var i = e.constructor._executionOrder, n = e._id, r = 0, s = t.length - 1, a = s >>> 1; r <= s; a = r + s >>> 1) {
var o = t[a], h = o.constructor._executionOrder;
if (h > i) s = a - 1; else if (h < i) r = a + 1; else {
var l = o._id;
if (l > n) s = a - 1; else {
if (!(l < n)) return a;
r = a + 1;
}
}
}
return ~r;
}
function m(t, e) {
for (var i = t.array, n = t.i + 1; n < i.length; ) {
var r = i[n];
if (r._enabled && r.node._activeInHierarchy) ++n; else {
t.removeAt(n);
e && (r._objFlags &= ~e);
}
}
}
var f = cc.Class({
__ctor__: function(t) {
var e = a.MutableForwardIterator;
this._zero = new e([]);
this._neg = new e([]);
this._pos = new e([]);
0;
this._invoke = t;
},
statics: {
stableRemoveInactive: m
},
add: null,
remove: null,
invoke: null
});
function d(t, e) {
return t.constructor._executionOrder - e.constructor._executionOrder;
}
var p = cc.Class({
extends: f,
add: function(t) {
var e = t.constructor._executionOrder;
(0 === e ? this._zero : e < 0 ? this._neg : this._pos).array.push(t);
},
remove: function(t) {
var e = t.constructor._executionOrder;
(0 === e ? this._zero : e < 0 ? this._neg : this._pos).fastRemove(t);
},
cancelInactive: function(t) {
m(this._zero, t);
m(this._neg, t);
m(this._pos, t);
},
invoke: function() {
var t = this._neg;
if (t.array.length > 0) {
t.array.sort(d);
this._invoke(t);
t.array.length = 0;
}
this._invoke(this._zero);
this._zero.array.length = 0;
var e = this._pos;
if (e.array.length > 0) {
e.array.sort(d);
this._invoke(e);
e.array.length = 0;
}
}
}), g = cc.Class({
extends: f,
add: function(t) {
var e = t.constructor._executionOrder;
if (0 === e) this._zero.array.push(t); else {
var i = e < 0 ? this._neg.array : this._pos.array, n = _(i, t);
n < 0 && i.splice(~n, 0, t);
}
},
remove: function(t) {
var e = t.constructor._executionOrder;
if (0 === e) this._zero.fastRemove(t); else {
var i = e < 0 ? this._neg : this._pos, n = _(i.array, t);
n >= 0 && i.removeAt(n);
}
},
invoke: function(t) {
this._neg.array.length > 0 && this._invoke(this._neg, t);
this._invoke(this._zero, t);
this._pos.array.length > 0 && this._invoke(this._pos, t);
}
});
function y(i, n) {
if ("function" === ("object" === (e = typeof i) ? t(i) : e)) return n ? function(t, e) {
var n = t.array;
for (t.i = 0; t.i < n.length; ++t.i) {
var r = n[t.i];
i(r, e);
}
} : function(t) {
var e = t.array;
for (t.i = 0; t.i < e.length; ++t.i) {
var n = e[t.i];
i(n);
}
};
var r = "var a=it.array;for(it.i=0;it.i<a.length;++it.i){var c=a[it.i];" + i + "}";
return n ? Function("it", "dt", r) : Function("it", r);
}
function v() {
this.startInvoker = new p(y(l));
this.updateInvoker = new g(y(c, !0));
this.lateUpdateInvoker = new g(y(u, !0));
this.scheduleInNextFrame = [];
this._updating = !1;
}
var x = cc.Class({
ctor: v,
unscheduleAll: v,
statics: {
LifeCycleInvoker: f,
OneOffInvoker: p,
createInvokeImpl: y,
invokeOnEnable: function(t) {
var e = cc.director._compScheduler, i = t.array;
for (t.i = 0; t.i < i.length; ++t.i) {
var n = i[t.i];
if (n._enabled) {
n.onEnable();
!n.node._activeInHierarchy || e._onEnabled(n);
}
}
}
},
_onEnabled: function(t) {
cc.director.getScheduler().resumeTarget(t);
t._objFlags |= h;
this._updating ? this.scheduleInNextFrame.push(t) : this._scheduleImmediate(t);
},
_onDisabled: function(t) {
cc.director.getScheduler().pauseTarget(t);
t._objFlags &= ~h;
var e = this.scheduleInNextFrame.indexOf(t);
if (e >= 0) a.fastRemoveAt(this.scheduleInNextFrame, e); else {
!t.start || t._objFlags & o || this.startInvoker.remove(t);
t.update && this.updateInvoker.remove(t);
t.lateUpdate && this.lateUpdateInvoker.remove(t);
}
},
enableComp: function(t, e) {
if (!(t._objFlags & h)) {
if (t.onEnable) {
if (e) {
e.add(t);
return;
}
t.onEnable();
if (!t.node._activeInHierarchy) return;
}
this._onEnabled(t);
}
},
disableComp: function(t) {
if (t._objFlags & h) {
t.onDisable && t.onDisable();
this._onDisabled(t);
}
},
_scheduleImmediate: function(t) {
!t.start || t._objFlags & o || this.startInvoker.add(t);
t.update && this.updateInvoker.add(t);
t.lateUpdate && this.lateUpdateInvoker.add(t);
},
_deferredSchedule: function() {
for (var t = this.scheduleInNextFrame, e = 0, i = t.length; e < i; e++) {
var n = t[e];
this._scheduleImmediate(n);
}
t.length = 0;
},
startPhase: function() {
this._updating = !0;
this.scheduleInNextFrame.length > 0 && this._deferredSchedule();
this.startInvoker.invoke();
},
updatePhase: function(t) {
this.updateInvoker.invoke(t);
},
lateUpdatePhase: function(t) {
this.lateUpdateInvoker.invoke(t);
this._updating = !1;
}
});
n.exports = x;
}), {
"./platform/CCClass": 153,
"./platform/CCObject": 159,
"./platform/js": 173,
"./utils/misc": 231
} ],
60: [ (function(t, e, i) {
var n = t("../../animation/animation-animator"), r = t("../../animation/animation-clip"), s = t("../event/event-target"), a = t("../platform/js");
function o(t, e) {
return t === e || t && e && (t.name === e.name || t._uuid === e._uuid);
}
var h = cc.Class({
name: "cc.Animation",
extends: t("./CCComponent"),
mixins: [ s ],
editor: !1,
ctor: function() {
cc.EventTarget.call(this);
this._animator = null;
this._nameToState = a.createMap(!0);
this._didInit = !1;
this._currentClip = null;
},
properties: {
_defaultClip: {
default: null,
type: r
},
defaultClip: {
type: r,
get: function() {
return this._defaultClip;
},
set: function(t) {},
tooltip: !1
},
currentClip: {
get: function() {
return this._currentClip;
},
set: function(t) {
this._currentClip = t;
},
type: r,
visible: !1
},
_clips: {
default: [],
type: [ r ],
tooltip: !1,
visible: !0
},
playOnLoad: {
default: !1,
tooltip: !1
}
},
start: function() {
if (this.playOnLoad && this._defaultClip) {
if (!(this._animator && this._animator.isPlaying)) {
var t = this.getAnimationState(this._defaultClip.name);
this._animator.playState(t);
}
}
},
onEnable: function() {
this._animator && this._animator.resume();
},
onDisable: function() {
this._animator && this._animator.pause();
},
onDestroy: function() {
this.stop();
},
getClips: function() {
return this._clips;
},
play: function(t, e) {
var i = this.playAdditive(t, e);
this._animator.stopStatesExcept(i);
return i;
},
playAdditive: function(t, e) {
this._init();
var i = this.getAnimationState(t || this._defaultClip && this._defaultClip.name);
if (i) {
this.enabled = !0;
var n = this._animator;
if (n.isPlaying && i.isPlaying) if (i.isPaused) n.resumeState(i); else {
n.stopState(i);
n.playState(i, e);
} else n.playState(i, e);
this.enabledInHierarchy || n.pause();
this.currentClip = i.clip;
}
return i;
},
stop: function(t) {
if (this._didInit) if (t) {
var e = this._nameToState[t];
e && this._animator.stopState(e);
} else this._animator.stop();
},
pause: function(t) {
if (this._didInit) if (t) {
var e = this._nameToState[t];
e && this._animator.pauseState(e);
} else this.enabled = !1;
},
resume: function(t) {
if (this._didInit) if (t) {
var e = this._nameToState[t];
e && this._animator.resumeState(e);
} else this.enabled = !0;
},
setCurrentTime: function(t, e) {
this._init();
if (e) {
var i = this._nameToState[e];
i && this._animator.setStateTime(i, t);
} else this._animator.setStateTime(t);
},
getAnimationState: function(t) {
this._init();
var e = this._nameToState[t];
0;
e && !e.curveLoaded && this._animator._reloadClip(e);
return e || null;
},
addClip: function(t, e) {
if (t) {
this._init();
cc.js.array.contains(this._clips, t) || this._clips.push(t);
e = e || t.name;
var i = this._nameToState[e];
if (i) {
if (i.clip === t) return i;
var n = this._clips.indexOf(i.clip);
-1 !== n && this._clips.splice(n, 1);
}
var r = new cc.AnimationState(t, e);
this._nameToState[e] = r;
return r;
}
cc.warnID(3900);
},
removeClip: function(t, e) {
if (t) {
this._init();
var i;
for (var n in this._nameToState) {
if ((i = this._nameToState[n]).clip === t) break;
}
if (t === this._defaultClip) {
if (!e) {
cc.warnID(3902);
return;
}
this._defaultClip = null;
}
if (i && i.isPlaying) {
if (!e) {
cc.warnID(3903);
return;
}
this.stop(i.name);
}
this._clips = this._clips.filter((function(e) {
return e !== t;
}));
i && delete this._nameToState[i.name];
} else cc.warnID(3901);
},
sample: function(t) {
this._init();
if (t) {
var e = this._nameToState[t];
e && e.sample();
} else this._animator.sample();
},
on: function(t, e, i, n) {
this._init();
for (var r = this._EventTargetOn(t, e, i, n), s = this._animator._anims.array, a = 0; a < s.length; ++a) s[a]._setListeners(this);
return r;
},
off: function(t, e, i, n) {
this._init();
this._EventTargetOff(t, e, i, n);
var r = this._nameToState;
for (var s in r) {
r[s]._setListeners(null);
}
},
_init: function() {
if (!this._didInit) {
this._didInit = !0;
this._animator = new n(this.node, this);
this._createStates();
}
},
_createStates: function() {
this._nameToState = a.createMap(!0);
for (var t = null, e = !1, i = 0; i < this._clips.length; ++i) {
var n = this._clips[i];
if (n) {
t = new cc.AnimationState(n);
0;
this._nameToState[t.name] = t;
o(this._defaultClip, n) && (e = t);
}
}
if (this._defaultClip && !e) {
t = new cc.AnimationState(this._defaultClip);
0;
this._nameToState[t.name] = t;
}
}
});
h.prototype._EventTargetOn = s.prototype.on;
h.prototype._EventTargetOff = s.prototype.off;
cc.Animation = e.exports = h;
}), {
"../../animation/animation-animator": 9,
"../../animation/animation-clip": 10,
"../event/event-target": 98,
"../platform/js": 173,
"./CCComponent": 65
} ],
61: [ (function(i, n, r) {
var s = i("../utils/misc"), a = i("./CCComponent"), o = i("../../audio/CCAudio"), h = i("../assets/CCAudioClip"), l = cc.Class({
name: "cc.AudioSource",
extends: a,
editor: !1,
ctor: function() {
this.audio = new o();
},
properties: {
_clip: {
default: null,
type: h
},
_volume: 1,
_mute: !1,
_loop: !1,
_pausedFlag: {
default: !1,
serializable: !1
},
isPlaying: {
get: function() {
return this.audio.getState() === cc.Audio.State.PLAYING;
},
visible: !1
},
clip: {
get: function() {
return this._clip;
},
set: function(i) {
var n = this;
if ("string" === ("object" === (e = typeof i) ? t(i) : e)) {
var r = (function() {
cc.warnID(8401, "cc.AudioSource", "cc.AudioClip", "AudioClip", "cc.AudioClip", "audio");
var t = n;
h._loadByUrl(i, (function(e, i) {
i && (t.clip = i);
}));
return {
v: void 0
};
})();
if ("object" === ("object" === (e = typeof r) ? t(r) : e)) return r.v;
}
if (i !== this._clip) {
this._clip = i;
this.audio.stop();
this.preload && (this.audio.src = this._clip);
}
},
type: h,
tooltip: !1,
animatable: !1
},
volume: {
get: function() {
return this._volume;
},
set: function(t) {
t = s.clamp01(t);
this._volume = t;
this._mute || this.audio.setVolume(t);
return t;
},
tooltip: !1
},
mute: {
get: function() {
return this._mute;
},
set: function(t) {
this._mute = t;
this.audio.setVolume(t ? 0 : this._volume);
return t;
},
animatable: !1,
tooltip: !1
},
loop: {
get: function() {
return this._loop;
},
set: function(t) {
this._loop = t;
this.audio.setLoop(t);
return t;
},
animatable: !1,
tooltip: !1
},
playOnLoad: {
default: !1,
tooltip: !1,
animatable: !1
},
preload: {
default: !1,
animatable: !1
}
},
_ensureDataLoaded: function() {
this.audio.src !== this._clip && (this.audio.src = this._clip);
},
_pausedCallback: function() {
if (!this.audio.paused) {
this.audio.pause();
this._pausedFlag = !0;
}
},
_restoreCallback: function() {
this._pausedFlag && this.audio.resume();
this._pausedFlag = !1;
},
onLoad: function() {
this.audio.setVolume(this._mute ? 0 : this._volume);
this.audio.setLoop(this._loop);
},
onEnable: function() {
this.preload && (this.audio.src = this._clip);
this.playOnLoad && this.play();
cc.game.on(cc.game.EVENT_HIDE, this._pausedCallback, this);
cc.game.on(cc.game.EVENT_SHOW, this._restoreCallback, this);
},
onDisable: function() {
this.stop();
cc.game.off(cc.game.EVENT_HIDE, this._pausedCallback, this);
cc.game.off(cc.game.EVENT_SHOW, this._restoreCallback, this);
},
onDestroy: function() {
this.stop();
this.audio.destroy();
cc.audioEngine.uncache(this._clip);
},
play: function() {
if (this._clip) {
var t = this.audio;
this._clip.loaded && t.stop();
this._ensureDataLoaded();
t.setCurrentTime(0);
t.play();
}
},
stop: function() {
this.audio.stop();
},
pause: function() {
this.audio.pause();
},
resume: function() {
this._ensureDataLoaded();
this.audio.resume();
},
rewind: function() {
this.audio.setCurrentTime(0);
},
getCurrentTime: function() {
return this.audio.getCurrentTime();
},
setCurrentTime: function(t) {
this.audio.setCurrentTime(t);
return t;
},
getDuration: function() {
return this.audio.getDuration();
}
});
cc.AudioSource = n.exports = l;
}), {
"../../audio/CCAudio": 296,
"../assets/CCAudioClip": 33,
"../utils/misc": 231,
"./CCComponent": 65
} ],
62: [ (function(t, e, i) {
var n = [ "touchstart", "touchmove", "touchend", "mousedown", "mousemove", "mouseup", "mouseenter", "mouseleave", "mousewheel" ];
function r(t) {
t.stopPropagation();
}
var s = cc.Class({
name: "cc.BlockInputEvents",
extends: t("./CCComponent"),
editor: {
menu: "i18n:MAIN_MENU.component.ui/Block Input Events",
inspector: "packages://inspector/inspectors/comps/block-input-events.js",
help: "i18n:COMPONENT.help_url.block-input-events"
},
onEnable: function() {
for (var t = 0; t < n.length; t++) this.node.on(n[t], r, this);
},
onDisable: function() {
for (var t = 0; t < n.length; t++) this.node.off(n[t], r, this);
}
});
cc.BlockInputEvents = e.exports = s;
}), {
"./CCComponent": 65
} ],
63: [ (function(t, e, i) {
var n = t("./CCComponent"), r = t("../utils/misc"), s = cc.Enum({
NONE: 0,
COLOR: 1,
SPRITE: 2,
SCALE: 3
}), a = cc.Class({
name: "cc.Button",
extends: n,
ctor: function() {
this._resetState();
this._fromColor = null;
this._toColor = null;
this._time = 0;
this._transitionFinished = !0;
this._fromScale = 1;
this._toScale = 1;
this._originalScale = 1;
this._sprite = null;
0;
},
_resetState: function() {
this._pressed = !1;
this._hovered = !1;
},
editor: !1,
properties: {
interactable: {
default: !0,
tooltip: !1,
notify: function(t) {
0;
this._updateState();
this.interactable || this._resetState();
},
animatable: !1
},
_resizeToTarget: {
animatable: !1,
set: function(t) {
t && this._resizeNodeToTargetNode();
}
},
enableAutoGrayEffect: {
default: !1,
tooltip: !1,
notify: function() {
this._updateDisabledState();
}
},
transition: {
default: s.NONE,
tooltip: !1,
type: s,
animatable: !1
},
normalColor: {
default: cc.color(214, 214, 214),
displayName: "Normal",
tooltip: !1,
notify: function() {
this._updateState();
}
},
pressedColor: {
default: cc.color(211, 211, 211),
displayName: "Pressed",
tooltip: !1
},
hoverColor: {
default: cc.Color.WHITE,
displayName: "Hover",
tooltip: !1
},
disabledColor: {
default: cc.color(124, 124, 124),
displayName: "Disabled",
tooltip: !1,
notify: function() {
this._updateState();
}
},
duration: {
default: .1,
range: [ 0, 10 ],
tooltip: !1
},
zoomScale: {
default: 1.2,
tooltip: !1
},
normalSprite: {
default: null,
type: cc.SpriteFrame,
displayName: "Normal",
tooltip: !1,
notify: function() {
this._updateState();
}
},
pressedSprite: {
default: null,
type: cc.SpriteFrame,
displayName: "Pressed",
tooltip: !1,
formerlySerializedAs: "pressedSprite",
notify: function() {
this._updateState();
}
},
hoverSprite: {
default: null,
type: cc.SpriteFrame,
displayName: "Hover",
tooltip: !1,
formerlySerializedAs: "hoverSprite",
notify: function() {
this._updateState();
}
},
disabledSprite: {
default: null,
type: cc.SpriteFrame,
displayName: "Disabled",
tooltip: !1,
notify: function() {
this._updateState();
}
},
target: {
default: null,
type: cc.Node,
tooltip: !1,
notify: function() {
this._applyTarget();
}
},
clickEvents: {
default: [],
type: cc.Component.EventHandler,
tooltip: !1
}
},
statics: {
Transition: s
},
__preload: function() {
this.target || (this.target = this.node);
this._applyTarget();
this._updateState();
},
onEnable: function() {
this.normalSprite && this.normalSprite.ensureLoadTexture();
this.hoverSprite && this.hoverSprite.ensureLoadTexture();
this.pressedSprite && this.pressedSprite.ensureLoadTexture();
this.disabledSprite && this.disabledSprite.ensureLoadTexture();
this._registerEvent();
},
update: function(t) {
var e = this.target;
if (!this._transitionFinished && (this.transition === s.COLOR || this.transition === s.SCALE)) {
this.time += t;
var i = 1;
this.duration > 0 && (i = this.time / this.duration);
if (i >= 1) {
i = 1;
this._transitionFinished = !0;
}
this.transition === s.COLOR ? e.color = this._fromColor.lerp(this._toColor, i) : this.transition === s.SCALE && (e.scale = r.lerp(this._fromScale, this._toScale, i));
}
},
_registerEvent: function() {
this.node.on(cc.Node.EventType.TOUCH_START, this._onTouchBegan, this);
this.node.on(cc.Node.EventType.TOUCH_MOVE, this._onTouchMove, this);
this.node.on(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
this.node.on(cc.Node.EventType.TOUCH_CANCEL, this._onTouchCancel, this);
this.node.on(cc.Node.EventType.MOUSE_ENTER, this._onMouseMoveIn, this);
this.node.on(cc.Node.EventType.MOUSE_LEAVE, this._onMouseMoveOut, this);
},
_getTargetSprite: function(t) {
var e = null;
t && (e = t.getComponent(cc.Sprite));
return e;
},
_applyTarget: function() {
this._sprite = this._getTargetSprite(this.target);
this.target && (this._originalScale = this.target.scale);
},
_onTouchBegan: function(t) {
if (this.interactable && this.enabledInHierarchy) {
this._pressed = !0;
this._updateState();
t.stopPropagation();
}
},
_onTouchMove: function(t) {
if (this.interactable && this.enabledInHierarchy && this._pressed) {
var e = t.touch, i = this.node._hitTest(e.getLocation());
if (this.transition === s.SCALE && this.target) if (i) {
this._fromScale = this._originalScale;
this._toScale = this._originalScale * this.zoomScale;
this._transitionFinished = !1;
} else {
this.time = 0;
this._transitionFinished = !0;
this.target.scale = this._originalScale;
} else {
var n;
n = i ? "pressed" : "normal";
this._applyTransition(n);
}
t.stopPropagation();
}
},
_onTouchEnded: function(t) {
if (this.interactable && this.enabledInHierarchy) {
if (this._pressed) {
cc.Component.EventHandler.emitEvents(this.clickEvents, t);
this.node.emit("click", this);
}
this._pressed = !1;
this._updateState();
t.stopPropagation();
}
},
_zoomUp: function() {
this._fromScale = this._originalScale;
this._toScale = this._originalScale * this.zoomScale;
this.time = 0;
this._transitionFinished = !1;
},
_zoomBack: function() {
this._fromScale = this.target.scale;
this._toScale = this._originalScale;
this.time = 0;
this._transitionFinished = !1;
},
_onTouchCancel: function() {
if (this.interactable && this.enabledInHierarchy) {
this._pressed = !1;
this._updateState();
}
},
_onMouseMoveIn: function() {
if (!this._pressed && this.interactable && this.enabledInHierarchy && (this.transition !== s.SPRITE || this.hoverSprite) && !this._hovered) {
this._hovered = !0;
this._updateState();
}
},
_onMouseMoveOut: function() {
if (this._hovered) {
this._hovered = !1;
this._updateState();
}
},
_updateState: function() {
var t = this._getButtonState();
this._applyTransition(t);
this._updateDisabledState();
},
onDisable: function() {
this._hovered = !1;
this._pressed = !1;
this.node.off(cc.Node.EventType.TOUCH_START, this._onTouchBegan, this);
this.node.off(cc.Node.EventType.TOUCH_MOVE, this._onTouchMove, this);
this.node.off(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
this.node.off(cc.Node.EventType.TOUCH_CANCEL, this._onTouchCancel, this);
this.node.off(cc.Node.EventType.MOUSE_ENTER, this._onMouseMoveIn, this);
this.node.off(cc.Node.EventType.MOUSE_LEAVE, this._onMouseMoveOut, this);
},
_getButtonState: function() {
return this.interactable ? this._pressed ? "pressed" : this._hovered ? "hover" : "normal" : "disabled";
},
_updateColorTransition: function(t) {
var e = this[t + "Color"], i = this.target;
this._fromColor = i.color.clone();
this._toColor = e;
this.time = 0;
this._transitionFinished = !1;
},
_updateSpriteTransition: function(t) {
var e = this[t + "Sprite"];
this._sprite && e && (this._sprite.spriteFrame = e);
},
_updateScaleTransition: function(t) {
"pressed" === t ? this._zoomUp() : this._zoomBack();
},
_applyTransition: function(t) {
var e = this.transition;
e === s.COLOR ? this._updateColorTransition(t) : e === s.SPRITE ? this._updateSpriteTransition(t) : e === s.SCALE && this._updateScaleTransition(t);
},
_resizeNodeToTargetNode: !1,
_updateDisabledState: function() {
this._sprite && this._sprite.setState(cc.Sprite.State.NORMAL);
this.enableAutoGrayEffect && this.transition !== s.COLOR && (this.transition === s.SPRITE && this.disabledSprite || this._sprite && !this.interactable && this._sprite.setState(cc.Sprite.State.GRAY));
}
});
cc.Button = e.exports = a;
}), {
"../utils/misc": 231,
"./CCComponent": 65
} ],
64: [ (function(t, e, i) {
t("../event-manager");
var n = t("../camera/CCCamera"), r = t("./CCComponent"), s = cc.Class({
name: "cc.Canvas",
extends: r,
editor: !1,
resetInEditor: !1,
statics: {
instance: null
},
properties: {
_designResolution: cc.size(960, 640),
designResolution: {
get: function() {
return cc.size(this._designResolution);
},
set: function(t) {
this._designResolution.width = t.width;
this._designResolution.height = t.height;
this.applySettings();
},
tooltip: !1
},
_fitWidth: !1,
_fitHeight: !0,
fitHeight: {
get: function() {
return this._fitHeight;
},
set: function(t) {
if (this._fitHeight !== t) {
this._fitHeight = t;
this.applySettings();
}
},
tooltip: !1
},
fitWidth: {
get: function() {
return this._fitWidth;
},
set: function(t) {
if (this._fitWidth !== t) {
this._fitWidth = t;
this.applySettings();
}
},
tooltip: !1
}
},
ctor: function() {
this._thisOnResized = this.onResized.bind(this);
},
__preload: function() {
if (s.instance) return cc.errorID(6700, this.node.name, s.instance.node.name);
s.instance = this;
cc.director.on(cc.Director.EVENT_AFTER_UPDATE, this.alignWithScreen, this);
cc.sys.isMobile ? window.addEventListener("resize", this._thisOnResized) : cc.view.on("canvas-resize", this._thisOnResized);
this.applySettings();
this.onResized();
var t = cc.find("Main Camera", this.node);
if (!t) {
(t = new cc.Node("Main Camera")).parent = this.node;
t.setSiblingIndex(0);
}
var e = t.getComponent(n);
if (!e) {
e = t.addComponent(n);
var i = n.ClearFlags;
e.clearFlags = i.COLOR | i.DEPTH;
e.depth = -1;
}
n.main = e;
},
onDestroy: function() {
cc.director.off(cc.Director.EVENT_AFTER_UPDATE, this.alignWithScreen, this);
cc.sys.isMobile ? window.removeEventListener("resize", this._thisOnResized) : cc.view.off("canvas-resize", this._thisOnResized);
s.instance === this && (s.instance = null);
},
alignWithScreen: function() {
var t, e, i = e = cc.visibleRect;
t = cc.view.getDesignResolutionSize();
var n = 0, r = 0;
if (!this.fitHeight && !this.fitWidth) {
n = .5 * (t.width - i.width);
r = .5 * (t.height - i.height);
}
this.node.setPosition(.5 * i.width + n, .5 * i.height + r);
this.node.width = e.width;
this.node.height = e.height;
},
onResized: function() {
this.alignWithScreen();
},
applySettings: function() {
var t, e = cc.ResolutionPolicy;
t = this.fitHeight && this.fitWidth ? e.SHOW_ALL : this.fitHeight || this.fitWidth ? this.fitWidth ? e.FIXED_WIDTH : e.FIXED_HEIGHT : e.NO_BORDER;
var i = this._designResolution;
cc.view.setDesignResolutionSize(i.width, i.height, t);
}
});
cc.Canvas = e.exports = s;
}), {
"../camera/CCCamera": 50,
"../event-manager": 96,
"./CCComponent": 65
} ],
65: [ (function(i, n, r) {
var s = i("../platform/CCObject"), a = i("../platform/js"), o = new (i("../platform/id-generater"))("Comp"), h = s.Flags.IsOnEnableCalled, l = s.Flags.IsOnLoadCalled, c = cc.Class({
name: "cc.Component",
extends: s,
ctor: function() {
this._id = o.getNewId();
this.__eventTargets = [];
},
properties: {
node: {
default: null,
visible: !1
},
name: {
get: function() {
if (this._name) return this._name;
var t = cc.js.getClassName(this), e = t.lastIndexOf(".");
e >= 0 && (t = t.slice(e + 1));
return this.node.name + "<" + t + ">";
},
set: function(t) {
this._name = t;
},
visible: !1
},
uuid: {
get: function() {
return this._id;
},
visible: !1
},
__scriptAsset: !1,
_enabled: !0,
enabled: {
get: function() {
return this._enabled;
},
set: function(t) {
if (this._enabled !== t) {
this._enabled = t;
if (this.node._activeInHierarchy) {
var e = cc.director._compScheduler;
t ? e.enableComp(this) : e.disableComp(this);
}
}
},
visible: !1
},
enabledInHierarchy: {
get: function() {
return (this._objFlags & h) > 0;
},
visible: !1
},
_isOnLoadCalled: {
get: function() {
return this._objFlags & l;
}
}
},
update: null,
lateUpdate: null,
__preload: null,
onLoad: null,
start: null,
onEnable: null,
onDisable: null,
onDestroy: null,
onFocusInEditor: null,
onLostFocusInEditor: null,
resetInEditor: null,
addComponent: function(t) {
return this.node.addComponent(t);
},
getComponent: function(t) {
return this.node.getComponent(t);
},
getComponents: function(t) {
return this.node.getComponents(t);
},
getComponentInChildren: function(t) {
return this.node.getComponentInChildren(t);
},
getComponentsInChildren: function(t) {
return this.node.getComponentsInChildren(t);
},
_getLocalBounds: null,
onRestore: null,
destroy: function() {
this._super() && this._enabled && this.node._activeInHierarchy && cc.director._compScheduler.disableComp(this);
},
_onPreDestroy: function() {
this.unscheduleAllCallbacks();
for (var t = this.__eventTargets, e = 0, i = t.length; e < i; ++e) {
var n = t[e];
n && n.targetOff(this);
}
t.length = 0;
0;
cc.director._nodeActivator.destroyComp(this);
this.node._removeComponent(this);
},
_instantiate: function(t) {
t || (t = cc.instantiate._clone(this, this));
t.node = null;
return t;
},
schedule: function(t, e, i, n) {
cc.assertID(t, 1619);
cc.assertID(e >= 0, 1620);
e = e || 0;
i = isNaN(i) ? cc.macro.REPEAT_FOREVER : i;
n = n || 0;
var r = cc.director.getScheduler(), s = r.isTargetPaused(this);
r.schedule(t, this, e, i, n, s);
},
scheduleOnce: function(t, e) {
this.schedule(t, 0, 0, e);
},
unschedule: function(t) {
t && cc.director.getScheduler().unschedule(t, this);
},
unscheduleAllCallbacks: function() {
cc.director.getScheduler().unscheduleAllForTarget(this);
}
});
c._requireComponent = null;
c._executionOrder = 0;
0;
a.value(c, "_registerEditorProps", (function(i, n) {
var r = n.requireComponent;
r && (i._requireComponent = r);
var s = n.executionOrder;
s && "number" === ("object" === (e = typeof s) ? t(s) : e) && (i._executionOrder = s);
}));
c.prototype.__scriptUuid = "";
cc.Component = n.exports = c;
}), {
"../platform/CCObject": 159,
"../platform/id-generater": 169,
"../platform/js": 173
} ],
66: [ (function(i, n, r) {
cc.Component.EventHandler = cc.Class({
name: "cc.ClickEvent",
properties: {
target: {
default: null,
type: cc.Node
},
component: {
default: ""
},
handler: {
default: ""
},
customEventData: {
default: ""
}
},
statics: {
emitEvents: function(t) {
"use strict";
var e = void 0;
if (arguments.length > 0) for (var i = 0, n = (e = new Array(arguments.length - 1)).length; i < n; i++) e[i] = arguments[i + 1];
for (var r = 0, s = t.length; r < s; r++) {
var a = t[r];
a instanceof cc.Component.EventHandler && a.emit(e);
}
}
},
emit: function(i) {
var n = this.target;
if (cc.isValid(n)) {
var r = n.getComponent(this.component);
if (cc.isValid(r)) {
var s = r[this.handler];
if ("function" === ("object" === (e = typeof s) ? t(s) : e)) {
null != this.customEventData && "" !== this.customEventData && (i = i.slice()).push(this.customEventData);
s.apply(r, i);
}
}
}
}
});
}), {} ],
67: [ (function(i, n, r) {
var s = i("../platform/CCMacro"), a = i("./CCRenderComponent"), o = (i("../renderer"), 
i("../renderer/render-engine")), h = i("../renderer/render-flow"), l = o.SpriteMaterial, c = s.TextAlignment, u = s.VerticalTextAlignment, _ = cc.Enum({
NONE: 0,
CLAMP: 1,
SHRINK: 2,
RESIZE_HEIGHT: 3
});
var m = cc.Class({
name: "cc.Label",
extends: a,
ctor: function() {
0;
this._actualFontSize = 0;
this._assemblerData = null;
this._ttfTexture = null;
},
editor: !1,
properties: {
_useOriginalSize: !0,
_string: {
default: "",
formerlySerializedAs: "_N$string"
},
string: {
get: function() {
return this._string;
},
set: function(t) {
var e = this._string;
this._string = t.toString();
this.string !== e && this._updateRenderData();
this._checkStringEmpty();
},
multiline: !0,
tooltip: !1
},
horizontalAlign: {
default: c.LEFT,
type: c,
tooltip: !1,
notify: function(t) {
this.horizontalAlign !== t && this._updateRenderData();
},
animatable: !1
},
verticalAlign: {
default: u.TOP,
type: u,
tooltip: !1,
notify: function(t) {
this.verticalAlign !== t && this._updateRenderData();
},
animatable: !1
},
actualFontSize: {
displayName: "Actual Font Size",
animatable: !1,
readonly: !0,
get: function() {
return this._actualFontSize;
}
},
_fontSize: 40,
fontSize: {
get: function() {
return this._fontSize;
},
set: function(t) {
if (this._fontSize !== t) {
this._fontSize = t;
this._updateRenderData();
}
},
tooltip: !1
},
fontFamily: {
default: "Arial",
tooltip: !1,
notify: function(t) {
this.fontFamily !== t && this._updateRenderData();
},
animatable: !1
},
_lineHeight: 40,
lineHeight: {
get: function() {
return this._lineHeight;
},
set: function(t) {
if (this._lineHeight !== t) {
this._lineHeight = t;
this._updateRenderData();
}
},
tooltip: !1
},
overflow: {
default: _.NONE,
type: _,
tooltip: !1,
notify: function(t) {
this.overflow !== t && this._updateRenderData();
},
animatable: !1
},
_enableWrapText: !0,
enableWrapText: {
get: function() {
return this._enableWrapText;
},
set: function(t) {
if (this._enableWrapText !== t) {
this._enableWrapText = t;
this._updateRenderData();
}
},
animatable: !1,
tooltip: !1
},
_N$file: null,
font: {
get: function() {
return this._N$file;
},
set: function(i) {
if (this.font !== i) {
i || (this._isSystemFontUsed = !0);
0;
this._N$file = i;
this._bmFontOriginalSize = -1;
i && this._isSystemFontUsed && (this._isSystemFontUsed = !1);
"string" === ("object" === (e = typeof i) ? t(i) : e) && cc.warnID(4e3);
i instanceof cc.BitmapFont && (this._bmFontOriginalSize = i.fontSize);
if (this._renderData) {
this.destroyRenderData(this._renderData);
this._renderData = null;
}
this._fontAtlas = null;
this._updateAssembler();
this._activateMaterial(!0);
this._updateRenderData();
}
},
type: cc.Font,
tooltip: !1,
animatable: !1
},
_isSystemFontUsed: !0,
useSystemFont: {
get: function() {
return this._isSystemFontUsed;
},
set: function(t) {
if (this._isSystemFontUsed !== t) {
this.destroyRenderData(this._renderData);
this._renderData = null;
0;
this._isSystemFontUsed = !!t;
t && (this.font = null);
}
},
animatable: !1,
tooltip: !1
},
_bmFontOriginalSize: {
displayName: "BMFont Original Size",
default: -1,
serializable: !1,
readonly: !0,
visible: !0,
animatable: !1
},
_spacingX: 0,
spacingX: {
get: function() {
return this._spacingX;
},
set: function(t) {
this._spacingX = t;
this._updateRenderData();
}
},
_isBold: {
default: !1,
serializable: !1
},
_isItalic: {
default: !1,
serializable: !1
},
_isUnderline: {
default: !1,
serializable: !1
}
},
statics: {
HorizontalAlign: c,
VerticalAlign: u,
Overflow: _
},
onEnable: function() {
this._super();
this.font || this._isSystemFontUsed || (this.useSystemFont = !0);
this._checkStringEmpty();
this._updateAssembler();
this._activateMaterial();
},
onDestroy: function() {
this._assembler._resetAssemblerData && this._assembler._resetAssemblerData(this._assemblerData);
this._assemblerData = null;
if (this._ttfTexture) {
this._ttfTexture.destroy();
this._ttfTexture = null;
}
this._super();
},
_canRender: function() {
var t = this._super(), e = this.font;
if (e instanceof cc.BitmapFont) {
var i = e.spriteFrame;
i && i.textureLoaded() || (t = !1);
}
return t;
},
_checkStringEmpty: function() {
this.markForRender(!!this.string);
},
_updateAssembler: function() {
var t = m._assembler.getAssembler(this);
if (this._assembler !== t) {
this._assembler = t;
this._renderData = null;
}
this._renderData || (this._renderData = this._assembler.createData(this));
},
_activateMaterial: function(t) {
var e = this._material;
if (!e || t) {
var i = this.font;
if (i instanceof cc.BitmapFont) {
var n = i.spriteFrame;
if (!n || !n.textureLoaded()) {
this.disableRender();
n && n.once("load", this._activateMaterial, this);
return;
}
this._texture = n._texture;
} else {
if (!this._ttfTexture) {
this._ttfTexture = new cc.Texture2D();
this._assemblerData = this._assembler._getAssemblerData();
this._ttfTexture.initWithElement(this._assemblerData.canvas);
}
this._texture = this._ttfTexture;
}
e || (e = new l());
e.texture = this._texture;
cc.game.renderType === cc.game.RENDER_TYPE_CANVAS && (this._texture.url = this.uuid + "_texture");
this._updateMaterial(e);
this.markForUpdateRenderData(!0);
this.markForRender(!0);
}
},
_updateColor: function() {
if (this.font instanceof cc.BitmapFont) this._super(); else {
this._updateRenderData();
this.node._renderFlag &= ~h.FLAG_COLOR;
}
},
_updateRenderData: function(t) {
var e = this._renderData;
if (e) {
e.vertDirty = !0;
e.uvDirty = !0;
this.markForUpdateRenderData(!0);
}
if (t) {
this._updateAssembler();
this._activateMaterial(t);
this._assembler.updateRenderData(this);
}
},
_enableBold: function(t) {
this._isBold = !!t;
},
_enableItalics: function(t) {
this._isItalic = !!t;
},
_enableUnderline: function(t) {
this._isUnderline = !!t;
}
});
cc.Label = n.exports = m;
}), {
"../platform/CCMacro": 158,
"../renderer": 194,
"../renderer/render-engine": 195,
"../renderer/render-flow": 196,
"./CCRenderComponent": 75
} ],
68: [ (function(t, e, i) {
var n = cc.Class({
name: "cc.LabelOutline",
extends: t("./CCComponent"),
editor: !1,
properties: {
_color: cc.color(255, 255, 255, 255),
_width: 1,
color: {
get: function() {
return this._color;
},
set: function(t) {
this._color = cc.color(t);
this._updateRenderData();
}
},
width: {
get: function() {
return this._width;
},
set: function(t) {
this._width = t;
this._updateRenderData();
}
}
},
_updateRenderData: function() {
var t = this.node.getComponent(cc.Label);
t && t._updateRenderData(!0);
}
});
cc.LabelOutline = e.exports = n;
}), {
"./CCComponent": 65
} ],
69: [ (function(t, e, i) {
var n = t("../CCNode").EventType, r = cc.Enum({
NONE: 0,
HORIZONTAL: 1,
VERTICAL: 2,
GRID: 3
}), s = cc.Enum({
NONE: 0,
CONTAINER: 1,
CHILDREN: 2
}), a = cc.Enum({
HORIZONTAL: 0,
VERTICAL: 1
}), o = cc.Enum({
BOTTOM_TO_TOP: 0,
TOP_TO_BOTTOM: 1
}), h = cc.Enum({
LEFT_TO_RIGHT: 0,
RIGHT_TO_LEFT: 1
}), l = cc.Class({
name: "cc.Layout",
extends: t("./CCComponent"),
editor: !1,
properties: {
_layoutSize: cc.size(300, 200),
_layoutDirty: {
default: !0,
serializable: !1
},
_resize: s.NONE,
_N$layoutType: r.NONE,
type: {
type: r,
get: function() {
return this._N$layoutType;
},
set: function(t) {
this._N$layoutType = t;
this._doLayoutDirty();
},
tooltip: !1,
animatable: !1
},
resizeMode: {
type: s,
tooltip: !1,
animatable: !1,
get: function() {
return this._resize;
},
set: function(t) {
if (this.type !== r.NONE || t !== s.CHILDREN) {
this._resize = t;
this._doLayoutDirty();
}
}
},
cellSize: {
default: cc.size(40, 40),
tooltip: !1,
type: cc.Size,
notify: function() {
this._doLayoutDirty();
}
},
startAxis: {
default: a.HORIZONTAL,
tooltip: !1,
type: a,
notify: function() {
this._doLayoutDirty();
},
animatable: !1
},
_N$padding: {
default: 0
},
paddingLeft: {
default: 0,
tooltip: !1,
notify: function() {
this._doLayoutDirty();
}
},
paddingRight: {
default: 0,
tooltip: !1,
notify: function() {
this._doLayoutDirty();
}
},
paddingTop: {
default: 0,
tooltip: !1,
notify: function() {
this._doLayoutDirty();
}
},
paddingBottom: {
default: 0,
tooltip: !1,
notify: function() {
this._doLayoutDirty();
}
},
spacingX: {
default: 0,
notify: function() {
this._doLayoutDirty();
},
tooltip: !1
},
spacingY: {
default: 0,
notify: function() {
this._doLayoutDirty();
},
tooltip: !1
},
verticalDirection: {
default: o.TOP_TO_BOTTOM,
type: o,
notify: function() {
this._doLayoutDirty();
},
tooltip: !1,
animatable: !1
},
horizontalDirection: {
default: h.LEFT_TO_RIGHT,
type: h,
notify: function() {
this._doLayoutDirty();
},
tooltip: !1,
animatable: !1
}
},
statics: {
Type: r,
VerticalDirection: o,
HorizontalDirection: h,
ResizeMode: s,
AxisDirection: a
},
_migratePaddingData: function() {
this.paddingLeft = this._N$padding;
this.paddingRight = this._N$padding;
this.paddingTop = this._N$padding;
this.paddingBottom = this._N$padding;
this._N$padding = 0;
},
onEnable: function() {
this._addEventListeners();
this.node.getContentSize().equals(cc.size(0, 0)) && this.node.setContentSize(this._layoutSize);
0 !== this._N$padding && this._migratePaddingData();
this._doLayoutDirty();
},
onDisable: function() {
this._removeEventListeners();
},
_doLayoutDirty: function() {
this._layoutDirty = !0;
},
_addEventListeners: function() {
cc.director.on(cc.Director.EVENT_AFTER_UPDATE, this.updateLayout, this);
this.node.on(n.SIZE_CHANGED, this._resized, this);
this.node.on(n.ANCHOR_CHANGED, this._doLayoutDirty, this);
this.node.on(n.CHILD_ADDED, this._childAdded, this);
this.node.on(n.CHILD_REMOVED, this._childRemoved, this);
this.node.on(n.CHILD_REORDER, this._doLayoutDirty, this);
this._addChildrenEventListeners();
},
_removeEventListeners: function() {
cc.director.off(cc.Director.EVENT_AFTER_UPDATE, this.updateLayout, this);
this.node.off(n.SIZE_CHANGED, this._resized, this);
this.node.off(n.ANCHOR_CHANGED, this._doLayoutDirty, this);
this.node.off(n.CHILD_ADDED, this._childAdded, this);
this.node.off(n.CHILD_REMOVED, this._childRemoved, this);
this.node.off(n.CHILD_REORDER, this._doLayoutDirty, this);
this._removeChildrenEventListeners();
},
_addChildrenEventListeners: function() {
for (var t = this.node.children, e = 0; e < t.length; ++e) {
var i = t[e];
i.on(n.SIZE_CHANGED, this._doLayoutDirty, this);
i.on(n.POSITION_CHANGED, this._doLayoutDirty, this);
i.on(n.ANCHOR_CHANGED, this._doLayoutDirty, this);
i.on("active-in-hierarchy-changed", this._doLayoutDirty, this);
}
},
_removeChildrenEventListeners: function() {
for (var t = this.node.children, e = 0; e < t.length; ++e) {
var i = t[e];
i.off(n.SIZE_CHANGED, this._doLayoutDirty, this);
i.off(n.POSITION_CHANGED, this._doLayoutDirty, this);
i.off(n.ANCHOR_CHANGED, this._doLayoutDirty, this);
i.off("active-in-hierarchy-changed", this._doLayoutDirty, this);
}
},
_childAdded: function(t) {
t.on(n.SIZE_CHANGED, this._doLayoutDirty, this);
t.on(n.POSITION_CHANGED, this._doLayoutDirty, this);
t.on(n.ANCHOR_CHANGED, this._doLayoutDirty, this);
t.on("active-in-hierarchy-changed", this._doLayoutDirty, this);
this._doLayoutDirty();
},
_childRemoved: function(t) {
t.off(n.SIZE_CHANGED, this._doLayoutDirty, this);
t.off(n.POSITION_CHANGED, this._doLayoutDirty, this);
t.off(n.ANCHOR_CHANGED, this._doLayoutDirty, this);
t.off("active-in-hierarchy-changed", this._doLayoutDirty, this);
this._doLayoutDirty();
},
_resized: function() {
this._layoutSize = this.node.getContentSize();
this._doLayoutDirty();
},
_doLayoutHorizontally: function(t, e, i, n) {
var a = this.node.getAnchorPoint(), l = this.node.children, c = 1, u = this.paddingLeft, _ = -a.x * t;
if (this.horizontalDirection === h.RIGHT_TO_LEFT) {
c = -1;
_ = (1 - a.x) * t;
u = this.paddingRight;
}
for (var m = _ + c * u - c * this.spacingX, f = 0, d = 0, p = 0, g = 0, y = 0, v = 0, x = 0, A = 0; A < l.length; ++A) {
(T = l[A]).activeInHierarchy && x++;
}
var b = this.cellSize.width;
this.type !== r.GRID && this.resizeMode === s.CHILDREN && (b = (t - (this.paddingLeft + this.paddingRight) - (x - 1) * this.spacingX) / x);
for (A = 0; A < l.length; ++A) {
var T;
if ((T = l[A]).activeInHierarchy) {
if (this._resize === s.CHILDREN) {
T.width = b / T.scaleX;
this.type === r.GRID && (T.height = this.cellSize.height / T.scaleY);
}
var C = T.anchorX, w = T.width * T.scaleX, S = T.height * T.scaleY;
p > d && (d = p);
if (S >= d) {
p = d;
d = S;
v = T.getAnchorPoint().y;
}
this.horizontalDirection === h.RIGHT_TO_LEFT && (C = 1 - T.anchorX);
m = m + c * C * w + c * this.spacingX;
var E = c * (1 - C) * w;
if (e) {
var D = m + E + c * (c > 0 ? this.paddingRight : this.paddingLeft), M = this.horizontalDirection === h.LEFT_TO_RIGHT && D > (1 - a.x) * t, I = this.horizontalDirection === h.RIGHT_TO_LEFT && D < -a.x * t;
if (M || I) {
if (S >= d) {
0 === p && (p = d);
f += p;
p = d;
} else {
f += d;
p = S;
d = 0;
}
m = _ + c * (u + C * T.width);
g++;
}
}
var P = i(T, f, g);
t >= T.width + this.paddingLeft + this.paddingRight && n && T.setPosition(cc.v2(m, P));
var B, R = 1, L = 0 === d ? S : d;
if (this.verticalDirection === o.TOP_TO_BOTTOM) {
y = y || this.node._contentSize.height;
(B = P + (R = -1) * (L * v + this.paddingBottom)) < y && (y = B);
} else {
y = y || -this.node._contentSize.height;
(B = P + R * (L * v + this.paddingTop)) > y && (y = B);
}
m += E;
}
}
return y;
},
_getVerticalBaseHeight: function(t) {
var e = 0, i = 0;
if (this.resizeMode === s.CONTAINER) {
for (var n = 0; n < t.length; ++n) {
var r = t[n];
if (r.activeInHierarchy) {
i++;
e += r.height * r.scaleY;
}
}
e += (i - 1) * this.spacingY + this.paddingBottom + this.paddingTop;
} else e = this.node.getContentSize().height;
return e;
},
_doLayoutVertically: function(t, e, i, n) {
var a = this.node.getAnchorPoint(), l = this.node.children, c = 1, u = this.paddingBottom, _ = -a.y * t;
if (this.verticalDirection === o.TOP_TO_BOTTOM) {
c = -1;
_ = (1 - a.y) * t;
u = this.paddingTop;
}
for (var m = _ + c * u - c * this.spacingY, f = 0, d = 0, p = 0, g = 0, y = 0, v = 0, x = 0, A = 0; A < l.length; ++A) {
(T = l[A]).activeInHierarchy && x++;
}
var b = this.cellSize.height;
this.type !== r.GRID && this.resizeMode === s.CHILDREN && (b = (t - (this.paddingTop + this.paddingBottom) - (x - 1) * this.spacingY) / x);
for (A = 0; A < l.length; ++A) {
var T;
if ((T = l[A]).activeInHierarchy) {
if (this.resizeMode === s.CHILDREN) {
T.height = b / T.scaleY;
this.type === r.GRID && (T.width = this.cellSize.width / T.scaleX);
}
var C = T.anchorY, w = T.width * T.scaleX, S = T.height * T.scaleY;
p > d && (d = p);
if (w >= d) {
p = d;
d = w;
v = T.getAnchorPoint().x;
}
this.verticalDirection === o.TOP_TO_BOTTOM && (C = 1 - T.anchorY);
m = m + c * C * S + c * this.spacingY;
var E = c * (1 - C) * S;
if (e) {
var D = m + E + c * (c > 0 ? this.paddingTop : this.paddingBottom), M = this.verticalDirection === o.BOTTOM_TO_TOP && D > (1 - a.y) * t, I = this.verticalDirection === o.TOP_TO_BOTTOM && D < -a.y * t;
if (M || I) {
if (w >= d) {
0 === p && (p = d);
f += p;
p = d;
} else {
f += d;
p = w;
d = 0;
}
m = _ + c * (u + C * S);
g++;
}
}
var P = i(T, f, g);
t >= S + (this.paddingTop + this.paddingBottom) && n && T.setPosition(cc.v2(P, m));
var B, R = 1, L = 0 === d ? w : d;
if (this.horizontalDirection === h.RIGHT_TO_LEFT) {
R = -1;
y = y || this.node._contentSize.width;
(B = P + R * (L * v + this.paddingLeft)) < y && (y = B);
} else {
y = y || -this.node._contentSize.width;
(B = P + R * (L * v + this.paddingRight)) > y && (y = B);
}
m += E;
}
}
return y;
},
_doLayoutBasic: function() {
for (var t = this.node.children, e = null, i = 0; i < t.length; ++i) {
var n = t[i];
n.activeInHierarchy && (e ? e.union(e, n.getBoundingBoxToWorld()) : e = n.getBoundingBoxToWorld());
}
if (e) {
var r = this.node.parent.convertToNodeSpaceAR(cc.v2(e.x, e.y));
r = cc.v2(r.x - this.paddingLeft, r.y - this.paddingBottom);
var s = this.node.parent.convertToNodeSpaceAR(cc.v2(e.x + e.width, e.y + e.height));
s = cc.v2(s.x + this.paddingRight, s.y + this.paddingTop);
var a = cc.size(parseFloat((s.x - r.x).toFixed(2)), parseFloat((s.y - r.y).toFixed(2))), o = this.node.getPosition(), h = (o.x - r.x) / a.width, l = (o.y - r.y) / a.height, c = cc.v2(parseFloat(h.toFixed(2)), parseFloat(l.toFixed(2)));
this.node.setAnchorPoint(c);
this.node.setContentSize(a);
}
},
_doLayoutGridAxisHorizontal: function(t, e) {
var i = e.width, n = 1, r = -t.y * e.height, a = this.paddingBottom;
if (this.verticalDirection === o.TOP_TO_BOTTOM) {
n = -1;
r = (1 - t.y) * e.height;
a = this.paddingTop;
}
var h = function(t, e, i) {
return r + n * (e + t.anchorY * t.height * t.scaleY + a + i * this.spacingY);
}.bind(this), l = 0;
if (this.resizeMode === s.CONTAINER) {
var c = this._doLayoutHorizontally(i, !0, h, !1);
(l = r - c) < 0 && (l *= -1);
r = -t.y * l;
if (this.verticalDirection === o.TOP_TO_BOTTOM) {
n = -1;
r = (1 - t.y) * l;
}
}
this._doLayoutHorizontally(i, !0, h, !0);
this.resizeMode === s.CONTAINER && this.node.setContentSize(i, l);
},
_doLayoutGridAxisVertical: function(t, e) {
var i = e.height, n = 1, r = -t.x * e.width, a = this.paddingLeft;
if (this.horizontalDirection === h.RIGHT_TO_LEFT) {
n = -1;
r = (1 - t.x) * e.width;
a = this.paddingRight;
}
var o = function(t, e, i) {
return r + n * (e + t.anchorX * t.width * t.scaleX + a + i * this.spacingX);
}.bind(this), l = 0;
if (this.resizeMode === s.CONTAINER) {
var c = this._doLayoutVertically(i, !0, o, !1);
(l = r - c) < 0 && (l *= -1);
r = -t.x * l;
if (this.horizontalDirection === h.RIGHT_TO_LEFT) {
n = -1;
r = (1 - t.x) * l;
}
}
this._doLayoutVertically(i, !0, o, !0);
this.resizeMode === s.CONTAINER && this.node.setContentSize(l, i);
},
_doLayoutGrid: function() {
var t = this.node.getAnchorPoint(), e = this.node.getContentSize();
this.startAxis === a.HORIZONTAL ? this._doLayoutGridAxisHorizontal(t, e) : this.startAxis === a.VERTICAL && this._doLayoutGridAxisVertical(t, e);
},
_getHorizontalBaseWidth: function(t) {
var e = 0, i = 0;
if (this.resizeMode === s.CONTAINER) {
for (var n = 0; n < t.length; ++n) {
var r = t[n];
if (r.activeInHierarchy) {
i++;
e += r.width * r.scaleX;
}
}
e += (i - 1) * this.spacingX + this.paddingLeft + this.paddingRight;
} else e = this.node.getContentSize().width;
return e;
},
_doLayout: function() {
if (this.type === r.HORIZONTAL) {
var t = this._getHorizontalBaseWidth(this.node.children);
this._doLayoutHorizontally(t, !1, (function(t) {
return t.y;
}), !0);
this.node.width = t;
} else if (this.type === r.VERTICAL) {
var e = this._getVerticalBaseHeight(this.node.children);
this._doLayoutVertically(e, !1, (function(t) {
return t.x;
}), !0);
this.node.height = e;
} else this.type === r.NONE ? this.resizeMode === s.CONTAINER && this._doLayoutBasic() : this.type === r.GRID && this._doLayoutGrid();
},
updateLayout: function() {
if (this._layoutDirty && this.node.children.length > 0) {
this._doLayout();
this._layoutDirty = !1;
}
}
});
Object.defineProperty(l.prototype, "padding", {
get: function() {
cc.warnID(4100);
return this.paddingLeft;
},
set: function(t) {
this._N$padding = t;
this._migratePaddingData();
this._doLayoutDirty();
}
});
cc.Layout = e.exports = l;
}), {
"../CCNode": 28,
"./CCComponent": 65
} ],
70: [ (function(t, e, i) {
var n = t("../utils/misc"), r = t("../renderer/render-engine"), s = (r.gfx, r.math), a = r.StencilMaterial, o = t("./CCRenderComponent"), h = t("../renderer/render-flow"), l = s.mat4.create(), c = cc.rect(), u = cc.Enum({
RECT: 0,
ELLIPSE: 1,
IMAGE_STENCIL: 2
}), _ = cc.Class({
name: "cc.Mask",
extends: o,
editor: !1,
properties: {
_spriteFrame: {
default: null,
type: cc.SpriteFrame
},
_type: u.RECT,
type: {
get: function() {
return this._type;
},
set: function(t) {
this._type = t;
if (this._type !== u.IMAGE_STENCIL) {
this.spriteFrame = null;
this.alphaThreshold = 0;
}
if (this._renderData) {
this.destroyRenderData(this._renderData);
this._renderData = null;
}
this._activateMaterial();
},
type: u,
tooltip: !1
},
spriteFrame: {
type: cc.SpriteFrame,
tooltip: !1,
get: function() {
return this._spriteFrame;
},
set: function(t) {
var e = this._spriteFrame;
if (e !== t) {
this._spriteFrame = t;
this._applySpriteFrame(e);
}
}
},
alphaThreshold: {
default: 0,
type: cc.Float,
range: [ 0, 1, .1 ],
slide: !0,
tooltip: !1,
notify: function() {
if (cc.game.renderType !== cc.game.RENDER_TYPE_CANVAS) {
if (this._frontMaterial) {
this._frontMaterial.alphaThreshold = this.alphaThreshold;
this._endMaterial.alphaThreshold = this.alphaThreshold;
this._frontMaterial.updateHash();
this._endMaterial._hash = -this._frontMaterial._hash;
}
} else cc.warnID(4201);
}
},
inverted: {
default: !1,
type: cc.Boolean,
tooltip: !1,
notify: function() {
cc.game.renderType !== cc.game.RENDER_TYPE_CANVAS || cc.warnID(4202);
}
},
_segments: 64,
segements: {
get: function() {
return this._segments;
},
set: function(t) {
this._segments = n.clampf(t, 3, 1e4);
},
tooltip: !1
},
_resizeToTarget: {
animatable: !1,
set: function(t) {
t && this._resizeNodeToTargetNode();
}
}
},
statics: {
Type: u
},
_resizeNodeToTargetNode: !1,
_onTextureLoaded: function(t) {
if (this._renderData) {
this._renderData.uvDirty = !0;
this._renderData.vertDirty = !0;
this.markForUpdateRenderData(!0);
}
this.enabledInHierarchy && this._activateMaterial();
},
_applySpriteFrame: function(t) {
t && t.off && t.off("load", this._onTextureLoaded, this);
var e = this._spriteFrame;
if (e) if (e.textureLoaded()) this._onTextureLoaded(null); else {
e.once("load", this._onTextureLoaded, this);
e.ensureLoadTexture();
}
},
_activateMaterial: function() {
if (this._type !== u.IMAGE_STENCIL || this.spriteFrame && this.spriteFrame.textureLoaded()) {
if (!this._frontMaterial) {
this._frontMaterial = new a();
this._endMaterial = new a();
}
if (this._type === u.IMAGE_STENCIL) {
var t = this.spriteFrame.getTexture();
this._frontMaterial.useTexture = !0;
this._frontMaterial.useColor = !0;
this._frontMaterial.texture = t;
this._frontMaterial.alphaThreshold = this.alphaThreshold;
this._endMaterial.useTexture = !0;
this._endMaterial.useColor = !0;
this._endMaterial.texture = t;
this._endMaterial.alphaThreshold = this.alphaThreshold;
} else {
this._frontMaterial.useTexture = !1;
this._frontMaterial.useColor = !1;
this._endMaterial.useTexture = !1;
this._endMaterial.useColor = !1;
}
this._material || this._updateMaterial(this._frontMaterial);
this._endMaterial._hash = -this._frontMaterial._hash;
this.markForRender(!0);
} else this.markForRender(!1);
},
_hitTest: function(t) {
var e = this.node, i = e.getContentSize(), n = i.width, r = i.height;
e.getWorldMatrix(l);
if (this.type === u.RECT || this.type === u.IMAGE_STENCIL) {
c.x = -e.anchorX * n, c.y = -e.anchorX * r;
c.width = n;
c.height = r;
c.transformMat4(c, l);
var s = t.x - c.x, a = c.x + c.width - t.x, o = t.y - c.y, h = c.y + c.height - t.y;
return s >= 0 && a >= 0 && h >= 0 && o >= 0;
}
if (this.type === u.ELLIPSE) {
var _ = n / 2, m = r / 2, f = t.x - l.m12, d = t.y - l.m13;
return f * f / (_ * _) + d * d / (m * m) < 1;
}
},
markForUpdateRenderData: function(t) {
t && this.enabledInHierarchy ? this.node._renderFlag |= h.FLAG_UPDATE_RENDER_DATA | h.FLAG_POST_UPDATE_RENDER_DATA : t || (this.node._renderFlag &= ~(h.FLAG_UPDATE_RENDER_DATA | h.FLAG_POST_UPDATE_RENDER_DATA));
},
markForRender: function(t) {
t && this.enabledInHierarchy ? this.node._renderFlag |= h.FLAG_RENDER | h.FLAG_UPDATE_RENDER_DATA | h.FLAG_POST_RENDER | h.FLAG_POST_UPDATE_RENDER_DATA : t || (this.node._renderFlag &= ~(h.FLAG_RENDER | h.FLAG_POST_RENDER));
},
disableRender: function() {
this.node._renderFlag &= ~(h.FLAG_RENDER | h.FLAG_UPDATE_RENDER_DATA | h.FLAG_POST_RENDER | h.FLAG_POST_UPDATE_RENDER_DATA);
},
onEnable: function() {
this._super();
this._graphics = null;
this.node._renderFlag |= h.FLAG_POST_RENDER | h.FLAG_POST_UPDATE_RENDER_DATA;
this._activateMaterial();
},
onDisable: function() {
this.node._renderFlag &= ~(h.FLAG_POST_RENDER | h.FLAG_POST_UPDATE_RENDER_DATA);
},
onDestroy: function() {
this._super();
this._frontMaterial = null;
this._endMaterial = null;
}
});
cc.Mask = e.exports = _;
}), {
"../renderer/render-engine": 195,
"../renderer/render-flow": 196,
"../utils/misc": 231,
"./CCRenderComponent": 75
} ],
71: [ (function(t, e, i) {
var n = t("../components/CCRenderComponent"), r = (t("../renderer"), t("../renderer/render-engine").SpriteMaterial), s = cc.Class({
name: "cc.MotionStreak",
extends: n,
editor: !1,
ctor: function() {
this._points = [];
},
properties: {
preview: {
default: !1,
editorOnly: !0,
notify: !1,
animatable: !1
},
_fadeTime: 1,
fadeTime: {
get: function() {
return this._fadeTime;
},
set: function(t) {
this._fadeTime = t;
this.reset();
},
animatable: !1,
tooltip: !1
},
_minSeg: 1,
minSeg: {
get: function() {
return this._minSeg;
},
set: function(t) {
this._minSeg = t;
},
animatable: !1,
tooltip: !1
},
_stroke: 64,
stroke: {
get: function() {
return this._stroke;
},
set: function(t) {
this._stroke = t;
},
animatable: !1,
tooltip: !1
},
_texture: {
default: null,
type: cc.Texture2D
},
texture: {
get: function() {
return this._texture;
},
set: function(t) {
if (this._texture !== t) {
this._texture = t;
if (t) {
this.markForRender(!0);
this.markForUpdateRenderData(!0);
this._activateMaterial(!0);
} else this.disableRender();
}
},
type: cc.Texture2D,
animatable: !1,
tooltip: !1
},
_color: cc.Color.WHITE,
color: {
get: function() {
return this._color;
},
set: function(t) {
this._color = t;
},
tooltip: !1
},
_fastMode: !1,
fastMode: {
get: function() {
return this._fastMode;
},
set: function(t) {
this._fastMode = t;
},
animatable: !1,
tooltip: !1
}
},
onEnable: function() {
this._super();
this._texture && this._texture.loaded ? this._activateMaterial() : this.disableRender();
this.reset();
},
_activateMaterial: function(t) {
var e = this._material;
if (e) {
if (!t) return;
} else (e = this._material = new r()).useColor = !1;
e.texture = this._texture;
this._updateMaterial(e);
},
onFocusInEditor: !1,
onLostFocusInEditor: !1,
reset: function() {
this._points.length = 0;
var t = this._renderData;
if (t) {
t.dataLength = 0;
t.vertexCount = 0;
t.indiceCount = 0;
}
0;
}
});
cc.MotionStreak = e.exports = s;
}), {
"../components/CCRenderComponent": 75,
"../renderer": 194,
"../renderer/render-engine": 195
} ],
72: [ (function(t, e, i) {
var n = cc.Enum({
Unified: 0,
Free: 1
}), r = cc.Enum({
Horizontal: 0,
Vertical: 1
}), s = cc.Enum({
PAGE_TURNING: 0
}), a = cc.Class({
name: "cc.PageView",
extends: cc.ScrollView,
editor: !1,
ctor: function() {
this._curPageIdx = 0;
this._lastPageIdx = 0;
this._pages = [];
this._scrollCenterOffsetX = [];
this._scrollCenterOffsetY = [];
},
properties: {
sizeMode: {
default: n.Unified,
type: n,
tooltip: !1,
notify: function() {
this._syncSizeMode();
}
},
direction: {
default: r.Horizontal,
type: r,
tooltip: !1,
notify: function() {
this._syncScrollDirection();
}
},
scrollThreshold: {
default: .5,
type: cc.Float,
slide: !0,
range: [ 0, 1, .01 ],
tooltip: !1
},
autoPageTurningThreshold: {
default: 100,
type: cc.Float,
tooltip: !1
},
pageTurningEventTiming: {
default: .1,
type: cc.Float,
range: [ 0, 1, .01 ],
tooltip: !1
},
indicator: {
default: null,
type: cc.PageViewIndicator,
tooltip: !1,
notify: function() {
this.indicator && this.indicator.setPageView(this);
}
},
pageTurningSpeed: {
default: .3,
type: cc.Float,
tooltip: !1
},
pageEvents: {
default: [],
type: cc.Component.EventHandler,
tooltip: !1
}
},
statics: {
SizeMode: n,
Direction: r,
EventType: s
},
__preload: function() {
this.node.on(cc.Node.EventType.SIZE_CHANGED, this._updateAllPagesSize, this);
},
onEnable: function() {
this._super();
this.node.on("scroll-ended-with-threshold", this._dispatchPageTurningEvent, this);
},
onDisable: function() {
this._super();
this.node.off("scroll-ended-with-threshold", this._dispatchPageTurningEvent, this);
},
onLoad: function() {
this._initPages();
this.indicator && this.indicator.setPageView(this);
},
onDestroy: function() {
this.node.off(cc.Node.EventType.SIZE_CHANGED, this._updateAllPagesSize, this);
},
getCurrentPageIndex: function() {
return this._curPageIdx;
},
setCurrentPageIndex: function(t) {
this.scrollToPage(t, !0);
},
getPages: function() {
return this._pages;
},
addPage: function(t) {
if (t && -1 === this._pages.indexOf(t) && this.content) {
this.content.addChild(t);
this._pages.push(t);
this._updatePageView();
}
},
insertPage: function(t, e) {
if (!(e < 0) && t && -1 === this._pages.indexOf(t) && this.content) {
if (e >= this._pages.length) this.addPage(t); else {
this._pages.splice(e, 0, t);
this.content.addChild(t);
this._updatePageView();
}
}
},
removePage: function(t) {
if (t && this.content) {
var e = this._pages.indexOf(t);
-1 !== e ? this.removePageAtIndex(e) : cc.warnID(4300, t.name);
}
},
removePageAtIndex: function(t) {
var e = this._pages;
if (!(t < 0 || t >= e.length)) {
var i = e[t];
if (i) {
this.content.removeChild(i);
e.splice(t, 1);
this._updatePageView();
}
}
},
removeAllPages: function() {
if (this.content) {
for (var t = this._pages, e = 0, i = t.length; e < i; e++) this.content.removeChild(t[e]);
this._pages.length = 0;
this._updatePageView();
}
},
scrollToPage: function(t, e) {
if (!(t < 0 || t >= this._pages.length)) {
e = void 0 !== e ? e : .3;
this._curPageIdx = t;
this.scrollToOffset(this._moveOffsetValue(t), e, !0);
this.indicator && this.indicator._changedState();
}
},
getScrollEndedEventTiming: function() {
return this.pageTurningEventTiming;
},
_syncScrollDirection: function() {
this.horizontal = this.direction === r.Horizontal;
this.vertical = this.direction === r.Vertical;
},
_syncSizeMode: function() {
if (this.content) {
var t = this.content.getComponent(cc.Layout);
if (t) {
if (0 === this._pages.length) t.padding = 0; else {
var e = this._pages[this._pages.length - 1];
if (this.sizeMode === n.Free) if (this.direction === r.Horizontal) {
t.paddingLeft = (this.node.width - this._pages[0].width) / 2;
t.paddingRight = (this.node.width - e.width) / 2;
} else if (this.direction === r.Vertical) {
t.paddingTop = (this.node.height - this._pages[0].height) / 2;
t.paddingBottom = (this.node.height - e.height) / 2;
}
}
t.updateLayout();
}
}
},
_updatePageView: function() {
var t = this._pages.length;
if (this._curPageIdx >= t) {
this._curPageIdx = 0 === t ? 0 : t - 1;
this._lastPageIdx = this._curPageIdx;
}
for (var e = 0; e < t; ++e) {
this._pages[e].setSiblingIndex(e);
this.direction === r.Horizontal ? this._scrollCenterOffsetX[e] = Math.abs(this.content.x + this._pages[e].x) : this._scrollCenterOffsetY[e] = Math.abs(this.content.y + this._pages[e].y);
}
var i = this.content.getComponent(cc.Layout);
i && i.enabled && i.updateLayout();
this.indicator && this.indicator._refresh();
},
_updateAllPagesSize: function() {
if (this.sizeMode === n.Unified) for (var t = this._pages, e = this.node.getContentSize(), i = 0, r = t.length; i < r; i++) t[i].setContentSize(e);
},
_initPages: function() {
if (this.content) {
for (var t = this.content.children, e = 0; e < t.length; ++e) {
var i = t[e];
this._pages.indexOf(i) >= 0 || this._pages.push(i);
}
this._syncScrollDirection();
this._syncSizeMode();
this._updatePageView();
}
},
_dispatchPageTurningEvent: function() {
if (this._lastPageIdx !== this._curPageIdx) {
this._lastPageIdx = this._curPageIdx;
cc.Component.EventHandler.emitEvents(this.pageEvents, this, s.PAGE_TURNING);
this.node.emit("page-turning", this);
}
},
_isScrollable: function(t, e, i) {
if (this.sizeMode === n.Free) {
var s, a;
if (this.direction === r.Horizontal) {
s = this._scrollCenterOffsetX[e];
a = this._scrollCenterOffsetX[i];
return Math.abs(t.x) >= Math.abs(s - a) * this.scrollThreshold;
}
if (this.direction === r.Vertical) {
s = this._scrollCenterOffsetY[e];
a = this._scrollCenterOffsetY[i];
return Math.abs(t.y) >= Math.abs(s - a) * this.scrollThreshold;
}
} else {
if (this.direction === r.Horizontal) return Math.abs(t.x) >= this.node.width * this.scrollThreshold;
if (this.direction === r.Vertical) return Math.abs(t.y) >= this.node.height * this.scrollThreshold;
}
},
_isQuicklyScrollable: function(t) {
if (this.direction === r.Horizontal) {
if (Math.abs(t.x) > this.autoPageTurningThreshold) return !0;
} else if (this.direction === r.Vertical && Math.abs(t.y) > this.autoPageTurningThreshold) return !0;
return !1;
},
_moveOffsetValue: function(t) {
var e = cc.v2(0, 0);
this.sizeMode === n.Free ? this.direction === r.Horizontal ? e.x = this._scrollCenterOffsetX[t] : this.direction === r.Vertical && (e.y = this._scrollCenterOffsetY[t]) : this.direction === r.Horizontal ? e.x = t * this.node.width : this.direction === r.Vertical && (e.y = t * this.node.height);
return e;
},
_getDragDirection: function(t) {
return this.direction === r.Horizontal ? 0 === t.x ? 0 : t.x > 0 ? 1 : -1 : this.direction === r.Vertical ? 0 === t.y ? 0 : t.y < 0 ? 1 : -1 : void 0;
},
_handleReleaseLogic: function(t) {
var e = this._startBounceBackIfNeeded(), i = this._touchBeganPosition.sub(this._touchEndPosition);
if (e) {
var n = this._getDragDirection(i);
if (0 === n) return;
this._curPageIdx = n > 0 ? this._pages.length - 1 : 0;
this.indicator && this.indicator._changedState();
} else {
var r = this._curPageIdx, s = r + this._getDragDirection(i), a = this.pageTurningSpeed * Math.abs(r - s);
if (s < this._pages.length) {
if (this._isScrollable(i, r, s)) {
this.scrollToPage(s, a);
return;
}
var o = this._calculateTouchMoveVelocity();
if (this._isQuicklyScrollable(o)) {
this.scrollToPage(s, a);
return;
}
}
this.scrollToPage(r, a);
}
},
_onTouchBegan: function(t, e) {
this._touchBeganPosition = t.touch.getLocation();
this._super(t, e);
},
_onTouchMoved: function(t, e) {
this._super(t, e);
},
_onTouchEnded: function(t, e) {
this._touchEndPosition = t.touch.getLocation();
this._super(t, e);
},
_onTouchCancelled: function(t, e) {
this._touchEndPosition = t.touch.getLocation();
this._super(t, e);
},
_onMouseWheel: function() {}
});
cc.PageView = e.exports = a;
}), {} ],
73: [ (function(t, e, i) {
var n = cc.Enum({
HORIZONTAL: 0,
VERTICAL: 1
}), r = cc.Class({
name: "cc.PageViewIndicator",
extends: t("./CCComponent"),
editor: !1,
properties: {
_layout: null,
_pageView: null,
_indicators: [],
spriteFrame: {
default: null,
type: cc.SpriteFrame,
tooltip: !1
},
direction: {
default: n.HORIZONTAL,
type: n,
tooltip: !1
},
cellSize: {
default: cc.size(20, 20),
tooltip: !1
},
spacing: {
default: 0,
tooltip: !1
}
},
statics: {
Direction: n
},
onLoad: function() {
this._updateLayout();
},
setPageView: function(t) {
this._pageView = t;
this._refresh();
},
_updateLayout: function() {
this._layout = this.getComponent(cc.Layout);
this._layout || (this._layout = this.addComponent(cc.Layout));
if (this.direction === n.HORIZONTAL) {
this._layout.type = cc.Layout.Type.HORIZONTAL;
this._layout.spacingX = this.spacing;
} else if (this.direction === n.VERTICAL) {
this._layout.type = cc.Layout.Type.VERTICAL;
this._layout.spacingY = this.spacing;
}
this._layout.resizeMode = cc.Layout.ResizeMode.CONTAINER;
},
_createIndicator: function() {
var t = new cc.Node();
t.addComponent(cc.Sprite).spriteFrame = this.spriteFrame;
t.parent = this.node;
t.width = this.cellSize.width;
t.height = this.cellSize.height;
return t;
},
_changedState: function() {
var t = this._indicators;
if (0 !== t.length) {
var e = this._pageView._curPageIdx;
if (!(e >= t.length)) {
for (var i = 0; i < t.length; ++i) {
t[i].opacity = 127.5;
}
t[e].opacity = 255;
}
}
},
_refresh: function() {
if (this._pageView) {
var t = this._indicators, e = this._pageView.getPages();
if (e.length !== t.length) {
var i = 0;
if (e.length > t.length) for (i = 0; i < e.length; ++i) t[i] || (t[i] = this._createIndicator()); else {
for (i = t.length - e.length; i > 0; --i) {
var n = t[i - 1];
this.node.removeChild(n);
t.splice(i - 1, 1);
}
}
this._layout && this._layout.enabledInHierarchy && this._layout.updateLayout();
this._changedState();
}
}
}
});
cc.PageViewIndicator = e.exports = r;
}), {
"./CCComponent": 65
} ],
74: [ (function(t, e, i) {
var n = t("../utils/misc"), r = t("./CCComponent"), s = cc.Enum({
HORIZONTAL: 0,
VERTICAL: 1,
FILLED: 2
}), a = cc.Class({
name: "cc.ProgressBar",
extends: r,
editor: !1,
_initBarSprite: function() {
if (this.barSprite) {
var t = this.barSprite.node;
if (!t) return;
var e = this.node.getContentSize(), i = this.node.getAnchorPoint(), n = t.getContentSize();
t.parent === this.node && this.node.setContentSize(n);
this.barSprite.fillType === cc.Sprite.FillType.RADIAL && (this.mode = s.FILLED);
var r = t.getContentSize();
this.mode === s.HORIZONTAL ? this.totalLength = r.width : this.mode === s.VERTICAL ? this.totalLength = r.height : this.totalLength = this.barSprite.fillRange;
if (t.parent === this.node) {
var a = -e.width * i.x;
t.setPosition(cc.v2(a, 0));
}
}
},
_updateBarStatus: function() {
if (this.barSprite) {
var t = this.barSprite.node;
if (!t) return;
var e, i, r, a = t.getAnchorPoint(), o = t.getContentSize(), h = t.getPosition(), l = cc.v2(0, .5), c = n.clamp01(this.progress), u = this.totalLength * c;
switch (this.mode) {
case s.HORIZONTAL:
this.reverse && (l = cc.v2(1, .5));
e = cc.size(u, o.height);
i = this.totalLength;
r = o.height;
break;

case s.VERTICAL:
l = this.reverse ? cc.v2(.5, 1) : cc.v2(.5, 0);
e = cc.size(o.width, u);
i = o.width;
r = this.totalLength;
}
if (this.mode === s.FILLED) if (this.barSprite.type !== cc.Sprite.Type.FILLED) cc.warn("ProgressBar FILLED mode only works when barSprite's Type is FILLED!"); else {
this.reverse && (u *= -1);
this.barSprite.fillRange = u;
} else if (this.barSprite.type !== cc.Sprite.Type.FILLED) {
var _ = l.x - a.x, m = l.y - a.y, f = cc.v2(i * _, r * m);
t.setPosition(h.x + f.x, h.y + f.y);
t.setAnchorPoint(l);
t.setContentSize(e);
} else cc.warn("ProgressBar non-FILLED mode only works when barSprite's Type is non-FILLED!");
}
},
properties: {
barSprite: {
default: null,
type: cc.Sprite,
tooltip: !1,
notify: function() {
this._initBarSprite();
},
animatable: !1
},
mode: {
default: s.HORIZONTAL,
type: s,
tooltip: !1,
notify: function() {
if (this.barSprite) {
var t = this.barSprite.node;
if (!t) return;
var e = t.getContentSize();
this.mode === s.HORIZONTAL ? this.totalLength = e.width : this.mode === s.VERTICAL ? this.totalLength = e.height : this.mode === s.FILLED && (this.totalLength = this.barSprite.fillRange);
}
},
animatable: !1
},
_N$totalLength: 1,
totalLength: {
range: [ 0, Number.MAX_VALUE ],
tooltip: !1,
get: function() {
return this._N$totalLength;
},
set: function(t) {
this.mode === s.FILLED && (t = n.clamp01(t));
this._N$totalLength = t;
this._updateBarStatus();
}
},
progress: {
default: 1,
type: "Float",
range: [ 0, 1, .1 ],
slide: !0,
tooltip: !1,
notify: function() {
this._updateBarStatus();
}
},
reverse: {
default: !1,
tooltip: !1,
notify: function() {
this.barSprite && (this.barSprite.fillStart = 1 - this.barSprite.fillStart);
this._updateBarStatus();
},
animatable: !1
}
},
statics: {
Mode: s
}
});
cc.ProgressBar = e.exports = a;
}), {
"../utils/misc": 231,
"./CCComponent": 65
} ],
75: [ (function(t, e, i) {
var n = t("./CCComponent"), r = t("../renderer/webgl/vertex-format"), s = t("../renderer/render-engine"), a = t("../renderer/render-flow"), o = t("../platform/CCMacro").BlendFactor, h = s.RenderData, l = s.gfx, c = cc.Class({
name: "RenderComponent",
extends: n,
editor: !1,
properties: {
_srcBlendFactor: o.SRC_ALPHA,
_dstBlendFactor: o.ONE_MINUS_SRC_ALPHA,
srcBlendFactor: {
get: function() {
return this._srcBlendFactor;
},
set: function(t) {
if (this._srcBlendFactor !== t) {
this._srcBlendFactor = t;
this._updateBlendFunc(!0);
}
},
animatable: !1,
type: o,
tooltip: !1
},
dstBlendFactor: {
get: function() {
return this._dstBlendFactor;
},
set: function(t) {
if (this._dstBlendFactor !== t) {
this._dstBlendFactor = t;
this._updateBlendFunc(!0);
}
},
animatable: !1,
type: o,
tooltip: !1
}
},
ctor: function() {
this._material = null;
this._renderData = null;
this.__allocedDatas = [];
this._vertexFormat = r;
this._toPostHandle = !1;
this._assembler = this.constructor._assembler;
this._postAssembler = this.constructor._postAssembler;
},
onEnable: function() {
this.node._renderComponent && (this.node._renderComponent.enabled = !1);
this.node._renderComponent = this;
this.node._renderFlag |= a.FLAG_RENDER | a.FLAG_UPDATE_RENDER_DATA | a.FLAG_COLOR;
},
onDisable: function() {
this.node._renderComponent = null;
this.disableRender();
},
onDestroy: function() {
for (var t = 0, e = this.__allocedDatas.length; t < e; t++) h.free(this.__allocedDatas[t]);
this.__allocedDatas.length = 0;
this._material = null;
this._renderData = null;
},
_canRender: function() {
return this._enabled;
},
markForUpdateRenderData: function(t) {
t && this._canRender() ? this.node._renderFlag |= a.FLAG_UPDATE_RENDER_DATA : t || (this.node._renderFlag &= ~a.FLAG_UPDATE_RENDER_DATA);
},
markForRender: function(t) {
t && this._canRender() ? this.node._renderFlag |= a.FLAG_RENDER : t || (this.node._renderFlag &= ~a.FLAG_RENDER);
},
markForCustomIARender: function(t) {
t && this._canRender() ? this.node._renderFlag |= a.FLAG_CUSTOM_IA_RENDER : t || (this.node._renderFlag &= ~a.FLAG_CUSTOM_IA_RENDER);
},
disableRender: function() {
this.node._renderFlag &= ~(a.FLAG_RENDER | a.FLAG_CUSTOM_IA_RENDER | a.FLAG_UPDATE_RENDER_DATA | a.FLAG_COLOR);
},
requestRenderData: function() {
var t = h.alloc();
this.__allocedDatas.push(t);
return t;
},
destroyRenderData: function(t) {
var e = this.__allocedDatas.indexOf(t);
if (-1 !== e) {
this.__allocedDatas.splice(e, 1);
h.free(t);
}
},
_updateColor: function() {
var t = this._material;
if (t) {
t.color = this.node.color;
t.updateHash();
this.node._renderFlag &= ~a.FLAG_COLOR;
}
},
getMaterial: function() {
return this._material;
},
_updateMaterial: function(t) {
this._material = t;
this._updateBlendFunc();
t.updateHash();
},
_updateBlendFunc: function(t) {
if (this._material) {
this._material._mainTech.passes[0].setBlend(l.BLEND_FUNC_ADD, this._srcBlendFactor, this._dstBlendFactor, l.BLEND_FUNC_ADD, this._srcBlendFactor, this._dstBlendFactor);
t && this._material.updateHash();
}
}
});
c._assembler = null;
c._postAssembler = null;
cc.RenderComponent = e.exports = c;
}), {
"../platform/CCMacro": 158,
"../renderer/render-engine": 195,
"../renderer/render-flow": 196,
"../renderer/webgl/vertex-format": 221,
"./CCComponent": 65
} ],
76: [ (function(i, n, r) {
var s = i("../platform/js"), a = i("../platform/CCMacro"), o = i("../utils/text-utils"), h = o.HtmlTextParser, l = o.TextUtils, c = o.CustomFontLoader, u = a.TextAlignment, _ = a.VerticalTextAlignment, m = "RICHTEXT_CHILD", f = new h();
var d = new s.Pool(function(t) {
0;
0;
return !!cc.isValid(t) && !t.getComponent(cc.LabelOutline);
}, 20);
d.get = function(i, n, r) {
var s = this._get();
s || (s = new cc.PrivateNode(m));
var a = s.getComponent(cc.Label);
a || (a = s.addComponent(cc.Label));
s.setPosition(0, 0);
s.setAnchorPoint(.5, .5);
s.setContentSize(128, 128);
s.skewX = 0;
"string" !== ("object" === (e = typeof i) ? t(i) : e) && (i = "" + i);
n instanceof cc.Font ? a.font = n : a.fontFamily = "Arial";
a.string = i;
a.horizontalAlign = u.LEFT;
a.verticalAlign = _.TOP;
a.fontSize = r || 40;
a.overflow = 0;
a.enableWrapText = !0;
a.lineHeight = 40;
a._enableBold(!1);
a._enableItalics(!1);
a._enableUnderline(!1);
return s;
};
var p = cc.Class({
name: "cc.RichText",
extends: cc.Component,
ctor: function() {
this._textArray = null;
this._labelSegments = [];
this._labelSegmentsCache = [];
this._linesWidth = [];
this._updateRichTextStatus = this._updateRichText;
},
editor: !1,
properties: {
string: {
default: "<color=#00ff00>Rich</c><color=#0fffff>Text</color>",
multiline: !0,
tooltip: !1,
notify: function() {
this._updateRichTextStatus();
}
},
horizontalAlign: {
default: u.LEFT,
type: u,
tooltip: !1,
animatable: !1,
notify: function(t) {
if (this.horizontalAlign !== t) {
this._layoutDirty = !0;
this._updateRichTextStatus();
}
}
},
fontSize: {
default: 40,
tooltip: !1,
notify: function(t) {
if (this.fontSize !== t) {
this._layoutDirty = !0;
this._updateRichTextStatus();
}
}
},
font: {
default: null,
type: cc.TTFFont,
tooltip: !1,
notify: function(t) {
if (this.font !== t) {
this._layoutDirty = !0;
this.font && this._onTTFLoaded();
this._updateRichTextStatus();
}
}
},
maxWidth: {
default: 0,
tooltip: !1,
notify: function(t) {
if (this.maxWidth !== t) {
this._layoutDirty = !0;
this._updateRichTextStatus();
}
}
},
lineHeight: {
default: 40,
tooltip: !1,
notify: function(t) {
if (this.lineHeight !== t) {
this._layoutDirty = !0;
this._updateRichTextStatus();
}
}
},
imageAtlas: {
default: null,
type: cc.SpriteAtlas,
tooltip: !1,
notify: function(t) {
if (this.imageAtlas !== t) {
this._layoutDirty = !0;
this._updateRichTextStatus();
}
}
},
handleTouchEvent: {
default: !0,
tooltip: !1,
notify: function(t) {
this.handleTouchEvent !== t && this.enabledInHierarchy && (this.handleTouchEvent ? this._addEventListeners() : this._removeEventListeners());
}
}
},
statics: {
HorizontalAlign: u,
VerticalAlign: _
},
onEnable: function() {
this.handleTouchEvent && this._addEventListeners();
this._updateRichText();
this._activateChildren(!0);
},
onDisable: function() {
this.handleTouchEvent && this._removeEventListeners();
this._activateChildren(!1);
},
start: function() {
this._onTTFLoaded();
},
_addEventListeners: function() {
this.node.on(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
},
_removeEventListeners: function() {
this.node.off(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
},
_updateLabelSegmentTextAttributes: function() {
this._labelSegments.forEach(function(t) {
this._applyTextAttribute(t);
}.bind(this));
},
_createFontLabel: function(t) {
return d.get(t, this.font, this.fontSize);
},
_getFontRawUrl: function() {
return this.font instanceof cc.TTFFont ? this.font.nativeUrl : "";
},
_onTTFLoaded: function() {
var t = this._getFontRawUrl();
if (t) {
var e = this;
c.loadTTF(t, (function() {
e._layoutDirty = !0;
e._updateRichText();
}));
}
},
_measureText: function(t, e) {
var i = this, n = function(e) {
var n = void 0;
if (0 === i._labelSegmentsCache.length) {
n = i._createFontLabel(e);
i._labelSegmentsCache.push(n);
} else (n = i._labelSegmentsCache[0]).getComponent(cc.Label).string = e;
n._styleIndex = t;
i._applyTextAttribute(n);
return n.getContentSize().width;
};
return e ? n(e) : n;
},
_onTouchEnded: function(t) {
for (var e = this, i = this.node.getComponents(cc.Component), n = function(n) {
var r = e._labelSegments[n], s = r._clickHandler;
if (s && e._containsTouchLocation(r, t.touch.getLocation())) {
i.forEach((function(e) {
e.enabledInHierarchy && e[s] && e[s](t);
}));
t.stopPropagation();
}
}, r = 0; r < this._labelSegments.length; ++r) n(r);
},
_containsTouchLocation: function(t, e) {
return t.getBoundingBoxToWorld().contains(e);
},
_resetState: function() {
for (var t = this.node.children.length - 1; t >= 0; t--) {
var e = this.node.children[t];
if (e.name === m) {
e.parent = null;
d.put(e);
}
}
this._labelSegments.length = 0;
this._labelSegmentsCache.length = 0;
this._linesWidth.length = 0;
this._lineOffsetX = 0;
this._lineCount = 1;
this._labelWidth = 0;
this._labelHeight = 0;
this._layoutDirty = !0;
},
onRestore: !1,
_activateChildren: function(t) {
for (var e = this.node.children.length - 1; e >= 0; e--) {
var i = this.node.children[e];
i.name === m && (i.active = t);
}
},
_addLabelSegment: function(t, e) {
var i = void 0;
0 === this._labelSegmentsCache.length ? i = this._createFontLabel(t) : (i = this._labelSegmentsCache.pop()).getComponent(cc.Label).string = t;
i._styleIndex = e;
i._lineCount = this._lineCount;
i.setAnchorPoint(0, 0);
this._applyTextAttribute(i);
this.node.addChild(i);
this._labelSegments.push(i);
return i;
},
_updateRichTextWithMaxWidth: function(t, e, i) {
var n = e;
if (this._lineOffsetX > 0 && n + this._lineOffsetX > this.maxWidth) for (var r = 0; this._lineOffsetX <= this.maxWidth; ) {
var s = this._getFirstWordLen(t, r, t.length), a = t.substr(r, s), o = this._measureText(i, a);
if (!(this._lineOffsetX + o <= this.maxWidth)) {
if (r > 0) {
var h = t.substr(0, r);
this._addLabelSegment(h, i);
t = t.substr(r, t.length);
n = this._measureText(i, t);
}
this._updateLineInfo();
break;
}
this._lineOffsetX += o;
r += s;
}
if (n > this.maxWidth) for (var c = l.fragmentText(t, n, this.maxWidth, this._measureText(i)), u = 0; u < c.length; ++u) {
var _ = c[u], m = this._addLabelSegment(_, i).getContentSize();
this._lineOffsetX += m.width;
c.length > 1 && u < c.length - 1 && this._updateLineInfo();
} else {
this._lineOffsetX += n;
this._addLabelSegment(t, i);
}
},
_isLastComponentCR: function(t) {
return t.length - 1 === t.lastIndexOf("\n");
},
_updateLineInfo: function() {
this._linesWidth.push(this._lineOffsetX);
this._lineOffsetX = 0;
this._lineCount++;
},
_needsUpdateTextLayout: function(t) {
if (this._layoutDirty || !this._textArray || !t) return !0;
if (this._textArray.length !== t.length) return !0;
for (var e = 0; e < this._textArray.length; ++e) {
var i = this._textArray[e], n = t[e];
if (i.text !== n.text) return !0;
if (i.style) {
if (n.style) {
if (!!n.style.outline != !!i.style.outline) return !0;
if (i.style.size !== n.style.size || i.style.italic !== n.style.italic || i.style.isImage !== n.style.isImage) return !0;
if (i.style.isImage === n.style.isImage && i.style.src !== n.style.src) return !0;
} else if (i.style.size || i.style.italic || i.style.isImage || i.style.outline) return !0;
} else if (n.style && (n.style.size || n.style.italic || n.style.isImage || n.style.outline)) return !0;
}
return !1;
},
_addRichTextImageElement: function(t) {
var e = t.style.src, i = this.imageAtlas.getSpriteFrame(e);
if (i) {
var n = new cc.PrivateNode(m), r = n.addComponent(cc.Sprite);
n.setAnchorPoint(0, 0);
r.type = cc.Sprite.Type.SLICED;
r.sizeMode = cc.Sprite.SizeMode.CUSTOM;
this.node.addChild(n);
this._labelSegments.push(n);
var s = i.getRect(), a = 1, o = s.width, h = s.height, l = t.style.imageWidth, c = t.style.imageHeight;
if (c > 0 && c < this.lineHeight) {
o *= a = c / h;
h *= a;
} else {
o *= a = this.lineHeight / h;
h *= a;
}
l > 0 && (o = l);
if (this.maxWidth > 0) {
this._lineOffsetX + o > this.maxWidth && this._updateLineInfo();
this._lineOffsetX += o;
} else {
this._lineOffsetX += o;
this._lineOffsetX > this._labelWidth && (this._labelWidth = this._lineOffsetX);
}
r.spriteFrame = i;
n.setContentSize(o, h);
n._lineCount = this._lineCount;
t.style.event && t.style.event.click && (n._clickHandler = t.style.event.click);
} else cc.warnID(4400);
},
_updateRichText: function() {
if (this.enabled) {
var t = f.parse(this.string);
if (this._needsUpdateTextLayout(t)) {
this._textArray = t;
this._resetState();
for (var e = !1, i = void 0, n = 0; n < this._textArray.length; ++n) {
var r = this._textArray[n], s = r.text;
if ("" === s) {
if (r.style && r.style.newline) {
this._updateLineInfo();
continue;
}
if (r.style && r.style.isImage && this.imageAtlas) {
this._addRichTextImageElement(r);
continue;
}
}
for (var a = s.split("\n"), o = 0; o < a.length; ++o) {
var h = a[o];
if ("" !== h) {
e = !1;
if (this.maxWidth > 0) {
var l = this._measureText(n, h);
this._updateRichTextWithMaxWidth(h, l, n);
a.length > 1 && o < a.length - 1 && this._updateLineInfo();
} else {
i = this._addLabelSegment(h, n).getContentSize();
this._lineOffsetX += i.width;
this._lineOffsetX > this._labelWidth && (this._labelWidth = this._lineOffsetX);
a.length > 1 && o < a.length - 1 && this._updateLineInfo();
}
} else {
if (this._isLastComponentCR(s) && o === a.length - 1) continue;
this._updateLineInfo();
e = !0;
}
}
}
e || this._linesWidth.push(this._lineOffsetX);
this.maxWidth > 0 && (this._labelWidth = this.maxWidth);
this._labelHeight = this._lineCount * this.lineHeight;
this.node.setContentSize(this._labelWidth, this._labelHeight);
this._updateRichTextPosition();
this._layoutDirty = !1;
} else {
this._textArray = t;
this._updateLabelSegmentTextAttributes();
}
}
},
_getFirstWordLen: function(t, e, i) {
var n = t.charAt(e);
if (l.isUnicodeCJK(n) || l.isUnicodeSpace(n)) return 1;
for (var r = 1, s = e + 1; s < i; ++s) {
n = t.charAt(s);
if (l.isUnicodeSpace(n) || l.isUnicodeCJK(n)) break;
r++;
}
return r;
},
_updateRichTextPosition: function() {
for (var t = 0, e = 1, i = this._lineCount, n = 0; n < this._labelSegments.length; ++n) {
var r = this._labelSegments[n], s = r._lineCount;
if (s > e) {
t = 0;
e = s;
}
var a = 0;
switch (this.horizontalAlign) {
case u.LEFT:
a = -this._labelWidth / 2;
break;

case u.CENTER:
a = -this._linesWidth[s - 1] / 2;
break;

case u.RIGHT:
a = this._labelWidth / 2 - this._linesWidth[s - 1];
}
r.x = t + a;
var o = r.getContentSize();
r.y = this.lineHeight * (i - s) - this._labelHeight / 2;
s === e && (t += o.width);
}
},
_convertLiteralColorValue: function(t) {
var e = t.toUpperCase();
return cc.Color[e] ? cc.Color[e] : cc.color().fromHEX(t);
},
_applyTextAttribute: function(t) {
var e = t.getComponent(cc.Label);
if (e) {
var i = t._styleIndex;
e.lineHeight = this.lineHeight;
e.horizontalAlign = u.LEFT;
e.verticalAlign = _.CENTER;
var n = null;
this._textArray[i] && (n = this._textArray[i].style);
n && n.color ? t.color = this._convertLiteralColorValue(n.color) : t.color = this._convertLiteralColorValue("white");
e._enableBold(n && n.bold);
e._enableItalics(n && n.italic);
n && n.italic && (t.skewX = 12);
e._enableUnderline(n && n.underline);
if (n && n.outline) {
var r = t.getComponent(cc.LabelOutline);
r || (r = t.addComponent(cc.LabelOutline));
r.color = this._convertLiteralColorValue(n.outline.color);
r.width = n.outline.width;
}
n && n.size ? e.fontSize = n.size : e.fontSize = this.fontSize;
e._updateRenderData(!0);
n && n.event && n.event.click && (t._clickHandler = n.event.click);
}
},
onDestroy: function() {
for (var t = 0; t < this._labelSegments.length; ++t) {
this._labelSegments[t].removeFromParent();
d.put(this._labelSegments[t]);
}
}
});
cc.RichText = n.exports = p;
}), {
"../platform/CCMacro": 158,
"../platform/js": 173,
"../utils/text-utils": 238
} ],
77: [ (function(t, e, i) {
var n = t("../utils/misc"), r = (t("./CCComponent"), cc.Enum({
HORIZONTAL: 0,
VERTICAL: 1
})), s = cc.Class({
name: "cc.Scrollbar",
extends: t("./CCComponent"),
editor: !1,
properties: {
_scrollView: null,
_touching: !1,
_autoHideRemainingTime: {
default: 0,
serializable: !1
},
_opacity: 255,
handle: {
default: null,
type: cc.Sprite,
tooltip: !1,
notify: function() {
this._onScroll(cc.v2(0, 0));
},
animatable: !1
},
direction: {
default: r.HORIZONTAL,
type: r,
tooltip: !1,
notify: function() {
this._onScroll(cc.v2(0, 0));
},
animatable: !1
},
enableAutoHide: {
default: !0,
animatable: !1,
tooltip: !1
},
autoHideTime: {
default: 1,
animatable: !1,
tooltip: !1
}
},
statics: {
Direction: r
},
setTargetScrollView: function(t) {
this._scrollView = t;
},
_convertToScrollViewSpace: function(t) {
var e = t.convertToWorldSpace(cc.v2(0, 0));
return this._scrollView.node.convertToNodeSpace(e);
},
_setOpacity: function(t) {
if (this.handle) {
this.node.opacity = t;
this.handle.node.opacity = t;
}
},
_onScroll: function(t) {
if (this._scrollView) {
var e = this._scrollView.content;
if (e) {
var i = e.getContentSize(), n = this._scrollView.node.getContentSize(), s = this.node.getContentSize();
if (this._conditionalDisableScrollBar(i, n)) return;
if (this.enableAutoHide) {
this._autoHideRemainingTime = this.autoHideTime;
this._setOpacity(this._opacity);
}
var a = 0, o = 0, h = 0, l = 0, c = 0;
if (this.direction === r.HORIZONTAL) {
a = i.width;
o = n.width;
c = s.width;
h = t.x;
l = -this._convertToScrollViewSpace(e).x;
} else if (this.direction === r.VERTICAL) {
a = i.height;
o = n.height;
c = s.height;
h = t.y;
l = -this._convertToScrollViewSpace(e).y;
}
var u = this._calculateLength(a, o, c, h), _ = this._calculatePosition(a, o, c, l, h, u);
this._updateLength(u);
this._updateHanlderPosition(_);
}
}
},
_updateHanlderPosition: function(t) {
if (this.handle) {
var e = this._fixupHandlerPosition();
this.handle.node.setPosition(t.x + e.x, t.y + e.y);
}
},
_fixupHandlerPosition: function() {
var t = this.node.getContentSize(), e = this.node.getAnchorPoint(), i = this.handle.node.getContentSize(), n = this.handle.node.parent, s = this.node.convertToWorldSpaceAR(cc.v2(-t.width * e.x, -t.height * e.y)), a = n.convertToNodeSpaceAR(s);
this.direction === r.HORIZONTAL ? a = cc.v2(a.x, a.y + (t.height - i.height) / 2) : this.direction === r.VERTICAL && (a = cc.v2(a.x + (t.width - i.width) / 2, a.y));
this.handle.node.setPosition(a);
return a;
},
_onTouchBegan: function() {
this.enableAutoHide && (this._touching = !0);
},
_conditionalDisableScrollBar: function(t, e) {
return t.width <= e.width && this.direction === r.HORIZONTAL || t.height <= e.height && this.direction === r.VERTICAL;
},
_onTouchEnded: function() {
if (this.enableAutoHide) {
this._touching = !1;
if (!(this.autoHideTime <= 0)) {
if (this._scrollView) {
var t = this._scrollView.content;
if (t) {
var e = t.getContentSize(), i = this._scrollView.node.getContentSize();
if (this._conditionalDisableScrollBar(e, i)) return;
}
}
this._autoHideRemainingTime = this.autoHideTime;
}
}
},
_calculateLength: function(t, e, i, n) {
var r = t;
n && (r += 20 * (n > 0 ? n : -n));
return i * (e / r);
},
_calculatePosition: function(t, e, i, s, a, o) {
var h = t - e;
a && (h += Math.abs(a));
var l = 0;
if (h) {
l = s / h;
l = n.clamp01(l);
}
var c = (i - o) * l;
return this.direction === r.VERTICAL ? cc.v2(0, c) : cc.v2(c, 0);
},
_updateLength: function(t) {
if (this.handle) {
var e = this.handle.node, i = e.getContentSize();
e.setAnchorPoint(cc.v2(0, 0));
this.direction === r.HORIZONTAL ? e.setContentSize(t, i.height) : e.setContentSize(i.width, t);
}
},
_processAutoHide: function(t) {
if (this.enableAutoHide && !(this._autoHideRemainingTime <= 0) && !this._touching) {
this._autoHideRemainingTime -= t;
if (this._autoHideRemainingTime <= this.autoHideTime) {
this._autoHideRemainingTime = Math.max(0, this._autoHideRemainingTime);
var e = this._opacity * (this._autoHideRemainingTime / this.autoHideTime);
this._setOpacity(e);
}
}
},
start: function() {
this.enableAutoHide && this._setOpacity(0);
},
hide: function() {
this._autoHideRemainingTime = 0;
this._setOpacity(0);
},
show: function() {
this._autoHideRemainingTime = this.autoHideTime;
this._setOpacity(this._opacity);
},
update: function(t) {
this._processAutoHide(t);
}
});
cc.Scrollbar = e.exports = s;
}), {
"../utils/misc": 231,
"./CCComponent": 65
} ],
78: [ (function(t, e, i) {
var n = t("../CCNode").EventType, r = 1e-4, s = function() {
return new Date().getMilliseconds();
}, a = cc.Enum({
SCROLL_TO_TOP: 0,
SCROLL_TO_BOTTOM: 1,
SCROLL_TO_LEFT: 2,
SCROLL_TO_RIGHT: 3,
SCROLLING: 4,
BOUNCE_TOP: 5,
BOUNCE_BOTTOM: 6,
BOUNCE_LEFT: 7,
BOUNCE_RIGHT: 8,
SCROLL_ENDED: 9,
TOUCH_UP: 10,
AUTOSCROLL_ENDED_WITH_THRESHOLD: 11,
SCROLL_BEGAN: 12
}), o = {
"scroll-to-top": a.SCROLL_TO_TOP,
"scroll-to-bottom": a.SCROLL_TO_BOTTOM,
"scroll-to-left": a.SCROLL_TO_LEFT,
"scroll-to-right": a.SCROLL_TO_RIGHT,
scrolling: a.SCROLLING,
"bounce-bottom": a.BOUNCE_BOTTOM,
"bounce-left": a.BOUNCE_LEFT,
"bounce-right": a.BOUNCE_RIGHT,
"bounce-top": a.BOUNCE_TOP,
"scroll-ended": a.SCROLL_ENDED,
"touch-up": a.TOUCH_UP,
"scroll-ended-with-threshold": a.AUTOSCROLL_ENDED_WITH_THRESHOLD,
"scroll-began": a.SCROLL_BEGAN
}, h = cc.Class({
name: "cc.ScrollView",
extends: t("./CCViewGroup"),
editor: !1,
ctor: function() {
this._topBoundary = 0;
this._bottomBoundary = 0;
this._leftBoundary = 0;
this._rightBoundary = 0;
this._touchMoveDisplacements = [];
this._touchMoveTimeDeltas = [];
this._touchMovePreviousTimestamp = 0;
this._touchMoved = !1;
this._autoScrolling = !1;
this._autoScrollAttenuate = !1;
this._autoScrollStartPosition = cc.v2(0, 0);
this._autoScrollTargetDelta = cc.v2(0, 0);
this._autoScrollTotalTime = 0;
this._autoScrollAccumulatedTime = 0;
this._autoScrollCurrentlyOutOfBoundary = !1;
this._autoScrollBraking = !1;
this._autoScrollBrakingStartPosition = cc.v2(0, 0);
this._outOfBoundaryAmount = cc.v2(0, 0);
this._outOfBoundaryAmountDirty = !0;
this._stopMouseWheel = !1;
this._mouseWheelEventElapsedTime = 0;
this._isScrollEndedWithThresholdEventFired = !1;
this._scrollEventEmitMask = 0;
this._isBouncing = !1;
this._scrolling = !1;
},
properties: {
content: {
default: void 0,
type: cc.Node,
tooltip: !1
},
horizontal: {
default: !0,
animatable: !1,
tooltip: !1
},
vertical: {
default: !0,
animatable: !1,
tooltip: !1
},
inertia: {
default: !0,
tooltip: !1
},
brake: {
default: .5,
type: "Float",
range: [ 0, 1, .1 ],
tooltip: !1
},
elastic: {
default: !0,
animatable: !1,
tooltip: !1
},
bounceDuration: {
default: 1,
range: [ 0, 10 ],
tooltip: !1
},
horizontalScrollBar: {
default: void 0,
type: cc.Scrollbar,
tooltip: !1,
notify: function() {
if (this.horizontalScrollBar) {
this.horizontalScrollBar.setTargetScrollView(this);
this._updateScrollBar(0);
}
},
animatable: !1
},
verticalScrollBar: {
default: void 0,
type: cc.Scrollbar,
tooltip: !1,
notify: function() {
if (this.verticalScrollBar) {
this.verticalScrollBar.setTargetScrollView(this);
this._updateScrollBar(0);
}
},
animatable: !1
},
scrollEvents: {
default: [],
type: cc.Component.EventHandler,
tooltip: !1
},
cancelInnerEvents: {
default: !0,
animatable: !1,
tooltip: !1
}
},
statics: {
EventType: a
},
scrollToBottom: function(t, e) {
var i = this._calculateMovePercentDelta({
anchor: cc.v2(0, 0),
applyToHorizontal: !1,
applyToVertical: !0
});
t ? this._startAutoScroll(i, t, !1 !== e) : this._moveContent(i, !0);
},
scrollToTop: function(t, e) {
var i = this._calculateMovePercentDelta({
anchor: cc.v2(0, 1),
applyToHorizontal: !1,
applyToVertical: !0
});
t ? this._startAutoScroll(i, t, !1 !== e) : this._moveContent(i);
},
scrollToLeft: function(t, e) {
var i = this._calculateMovePercentDelta({
anchor: cc.v2(0, 0),
applyToHorizontal: !0,
applyToVertical: !1
});
t ? this._startAutoScroll(i, t, !1 !== e) : this._moveContent(i);
},
scrollToRight: function(t, e) {
var i = this._calculateMovePercentDelta({
anchor: cc.v2(1, 0),
applyToHorizontal: !0,
applyToVertical: !1
});
t ? this._startAutoScroll(i, t, !1 !== e) : this._moveContent(i);
},
scrollToTopLeft: function(t, e) {
var i = this._calculateMovePercentDelta({
anchor: cc.v2(0, 1),
applyToHorizontal: !0,
applyToVertical: !0
});
t ? this._startAutoScroll(i, t, !1 !== e) : this._moveContent(i);
},
scrollToTopRight: function(t, e) {
var i = this._calculateMovePercentDelta({
anchor: cc.v2(1, 1),
applyToHorizontal: !0,
applyToVertical: !0
});
t ? this._startAutoScroll(i, t, !1 !== e) : this._moveContent(i);
},
scrollToBottomLeft: function(t, e) {
var i = this._calculateMovePercentDelta({
anchor: cc.v2(0, 0),
applyToHorizontal: !0,
applyToVertical: !0
});
t ? this._startAutoScroll(i, t, !1 !== e) : this._moveContent(i);
},
scrollToBottomRight: function(t, e) {
var i = this._calculateMovePercentDelta({
anchor: cc.v2(1, 0),
applyToHorizontal: !0,
applyToVertical: !0
});
t ? this._startAutoScroll(i, t, !1 !== e) : this._moveContent(i);
},
scrollToOffset: function(t, e, i) {
var n = this.getMaxScrollOffset(), r = cc.v2(0, 0);
0 === n.x ? r.x = 0 : r.x = t.x / n.x;
0 === n.y ? r.y = 1 : r.y = (n.y - t.y) / n.y;
this.scrollTo(r, e, i);
},
getScrollOffset: function() {
var t = this._getContentTopBoundary() - this._topBoundary, e = this._getContentLeftBoundary() - this._leftBoundary;
return cc.v2(e, t);
},
getMaxScrollOffset: function() {
var t = this.node.getContentSize(), e = this.content.getContentSize(), i = e.width - t.width, n = e.height - t.height;
i = i >= 0 ? i : 0;
n = n >= 0 ? n : 0;
return cc.v2(i, n);
},
scrollToPercentHorizontal: function(t, e, i) {
var n = this._calculateMovePercentDelta({
anchor: cc.v2(t, 0),
applyToHorizontal: !0,
applyToVertical: !1
});
e ? this._startAutoScroll(n, e, !1 !== i) : this._moveContent(n);
},
scrollTo: function(t, e, i) {
var n = this._calculateMovePercentDelta({
anchor: cc.v2(t),
applyToHorizontal: !0,
applyToVertical: !0
});
e ? this._startAutoScroll(n, e, !1 !== i) : this._moveContent(n);
},
scrollToPercentVertical: function(t, e, i) {
var n = this._calculateMovePercentDelta({
anchor: cc.v2(0, t),
applyToHorizontal: !1,
applyToVertical: !0
});
e ? this._startAutoScroll(n, e, !1 !== i) : this._moveContent(n);
},
stopAutoScroll: function() {
this._autoScrolling = !1;
this._autoScrollAccumulatedTime = this._autoScrollTotalTime;
},
setContentPosition: function(t) {
if (!t.fuzzyEquals(this.getContentPosition(), r)) {
this.content.setPosition(t);
this._outOfBoundaryAmountDirty = !0;
}
},
getContentPosition: function() {
return this.content.getPosition();
},
isScrolling: function() {
return this._scrolling;
},
isAutoScrolling: function() {
return this._autoScrolling;
},
_registerEvent: function() {
this.node.on(cc.Node.EventType.TOUCH_START, this._onTouchBegan, this, !0);
this.node.on(cc.Node.EventType.TOUCH_MOVE, this._onTouchMoved, this, !0);
this.node.on(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this, !0);
this.node.on(cc.Node.EventType.TOUCH_CANCEL, this._onTouchCancelled, this, !0);
this.node.on(cc.Node.EventType.MOUSE_WHEEL, this._onMouseWheel, this, !0);
},
_unregisterEvent: function() {
this.node.off(cc.Node.EventType.TOUCH_START, this._onTouchBegan, this, !0);
this.node.off(cc.Node.EventType.TOUCH_MOVE, this._onTouchMoved, this, !0);
this.node.off(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this, !0);
this.node.off(cc.Node.EventType.TOUCH_CANCEL, this._onTouchCancelled, this, !0);
this.node.off(cc.Node.EventType.MOUSE_WHEEL, this._onMouseWheel, this, !0);
},
_onMouseWheel: function(t, e) {
if (this.enabledInHierarchy && !this._hasNestedViewGroup(t, e)) {
var i = cc.v2(0, 0), n = -.1;
n = -7;
this.vertical ? i = cc.v2(0, t.getScrollY() * n) : this.horizontal && (i = cc.v2(t.getScrollY() * n, 0));
this._mouseWheelEventElapsedTime = 0;
this._processDeltaMove(i);
if (!this._stopMouseWheel) {
this._handlePressLogic();
this.schedule(this._checkMouseWheel, 1 / 60);
this._stopMouseWheel = !0;
}
this._stopPropagationIfTargetIsMe(t);
}
},
_checkMouseWheel: function(t) {
if (this._getHowMuchOutOfBoundary().fuzzyEquals(cc.v2(0, 0), r)) {
this._mouseWheelEventElapsedTime += t;
if (this._mouseWheelEventElapsedTime > .1) {
this._onScrollBarTouchEnded();
this.unschedule(this._checkMouseWheel);
this._stopMouseWheel = !1;
}
} else {
this._processInertiaScroll();
this.unschedule(this._checkMouseWheel);
this._stopMouseWheel = !1;
}
},
_calculateMovePercentDelta: function(t) {
var e = t.anchor, i = t.applyToHorizontal, n = t.applyToVertical;
this._calculateBoundary();
e = e.clampf(cc.v2(0, 0), cc.v2(1, 1));
var r = this.node.getContentSize(), s = this.content.getContentSize(), a = this._getContentBottomBoundary() - this._bottomBoundary;
a = -a;
var o = this._getContentLeftBoundary() - this._leftBoundary;
o = -o;
var h = cc.v2(0, 0), l = 0;
if (i) {
l = s.width - r.width;
h.x = o - l * e.x;
}
if (n) {
l = s.height - r.height;
h.y = a - l * e.y;
}
return h;
},
_moveContentToTopLeft: function(t) {
var e = this.content.getContentSize(), i = this._getContentBottomBoundary() - this._bottomBoundary;
i = -i;
var n = cc.v2(0, 0), r = 0, s = this._getContentLeftBoundary() - this._leftBoundary;
s = -s;
if (e.height < t.height) {
r = e.height - t.height;
n.y = i - r;
this.verticalScrollBar && this.verticalScrollBar.hide();
} else this.verticalScrollBar && this.verticalScrollBar.show();
if (e.width < t.width) {
r = e.width - t.width;
n.x = s;
this.horizontalScrollBar && this.horizontalScrollBar.hide();
} else this.horizontalScrollBar && this.horizontalScrollBar.show();
this._moveContent(n);
this._adjustContentOutOfBoundary();
},
_calculateBoundary: function() {
if (this.content) {
var t = this.content.getComponent(cc.Layout);
t && t.enabledInHierarchy && t.updateLayout();
var e = this.node.getContentSize(), i = this._convertToContentParentSpace(cc.v2(0, 0));
this._leftBoundary = i.x;
this._bottomBoundary = i.y;
var n = this._convertToContentParentSpace(cc.v2(e.width, e.height));
this._rightBoundary = n.x;
this._topBoundary = n.y;
this._moveContentToTopLeft(e);
}
},
_convertToContentParentSpace: function(t) {
var e = this.node.convertToWorldSpace(t);
return this.content.parent.convertToNodeSpaceAR(e);
},
_hasNestedViewGroup: function(t, e) {
if (t.eventPhase === cc.Event.CAPTURING_PHASE) {
if (e) for (var i = 0; i < e.length; ++i) {
var n = e[i];
if (this.node === n) return !!t.target.getComponent(cc.ViewGroup);
if (n.getComponent(cc.ViewGroup)) return !0;
}
return !1;
}
},
_stopPropagationIfTargetIsMe: function(t) {
t.eventPhase === cc.Event.AT_TARGET && t.target === this.node && t.stopPropagation();
},
_onTouchBegan: function(t, e) {
if (this.enabledInHierarchy && !this._hasNestedViewGroup(t, e)) {
var i = t.touch;
this.content && this._handlePressLogic(i);
this._touchMoved = !1;
this._stopPropagationIfTargetIsMe(t);
}
},
_onTouchMoved: function(t, e) {
if (this.enabledInHierarchy && !this._hasNestedViewGroup(t, e)) {
var i = t.touch;
this.content && this._handleMoveLogic(i);
if (this.cancelInnerEvents) {
if (i.getLocation().sub(i.getStartLocation()).mag() > 7 && !this._touchMoved && t.target !== this.node) {
var n = new cc.Event.EventTouch(t.getTouches(), t.bubbles);
n.type = cc.Node.EventType.TOUCH_CANCEL;
n.touch = t.touch;
n.simulate = !0;
t.target.dispatchEvent(n);
this._touchMoved = !0;
}
this._stopPropagationIfTargetIsMe(t);
}
}
},
_onTouchEnded: function(t, e) {
if (this.enabledInHierarchy && !this._hasNestedViewGroup(t, e)) {
this._dispatchEvent("touch-up");
var i = t.touch;
this.content && this._handleReleaseLogic(i);
this._touchMoved ? t.stopPropagation() : this._stopPropagationIfTargetIsMe(t);
}
},
_onTouchCancelled: function(t, e) {
if (this.enabledInHierarchy && !this._hasNestedViewGroup(t, e)) {
if (!t.simulate) {
var i = t.touch;
this.content && this._handleReleaseLogic(i);
}
this._stopPropagationIfTargetIsMe(t);
}
},
_processDeltaMove: function(t) {
this._scrollChildren(t);
this._gatherTouchMove(t);
},
_handleMoveLogic: function(t) {
var e = t.getDelta();
this._processDeltaMove(e);
},
_scrollChildren: function(t) {
var e = t = this._clampDelta(t), i = void 0;
if (this.elastic) {
i = this._getHowMuchOutOfBoundary();
e.x *= 0 === i.x ? 1 : .5;
e.y *= 0 === i.y ? 1 : .5;
}
if (!this.elastic) {
i = this._getHowMuchOutOfBoundary(e);
e = e.add(i);
}
var n = -1;
if (e.y > 0) {
this.content.y - this.content.anchorY * this.content.height + e.y > this._bottomBoundary && (n = "scroll-to-bottom");
} else if (e.y < 0) {
this.content.y - this.content.anchorY * this.content.height + this.content.height + e.y <= this._topBoundary && (n = "scroll-to-top");
} else if (e.x < 0) {
this.content.x - this.content.anchorX * this.content.width + this.content.width + e.x <= this._rightBoundary && (n = "scroll-to-right");
} else if (e.x > 0) {
this.content.x - this.content.anchorX * this.content.width + e.x >= this._leftBoundary && (n = "scroll-to-left");
}
this._moveContent(e, !1);
if (0 !== e.x || 0 !== e.y) {
if (!this._scrolling) {
this._scrolling = !0;
this._dispatchEvent("scroll-began");
}
this._dispatchEvent("scrolling");
}
-1 !== n && this._dispatchEvent(n);
},
_handlePressLogic: function() {
this._autoScrolling && this._dispatchEvent("scroll-ended");
this._autoScrolling = !1;
this._isBouncing = !1;
this._touchMovePreviousTimestamp = s();
this._touchMoveDisplacements.length = 0;
this._touchMoveTimeDeltas.length = 0;
this._onScrollBarTouchBegan();
},
_clampDelta: function(t) {
var e = this.content.getContentSize(), i = this.node.getContentSize();
e.width < i.width && (t.x = 0);
e.height < i.height && (t.y = 0);
return t;
},
_gatherTouchMove: function(t) {
t = this._clampDelta(t);
for (;this._touchMoveDisplacements.length >= 5; ) {
this._touchMoveDisplacements.shift();
this._touchMoveTimeDeltas.shift();
}
this._touchMoveDisplacements.push(t);
var e = s();
this._touchMoveTimeDeltas.push((e - this._touchMovePreviousTimestamp) / 1e3);
this._touchMovePreviousTimestamp = e;
},
_startBounceBackIfNeeded: function() {
if (!this.elastic) return !1;
var t = this._getHowMuchOutOfBoundary();
if ((t = this._clampDelta(t)).fuzzyEquals(cc.v2(0, 0), r)) return !1;
var e = Math.max(this.bounceDuration, 0);
this._startAutoScroll(t, e, !0);
if (!this._isBouncing) {
t.y > 0 && this._dispatchEvent("bounce-top");
t.y < 0 && this._dispatchEvent("bounce-bottom");
t.x > 0 && this._dispatchEvent("bounce-right");
t.x < 0 && this._dispatchEvent("bounce-left");
this._isBouncing = !0;
}
return !0;
},
_processInertiaScroll: function() {
if (!this._startBounceBackIfNeeded() && this.inertia) {
var t = this._calculateTouchMoveVelocity();
!t.fuzzyEquals(cc.v2(0, 0), r) && this.brake < 1 && this._startInertiaScroll(t);
}
this._onScrollBarTouchEnded();
},
_handleReleaseLogic: function(t) {
var e = t.getDelta();
this._gatherTouchMove(e);
this._processInertiaScroll();
if (this._scrolling) {
this._scrolling = !1;
this._autoScrolling || this._dispatchEvent("scroll-ended");
}
},
_isOutOfBoundary: function() {
return !this._getHowMuchOutOfBoundary().fuzzyEquals(cc.v2(0, 0), r);
},
_isNecessaryAutoScrollBrake: function() {
if (this._autoScrollBraking) return !0;
if (this._isOutOfBoundary()) {
if (!this._autoScrollCurrentlyOutOfBoundary) {
this._autoScrollCurrentlyOutOfBoundary = !0;
this._autoScrollBraking = !0;
this._autoScrollBrakingStartPosition = this.getContentPosition();
return !0;
}
} else this._autoScrollCurrentlyOutOfBoundary = !1;
return !1;
},
getScrollEndedEventTiming: function() {
return r;
},
_processAutoScrolling: function(t) {
var e = this._isNecessaryAutoScrollBrake(), i = e ? .05 : 1;
this._autoScrollAccumulatedTime += t * (1 / i);
var n = Math.min(1, this._autoScrollAccumulatedTime / this._autoScrollTotalTime);
this._autoScrollAttenuate && (n = (function(t) {
return (t -= 1) * t * t * t * t + 1;
})(n));
var s = this._autoScrollStartPosition.add(this._autoScrollTargetDelta.mul(n)), a = Math.abs(n - 1) <= r;
if (Math.abs(n - 1) <= this.getScrollEndedEventTiming() && !this._isScrollEndedWithThresholdEventFired) {
this._dispatchEvent("scroll-ended-with-threshold");
this._isScrollEndedWithThresholdEventFired = !0;
}
if (this.elastic) {
var o = s.sub(this._autoScrollBrakingStartPosition);
e && (o = o.mul(i));
s = this._autoScrollBrakingStartPosition.add(o);
} else {
var h = s.sub(this.getContentPosition()), l = this._getHowMuchOutOfBoundary(h);
if (!l.fuzzyEquals(cc.v2(0, 0), r)) {
s = s.add(l);
a = !0;
}
}
a && (this._autoScrolling = !1);
var c = s.sub(this.getContentPosition());
this._moveContent(this._clampDelta(c), a);
this._dispatchEvent("scrolling");
if (!this._autoScrolling) {
this._isBouncing = !1;
this._dispatchEvent("scroll-ended");
}
},
_startInertiaScroll: function(t) {
var e = t.mul(.7);
this._startAttenuatingAutoScroll(e, t);
},
_calculateAttenuatedFactor: function(t) {
return this.brake <= 0 ? 1 - this.brake : (1 - this.brake) * (1 / (1 + 14e-6 * t + t * t * 8e-9));
},
_startAttenuatingAutoScroll: function(t, e) {
var i = this._calculateAutoScrollTimeByInitalSpeed(e.mag()), n = t.normalize(), r = this.content.getContentSize(), s = this.node.getContentSize(), a = r.width - s.width, o = r.height - s.height, h = this._calculateAttenuatedFactor(a), l = this._calculateAttenuatedFactor(o);
n = cc.v2(n.x * a * (1 - this.brake) * h, n.y * o * l * (1 - this.brake));
var c = t.mag(), u = n.mag() / c;
n = n.add(t);
if (this.brake > 0 && u > 7) {
u = Math.sqrt(u);
n = t.mul(u).add(t);
}
this.brake > 0 && u > 3 && (i *= u = 3);
0 === this.brake && u > 1 && (i *= u);
this._startAutoScroll(n, i, !0);
},
_calculateAutoScrollTimeByInitalSpeed: function(t) {
return Math.sqrt(Math.sqrt(t / 5));
},
_startAutoScroll: function(t, e, i) {
var n = this._flattenVectorByDirection(t);
this._autoScrolling = !0;
this._autoScrollTargetDelta = n;
this._autoScrollAttenuate = i;
this._autoScrollStartPosition = this.getContentPosition();
this._autoScrollTotalTime = e;
this._autoScrollAccumulatedTime = 0;
this._autoScrollBraking = !1;
this._isScrollEndedWithThresholdEventFired = !1;
this._autoScrollBrakingStartPosition = cc.v2(0, 0);
var s = this._getHowMuchOutOfBoundary();
if (!s.fuzzyEquals(cc.v2(0, 0), r)) {
this._autoScrollCurrentlyOutOfBoundary = !0;
var a = this._getHowMuchOutOfBoundary(n);
(s.x * a.x > 0 || s.y * a.y > 0) && (this._autoScrollBraking = !0);
}
},
_calculateTouchMoveVelocity: function() {
var t = 0;
if ((t = this._touchMoveTimeDeltas.reduce((function(t, e) {
return t + e;
}), t)) <= 0 || t >= .5) return cc.v2(0, 0);
var e = cc.v2(0, 0);
e = this._touchMoveDisplacements.reduce((function(t, e) {
return t.add(e);
}), e);
return cc.v2(e.x * (1 - this.brake) / t, e.y * (1 - this.brake) / t);
},
_flattenVectorByDirection: function(t) {
var e = t;
e.x = this.horizontal ? e.x : 0;
e.y = this.vertical ? e.y : 0;
return e;
},
_moveContent: function(t, e) {
var i = this._flattenVectorByDirection(t), n = this.getContentPosition().add(i);
this.setContentPosition(n);
var r = this._getHowMuchOutOfBoundary();
this._updateScrollBar(r);
this.elastic && e && this._startBounceBackIfNeeded();
},
_getContentLeftBoundary: function() {
return this.getContentPosition().x - this.content.getAnchorPoint().x * this.content.getContentSize().width;
},
_getContentRightBoundary: function() {
var t = this.content.getContentSize();
return this._getContentLeftBoundary() + t.width;
},
_getContentTopBoundary: function() {
var t = this.content.getContentSize();
return this._getContentBottomBoundary() + t.height;
},
_getContentBottomBoundary: function() {
return this.getContentPosition().y - this.content.getAnchorPoint().y * this.content.getContentSize().height;
},
_getHowMuchOutOfBoundary: function(t) {
if ((t = t || cc.v2(0, 0)).fuzzyEquals(cc.v2(0, 0), r) && !this._outOfBoundaryAmountDirty) return this._outOfBoundaryAmount;
var e = cc.v2(0, 0);
this._getContentLeftBoundary() + t.x > this._leftBoundary ? e.x = this._leftBoundary - (this._getContentLeftBoundary() + t.x) : this._getContentRightBoundary() + t.x < this._rightBoundary && (e.x = this._rightBoundary - (this._getContentRightBoundary() + t.x));
this._getContentTopBoundary() + t.y < this._topBoundary ? e.y = this._topBoundary - (this._getContentTopBoundary() + t.y) : this._getContentBottomBoundary() + t.y > this._bottomBoundary && (e.y = this._bottomBoundary - (this._getContentBottomBoundary() + t.y));
if (t.fuzzyEquals(cc.v2(0, 0), r)) {
this._outOfBoundaryAmount = e;
this._outOfBoundaryAmountDirty = !1;
}
return e = this._clampDelta(e);
},
_updateScrollBar: function(t) {
this.horizontalScrollBar && this.horizontalScrollBar._onScroll(t);
this.verticalScrollBar && this.verticalScrollBar._onScroll(t);
},
_onScrollBarTouchBegan: function() {
this.horizontalScrollBar && this.horizontalScrollBar._onTouchBegan();
this.verticalScrollBar && this.verticalScrollBar._onTouchBegan();
},
_onScrollBarTouchEnded: function() {
this.horizontalScrollBar && this.horizontalScrollBar._onTouchEnded();
this.verticalScrollBar && this.verticalScrollBar._onTouchEnded();
},
_dispatchEvent: function(t) {
if ("scroll-ended" === t) this._scrollEventEmitMask = 0; else if ("scroll-to-top" === t || "scroll-to-bottom" === t || "scroll-to-left" === t || "scroll-to-right" === t) {
var e = 1 << o[t];
if (this._scrollEventEmitMask & e) return;
this._scrollEventEmitMask |= e;
}
cc.Component.EventHandler.emitEvents(this.scrollEvents, this, o[t]);
this.node.emit(t, this);
},
_adjustContentOutOfBoundary: function() {
this._outOfBoundaryAmountDirty = !0;
if (this._isOutOfBoundary()) {
var t = this._getHowMuchOutOfBoundary(cc.v2(0, 0)), e = this.getContentPosition().add(t);
if (this.content) {
this.content.setPosition(e);
this._updateScrollBar(0);
}
}
},
start: function() {
this._calculateBoundary();
this.content && cc.director.once(cc.Director.EVENT_BEFORE_DRAW, this._adjustContentOutOfBoundary, this);
},
_hideScrollbar: function() {
this.horizontalScrollBar && this.horizontalScrollBar.hide();
this.verticalScrollBar && this.verticalScrollBar.hide();
},
_showScrollbar: function() {
this.horizontalScrollBar && this.horizontalScrollBar.show();
this.verticalScrollBar && this.verticalScrollBar.show();
},
onDisable: function() {
this._unregisterEvent();
this.node.off(n.SIZE_CHANGED, this._calculateBoundary, this);
this.node.off(n.SCALE_CHANGED, this._calculateBoundary, this);
if (this.content) {
this.content.off(n.SIZE_CHANGED, this._calculateBoundary, this);
this.content.off(n.SCALE_CHANGED, this._calculateBoundary, this);
}
this._hideScrollbar();
this.stopAutoScroll();
},
onEnable: function() {
this._registerEvent();
this.node.on(n.SIZE_CHANGED, this._calculateBoundary, this);
this.node.on(n.SCALE_CHANGED, this._calculateBoundary, this);
if (this.content) {
this.content.on(n.SIZE_CHANGED, this._calculateBoundary, this);
this.content.on(n.SCALE_CHANGED, this._calculateBoundary, this);
}
this._showScrollbar();
},
update: function(t) {
this._autoScrolling && this._processAutoScrolling(t);
}
});
cc.ScrollView = e.exports = h;
}), {
"../CCNode": 28,
"./CCViewGroup": 85
} ],
79: [ (function(t, e, i) {
var n = t("../utils/misc"), r = (t("./CCComponent"), cc.Enum({
Horizontal: 0,
Vertical: 1
})), s = cc.Class({
name: "cc.Slider",
extends: t("./CCComponent"),
editor: !1,
ctor: function() {
this._offset = cc.v2();
this._touchHandle = !1;
this._dragging = !1;
},
properties: {
handle: {
default: null,
type: cc.Button,
tooltip: !1,
notify: function() {
0;
}
},
direction: {
default: r.Horizontal,
type: r,
tooltip: !1
},
progress: {
default: .5,
type: cc.Float,
range: [ 0, 1, .1 ],
slide: !0,
tooltip: !1,
notify: function() {
this._updateHandlePosition();
}
},
slideEvents: {
default: [],
type: cc.Component.EventHandler,
tooltip: !1
}
},
statics: {
Direction: r
},
__preload: function() {
this._updateHandlePosition();
},
onEnable: function() {
this.node.on(cc.Node.EventType.TOUCH_START, this._onTouchBegan, this);
this.node.on(cc.Node.EventType.TOUCH_MOVE, this._onTouchMoved, this);
this.node.on(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
this.node.on(cc.Node.EventType.TOUCH_CANCEL, this._onTouchCancelled, this);
if (this.handle && this.handle.isValid) {
this.handle.node.on(cc.Node.EventType.TOUCH_START, this._onHandleDragStart, this);
this.handle.node.on(cc.Node.EventType.TOUCH_MOVE, this._onTouchMoved, this);
this.handle.node.on(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
}
},
onDisable: function() {
this.node.off(cc.Node.EventType.TOUCH_START, this._onTouchBegan, this);
this.node.off(cc.Node.EventType.TOUCH_MOVE, this._onTouchMoved, this);
this.node.off(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
this.node.off(cc.Node.EventType.TOUCH_CANCEL, this._onTouchCancelled, this);
if (this.handle && this.handle.isValid) {
this.handle.node.off(cc.Node.EventType.TOUCH_START, this._onHandleDragStart, this);
this.handle.node.off(cc.Node.EventType.TOUCH_MOVE, this._onTouchMoved, this);
this.handle.node.off(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
}
},
_onHandleDragStart: function(t) {
this._dragging = !0;
this._touchHandle = !0;
this._offset = this.handle.node.convertToNodeSpaceAR(t.touch.getLocation());
t.stopPropagation();
},
_onTouchBegan: function(t) {
if (this.handle) {
this._dragging = !0;
this._touchHandle || this._handleSliderLogic(t.touch);
t.stopPropagation();
}
},
_onTouchMoved: function(t) {
if (this._dragging) {
this._handleSliderLogic(t.touch);
t.stopPropagation();
}
},
_onTouchEnded: function(t) {
this._dragging = !1;
this._touchHandle = !1;
this._offset = cc.v2();
t.stopPropagation();
},
_onTouchCancelled: function(t) {
this._dragging = !1;
t.stopPropagation();
},
_handleSliderLogic: function(t) {
this._updateProgress(t);
this._emitSlideEvent();
},
_emitSlideEvent: function() {
cc.Component.EventHandler.emitEvents(this.slideEvents, this);
this.node.emit("slide", this);
},
_updateProgress: function(t) {
if (this.handle) {
var e = this.node.convertToNodeSpaceAR(t.getLocation());
this.direction === r.Horizontal ? this.progress = n.clamp01(.5 + (e.x - this._offset.x) / this.node.width) : this.progress = n.clamp01(.5 + (e.y - this._offset.y) / this.node.height);
}
},
_updateHandlePosition: function() {
if (this.handle) {
var t;
t = this.direction === r.Horizontal ? cc.v2(-this.node.width * this.node.anchorX + this.progress * this.node.width, 0) : cc.v2(0, -this.node.height * this.node.anchorY + this.progress * this.node.height);
var e = this.node.convertToWorldSpaceAR(t);
this.handle.node.position = this.handle.node.parent.convertToNodeSpaceAR(e);
}
}
});
cc.Slider = e.exports = s;
}), {
"../utils/misc": 231,
"./CCComponent": 65
} ],
80: [ (function(t, e, i) {
var n = t("../utils/misc"), r = t("../CCNode").EventType, s = t("./CCRenderComponent"), a = t("../renderer/render-flow"), o = (t("../renderer"), 
t("../renderer/render-engine")), h = o.SpriteMaterial, l = o.GraySpriteMaterial, c = (o.RenderData, 
cc.Enum({
SIMPLE: 0,
SLICED: 1,
TILED: 2,
FILLED: 3,
MESH: 4
})), u = cc.Enum({
HORIZONTAL: 0,
VERTICAL: 1,
RADIAL: 2
}), _ = cc.Enum({
CUSTOM: 0,
TRIMMED: 1,
RAW: 2
}), m = cc.Enum({
NORMAL: 0,
GRAY: 1
}), f = cc.Class({
name: "cc.Sprite",
extends: s,
ctor: function() {
this._assembler = null;
this._graySpriteMaterial = null;
this._spriteMaterial = null;
},
editor: !1,
properties: {
_spriteFrame: {
default: null,
type: cc.SpriteFrame
},
_type: c.SIMPLE,
_sizeMode: _.TRIMMED,
_fillType: 0,
_fillCenter: cc.v2(0, 0),
_fillStart: 0,
_fillRange: 0,
_isTrimmedMode: !0,
_state: 0,
_atlas: {
default: null,
type: cc.SpriteAtlas,
tooltip: !1,
editorOnly: !0,
visible: !0,
animatable: !1
},
spriteFrame: {
get: function() {
return this._spriteFrame;
},
set: function(t, e) {
var i = this._spriteFrame;
if (i !== t) {
this._spriteFrame = t;
(this._material && this._material._texture) !== (t && t._texture) && this.markForRender(!1);
this.markForUpdateRenderData(!1);
this._applySpriteFrame(i);
0;
}
},
type: cc.SpriteFrame
},
type: {
get: function() {
return this._type;
},
set: function(t) {
if (this._type !== t) {
this.destroyRenderData(this._renderData);
this._renderData = null;
this._type = t;
this._updateAssembler();
}
},
type: c,
animatable: !1,
tooltip: !1
},
fillType: {
get: function() {
return this._fillType;
},
set: function(t) {
if (t !== this._fillType) {
if (t === u.RADIAL || this._fillType === u.RADIAL) {
this.destroyRenderData(this._renderData);
this._renderData = null;
} else this._renderData && this.markForUpdateRenderData(!0);
this._fillType = t;
this._updateAssembler();
}
},
type: u,
tooltip: !1
},
fillCenter: {
get: function() {
return this._fillCenter;
},
set: function(t) {
this._fillCenter.x = t.x;
this._fillCenter.y = t.y;
this._type === c.FILLED && this._renderData && this.markForUpdateRenderData(!0);
},
tooltip: !1
},
fillStart: {
get: function() {
return this._fillStart;
},
set: function(t) {
this._fillStart = n.clampf(t, -1, 1);
this._type === c.FILLED && this._renderData && this.markForUpdateRenderData(!0);
},
tooltip: !1
},
fillRange: {
get: function() {
return this._fillRange;
},
set: function(t) {
this._fillRange = n.clampf(t, -1, 1);
this._type === c.FILLED && this._renderData && this.markForUpdateRenderData(!0);
},
tooltip: !1
},
trim: {
get: function() {
return this._isTrimmedMode;
},
set: function(t) {
if (this._isTrimmedMode !== t) {
this._isTrimmedMode = t;
this._type !== c.SIMPLE && this._type !== c.MESH || !this._renderData || this.markForUpdateRenderData(!0);
}
},
animatable: !1,
tooltip: !1
},
sizeMode: {
get: function() {
return this._sizeMode;
},
set: function(t) {
this._sizeMode = t;
t !== _.CUSTOM && this._applySpriteSize();
},
animatable: !1,
type: _,
tooltip: !1
}
},
statics: {
FillType: u,
Type: c,
SizeMode: _,
State: m
},
setVisible: function(t) {
this.enabled = t;
},
setState: function(t) {
if (this._state !== t) {
this._state = t;
this._activateMaterial();
}
},
getState: function() {
return this._state;
},
onEnable: function() {
this._super();
this._spriteFrame && this._spriteFrame.textureLoaded() || this.disableRender();
this._updateAssembler();
this._renderData.uvDirty = !0;
this.node.on(r.SIZE_CHANGED, this._onNodeSizeDirty, this);
this.node.on(r.ANCHOR_CHANGED, this._onNodeSizeDirty, this);
},
onDisable: function() {
this._super();
this.node.off(r.SIZE_CHANGED, this._onNodeSizeDirty, this);
this.node.off(r.ANCHOR_CHANGED, this._onNodeSizeDirty, this);
},
_onNodeSizeDirty: function() {
this._renderData && this.markForUpdateRenderData(!0);
},
_updateAssembler: function() {
var t = f._assembler.getAssembler(this);
if (this._assembler !== t) {
this._assembler = t;
this._renderData = null;
}
if (!this._renderData) {
this._renderData = this._assembler.createData(this);
this._renderData.material = this._material;
this.markForUpdateRenderData(!0);
}
},
_activateMaterial: function() {
if (this.enabledInHierarchy) {
var t = this._spriteFrame;
if (t && t.textureLoaded()) {
var e = t.getTexture(), i = void 0;
if (this._state === m.GRAY) {
if (!this._graySpriteMaterial) {
this._graySpriteMaterial = new l();
this.node._renderFlag |= a.FLAG_COLOR;
}
i = this._graySpriteMaterial;
} else {
if (!this._spriteMaterial) {
this._spriteMaterial = new h();
this.node._renderFlag |= a.FLAG_COLOR;
}
i = this._spriteMaterial;
}
if (i.texture !== e) {
i.texture = e;
this._updateMaterial(i);
}
this._renderData && (this._renderData.material = i);
this.markForUpdateRenderData(!0);
this.markForRender(!0);
} else this.disableRender();
} else this.disableRender();
},
_applyAtlas: !1,
_canRender: function() {
if (!this._enabled || !this._material) return !1;
var t = this._spriteFrame;
return !(!t || !t.textureLoaded());
},
markForUpdateRenderData: function(t) {
if (t && this._canRender()) {
this.node._renderFlag |= a.FLAG_UPDATE_RENDER_DATA;
var e = this._renderData;
if (e) {
e.uvDirty = !0;
e.vertDirty = !0;
}
} else t || (this.node._renderFlag &= ~a.FLAG_UPDATE_RENDER_DATA);
},
_applySpriteSize: function() {
if (this._spriteFrame) {
if (_.RAW === this._sizeMode) {
var t = this._spriteFrame.getOriginalSize();
this.node.setContentSize(t);
} else if (_.TRIMMED === this._sizeMode) {
var e = this._spriteFrame.getRect();
this.node.setContentSize(e.width, e.height);
}
this._activateMaterial();
}
},
_onTextureLoaded: function(t) {
this.isValid && this._applySpriteSize();
},
_applySpriteFrame: function(t) {
t && t.off && t.off("load", this._onTextureLoaded, this);
var e = this._spriteFrame;
if (e) if (t && e._texture === t._texture) this._applySpriteSize(); else if (e.textureLoaded()) this._onTextureLoaded(null); else {
e.once("load", this._onTextureLoaded, this);
e.ensureLoadTexture();
}
0;
},
_resized: !1
});
0;
cc.Sprite = e.exports = f;
}), {
"../CCNode": 28,
"../renderer": 194,
"../renderer/render-engine": 195,
"../renderer/render-flow": 196,
"../utils/misc": 231,
"./CCRenderComponent": 75
} ],
81: [ (function(t, e, i) {
var n = cc.Enum({
NONE: 0,
CHECKBOX: 1,
TEXT_ATLAS: 2,
SLIDER_BAR: 3,
LIST_VIEW: 4,
PAGE_VIEW: 5
}), r = cc.Enum({
VERTICAL: 0,
HORIZONTAL: 1
}), s = cc.Enum({
TOP: 0,
CENTER: 1,
BOTTOM: 2
}), a = cc.Enum({
LEFT: 0,
CENTER: 1,
RIGHT: 2
}), o = cc.Class({
name: "cc.StudioComponent",
extends: cc.Component,
editor: !1,
properties: !1,
statics: {
ComponentType: n,
ListDirection: r,
VerticalAlign: s,
HorizontalAlign: a
}
}), h = t("../utils/prefab-helper");
o.PlaceHolder = cc.Class({
name: "cc.StudioComponent.PlaceHolder",
extends: cc.Component,
properties: {
_baseUrl: "",
nestedPrefab: cc.Prefab
},
onLoad: function() {
this.nestedPrefab && this._replaceWithNestedPrefab();
},
_replaceWithNestedPrefab: function() {
var t = this.node, e = t._prefab;
e.root = t;
e.asset = this.nestedPrefab;
h.syncWithPrefab(t);
}
});
cc.StudioComponent = e.exports = o;
}), {
"../utils/prefab-helper": 234
} ],
82: [ (function(t, e, i) {
var n = cc.Class({
name: "cc.Toggle",
extends: t("./CCButton"),
editor: !1,
properties: {
isChecked: {
default: !0,
tooltip: !1,
notify: function() {
this._updateCheckMark();
}
},
toggleGroup: {
default: null,
tooltip: !1,
type: t("./CCToggleGroup")
},
checkMark: {
default: null,
type: cc.Sprite,
tooltip: !1
},
checkEvents: {
default: [],
type: cc.Component.EventHandler
},
_resizeToTarget: {
animatable: !1,
set: function(t) {
t && this._resizeNodeToTargetNode();
}
}
},
onEnable: function() {
this._super();
this._registerToggleEvent();
this.toggleGroup && this.toggleGroup.enabled && this.toggleGroup.addToggle(this);
},
onDisable: function() {
this._super();
this._unregisterToggleEvent();
this.toggleGroup && this.toggleGroup.enabled && this.toggleGroup.removeToggle(this);
},
_updateCheckMark: function() {
this.checkMark && (this.checkMark.node.active = !!this.isChecked);
},
_updateDisabledState: function() {
this._super();
this.checkMark && this.checkMark.setState(0);
this.enableAutoGrayEffect && this.checkMark && !this.interactable && this.checkMark.setState(1);
},
_registerToggleEvent: function() {
this.node.on("click", this.toggle, this);
},
_unregisterToggleEvent: function() {
this.node.off("click", this.toggle, this);
},
toggle: function(t) {
var e = this.toggleGroup || this._toggleContainer;
if (!(e && e.enabled && this.isChecked) || e.allowSwitchOff) {
this.isChecked = !this.isChecked;
this._updateCheckMark();
e && e.enabled && e.updateToggles(this);
this._emitToggleEvents(t);
}
},
_emitToggleEvents: function() {
this.node.emit("toggle", this);
this.checkEvents && cc.Component.EventHandler.emitEvents(this.checkEvents, this);
},
check: function() {
var t = this.toggleGroup || this._toggleContainer;
if (!(t && t.enabled && this.isChecked) || t.allowSwitchOff) {
this.isChecked = !0;
t && t.enabled && t.updateToggles(this);
this._emitToggleEvents();
}
},
uncheck: function() {
var t = this.toggleGroup || this._toggleContainer;
if (!(t && t.enabled && this.isChecked) || t.allowSwitchOff) {
this.isChecked = !1;
this._emitToggleEvents();
}
}
});
cc.Toggle = e.exports = n;
t("../platform/js").get(n.prototype, "_toggleContainer", (function() {
var t = this.node.parent;
return cc.Node.isNode(t) ? t.getComponent(cc.ToggleContainer) : null;
}));
}), {
"../platform/js": 173,
"./CCButton": 63,
"./CCToggleGroup": 84
} ],
83: [ (function(t, e, i) {
var n = cc.Class({
name: "cc.ToggleContainer",
extends: cc.Component,
editor: !1,
properties: {
allowSwitchOff: {
tooltip: !1,
default: !1
}
},
updateToggles: function(t) {
this.toggleItems.forEach((function(e) {
t.isChecked && e !== t && (e.isChecked = !1);
}));
},
_allowOnlyOneToggleChecked: function() {
var t = !1;
this.toggleItems.forEach((function(e) {
t ? e.isChecked = !1 : e.isChecked && (t = !0);
}));
return t;
},
_makeAtLeastOneToggleChecked: function() {
if (!this._allowOnlyOneToggleChecked() && !this.allowSwitchOff) {
var t = this.toggleItems;
t.length > 0 && t[0].check();
}
},
onEnable: function() {
this.node.on("child-added", this._allowOnlyOneToggleChecked, this);
this.node.on("child-removed", this._makeAtLeastOneToggleChecked, this);
},
onDisable: function() {
this.node.off("child-added", this._allowOnlyOneToggleChecked, this);
this.node.off("child-removed", this._makeAtLeastOneToggleChecked, this);
},
start: function() {
this._makeAtLeastOneToggleChecked();
}
});
t("../platform/js").get(n.prototype, "toggleItems", (function() {
return this.node.getComponentsInChildren(cc.Toggle);
}));
cc.ToggleContainer = e.exports = n;
}), {
"../platform/js": 173
} ],
84: [ (function(t, e, i) {
var n = cc.Class({
name: "cc.ToggleGroup",
extends: cc.Component,
ctor: function() {
this._toggleItems = [];
},
editor: !1,
properties: {
allowSwitchOff: {
tooltip: !1,
default: !1
},
toggleItems: {
get: function() {
return this._toggleItems;
}
}
},
updateToggles: function(t) {
this.enabledInHierarchy && this._toggleItems.forEach((function(e) {
t.isChecked && e !== t && e.isChecked && e.enabled && (e.isChecked = !1);
}));
},
addToggle: function(t) {
-1 === this._toggleItems.indexOf(t) && this._toggleItems.push(t);
this._allowOnlyOneToggleChecked();
},
removeToggle: function(t) {
var e = this._toggleItems.indexOf(t);
e > -1 && this._toggleItems.splice(e, 1);
this._makeAtLeastOneToggleChecked();
},
_allowOnlyOneToggleChecked: function() {
var t = !1;
this._toggleItems.forEach((function(e) {
t && e.enabled && (e.isChecked = !1);
e.isChecked && e.enabled && (t = !0);
}));
return t;
},
_makeAtLeastOneToggleChecked: function() {
this._allowOnlyOneToggleChecked() || this.allowSwitchOff || this._toggleItems.length > 0 && (this._toggleItems[0].isChecked = !0);
},
start: function() {
this._makeAtLeastOneToggleChecked();
}
}), r = !1;
t("../platform/js").get(cc, "ToggleGroup", (function() {
if (!r) {
cc.logID(1405, "cc.ToggleGroup", "cc.ToggleContainer");
r = !0;
}
return n;
}));
e.exports = n;
}), {
"../platform/js": 173
} ],
85: [ (function(t, e, i) {
var n = cc.Class({
name: "cc.ViewGroup",
extends: t("./CCComponent")
});
cc.ViewGroup = e.exports = n;
}), {
"./CCComponent": 65
} ],
86: [ (function(t, e, i) {
var n = t("../base-ui/CCWidgetManager"), r = n.AlignMode, s = n._AlignFlags, a = s.TOP, o = s.MID, h = s.BOT, l = s.LEFT, c = s.CENTER, u = s.RIGHT, _ = a | h, m = l | u, f = cc.Class({
name: "cc.Widget",
extends: t("./CCComponent"),
editor: !1,
properties: {
target: {
get: function() {
return this._target;
},
set: function(t) {
this._target = t;
0;
},
type: cc.Node,
tooltip: !1
},
isAlignTop: {
get: function() {
return (this._alignFlags & a) > 0;
},
set: function(t) {
this._setAlign(a, t);
},
animatable: !1,
tooltip: !1
},
isAlignVerticalCenter: {
get: function() {
return (this._alignFlags & o) > 0;
},
set: function(t) {
if (t) {
this.isAlignTop = !1;
this.isAlignBottom = !1;
this._alignFlags |= o;
} else this._alignFlags &= ~o;
},
animatable: !1,
tooltip: !1
},
isAlignBottom: {
get: function() {
return (this._alignFlags & h) > 0;
},
set: function(t) {
this._setAlign(h, t);
},
animatable: !1,
tooltip: !1
},
isAlignLeft: {
get: function() {
return (this._alignFlags & l) > 0;
},
set: function(t) {
this._setAlign(l, t);
},
animatable: !1,
tooltip: !1
},
isAlignHorizontalCenter: {
get: function() {
return (this._alignFlags & c) > 0;
},
set: function(t) {
if (t) {
this.isAlignLeft = !1;
this.isAlignRight = !1;
this._alignFlags |= c;
} else this._alignFlags &= ~c;
},
animatable: !1,
tooltip: !1
},
isAlignRight: {
get: function() {
return (this._alignFlags & u) > 0;
},
set: function(t) {
this._setAlign(u, t);
},
animatable: !1,
tooltip: !1
},
isStretchWidth: {
get: function() {
return (this._alignFlags & m) === m;
},
visible: !1
},
isStretchHeight: {
get: function() {
return (this._alignFlags & _) === _;
},
visible: !1
},
top: {
get: function() {
return this._top;
},
set: function(t) {
this._top = t;
},
tooltip: !1
},
bottom: {
get: function() {
return this._bottom;
},
set: function(t) {
this._bottom = t;
},
tooltip: !1
},
left: {
get: function() {
return this._left;
},
set: function(t) {
this._left = t;
},
tooltip: !1
},
right: {
get: function() {
return this._right;
},
set: function(t) {
this._right = t;
},
tooltip: !1
},
horizontalCenter: {
get: function() {
return this._horizontalCenter;
},
set: function(t) {
this._horizontalCenter = t;
},
tooltip: !1
},
verticalCenter: {
get: function() {
return this._verticalCenter;
},
set: function(t) {
this._verticalCenter = t;
},
tooltip: !1
},
isAbsoluteHorizontalCenter: {
get: function() {
return this._isAbsHorizontalCenter;
},
set: function(t) {
this._isAbsHorizontalCenter = t;
},
animatable: !1
},
isAbsoluteVerticalCenter: {
get: function() {
return this._isAbsVerticalCenter;
},
set: function(t) {
this._isAbsVerticalCenter = t;
},
animatable: !1
},
isAbsoluteTop: {
get: function() {
return this._isAbsTop;
},
set: function(t) {
this._isAbsTop = t;
},
animatable: !1
},
isAbsoluteBottom: {
get: function() {
return this._isAbsBottom;
},
set: function(t) {
this._isAbsBottom = t;
},
animatable: !1
},
isAbsoluteLeft: {
get: function() {
return this._isAbsLeft;
},
set: function(t) {
this._isAbsLeft = t;
},
animatable: !1
},
isAbsoluteRight: {
get: function() {
return this._isAbsRight;
},
set: function(t) {
this._isAbsRight = t;
},
animatable: !1
},
alignMode: {
default: r.ON_WINDOW_RESIZE,
type: r,
tooltip: !1
},
_wasAlignOnce: {
default: void 0,
formerlySerializedAs: "isAlignOnce"
},
_target: null,
_alignFlags: 0,
_left: 0,
_right: 0,
_top: 0,
_bottom: 0,
_verticalCenter: 0,
_horizontalCenter: 0,
_isAbsLeft: !0,
_isAbsRight: !0,
_isAbsTop: !0,
_isAbsBottom: !0,
_isAbsHorizontalCenter: !0,
_isAbsVerticalCenter: !0,
_originalWidth: 0,
_originalHeight: 0
},
statics: {
AlignMode: r
},
onLoad: function() {
if (void 0 !== this._wasAlignOnce) {
this.alignMode = this._wasAlignOnce ? r.ONCE : r.ALWAYS;
this._wasAlignOnce = void 0;
}
},
onEnable: function() {
n.add(this);
},
onDisable: function() {
n.remove(this);
},
_setAlign: function(t, e) {
if (e != (this._alignFlags & t) > 0) {
var i = (t & m) > 0;
if (e) {
this._alignFlags |= t;
if (i) {
this.isAlignHorizontalCenter = !1;
if (this.isStretchWidth) {
this._originalWidth = this.node.width;
0;
}
} else {
this.isAlignVerticalCenter = !1;
if (this.isStretchHeight) {
this._originalHeight = this.node.height;
0;
}
}
0;
} else {
i ? this.isStretchWidth && (this.node.width = this._originalWidth) : this.isStretchHeight && (this.node.height = this._originalHeight);
this._alignFlags &= ~t;
}
}
},
updateAlignment: function() {
n.updateAlignment(this.node);
}
});
Object.defineProperty(f.prototype, "isAlignOnce", {
get: function() {
0;
return this.alignMode === r.ONCE;
},
set: function(t) {
0;
this.alignMode = t ? r.ONCE : r.ALWAYS;
}
});
cc.Widget = e.exports = f;
}), {
"../base-ui/CCWidgetManager": 49,
"./CCComponent": 65
} ],
87: [ (function(t, e, i) {
var n = t("../../platform/CCMacro"), r = t("../editbox/CCEditBoxImpl"), s = t("../CCLabel"), a = t("./types"), o = a.InputMode, h = a.InputFlag, l = a.KeyboardReturnType;
var c = cc.Class({
name: "cc.EditBox",
extends: cc.Component,
editor: !1,
properties: {
_useOriginalSize: !0,
_string: "",
string: {
tooltip: !1,
get: function() {
return this._string;
},
set: function(t) {
t.length >= this.maxLength && (t = t.slice(0, this.maxLength));
this._string = t;
this._updateString(t);
}
},
backgroundImage: {
tooltip: !1,
default: null,
type: cc.SpriteFrame,
notify: function() {
this._createBackgroundSprite();
}
},
returnType: {
default: l.DEFAULT,
tooltip: !1,
displayName: "KeyboardReturnType",
type: l,
notify: function() {
this._impl.returnType = this.returnType;
}
},
inputFlag: {
tooltip: !1,
default: h.DEFAULT,
type: h,
notify: function() {
this._impl.inputFlag = this.inputFlag;
}
},
inputMode: {
tooltip: !1,
default: o.ANY,
type: o,
notify: function() {
this._impl.setInputMode(this.inputMode);
}
},
fontSize: {
tooltip: !1,
default: 20,
notify: function() {
this._textLabel.fontSize = this.fontSize;
}
},
lineHeight: {
tooltip: !1,
default: 40,
notify: function() {
this._textLabel.lineHeight = this.lineHeight;
}
},
fontColor: {
tooltip: !1,
default: cc.Color.WHITE,
notify: function() {
this._textLabel.node.color = this.fontColor;
}
},
placeholder: {
tooltip: !1,
default: "Enter text here...",
notify: function() {
this._placeholderLabel.string = this.placeholder;
this._impl.setPlaceholderText(this.placeholder);
}
},
placeholderFontSize: {
tooltip: !1,
default: 20,
notify: function() {
this._placeholderLabel.fontSize = this.placeholderFontSize;
}
},
placeholderFontColor: {
tooltip: !1,
default: cc.Color.GRAY,
notify: function() {
this._placeholderLabel.node.color = this.placeholderFontColor;
}
},
maxLength: {
tooltip: !1,
default: 20,
notify: function() {
this._impl.setMaxLength(this.maxLength);
}
},
stayOnTop: {
tooltip: !1,
default: !1,
notify: function() {
this._updateStayOnTop();
}
},
_tabIndex: 0,
tabIndex: {
tooltip: !1,
get: function() {
return this._tabIndex;
},
set: function(t) {
this._tabIndex = t;
this._impl.setTabIndex(t);
}
},
editingDidBegan: {
default: [],
type: cc.Component.EventHandler
},
textChanged: {
default: [],
type: cc.Component.EventHandler
},
editingDidEnded: {
default: [],
type: cc.Component.EventHandler
},
editingReturn: {
default: [],
type: cc.Component.EventHandler
}
},
statics: {
_EditBoxImpl: r,
KeyboardReturnType: l,
InputFlag: h,
InputMode: o
},
_init: function() {
this._createBackgroundSprite();
this._createLabels();
var t = this._impl = new r();
t.setDelegate(this);
t.setNode(this.node);
t.setInputMode(this.inputMode);
t.setMaxLength(this.maxLength);
t.setInputFlag(this.inputFlag);
t.setReturnType(this.returnType);
t.setTabIndex(this.tabIndex);
t.setFontColor(this.fontColor);
t.setFontSize(this.fontSize);
t.setPlaceholderText(this.placeholder);
this._updateStayOnTop();
this._updateString(this.string);
this._syncSize();
},
_updateStayOnTop: function() {
this.stayOnTop ? this._hideLabels() : this._showLabels();
this._impl.stayOnTop(this.stayOnTop);
},
_syncSize: function() {
var t = this.node.getContentSize();
this._background.node.setAnchorPoint(this.node.getAnchorPoint());
this._background.node.setContentSize(t);
this._updateLabelPosition(t);
this._impl.setSize(t.width, t.height);
},
_updateLabelPosition: function(t) {
var e = this.node, i = -e.anchorX * e.width, r = -e.anchorY * e.height, s = this._placeholderLabel, a = this._textLabel;
a.node.setContentSize(t.width - 2, t.height);
s.node.setContentSize(t.width - 2, t.height);
s.lineHeight = t.height;
s.node.setPosition(i + 2, r + t.height);
a.node.setPosition(i + 2, r + t.height);
if (this.inputMode === o.ANY) {
s.verticalAlign = n.VerticalTextAlignment.TOP;
a.verticalAlign = n.VerticalTextAlignment.TOP;
a.enableWrapText = !0;
} else {
s.verticalAlign = n.VerticalTextAlignment.CENTER;
a.verticalAlign = n.VerticalTextAlignment.CENTER;
a.enableWrapText = !1;
}
},
_createBackgroundSprite: function() {
var t = this._background;
if (!t) {
var e = this.node.getChildByName("BACKGROUND_SPRITE");
e || (e = new cc.Node("BACKGROUND_SPRITE"));
(t = e.getComponent(cc.Sprite)) || (t = e.addComponent(cc.Sprite));
t.type = cc.Sprite.Type.SLICED;
e.parent = this.node;
this._background = t;
}
t.spriteFrame = this.backgroundImage;
},
_createLabels: function() {
if (!this._textLabel) {
var t = this.node.getChildByName("TEXT_LABEL");
t || (t = new cc.Node("TEXT_LABEL"));
t.color = this.fontColor;
t.parent = this.node;
t.setAnchorPoint(0, 1);
var e = t.getComponent(s);
e || (e = t.addComponent(s));
e.overflow = s.Overflow.CLAMP;
e.fontSize = this.fontSize;
e.lineHeight = this.lineHeight;
this._textLabel = e;
}
if (!this._placeholderLabel) {
var i = this.node.getChildByName("PLACEHOLDER_LABEL");
i || (i = new cc.Node("PLACEHOLDER_LABEL"));
i.color = this.placeholderFontColor;
i.parent = this.node;
i.setAnchorPoint(0, 1);
var n = i.getComponent(s);
n || (n = i.addComponent(s));
n.overflow = s.Overflow.CLAMP;
n.fontSize = this.placeholderFontSize;
n.string = this.placeholder;
this._placeholderLabel = n;
}
},
_showLabels: function() {
var t = this._textLabel.string;
this._textLabel.node.active = "" !== t;
this._placeholderLabel.node.active = "" === t;
},
_hideLabels: function() {
this._textLabel.node.active = !1;
this._placeholderLabel.node.active = !1;
},
_updateString: function(t) {
this._placeholderLabel;
var e = this._textLabel, i = t;
i && (i = this._updateLabelStringStyle(i));
e.string = i;
this._impl.setString(t);
},
_updateLabelStringStyle: function(t, e) {
var i = this.inputFlag;
if (e || i !== h.PASSWORD) i === h.INITIAL_CAPS_ALL_CHARACTERS ? t = t.toUpperCase() : i === h.INITIAL_CAPS_WORD ? t = (function(t) {
return t.replace(/(?:^|\s)\S/g, (function(t) {
return t.toUpperCase();
}));
})(t) : i === h.INITIAL_CAPS_SENTENCE && (t = (function(t) {
return t.charAt(0).toUpperCase() + t.slice(1);
})(t)); else {
for (var n = "", r = t.length, s = 0; s < r; ++s) n += "●";
t = n;
}
return t;
},
editBoxEditingDidBegan: function() {
this._hideLabels();
cc.Component.EventHandler.emitEvents(this.editingDidBegan, this);
this.node.emit("editing-did-began", this);
},
editBoxEditingDidEnded: function() {
this.stayOnTop || this._showLabels();
cc.Component.EventHandler.emitEvents(this.editingDidEnded, this);
this.node.emit("editing-did-ended", this);
},
editBoxTextChanged: function(t) {
t = this._updateLabelStringStyle(t, !0);
this.string = t;
cc.Component.EventHandler.emitEvents(this.textChanged, t, this);
this.node.emit("text-changed", this);
},
editBoxEditingReturn: function() {
cc.Component.EventHandler.emitEvents(this.editingReturn, this);
this.node.emit("editing-return", this);
},
onDestroy: function() {
this._impl.clear();
},
__preload: function() {
this._registerEvent();
this._init();
},
_registerEvent: function() {
this.node.on(cc.Node.EventType.TOUCH_START, this._onTouchBegan, this);
this.node.on(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
},
_onTouchBegan: function(t) {
this._impl && this._impl._onTouchBegan(t.touch);
t.stopPropagation();
},
_onTouchCancel: function(t) {
this._impl && this._impl._onTouchCancel();
t.stopPropagation();
},
_onTouchEnded: function(t) {
this._impl && this._impl._onTouchEnded();
t.stopPropagation();
},
setFocus: function() {
this._impl && this._impl.setFocus();
},
isFocused: function() {
var t = !1;
this._impl && (t = this._impl.isFocused());
return t;
},
update: function() {
this._impl && this._impl.update();
}
});
cc.EditBox = e.exports = c;
}), {
"../../platform/CCMacro": 158,
"../CCLabel": 67,
"../editbox/CCEditBoxImpl": 88,
"./types": 89
} ],
88: [ (function(t, e, i) {
var n = t("../../platform/utils"), r = t("../../platform/CCMacro"), s = t("./types"), a = s.InputMode, o = s.InputFlag, h = s.KeyboardReturnType, l = cc.vmath, c = l.mat4.create(), u = cc.v3(), _ = {
zoomInvalid: !1
};
cc.sys.OS_ANDROID !== cc.sys.os || cc.sys.browserType !== cc.sys.BROWSER_TYPE_SOUGOU && cc.sys.browserType !== cc.sys.BROWSER_TYPE_360 || (_.zoomInvalid = !0);
var m = cc.Class({
ctor: function() {
this._delegate = null;
this._inputMode = -1;
this._inputFlag = -1;
this._returnType = h.DEFAULT;
this._maxLength = 50;
this._text = "";
this._placeholderText = "";
this._alwaysOnTop = !1;
this._size = cc.size();
this._node = null;
this._editing = !1;
this.__eventListeners = {};
this.__fullscreen = !1;
this.__autoResize = !1;
this.__rotateScreen = !1;
this.__orientationChanged = null;
},
setTabIndex: function(t) {
this._edTxt && (this._edTxt.tabIndex = t);
},
setFocus: function() {
this._edTxt && this._edTxt.focus();
},
isFocused: function() {
if (this._edTxt) return document.activeElement === this._edTxt;
cc.warnID(4700);
return !1;
},
stayOnTop: function(t) {
if (this._alwaysOnTop !== t) {
this._alwaysOnTop = t;
this._edTxt.style.display = t ? "" : "none";
}
},
setMaxLength: function(t) {
if (!isNaN(t)) {
t < 0 && (t = 65535);
this._maxLength = t;
this._edTxt.maxLength = t;
}
},
setString: function(t) {
this._text = t;
this._edTxt.value = t;
},
getString: function() {
return this._text;
},
setPlaceholderText: function(t) {
this._placeholderText = t;
},
getPlaceholderText: function() {
return this._placeholderText;
},
setDelegate: function(t) {
this._delegate = t;
},
setInputMode: function(t) {
if (this._inputMode !== t) {
this._inputMode = t;
this.createInput();
this._updateDomInputType();
this._updateSize(this._size.width, this._size.height);
}
},
setInputFlag: function(t) {
if (this._inputFlag !== t) {
this._inputFlag = t;
this._updateDomInputType();
var e = "none";
t === o.INITIAL_CAPS_ALL_CHARACTERS ? e = "uppercase" : t === o.INITIAL_CAPS_WORD && (e = "capitalize");
this._edTxt.style.textTransform = e;
}
},
setReturnType: function(t) {
this._returnType = t;
this._updateDomInputType();
},
setFontSize: function(t) {
this._edFontSize = t || this._edFontSize;
this._edTxt.style.fontSize = this._edFontSize + "px";
},
setFontColor: function(t) {
this._textColor = t;
this._edTxt.style.color = t.toHEX();
},
setSize: function(t, e) {
this._size.width = t;
this._size.height = e;
this._updateSize(t, e);
},
setNode: function(t) {
this._node = t;
},
update: function() {
this._updateMatrix();
},
clear: function() {
this._node = null;
this.setDelegate(null);
this.removeDom();
},
_onTouchBegan: function(t) {},
_onTouchEnded: function() {
this._beginEditing();
},
_beginEditing: function() {
var t = this;
this._alwaysOnTop || "none" === this._edTxt.style.display && (function() {
t._edTxt.style.display = "";
var e = t;
function i() {
e._edTxt.focus();
}
cc.sys.browserType === cc.sys.BROWSER_TYPE_UC ? setTimeout(i, 400) : cc.sys.browserType === cc.sys.BROWSER_TYPE_FIREFOX ? setTimeout(i, 0) : i();
})();
cc.sys.isMobile && !this._editing && this._beginEditingOnMobile(this._editBox);
this._editing = !0;
},
_endEditing: function() {
var t = this, e = function() {
t._alwaysOnTop || (t._edTxt.style.display = "none");
t._delegate && t._delegate.editBoxEditingDidEnded && t._delegate.editBoxEditingDidEnded();
};
this._editing && (cc.sys.isMobile ? setTimeout((function() {
t._endEditingOnMobile();
e();
}), 400) : e());
this._editing = !1;
},
_updateDomInputType: function() {
var t = this._inputMode, e = this._edTxt;
if (this._inputFlag !== o.PASSWORD) {
var i = e.type;
if (t === a.EMAIL_ADDR) i = "email"; else if (t === a.NUMERIC || t === a.DECIMAL) i = "number"; else if (t === a.PHONE_NUMBER) {
i = "number";
e.pattern = "[0-9]*";
} else if (t === a.URL) i = "url"; else {
i = "text";
this._returnType === h.SEARCH && (i = "search");
}
e.type = i;
} else e.type = "password";
},
_updateSize: function(t, e) {
var i = this._edTxt;
if (i) {
i.style.width = t + "px";
i.style.height = e + "px";
}
},
_updateMatrix: function() {
if (this._edTxt) {
var t = this._node, e = cc.view._scaleX, i = cc.view._scaleY, n = cc.view._devicePixelRatio;
t.getWorldMatrix(c);
var r = t._contentSize;
u.x = -t._anchorPoint.x * r.width;
u.y = -t._anchorPoint.y * r.height;
l.mat4.translate(c, c, u);
e /= n;
i /= n;
var s = cc.game.container, a = c.m00 * e, o = c.m01, h = c.m04, m = c.m05 * i, f = s && s.style.paddingLeft && parseInt(s.style.paddingLeft), d = s && s.style.paddingBottom && parseInt(s.style.paddingBottom), p = c.m12 * e + f, g = c.m13 * i + d;
if (_.zoomInvalid) {
this._updateSize(this._size.width * a, this._size.height * m);
a = 1;
m = 1;
}
var y = "matrix(" + a + "," + -o + "," + -h + "," + m + "," + p + "," + -g + ")";
this._edTxt.style.transform = y;
this._edTxt.style["-webkit-transform"] = y;
this._edTxt.style["transform-origin"] = "0px 100% 0px";
this._edTxt.style["-webkit-transform-origin"] = "0px 100% 0px";
}
},
_adjustEditBoxPosition: function() {
this._node.getWorldMatrix(c);
var t = c.m13, e = cc.visibleRect.height, i = .5;
cc.visibleRect.width > e && (i = .7);
setTimeout((function() {
if (window.scrollY < 40 && t < e * i) {
var n = e * i - t - window.scrollY;
n < 35 && (n = 35);
n > 320 && (n = 320);
window.scrollTo(0, n);
}
}), 400);
}
}), f = m.prototype;
f.createInput = function() {
this._inputMode === a.ANY ? this._createDomTextArea() : this._createDomInput();
};
f._beginEditingOnMobile = function() {
this.__orientationChanged = function() {
this._adjustEditBoxPosition();
};
window.addEventListener("orientationchange", this.__orientationChanged);
if (cc.view.isAutoFullScreenEnabled()) {
this.__fullscreen = !0;
cc.view.enableAutoFullScreen(!1);
cc.screen.exitFullScreen();
} else this.__fullscreen = !1;
this.__autoResize = cc.view._resizeWithBrowserSize;
cc.view.resizeWithBrowserSize(!1);
};
f._endEditingOnMobile = function() {
if (this.__rotateScreen) {
cc.game.container.style["-webkit-transform"] = "rotate(90deg)";
cc.game.container.style.transform = "rotate(90deg)";
var t = cc.view, e = t._originalDesignResolutionSize.width, i = t._originalDesignResolutionSize.height;
e > 0 && t.setDesignResolutionSize(e, i, t._resolutionPolicy);
this.__rotateScreen = !1;
}
window.removeEventListener("orientationchange", this.__orientationChanged);
window.scrollTo && window.scrollTo(0, 0);
this.__fullscreen && cc.view.enableAutoFullScreen(!0);
this.__autoResize && cc.view.resizeWithBrowserSize(!0);
};
function d(t, e) {
t.value.length > e._maxLength && (t.value = t.value.slice(0, e._maxLength));
if (e._delegate && e._delegate.editBoxTextChanged && e._text !== t.value) {
e._text = t.value;
e._delegate.editBoxTextChanged(e._text);
}
}
function p(t, e, i) {
var n = !1, s = e.__eventListeners;
s.compositionstart = function() {
n = !0;
};
t.addEventListener("compositionstart", s.compositionstart);
s.compositionend = function() {
n = !1;
d(this, e);
};
t.addEventListener("compositionend", s.compositionend);
s.input = function() {
n || d(this, e);
};
t.addEventListener("input", s.input);
s.focus = function() {
this.style.fontSize = e._edFontSize + "px";
this.style.color = e._textColor.toHEX();
cc.sys.isMobile && e._onFocusOnMobile();
e._delegate && e._delegate.editBoxEditingDidBegan && e._delegate.editBoxEditingDidBegan();
};
t.addEventListener("focus", s.focus);
s.keypress = function(t) {
if (t.keyCode === r.KEY.enter) {
t.stopPropagation();
e._delegate && e._delegate.editBoxEditingReturn && e._delegate.editBoxEditingReturn();
if (!i) {
e._text = this.value;
e._endEditing();
cc.game.canvas.focus();
}
}
};
t.addEventListener("keypress", s.keypress);
s.blur = function() {
e._text = this.value;
e._endEditing();
};
t.addEventListener("blur", s.blur);
e._addDomToGameContainer();
}
f._onFocusOnMobile = function(t) {
if (cc.view._isRotated) {
cc.game.container.style["-webkit-transform"] = "rotate(0deg)";
cc.game.container.style.transform = "rotate(0deg)";
cc.view._isRotated = !1;
cc.view.getResolutionPolicy().apply(cc.view, cc.view.getDesignResolutionSize());
cc.view._isRotated = !0;
window.scrollTo(35, 35);
this.__rotateScreen = !0;
} else this.__rotateScreen = !1;
this._adjustEditBoxPosition();
};
f._createDomInput = function() {
this.removeDom();
var t = this._edTxt = document.createElement("input");
t.type = "text";
t.style.fontSize = this._edFontSize + "px";
t.style.color = "#000000";
t.style.border = 0;
t.style.background = "transparent";
t.style.width = "100%";
t.style.height = "100%";
t.style.active = 0;
t.style.outline = "medium";
t.style.padding = "0";
t.style.textTransform = "uppercase";
t.style.display = "none";
t.style.position = "absolute";
t.style.bottom = "0px";
t.style.left = "2px";
t.style["-moz-appearance"] = "textfield";
t.style.className = "cocosEditBox";
t.style.fontFamily = "Arial";
p(t, this);
return t;
};
f._createDomTextArea = function() {
this.removeDom();
var t = this._edTxt = document.createElement("textarea");
t.type = "text";
t.style.fontSize = this._edFontSize + "px";
t.style.color = "#000000";
t.style.border = 0;
t.style.background = "transparent";
t.style.width = "100%";
t.style.height = "100%";
t.style.active = 0;
t.style.outline = "medium";
t.style.padding = "0";
t.style.resize = "none";
t.style.textTransform = "uppercase";
t.style.overflow_y = "scroll";
t.style.display = "none";
t.style.position = "absolute";
t.style.bottom = "0px";
t.style.left = "2px";
t.style.className = "cocosEditBox";
t.style.fontFamily = "Arial";
p(t, this, !0);
return t;
};
f._addDomToGameContainer = function() {
cc.game.container.appendChild(this._edTxt);
};
f.removeDom = function() {
var t = this._edTxt;
if (t) {
var e = this.__eventListeners;
t.removeEventListener("compositionstart", e.compositionstart);
t.removeEventListener("compositionend", e.compositionend);
t.removeEventListener("input", e.input);
t.removeEventListener("focus", e.focus);
t.removeEventListener("keypress", e.keypress);
t.removeEventListener("blur", e.blur);
e.compositionstart = null;
e.compositionend = null;
e.input = null;
e.focus = null;
e.keypress = null;
e.blur = null;
n.contains(cc.game.container, t) && cc.game.container.removeChild(t);
}
this._edTxt = null;
};
e.exports = m;
}), {
"../../platform/CCMacro": 158,
"../../platform/utils": 177,
"./types": 89
} ],
89: [ (function(t, e, i) {
var n = cc.Enum({
DEFAULT: 0,
DONE: 1,
SEND: 2,
SEARCH: 3,
GO: 4,
NEXT: 5
}), r = cc.Enum({
ANY: 0,
EMAIL_ADDR: 1,
NUMERIC: 2,
PHONE_NUMBER: 3,
URL: 4,
DECIMAL: 5,
SINGLE_LINE: 6
}), s = cc.Enum({
PASSWORD: 0,
SENSITIVE: 1,
INITIAL_CAPS_WORD: 2,
INITIAL_CAPS_SENTENCE: 3,
INITIAL_CAPS_ALL_CHARACTERS: 4,
DEFAULT: 5
});
e.exports = {
KeyboardReturnType: n,
InputMode: r,
InputFlag: s
};
}), {} ],
90: [ (function(t, e, i) {
t("./CCComponent");
t("./CCComponentEventHandler");
t("./missing-script");
var n = [ t("./CCSprite"), t("./CCWidget"), t("./CCCanvas"), t("./CCAudioSource"), t("./CCAnimation"), t("./CCButton"), t("./CCLabel"), t("./CCProgressBar"), t("./CCMask"), t("./CCScrollBar"), t("./CCScrollView"), t("./CCPageViewIndicator"), t("./CCPageView"), t("./CCSlider"), t("./CCLayout"), t("./editbox/CCEditBox"), t("./CCLabelOutline"), t("./CCRichText"), t("./CCToggleContainer"), t("./CCToggleGroup"), t("./CCToggle"), t("./CCBlockInputEvents"), t("./CCMotionStreak") ];
e.exports = n;
}), {
"./CCAnimation": 60,
"./CCAudioSource": 61,
"./CCBlockInputEvents": 62,
"./CCButton": 63,
"./CCCanvas": 64,
"./CCComponent": 65,
"./CCComponentEventHandler": 66,
"./CCLabel": 67,
"./CCLabelOutline": 68,
"./CCLayout": 69,
"./CCMask": 70,
"./CCMotionStreak": 71,
"./CCPageView": 72,
"./CCPageViewIndicator": 73,
"./CCProgressBar": 74,
"./CCRichText": 76,
"./CCScrollBar": 77,
"./CCScrollView": 78,
"./CCSlider": 79,
"./CCSprite": 80,
"./CCToggle": 82,
"./CCToggleContainer": 83,
"./CCToggleGroup": 84,
"./CCWidget": 86,
"./editbox/CCEditBox": 87,
"./missing-script": 91
} ],
91: [ (function(t, e, i) {
var n = cc.js, r = t("../utils/misc").BUILTIN_CLASSID_RE, s = cc.Class({
name: "cc.MissingClass",
properties: {
_$erialized: {
default: null,
visible: !1,
editorOnly: !0
}
}
}), a = cc.Class({
name: "cc.MissingScript",
extends: cc.Component,
editor: {
inspector: "packages://inspector/inspectors/comps/missing-script.js"
},
properties: {
compiled: {
default: !1,
serializable: !1
},
_$erialized: {
default: null,
visible: !1,
editorOnly: !0
}
},
ctor: !1,
statics: {
safeFindClass: function(t, e) {
var i = n._getClassById(t);
if (i) return i;
if (t) {
cc.deserialize.reportMissingClass(t);
return a.getMissingWrapper(t, e);
}
return null;
},
getMissingWrapper: function(t, e) {
return e.node && (/^[0-9a-zA-Z+/]{23}$/.test(t) || r.test(t)) ? a : s;
}
},
onLoad: function() {
cc.warnID(4600, this.node.name);
}
});
cc._MissingScript = e.exports = a;
}), {
"../utils/misc": 231
} ],
92: [ (function(t, e, i) {
var n = cc.js;
t("../event/event");
var r = function(t, e) {
cc.Event.call(this, cc.Event.MOUSE, e);
this._eventType = t;
this._button = 0;
this._x = 0;
this._y = 0;
this._prevX = 0;
this._prevY = 0;
this._scrollX = 0;
this._scrollY = 0;
};
n.extend(r, cc.Event);
var s = r.prototype;
s.setScrollData = function(t, e) {
this._scrollX = t;
this._scrollY = e;
};
s.getScrollX = function() {
return this._scrollX;
};
s.getScrollY = function() {
return this._scrollY;
};
s.setLocation = function(t, e) {
this._x = t;
this._y = e;
};
s.getLocation = function() {
return {
x: this._x,
y: this._y
};
};
s.getLocationInView = function() {
return {
x: this._x,
y: cc.view._designResolutionSize.height - this._y
};
};
s._setPrevCursor = function(t, e) {
this._prevX = t;
this._prevY = e;
};
s.getPreviousLocation = function() {
return {
x: this._prevX,
y: this._prevY
};
};
s.getDelta = function() {
return {
x: this._x - this._prevX,
y: this._y - this._prevY
};
};
s.getDeltaX = function() {
return this._x - this._prevX;
};
s.getDeltaY = function() {
return this._y - this._prevY;
};
s.setButton = function(t) {
this._button = t;
};
s.getButton = function() {
return this._button;
};
s.getLocationX = function() {
return this._x;
};
s.getLocationY = function() {
return this._y;
};
r.NONE = 0;
r.DOWN = 1;
r.UP = 2;
r.MOVE = 3;
r.SCROLL = 4;
r.BUTTON_LEFT = 0;
r.BUTTON_RIGHT = 2;
r.BUTTON_MIDDLE = 1;
r.BUTTON_4 = 3;
r.BUTTON_5 = 4;
r.BUTTON_6 = 5;
r.BUTTON_7 = 6;
r.BUTTON_8 = 7;
var a = function(t, e) {
cc.Event.call(this, cc.Event.TOUCH, e);
this._eventCode = 0;
this._touches = t || [];
this.touch = null;
this.currentTouch = null;
};
n.extend(a, cc.Event);
(s = a.prototype).getEventCode = function() {
return this._eventCode;
};
s.getTouches = function() {
return this._touches;
};
s._setEventCode = function(t) {
this._eventCode = t;
};
s._setTouches = function(t) {
this._touches = t;
};
s.setLocation = function(t, e) {
this.touch && this.touch.setTouchInfo(this.touch.getID(), t, e);
};
s.getLocation = function() {
return this.touch ? this.touch.getLocation() : cc.v2();
};
s.getLocationInView = function() {
return this.touch ? this.touch.getLocationInView() : cc.v2();
};
s.getPreviousLocation = function() {
return this.touch ? this.touch.getPreviousLocation() : cc.v2();
};
s.getStartLocation = function() {
return this.touch ? this.touch.getStartLocation() : cc.v2();
};
s.getID = function() {
return this.touch ? this.touch.getID() : null;
};
s.getDelta = function() {
return this.touch ? this.touch.getDelta() : cc.v2();
};
s.getDeltaX = function() {
return this.touch ? this.touch.getDelta().x : 0;
};
s.getDeltaY = function() {
return this.touch ? this.touch.getDelta().y : 0;
};
s.getLocationX = function() {
return this.touch ? this.touch.getLocationX() : 0;
};
s.getLocationY = function() {
return this.touch ? this.touch.getLocationY() : 0;
};
a.MAX_TOUCHES = 5;
a.BEGAN = 0;
a.MOVED = 1;
a.ENDED = 2;
a.CANCELED = 3;
var o = function(t, e) {
cc.Event.call(this, cc.Event.ACCELERATION, e);
this.acc = t;
};
n.extend(o, cc.Event);
var h = function(t, e, i) {
cc.Event.call(this, cc.Event.KEYBOARD, i);
this.keyCode = t;
this.isPressed = e;
};
n.extend(h, cc.Event);
cc.Event.EventMouse = r;
cc.Event.EventTouch = a;
cc.Event.EventAcceleration = o;
cc.Event.EventKeyboard = h;
e.exports = cc.Event;
}), {
"../event/event": 99
} ],
93: [ (function(t, e, i) {
var n = t("../platform/js");
cc.EventListener = function(t, e, i) {
this._onEvent = i;
this._type = t || 0;
this._listenerID = e || "";
this._registered = !1;
this._fixedPriority = 0;
this._node = null;
this._target = null;
this._paused = !0;
this._isEnabled = !0;
};
cc.EventListener.prototype = {
constructor: cc.EventListener,
_setPaused: function(t) {
this._paused = t;
},
_isPaused: function() {
return this._paused;
},
_setRegistered: function(t) {
this._registered = t;
},
_isRegistered: function() {
return this._registered;
},
_getType: function() {
return this._type;
},
_getListenerID: function() {
return this._listenerID;
},
_setFixedPriority: function(t) {
this._fixedPriority = t;
},
_getFixedPriority: function() {
return this._fixedPriority;
},
_setSceneGraphPriority: function(t) {
this._target = t;
this._node = t;
},
_getSceneGraphPriority: function() {
return this._node;
},
checkAvailable: function() {
return null !== this._onEvent;
},
clone: function() {
return null;
},
setEnabled: function(t) {
this._isEnabled = t;
},
isEnabled: function() {
return this._isEnabled;
},
retain: function() {},
release: function() {}
};
cc.EventListener.UNKNOWN = 0;
cc.EventListener.TOUCH_ONE_BY_ONE = 1;
cc.EventListener.TOUCH_ALL_AT_ONCE = 2;
cc.EventListener.KEYBOARD = 3;
cc.EventListener.MOUSE = 4;
cc.EventListener.ACCELERATION = 6;
cc.EventListener.CUSTOM = 8;
var r = cc.EventListener.ListenerID = {
MOUSE: "__cc_mouse",
TOUCH_ONE_BY_ONE: "__cc_touch_one_by_one",
TOUCH_ALL_AT_ONCE: "__cc_touch_all_at_once",
KEYBOARD: "__cc_keyboard",
ACCELERATION: "__cc_acceleration"
}, s = function(t, e) {
this._onCustomEvent = e;
cc.EventListener.call(this, cc.EventListener.CUSTOM, t, this._callback);
};
n.extend(s, cc.EventListener);
n.mixin(s.prototype, {
_onCustomEvent: null,
_callback: function(t) {
null !== this._onCustomEvent && this._onCustomEvent(t);
},
checkAvailable: function() {
return cc.EventListener.prototype.checkAvailable.call(this) && null !== this._onCustomEvent;
},
clone: function() {
return new s(this._listenerID, this._onCustomEvent);
}
});
var a = function() {
cc.EventListener.call(this, cc.EventListener.MOUSE, r.MOUSE, this._callback);
};
n.extend(a, cc.EventListener);
n.mixin(a.prototype, {
onMouseDown: null,
onMouseUp: null,
onMouseMove: null,
onMouseScroll: null,
_callback: function(t) {
var e = cc.Event.EventMouse;
switch (t._eventType) {
case e.DOWN:
this.onMouseDown && this.onMouseDown(t);
break;

case e.UP:
this.onMouseUp && this.onMouseUp(t);
break;

case e.MOVE:
this.onMouseMove && this.onMouseMove(t);
break;

case e.SCROLL:
this.onMouseScroll && this.onMouseScroll(t);
}
},
clone: function() {
var t = new a();
t.onMouseDown = this.onMouseDown;
t.onMouseUp = this.onMouseUp;
t.onMouseMove = this.onMouseMove;
t.onMouseScroll = this.onMouseScroll;
return t;
},
checkAvailable: function() {
return !0;
}
});
var o = function() {
cc.EventListener.call(this, cc.EventListener.TOUCH_ONE_BY_ONE, r.TOUCH_ONE_BY_ONE, null);
this._claimedTouches = [];
};
n.extend(o, cc.EventListener);
n.mixin(o.prototype, {
constructor: o,
_claimedTouches: null,
swallowTouches: !1,
onTouchBegan: null,
onTouchMoved: null,
onTouchEnded: null,
onTouchCancelled: null,
setSwallowTouches: function(t) {
this.swallowTouches = t;
},
isSwallowTouches: function() {
return this.swallowTouches;
},
clone: function() {
var t = new o();
t.onTouchBegan = this.onTouchBegan;
t.onTouchMoved = this.onTouchMoved;
t.onTouchEnded = this.onTouchEnded;
t.onTouchCancelled = this.onTouchCancelled;
t.swallowTouches = this.swallowTouches;
return t;
},
checkAvailable: function() {
if (!this.onTouchBegan) {
cc.logID(1801);
return !1;
}
return !0;
}
});
var h = function() {
cc.EventListener.call(this, cc.EventListener.TOUCH_ALL_AT_ONCE, r.TOUCH_ALL_AT_ONCE, null);
};
n.extend(h, cc.EventListener);
n.mixin(h.prototype, {
constructor: h,
onTouchesBegan: null,
onTouchesMoved: null,
onTouchesEnded: null,
onTouchesCancelled: null,
clone: function() {
var t = new h();
t.onTouchesBegan = this.onTouchesBegan;
t.onTouchesMoved = this.onTouchesMoved;
t.onTouchesEnded = this.onTouchesEnded;
t.onTouchesCancelled = this.onTouchesCancelled;
return t;
},
checkAvailable: function() {
if (null === this.onTouchesBegan && null === this.onTouchesMoved && null === this.onTouchesEnded && null === this.onTouchesCancelled) {
cc.logID(1802);
return !1;
}
return !0;
}
});
var l = function(t) {
this._onAccelerationEvent = t;
cc.EventListener.call(this, cc.EventListener.ACCELERATION, r.ACCELERATION, this._callback);
};
n.extend(l, cc.EventListener);
n.mixin(l.prototype, {
constructor: l,
_onAccelerationEvent: null,
_callback: function(t) {
this._onAccelerationEvent(t.acc, t);
},
checkAvailable: function() {
cc.assertID(this._onAccelerationEvent, 1803);
return !0;
},
clone: function() {
return new l(this._onAccelerationEvent);
}
});
var c = function() {
cc.EventListener.call(this, cc.EventListener.KEYBOARD, r.KEYBOARD, this._callback);
};
n.extend(c, cc.EventListener);
n.mixin(c.prototype, {
constructor: c,
onKeyPressed: null,
onKeyReleased: null,
_callback: function(t) {
t.isPressed ? this.onKeyPressed && this.onKeyPressed(t.keyCode, t) : this.onKeyReleased && this.onKeyReleased(t.keyCode, t);
},
clone: function() {
var t = new c();
t.onKeyPressed = this.onKeyPressed;
t.onKeyReleased = this.onKeyReleased;
return t;
},
checkAvailable: function() {
if (null === this.onKeyPressed && null === this.onKeyReleased) {
cc.logID(1800);
return !1;
}
return !0;
}
});
cc.EventListener.create = function(t) {
cc.assertID(t && t.event, 1900);
var e = t.event;
delete t.event;
var i = null;
if (e === cc.EventListener.TOUCH_ONE_BY_ONE) i = new o(); else if (e === cc.EventListener.TOUCH_ALL_AT_ONCE) i = new h(); else if (e === cc.EventListener.MOUSE) i = new a(); else if (e === cc.EventListener.CUSTOM) {
i = new s(t.eventName, t.callback);
delete t.eventName;
delete t.callback;
} else if (e === cc.EventListener.KEYBOARD) i = new c(); else if (e === cc.EventListener.ACCELERATION) {
i = new l(t.callback);
delete t.callback;
}
for (var n in t) i[n] = t[n];
return i;
};
e.exports = cc.EventListener;
}), {
"../platform/js": 173
} ],
94: [ (function(t, e, i) {
var n = t("../platform/js");
t("./CCEventListener");
var r = cc.EventListener.ListenerID, s = function() {
this._fixedListeners = [];
this._sceneGraphListeners = [];
this.gt0Index = 0;
};
s.prototype = {
constructor: s,
size: function() {
return this._fixedListeners.length + this._sceneGraphListeners.length;
},
empty: function() {
return 0 === this._fixedListeners.length && 0 === this._sceneGraphListeners.length;
},
push: function(t) {
0 === t._getFixedPriority() ? this._sceneGraphListeners.push(t) : this._fixedListeners.push(t);
},
clearSceneGraphListeners: function() {
this._sceneGraphListeners.length = 0;
},
clearFixedListeners: function() {
this._fixedListeners.length = 0;
},
clear: function() {
this._sceneGraphListeners.length = 0;
this._fixedListeners.length = 0;
},
getFixedPriorityListeners: function() {
return this._fixedListeners;
},
getSceneGraphPriorityListeners: function() {
return this._sceneGraphListeners;
}
};
var a = {
DIRTY_NONE: 0,
DIRTY_FIXED_PRIORITY: 1,
DIRTY_SCENE_GRAPH_PRIORITY: 2,
DIRTY_ALL: 3,
_listenersMap: {},
_priorityDirtyFlagMap: {},
_nodeListenersMap: {},
_nodePriorityMap: n.createMap(!0),
_globalZOrderNodeMap: [],
_toAddedListeners: [],
_toRemovedListeners: [],
_dirtyNodes: [],
_inDispatch: 0,
_isEnabled: !1,
_nodePriorityIndex: 0,
_internalCustomListenerIDs: [],
_setDirtyForNode: function(t) {
void 0 !== this._nodeListenersMap[t._id] && this._dirtyNodes.push(t);
if (t.getChildren) for (var e = t.getChildren(), i = 0, n = e ? e.length : 0; i < n; i++) this._setDirtyForNode(e[i]);
},
pauseTarget: function(t, e) {
if (t instanceof cc._BaseNode || t instanceof _ccsg.Node) {
var i, n, r = this._nodeListenersMap[t._id];
if (r) for (i = 0, n = r.length; i < n; i++) r[i]._setPaused(!0);
if (!0 === e) {
var s = t.getChildren();
for (i = 0, n = s ? s.length : 0; i < n; i++) this.pauseTarget(s[i], !0);
}
} else cc.warnID(3506);
},
resumeTarget: function(t, e) {
if (t instanceof cc._BaseNode || t instanceof _ccsg.Node) {
var i, n, r = this._nodeListenersMap[t._id];
if (r) for (i = 0, n = r.length; i < n; i++) r[i]._setPaused(!1);
this._setDirtyForNode(t);
if (!0 === e && t.getChildren) {
var s = t.getChildren();
for (i = 0, n = s ? s.length : 0; i < n; i++) this.resumeTarget(s[i], !0);
}
} else cc.warnID(3506);
},
_addListener: function(t) {
0 === this._inDispatch ? this._forceAddEventListener(t) : this._toAddedListeners.push(t);
},
_forceAddEventListener: function(t) {
var e = t._getListenerID(), i = this._listenersMap[e];
if (!i) {
i = new s();
this._listenersMap[e] = i;
}
i.push(t);
if (0 === t._getFixedPriority()) {
this._setDirty(e, this.DIRTY_SCENE_GRAPH_PRIORITY);
var n = t._getSceneGraphPriority();
null === n && cc.logID(3507);
this._associateNodeAndEventListener(n, t);
n.activeInHierarchy && this.resumeTarget(n);
} else this._setDirty(e, this.DIRTY_FIXED_PRIORITY);
},
_getListeners: function(t) {
return this._listenersMap[t];
},
_updateDirtyFlagForSceneGraph: function() {
if (0 !== this._dirtyNodes.length) {
for (var t, e, i = this._dirtyNodes, n = this._nodeListenersMap, r = 0, s = i.length; r < s; r++) if (t = n[i[r]._id]) for (var a = 0, o = t.length; a < o; a++) (e = t[a]) && this._setDirty(e._getListenerID(), this.DIRTY_SCENE_GRAPH_PRIORITY);
this._dirtyNodes.length = 0;
}
},
_removeAllListenersInVector: function(t) {
if (t) for (var e, i = 0; i < t.length; ) {
(e = t[i])._setRegistered(!1);
if (null != e._getSceneGraphPriority()) {
this._dissociateNodeAndEventListener(e._getSceneGraphPriority(), e);
e._setSceneGraphPriority(null);
}
0 === this._inDispatch ? cc.js.array.remove(t, e) : ++i;
}
},
_removeListenersForListenerID: function(t) {
var e, i = this._listenersMap[t];
if (i) {
var n = i.getFixedPriorityListeners(), r = i.getSceneGraphPriorityListeners();
this._removeAllListenersInVector(r);
this._removeAllListenersInVector(n);
delete this._priorityDirtyFlagMap[t];
if (!this._inDispatch) {
i.clear();
delete this._listenersMap[t];
}
}
var s, a = this._toAddedListeners;
for (e = 0; e < a.length; ) (s = a[e]) && s._getListenerID() === t ? cc.js.array.remove(a, s) : ++e;
},
_sortEventListeners: function(t) {
var e = this.DIRTY_NONE, i = this._priorityDirtyFlagMap;
i[t] && (e = i[t]);
if (e !== this.DIRTY_NONE) {
i[t] = this.DIRTY_NONE;
e & this.DIRTY_FIXED_PRIORITY && this._sortListenersOfFixedPriority(t);
if (e & this.DIRTY_SCENE_GRAPH_PRIORITY) {
var n = cc.director.getScene();
n && this._sortListenersOfSceneGraphPriority(t, n);
}
}
},
_sortListenersOfSceneGraphPriority: function(t, e) {
var i = this._getListeners(t);
if (i) {
var r = i.getSceneGraphPriorityListeners();
if (r && 0 !== r.length) {
this._nodePriorityIndex = 0;
this._nodePriorityMap = n.createMap(!0);
this._visitTarget(e, !0);
i.getSceneGraphPriorityListeners().sort(this._sortEventListenersOfSceneGraphPriorityDes);
}
}
},
_sortEventListenersOfSceneGraphPriorityDes: function(t, e) {
var i = a._nodePriorityMap, n = t._getSceneGraphPriority(), r = e._getSceneGraphPriority();
return e && r && i[r._id] ? t && n && i[n._id] ? i[r._id] - i[n._id] : 1 : -1;
},
_sortListenersOfFixedPriority: function(t) {
var e = this._listenersMap[t];
if (e) {
var i = e.getFixedPriorityListeners();
if (i && 0 !== i.length) {
i.sort(this._sortListenersOfFixedPriorityAsc);
for (var n = 0, r = i.length; n < r && !(i[n]._getFixedPriority() >= 0); ) ++n;
e.gt0Index = n;
}
}
},
_sortListenersOfFixedPriorityAsc: function(t, e) {
return t._getFixedPriority() - e._getFixedPriority();
},
_onUpdateListeners: function(t) {
var e, i, n, r = t.getFixedPriorityListeners(), s = t.getSceneGraphPriorityListeners(), a = this._toRemovedListeners;
if (s) for (e = 0; e < s.length; ) if ((i = s[e])._isRegistered()) ++e; else {
cc.js.array.remove(s, i);
-1 !== (n = a.indexOf(i)) && a.splice(n, 1);
}
if (r) for (e = 0; e < r.length; ) if ((i = r[e])._isRegistered()) ++e; else {
cc.js.array.remove(r, i);
-1 !== (n = a.indexOf(i)) && a.splice(n, 1);
}
s && 0 === s.length && t.clearSceneGraphListeners();
r && 0 === r.length && t.clearFixedListeners();
},
frameUpdateListeners: function() {
var t = this._listenersMap, e = this._priorityDirtyFlagMap;
for (var i in t) if (t[i].empty()) {
delete e[i];
delete t[i];
}
var n = this._toAddedListeners;
if (0 !== n.length) {
for (var r = 0, s = n.length; r < s; r++) this._forceAddEventListener(n[r]);
n.length = 0;
}
0 !== this._toRemovedListeners.length && this._cleanToRemovedListeners();
},
_updateTouchListeners: function(t) {
var e = this._inDispatch;
cc.assertID(e > 0, 3508);
if (!(e > 1)) {
var i;
(i = this._listenersMap[r.TOUCH_ONE_BY_ONE]) && this._onUpdateListeners(i);
(i = this._listenersMap[r.TOUCH_ALL_AT_ONCE]) && this._onUpdateListeners(i);
cc.assertID(1 === e, 3509);
var n = this._toAddedListeners;
if (0 !== n.length) {
for (var s = 0, a = n.length; s < a; s++) this._forceAddEventListener(n[s]);
this._toAddedListeners.length = 0;
}
0 !== this._toRemovedListeners.length && this._cleanToRemovedListeners();
}
},
_cleanToRemovedListeners: function() {
for (var t = this._toRemovedListeners, e = 0; e < t.length; e++) {
var i = t[e], n = this._listenersMap[i._getListenerID()];
if (n) {
var r, s = n.getFixedPriorityListeners(), a = n.getSceneGraphPriorityListeners();
a && -1 !== (r = a.indexOf(i)) && a.splice(r, 1);
s && -1 !== (r = s.indexOf(i)) && s.splice(r, 1);
}
}
t.length = 0;
},
_onTouchEventCallback: function(t, e) {
if (!t._isRegistered) return !1;
var i = e.event, n = i.currentTouch;
i.currentTarget = t._node;
var r, s = !1, o = i.getEventCode(), h = cc.Event.EventTouch;
if (o === h.BEGAN) t.onTouchBegan && (s = t.onTouchBegan(n, i)) && t._registered && t._claimedTouches.push(n); else if (t._claimedTouches.length > 0 && -1 !== (r = t._claimedTouches.indexOf(n))) {
s = !0;
if (o === h.MOVED && t.onTouchMoved) t.onTouchMoved(n, i); else if (o === h.ENDED) {
t.onTouchEnded && t.onTouchEnded(n, i);
t._registered && t._claimedTouches.splice(r, 1);
} else if (o === h.CANCELLED) {
t.onTouchCancelled && t.onTouchCancelled(n, i);
t._registered && t._claimedTouches.splice(r, 1);
}
}
if (i.isStopped()) {
a._updateTouchListeners(i);
return !0;
}
if (s && t._registered && t.swallowTouches) {
e.needsMutableSet && e.touches.splice(n, 1);
return !0;
}
return !1;
},
_dispatchTouchEvent: function(t) {
this._sortEventListeners(r.TOUCH_ONE_BY_ONE);
this._sortEventListeners(r.TOUCH_ALL_AT_ONCE);
var e = this._getListeners(r.TOUCH_ONE_BY_ONE), i = this._getListeners(r.TOUCH_ALL_AT_ONCE);
if (null !== e || null !== i) {
var n = t.getTouches(), s = cc.js.array.copy(n), a = {
event: t,
needsMutableSet: e && i,
touches: s,
selTouch: null
};
if (e) for (var o = 0; o < n.length; o++) {
t.currentTouch = n[o];
t._propagationStopped = t._propagationImmediateStopped = !1;
this._dispatchEventToListeners(e, this._onTouchEventCallback, a);
}
if (i && s.length > 0) {
this._dispatchEventToListeners(i, this._onTouchesEventCallback, {
event: t,
touches: s
});
if (t.isStopped()) return;
}
this._updateTouchListeners(t);
}
},
_onTouchesEventCallback: function(t, e) {
if (!t._registered) return !1;
var i = cc.Event.EventTouch, n = e.event, r = e.touches, s = n.getEventCode();
n.currentTarget = t._node;
s === i.BEGAN && t.onTouchesBegan ? t.onTouchesBegan(r, n) : s === i.MOVED && t.onTouchesMoved ? t.onTouchesMoved(r, n) : s === i.ENDED && t.onTouchesEnded ? t.onTouchesEnded(r, n) : s === i.CANCELLED && t.onTouchesCancelled && t.onTouchesCancelled(r, n);
if (n.isStopped()) {
a._updateTouchListeners(n);
return !0;
}
return !1;
},
_associateNodeAndEventListener: function(t, e) {
var i = this._nodeListenersMap[t._id];
if (!i) {
i = [];
this._nodeListenersMap[t._id] = i;
}
i.push(e);
},
_dissociateNodeAndEventListener: function(t, e) {
var i = this._nodeListenersMap[t._id];
if (i) {
cc.js.array.remove(i, e);
0 === i.length && delete this._nodeListenersMap[t._id];
}
},
_dispatchEventToListeners: function(t, e, i) {
var n, r, s = !1, a = t.getFixedPriorityListeners(), o = t.getSceneGraphPriorityListeners(), h = 0;
if (a && 0 !== a.length) for (;h < t.gt0Index; ++h) if ((r = a[h]).isEnabled() && !r._isPaused() && r._isRegistered() && e(r, i)) {
s = !0;
break;
}
if (o && !s) for (n = 0; n < o.length; n++) if ((r = o[n]).isEnabled() && !r._isPaused() && r._isRegistered() && e(r, i)) {
s = !0;
break;
}
if (a && !s) for (;h < a.length; ++h) if ((r = a[h]).isEnabled() && !r._isPaused() && r._isRegistered() && e(r, i)) {
s = !0;
break;
}
},
_setDirty: function(t, e) {
var i = this._priorityDirtyFlagMap;
null == i[t] ? i[t] = e : i[t] = e | i[t];
},
_visitTarget: function(t, e) {
t._reorderChildDirty && t.sortAllChildren();
var i = t.getChildren(), n = 0, r = i.length, s = this._globalZOrderNodeMap, a = this._nodeListenersMap;
if (r > 0) {
if (void 0 !== a[t._id]) {
s || (s = []);
s.push(t._id);
}
for (var o; n < r; n++) (o = i[n]) && this._visitTarget(o, !1);
} else if (void 0 !== a[t._id]) {
s || (s = []);
s.push(t._id);
}
if (e) {
for (var h = this._nodePriorityMap, l = 0; l < s.length; l++) h[s[l]] = ++this._nodePriorityIndex;
this._globalZOrderNodeMap.length = 0;
}
},
_sortNumberAsc: function(t, e) {
return t - e;
},
hasEventListener: function(t) {
return !!this._getListeners(t);
},
addListener: function(t, e) {
cc.assertID(t && e, 3503);
if (cc.js.isNumber(e) || e instanceof cc._BaseNode || e instanceof _ccsg.Node) {
if (t instanceof cc.EventListener) {
if (t._isRegistered()) {
cc.logID(3505);
return;
}
} else {
cc.assertID(!cc.js.isNumber(e), 3504);
t = cc.EventListener.create(t);
}
if (t.checkAvailable()) {
if (cc.js.isNumber(e)) {
if (0 === e) {
cc.logID(3500);
return;
}
t._setSceneGraphPriority(null);
t._setFixedPriority(e);
t._setRegistered(!0);
t._setPaused(!1);
this._addListener(t);
} else {
t._setSceneGraphPriority(e);
t._setFixedPriority(0);
t._setRegistered(!0);
this._addListener(t);
}
return t;
}
} else cc.warnID(3506);
},
addCustomListener: function(t, e) {
var i = new cc.EventListener.create({
event: cc.EventListener.CUSTOM,
eventName: t,
callback: e
});
this.addListener(i, 1);
return i;
},
removeListener: function(t) {
if (null != t) {
var e, i = this._listenersMap;
for (var n in i) {
var r = i[n], s = r.getFixedPriorityListeners(), a = r.getSceneGraphPriorityListeners();
(e = this._removeListenerInVector(a, t)) ? this._setDirty(t._getListenerID(), this.DIRTY_SCENE_GRAPH_PRIORITY) : (e = this._removeListenerInVector(s, t)) && this._setDirty(t._getListenerID(), this.DIRTY_FIXED_PRIORITY);
if (r.empty()) {
delete this._priorityDirtyFlagMap[t._getListenerID()];
delete i[n];
}
if (e) break;
}
if (!e) for (var o = this._toAddedListeners, h = 0, l = o.length; h < l; h++) {
var c = o[h];
if (c === t) {
cc.js.array.remove(o, c);
c._setRegistered(!1);
break;
}
}
}
},
_removeListenerInCallback: function(t, e) {
if (null == t) return !1;
for (var i = 0, n = t.length; i < n; i++) {
var r = t[i];
if (r._onCustomEvent === e || r._onEvent === e) {
r._setRegistered(!1);
if (null != r._getSceneGraphPriority()) {
this._dissociateNodeAndEventListener(r._getSceneGraphPriority(), r);
r._setSceneGraphPriority(null);
}
0 === this._inDispatch ? cc.js.array.remove(t, r) : this._toRemovedListeners.push(r);
return !0;
}
}
return !1;
},
_removeListenerInVector: function(t, e) {
if (null == t) return !1;
for (var i = 0, n = t.length; i < n; i++) {
var r = t[i];
if (r === e) {
r._setRegistered(!1);
if (null != r._getSceneGraphPriority()) {
this._dissociateNodeAndEventListener(r._getSceneGraphPriority(), r);
r._setSceneGraphPriority(null);
}
0 === this._inDispatch ? cc.js.array.remove(t, r) : this._toRemovedListeners.push(r);
return !0;
}
}
return !1;
},
removeListeners: function(t, e) {
var i = this;
if (cc.js.isNumber(t) || t instanceof cc._BaseNode || t instanceof _ccsg.Node) if (void 0 !== t._id) {
delete i._nodePriorityMap[t._id];
cc.js.array.remove(i._dirtyNodes, t);
var n, s = i._nodeListenersMap[t._id];
if (s) {
var a = cc.js.array.copy(s);
for (n = 0; n < a.length; n++) i.removeListener(a[n]);
delete i._nodeListenersMap[t._id];
}
var o = i._toAddedListeners;
for (n = 0; n < o.length; ) {
var h = o[n];
if (h._getSceneGraphPriority() === t) {
h._setSceneGraphPriority(null);
h._setRegistered(!1);
o.splice(n, 1);
} else ++n;
}
if (!0 === e) {
var l, c = t.getChildren();
for (n = 0, l = c.length; n < l; n++) i.removeListeners(c[n], !0);
}
} else t === cc.EventListener.TOUCH_ONE_BY_ONE ? i._removeListenersForListenerID(r.TOUCH_ONE_BY_ONE) : t === cc.EventListener.TOUCH_ALL_AT_ONCE ? i._removeListenersForListenerID(r.TOUCH_ALL_AT_ONCE) : t === cc.EventListener.MOUSE ? i._removeListenersForListenerID(r.MOUSE) : t === cc.EventListener.ACCELERATION ? i._removeListenersForListenerID(r.ACCELERATION) : t === cc.EventListener.KEYBOARD ? i._removeListenersForListenerID(r.KEYBOARD) : cc.logID(3501); else cc.warnID(3506);
},
removeCustomListeners: function(t) {
this._removeListenersForListenerID(t);
},
removeAllListeners: function() {
var t = this._listenersMap, e = this._internalCustomListenerIDs;
for (var i in t) -1 === e.indexOf(i) && this._removeListenersForListenerID(i);
},
setPriority: function(t, e) {
if (null != t) {
var i = this._listenersMap;
for (var n in i) {
var r = i[n].getFixedPriorityListeners();
if (r) {
if (-1 !== r.indexOf(t)) {
null != t._getSceneGraphPriority() && cc.logID(3502);
if (t._getFixedPriority() !== e) {
t._setFixedPriority(e);
this._setDirty(t._getListenerID(), this.DIRTY_FIXED_PRIORITY);
}
return;
}
}
}
}
},
setEnabled: function(t) {
this._isEnabled = t;
},
isEnabled: function() {
return this._isEnabled;
},
dispatchEvent: function(t) {
if (this._isEnabled) {
this._updateDirtyFlagForSceneGraph();
this._inDispatch++;
if (t && t.getType) if (t.getType().startsWith(cc.Event.TOUCH)) {
this._dispatchTouchEvent(t);
this._inDispatch--;
} else {
var e = (function(t) {
var e = cc.Event, i = t.type;
if (i === e.ACCELERATION) return r.ACCELERATION;
if (i === e.KEYBOARD) return r.KEYBOARD;
if (i.startsWith(e.MOUSE)) return r.MOUSE;
i.startsWith(e.TOUCH) && cc.logID(2e3);
return "";
})(t);
this._sortEventListeners(e);
var i = this._listenersMap[e];
if (null != i) {
this._dispatchEventToListeners(i, this._onListenerCallback, t);
this._onUpdateListeners(i);
}
this._inDispatch--;
} else cc.errorID(3511);
}
},
_onListenerCallback: function(t, e) {
e.currentTarget = t._target;
t._onEvent(e);
return e.isStopped();
},
dispatchCustomEvent: function(t, e) {
var i = new cc.Event.EventCustom(t);
i.setUserData(e);
this.dispatchEvent(i);
}
};
n.get(cc, "eventManager", (function() {
cc.warnID(1405, "cc.eventManager", "cc.EventTarget or cc.systemEvent");
return a;
}));
e.exports = a;
}), {
"../platform/js": 173,
"./CCEventListener": 93
} ],
95: [ (function(t, e, i) {
cc.Touch = function(t, e, i) {
this._lastModified = 0;
this.setTouchInfo(i, t, e);
};
cc.Touch.prototype = {
constructor: cc.Touch,
getLocation: function() {
return cc.v2(this._point.x, this._point.y);
},
getLocationX: function() {
return this._point.x;
},
getLocationY: function() {
return this._point.y;
},
getPreviousLocation: function() {
return cc.v2(this._prevPoint.x, this._prevPoint.y);
},
getStartLocation: function() {
return cc.v2(this._startPoint.x, this._startPoint.y);
},
getDelta: function() {
return this._point.sub(this._prevPoint);
},
getLocationInView: function() {
return cc.v2(this._point.x, cc.view._designResolutionSize.height - this._point.y);
},
getPreviousLocationInView: function() {
return cc.v2(this._prevPoint.x, cc.view._designResolutionSize.height - this._prevPoint.y);
},
getStartLocationInView: function() {
return cc.v2(this._startPoint.x, cc.view._designResolutionSize.height - this._startPoint.y);
},
getID: function() {
return this._id;
},
setTouchInfo: function(t, e, i) {
this._prevPoint = this._point;
this._point = cc.v2(e || 0, i || 0);
this._id = t;
if (!this._startPointCaptured) {
this._startPoint = cc.v2(this._point);
cc.view._convertPointWithScale(this._startPoint);
this._startPointCaptured = !0;
}
},
_setPoint: function(t, e) {
if (void 0 === e) {
this._point.x = t.x;
this._point.y = t.y;
} else {
this._point.x = t;
this._point.y = e;
}
},
_setPrevPoint: function(t, e) {
this._prevPoint = void 0 === e ? cc.v2(t.x, t.y) : cc.v2(t || 0, e || 0);
}
};
}), {} ],
96: [ (function(t, e, i) {
t("./CCEvent");
t("./CCTouch");
t("./CCEventListener");
var n = t("./CCEventManager");
e.exports = n;
0;
}), {
"./CCEvent": 92,
"./CCEventListener": 93,
"./CCEventManager": 94,
"./CCTouch": 95
} ],
97: [ (function(t, e, i) {
var n = cc.js, r = t("../platform/callbacks-invoker").CallbacksHandler;
function s() {
r.call(this);
}
n.extend(s, r);
s.prototype.invoke = function(t, e) {
var i = t.type, n = this._callbackTable[i];
if (n) {
var r = !n.isInvoking;
n.isInvoking = !0;
for (var s = n.callbacks, a = n.targets, o = 0, h = s.length; o < h; ++o) {
var l = s[o];
if (l) {
var c = a[o] || t.currentTarget;
l.call(c, t, e);
if (t._propagationImmediateStopped) break;
}
}
if (r) {
n.isInvoking = !1;
n.containCanceled && n.purgeCanceled();
}
}
};
e.exports = s;
0;
}), {
"../platform/callbacks-invoker": 166
} ],
98: [ (function(t, e, i) {
var n = t("../platform/js"), r = t("../platform/callbacks-invoker"), s = n.array.fastRemove;
function a() {
r.call(this);
}
n.extend(a, r);
var o = a.prototype;
o.on = function(t, e, i) {
if (e) {
if (!this.hasEventListener(t, e, i)) {
this.add(t, e, i);
i && i.__eventTargets && i.__eventTargets.push(this);
}
return e;
}
cc.errorID(6800);
};
o.off = function(t, e, i) {
if (e) {
this.remove(t, e, i);
i && i.__eventTargets && s(i.__eventTargets, this);
} else this.removeAll(t);
};
o.targetOff = o.removeAll;
o.once = function(t, e, i) {
var n = "__ONCE_FLAG:" + t;
if (!this.hasEventListener(n, e, i)) {
var r = this, s = function(a) {
r.off(t, s, i);
r.remove(n, e, i);
e.call(this, a);
};
this.on(t, s, i);
this.add(n, e, i);
}
};
o.emit = r.prototype.invoke;
o.dispatchEvent = function(t) {
this.invoke(t.type, t);
};
cc.EventTarget = e.exports = a;
}), {
"../platform/callbacks-invoker": 166,
"../platform/js": 173
} ],
99: [ (function(t, e, i) {
var n = t("../platform/js");
cc.Event = function(t, e) {
this.type = t;
this.bubbles = !!e;
this.target = null;
this.currentTarget = null;
this.eventPhase = 0;
this._propagationStopped = !1;
this._propagationImmediateStopped = !1;
};
cc.Event.prototype = {
constructor: cc.Event,
unuse: function() {
this.type = cc.Event.NO_TYPE;
this.target = null;
this.currentTarget = null;
this.eventPhase = cc.Event.NONE;
this._propagationStopped = !1;
this._propagationImmediateStopped = !1;
},
reuse: function(t, e) {
this.type = t;
this.bubbles = e || !1;
},
stopPropagation: function() {
this._propagationStopped = !0;
},
stopPropagationImmediate: function() {
this._propagationImmediateStopped = !0;
},
isStopped: function() {
return this._propagationStopped || this._propagationImmediateStopped;
},
getCurrentTarget: function() {
return this.currentTarget;
},
getType: function() {
return this.type;
}
};
cc.Event.NO_TYPE = "no_type";
cc.Event.TOUCH = "touch";
cc.Event.MOUSE = "mouse";
cc.Event.KEYBOARD = "keyboard";
cc.Event.ACCELERATION = "acceleration";
cc.Event.NONE = 0;
cc.Event.CAPTURING_PHASE = 1;
cc.Event.AT_TARGET = 2;
cc.Event.BUBBLING_PHASE = 3;
var r = function(t, e) {
cc.Event.call(this, t, e);
this.detail = null;
};
n.extend(r, cc.Event);
r.prototype.reset = r;
r.prototype.setUserData = function(t) {
this.detail = t;
};
r.prototype.getUserData = function() {
return this.detail;
};
r.prototype.getEventName = cc.Event.prototype.getType;
var s = new n.Pool(10);
r.put = function(t) {
s.put(t);
};
r.get = function(t, e) {
var i = s._get();
i ? i.reset(t, e) : i = new r(t, e);
return i;
};
cc.Event.EventCustom = r;
e.exports = cc.Event;
}), {
"../platform/js": 173
} ],
100: [ (function(t, e, i) {
t("./event");
t("./event-listeners");
t("./event-target");
t("./system-event");
}), {
"./event": 99,
"./event-listeners": 97,
"./event-target": 98,
"./system-event": 101
} ],
101: [ (function(t, e, i) {
var n = t("../event/event-target"), r = t("../event-manager"), s = t("../platform/CCInputManager"), a = cc.Enum({
KEY_DOWN: "keydown",
KEY_UP: "keyup",
DEVICEMOTION: "devicemotion"
}), o = null, h = null, l = cc.Class({
name: "SystemEvent",
extends: n,
statics: {
EventType: a
},
setAccelerometerEnabled: function(t) {
s.setAccelerometerEnabled(t);
},
setAccelerometerInterval: function(t) {
s.setAccelerometerInterval(t);
},
on: function(t, e, i) {
this._super(t, e, i);
if (t === a.KEY_DOWN || t === a.KEY_UP) {
o || (o = cc.EventListener.create({
event: cc.EventListener.KEYBOARD,
onKeyPressed: function(t, e) {
e.type = a.KEY_DOWN;
cc.systemEvent.dispatchEvent(e);
},
onKeyReleased: function(t, e) {
e.type = a.KEY_UP;
cc.systemEvent.dispatchEvent(e);
}
}));
r.hasEventListener(cc.EventListener.ListenerID.KEYBOARD) || r.addListener(o, 1);
}
if (t === a.DEVICEMOTION) {
h || (h = cc.EventListener.create({
event: cc.EventListener.ACCELERATION,
callback: function(t, e) {
e.type = a.DEVICEMOTION;
cc.systemEvent.dispatchEvent(e);
}
}));
r.hasEventListener(cc.EventListener.ListenerID.ACCELERATION) || r.addListener(h, 1);
}
},
off: function(t, e, i) {
this._super(t, e, i);
if (o && (t === a.KEY_DOWN || t === a.KEY_UP)) {
var n = this.hasEventListener(a.KEY_DOWN), s = this.hasEventListener(a.KEY_UP);
n || s || r.removeListener(o);
}
h && t === a.DEVICEMOTION && r.removeListener(h);
}
});
cc.SystemEvent = e.exports = l;
cc.systemEvent = new cc.SystemEvent();
}), {
"../event-manager": 96,
"../event/event-target": 98,
"../platform/CCInputManager": 157
} ],
102: [ (function(t, e, i) {
var n = t("../components/CCRenderComponent"), r = (t("../renderer"), t("../renderer/render-engine").SpriteMaterial), s = (t("./helper"), 
t("./types")), a = s.LineCap, o = s.LineJoin, h = cc.Class({
name: "cc.Graphics",
extends: n,
editor: !1,
ctor: function() {
this._impl = h._assembler.createImpl();
},
properties: {
_lineWidth: 1,
_strokeColor: cc.Color.BLACK,
_lineJoin: o.MITER,
_lineCap: a.BUTT,
_fillColor: cc.Color.WHITE,
_miterLimit: 10,
lineWidth: {
get: function() {
return this._lineWidth;
},
set: function(t) {
this._lineWidth = t;
this._impl.lineWidth = t;
}
},
lineJoin: {
get: function() {
return this._lineJoin;
},
set: function(t) {
this._lineJoin = t;
this._impl.lineJoin = t;
},
type: o
},
lineCap: {
get: function() {
return this._lineCap;
},
set: function(t) {
this._lineCap = t;
this._impl.lineCap = t;
},
type: a
},
strokeColor: {
get: function() {
return this._strokeColor;
},
set: function(t) {
this._impl.strokeColor = this._strokeColor = cc.color(t);
}
},
fillColor: {
get: function() {
return this._fillColor;
},
set: function(t) {
this._impl.fillColor = this._fillColor = cc.color(t);
}
},
miterLimit: {
get: function() {
return this._miterLimit;
},
set: function(t) {
this._miterLimit = t;
this._impl.miterLimit = t;
}
}
},
statics: {
LineJoin: o,
LineCap: a
},
onRestore: function() {
this._impl || (this._impl = h._assembler.createImpl());
},
onEnable: function() {
this._super();
this._activateMaterial();
},
onDestroy: function() {
this._super();
this._impl = null;
},
_activateMaterial: function() {
if (!this._material) {
var t = new r();
t.useColor = !1;
t.useTexture = !1;
this._updateMaterial(t);
}
},
moveTo: function(t, e) {
this._impl.moveTo(t, e);
},
lineTo: function(t, e) {
this._impl.lineTo(t, e);
},
bezierCurveTo: function(t, e, i, n, r, s) {
this._impl.bezierCurveTo(t, e, i, n, r, s);
},
quadraticCurveTo: function(t, e, i, n) {
this._impl.quadraticCurveTo(t, e, i, n);
},
arc: function(t, e, i, n, r, s) {
this._impl.arc(t, e, i, n, r, s);
},
ellipse: function(t, e, i, n) {
this._impl.ellipse(t, e, i, n);
},
circle: function(t, e, i) {
this._impl.circle(t, e, i);
},
rect: function(t, e, i, n) {
this._impl.rect(t, e, i, n);
},
roundRect: function(t, e, i, n, r) {
this._impl.roundRect(t, e, i, n, r);
},
fillRect: function(t, e, i, n) {
this.rect(t, e, i, n);
this.fill();
},
clear: function(t) {
this._impl.clear(this, t);
},
close: function() {
this._impl.close();
},
stroke: function() {
h._assembler.stroke(this);
},
fill: function() {
h._assembler.fill(this);
}
});
cc.Graphics = e.exports = h;
}), {
"../components/CCRenderComponent": 75,
"../renderer": 194,
"../renderer/render-engine": 195,
"./helper": 103,
"./types": 105
} ],
103: [ (function(t, e, i) {
var n = t("./types").PointFlags, r = Math.PI, s = Math.min, a = Math.max, o = Math.cos, h = Math.sin, l = Math.abs, c = Math.sign, u = .5522847493;
e.exports = {
arc: function(t, e, i, n, c, u, _) {
var m, f, d, p = 0, g = 0, y = 0, v = 0, x = 0, A = 0, b = 0, T = 0, C = 0, w = 0, S = 0, E = 0, D = 0;
g = u - c;
if (_ = _ || !1) if (l(g) >= 2 * r) g = 2 * r; else for (;g < 0; ) g += 2 * r; else if (l(g) >= 2 * r) g = 2 * -r; else for (;g > 0; ) g -= 2 * r;
d = 0 | a(1, s(l(g) / (.5 * r) + .5, 5));
y = l(4 / 3 * (1 - o(m = g / d / 2)) / h(m));
_ || (y = -y);
for (f = 0; f <= d; f++) {
v = o(p = c + g * (f / d));
x = h(p);
A = e + v * n;
b = i + x * n;
T = -x * n * y;
C = v * n * y;
0 === f ? t.moveTo(A, b) : t.bezierCurveTo(w + E, S + D, A - T, b - C, A, b);
w = A;
S = b;
E = T;
D = C;
}
},
ellipse: function(t, e, i, n, r) {
t.moveTo(e - n, i);
t.bezierCurveTo(e - n, i + r * u, e - n * u, i + r, e, i + r);
t.bezierCurveTo(e + n * u, i + r, e + n, i + r * u, e + n, i);
t.bezierCurveTo(e + n, i - r * u, e + n * u, i - r, e, i - r);
t.bezierCurveTo(e - n * u, i - r, e - n, i - r * u, e - n, i);
t.close();
},
roundRect: function(t, e, i, n, r, a) {
if (a < .1) t.rect(e, i, n, r); else {
var o = s(a, .5 * l(n)) * c(n), h = s(a, .5 * l(r)) * c(r);
t.moveTo(e, i + h);
t.lineTo(e, i + r - h);
t.bezierCurveTo(e, i + r - h * (1 - u), e + o * (1 - u), i + r, e + o, i + r);
t.lineTo(e + n - o, i + r);
t.bezierCurveTo(e + n - o * (1 - u), i + r, e + n, i + r - h * (1 - u), e + n, i + r - h);
t.lineTo(e + n, i + h);
t.bezierCurveTo(e + n, i + h * (1 - u), e + n - o * (1 - u), i, e + n - o, i);
t.lineTo(e + o, i);
t.bezierCurveTo(e + o * (1 - u), i, e, i + h * (1 - u), e, i + h);
t.close();
}
},
tesselateBezier: function t(e, i, r, s, a, o, h, c, u, _, m) {
var f, d, p, g, y, v, x, A, b, T, C, w, S, E, D, M;
if (!(_ > 10)) {
y = .5 * (o + c);
v = .5 * (h + u);
x = .5 * ((f = .5 * (i + s)) + (p = .5 * (s + o)));
A = .5 * ((d = .5 * (r + a)) + (g = .5 * (a + h)));
if (((D = l((s - c) * (E = u - r) - (a - u) * (S = c - i))) + (M = l((o - c) * E - (h - u) * S))) * (D + M) < e._tessTol * (S * S + E * E)) e._addPoint(c, u, 0 === m ? m | n.PT_BEVEL : m); else {
t(e, i, r, f, d, x, A, C = .5 * (x + (b = .5 * (p + y))), w = .5 * (A + (T = .5 * (g + v))), _ + 1, 0);
t(e, C, w, b, T, y, v, c, u, _ + 1, m);
}
}
}
};
}), {
"./types": 105
} ],
104: [ (function(t, e, i) {
"use strict";
t("./graphics");
}), {
"./graphics": 102
} ],
105: [ (function(t, e, i) {
"use strict";
var n = cc.Enum({
BUTT: 0,
ROUND: 1,
SQUARE: 2
}), r = cc.Enum({
BEVEL: 0,
ROUND: 1,
MITER: 2
}), s = cc.Enum({
PT_CORNER: 1,
PT_LEFT: 2,
PT_BEVEL: 4,
PT_INNERBEVEL: 8
});
e.exports = {
LineCap: n,
LineJoin: r,
PointFlags: s
};
}), {} ],
106: [ (function(t, e, i) {
t("./platform");
t("./assets");
t("./CCNode");
t("./CCPrivateNode");
t("./CCScene");
t("./components");
t("./graphics");
t("./collider");
t("./collider/CCIntersection");
t("./physics");
t("./camera/CCCamera");
t("./utils/polyfill-3d");
t("./base-ui/CCWidgetManager");
}), {
"./CCNode": 28,
"./CCPrivateNode": 29,
"./CCScene": 30,
"./assets": 48,
"./base-ui/CCWidgetManager": 49,
"./camera/CCCamera": 50,
"./collider": 58,
"./collider/CCIntersection": 56,
"./components": 90,
"./graphics": 104,
"./physics": 137,
"./platform": 170,
"./utils/polyfill-3d": 233
} ],
107: [ (function(i, n, r) {
var s = i("../platform/js"), a = i("./pipeline"), o = i("./loading-items"), h = i("./asset-loader"), l = i("./downloader"), c = i("./loader"), u = i("./asset-table"), _ = i("../platform/utils").callInNextTick, m = i("./auto-release-utils"), f = new u();
var d = {
url: null,
raw: !1
};
function p(i) {
var n, r, s;
if ("object" === ("object" === (e = typeof i) ? t(i) : e)) {
r = i;
if (i.url) return r;
n = i.uuid;
} else {
r = {};
n = i;
}
s = r.type ? "uuid" === r.type : cc.AssetLibrary._uuidInSettings(n);
cc.AssetLibrary._getAssetInfoInRuntime(n, d);
r.url = s ? d.url : n;
if (d.url && "uuid" === r.type && d.raw) {
r.type = null;
r.isRawAsset = !0;
} else s || (r.isRawAsset = !0);
return r;
}
var g = [], y = [];
function v() {
var t = new h(), e = new l(), i = new c();
a.call(this, [ t, e, i ]);
this.assetLoader = t;
this.downloader = e;
this.loader = i;
this.onProgress = null;
this._autoReleaseSetting = s.createMap(!0);
0;
}
s.extend(v, a);
var x = v.prototype;
x.init = function(t) {};
x.getXMLHttpRequest = function() {
return window.XMLHttpRequest ? new window.XMLHttpRequest() : new ActiveXObject("MSXML2.XMLHTTP");
};
x.addDownloadHandlers = function(t) {
this.downloader.addHandlers(t);
};
x.addLoadHandlers = function(t) {
this.loader.addHandlers(t);
};
x.load = function(t, e, i) {
0;
if (void 0 === i) {
i = e;
e = this.onProgress || null;
}
var n, r = this, s = !1;
if (!(t instanceof Array)) {
s = !0;
t = t ? [ t ] : [];
}
g.length = 0;
for (var a = 0; a < t.length; ++a) {
var h = t[a];
if (h && h.id) {
cc.warnID(4920, h.id);
h.uuid || h.url || (h.url = h.id);
}
if ((n = p(h)).url || n.uuid) {
var l = this._cache[n.url];
g.push(l || n);
}
}
var c = o.create(this, e, (function(t, e) {
_((function() {
if (i) {
if (s) {
var a = n.url;
i.call(r, e.getError(a), e.getContent(a));
} else i.call(r, t, e);
i = null;
}
e.destroy();
}));
}));
o.initQueueDeps(c);
c.append(g);
g.length = 0;
};
x.flowInDeps = function(t, e, i) {
y.length = 0;
for (var n = 0; n < e.length; ++n) {
var r = p(e[n]);
if (r.url || r.uuid) {
var s = this._cache[r.url];
s ? y.push(s) : y.push(r);
}
}
var a = o.create(this, t ? function(t, e, i) {
this._ownerQueue && this._ownerQueue.onProgress && this._ownerQueue._childOnProgress(i);
} : null, (function(e, n) {
i(e, n);
t && t.deps && (t.deps.length = 0);
n.destroy();
}));
if (t) {
var h = o.getQueue(t);
a._ownerQueue = h._ownerQueue || h;
}
var l = a.append(y, t);
y.length = 0;
return l;
};
x._resources = f;
x._getResUuid = function(t, e, i) {
if (!t) return null;
var n = t.indexOf("?");
-1 !== n && (t = t.substr(0, n));
var r = f.getUuid(t, e);
if (!r) {
var s = cc.path.extname(t);
if (s) {
t = t.slice(0, -s.length);
(r = f.getUuid(t, e)) && !i && cc.warnID(4901, t, s);
}
}
return r;
};
x._getReferenceKey = function(i) {
var n;
"object" === ("object" === (e = typeof i) ? t(i) : e) ? n = i._uuid || null : "string" === ("object" === (e = typeof i) ? t(i) : e) && (n = this._getResUuid(i, null, !0) || i);
if (!n) {
cc.warnID(4800, i);
return n;
}
cc.AssetLibrary._getAssetInfoInRuntime(n, d);
return this._cache[d.url] ? d.url : n;
};
x._urlNotFound = function(t, e, i) {
_((function() {
t = cc.url.normalize(t);
var n = (e ? s.getClassName(e) : "Asset") + ' in "resources/' + t + '" does not exist.';
i && i(new Error(n), []);
}));
};
x._parseLoadResArgs = function(t, e, i) {
if (void 0 === i) {
var n = s.isChildClassOf(t, cc.RawAsset);
if (e) {
i = e;
n && (e = this.onProgress || null);
} else if (void 0 === e && !n) {
i = t;
e = this.onProgress || null;
t = null;
}
if (void 0 !== e && !n) {
e = t;
t = null;
}
}
return {
type: t,
onProgress: e,
onComplete: i
};
};
x.loadRes = function(t, e, i, n) {
var r = this._parseLoadResArgs(e, i, n);
e = r.type;
i = r.onProgress;
n = r.onComplete;
var s = this, a = s._getResUuid(t, e);
a ? this.load({
type: "uuid",
uuid: a
}, i, (function(t, e) {
e && s.setAutoReleaseRecursively(a, !1);
n && n(t, e);
})) : s._urlNotFound(t, e, n);
};
x._loadResUuids = function(t, e, i, n) {
if (t.length > 0) {
var r = this, s = t.map((function(t) {
return {
type: "uuid",
uuid: t
};
}));
this.load(s, e, (function(t, e) {
if (i) {
for (var a = [], o = n && [], h = 0; h < s.length; ++h) {
var l = s[h].uuid, c = this._getReferenceKey(l), u = e.getContent(c);
if (u) {
r.setAutoReleaseRecursively(l, !1);
a.push(u);
o && o.push(n[h]);
}
}
n ? i(t, a, o) : i(t, a);
}
}));
} else i && _((function() {
n ? i(null, [], []) : i(null, []);
}));
};
x.loadResArray = function(t, e, i, n) {
var r = this._parseLoadResArgs(e, i, n);
e = r.type;
i = r.onProgress;
n = r.onComplete;
for (var s = [], a = 0; a < t.length; a++) {
var o = t[a], h = this._getResUuid(o, e);
if (!h) {
this._urlNotFound(o, e, n);
return;
}
s.push(h);
}
this._loadResUuids(s, i, n);
};
x.loadResDir = function(t, e, i, n) {
var r = this._parseLoadResArgs(e, i, n);
e = r.type;
i = r.onProgress;
n = r.onComplete;
var s = [], a = f.getUuidArray(t, e, s);
this._loadResUuids(a, i, n, s);
};
x.getRes = function(t, e) {
var i = this._cache[t];
if (!i) {
var n = this._getResUuid(t, e, !0);
if (!n) return null;
var r = this._getReferenceKey(n);
i = this._cache[r];
}
i && i.alias && (i = i.alias);
return i && i.complete ? i.content : null;
};
x.getResCount = function() {
return Object.keys(this._cache).length;
};
x.getDependsRecursively = function(t) {
if (t) {
var e = this._getReferenceKey(t), i = m.getDependsRecursively(e);
i.push(e);
return i;
}
return [];
};
x.release = function(t) {
if (Array.isArray(t)) for (var e = 0; e < t.length; e++) {
var i = t[e];
this.release(i);
} else if (t) {
var n = this._getReferenceKey(t), r = this.getItem(n);
if (r) {
this.removeItem(n);
if ((t = r.content) instanceof cc.Asset) {
var s = t.nativeUrl;
s && this.release(s);
t.destroy();
}
0;
}
}
};
x.releaseAsset = function(t) {
var e = t._uuid;
e && this.release(e);
};
x.releaseRes = function(t, e) {
var i = this._getResUuid(t, e);
i ? this.release(i) : cc.errorID(4914, t);
};
x.releaseResDir = function(t, e) {
for (var i = f.getUuidArray(t, e), n = 0; n < i.length; n++) {
var r = i[n];
this.release(r);
}
};
x.releaseAll = function() {
for (var t in this._cache) this.release(t);
};
x.removeItem = function(t) {
var e = a.prototype.removeItem.call(this, t);
delete this._autoReleaseSetting[t];
return e;
};
x.setAutoRelease = function(t, e) {
var i = this._getReferenceKey(t);
i && (this._autoReleaseSetting[i] = !!e);
};
x.setAutoReleaseRecursively = function(t, e) {
e = !!e;
var i = this._getReferenceKey(t);
if (i) {
this._autoReleaseSetting[i] = e;
for (var n = m.getDependsRecursively(i), r = 0; r < n.length; r++) {
var s = n[r];
this._autoReleaseSetting[s] = e;
}
} else 0;
};
x.isAutoRelease = function(t) {
var e = this._getReferenceKey(t);
return !!e && !!this._autoReleaseSetting[e];
};
cc.loader = new v();
0;
n.exports = cc.loader;
}), {
"../platform/js": 173,
"../platform/utils": 177,
"./asset-loader": 108,
"./asset-table": 109,
"./auto-release-utils": 111,
"./downloader": 113,
"./loader": 115,
"./loading-items": 116,
"./pipeline": 119,
"./released-asset-checker": 120
} ],
108: [ (function(t, e, i) {
t("../utils/CCPath");
var n = t("../CCDebug"), r = t("./pipeline"), s = t("./loading-items"), a = "AssetLoader", o = function(t) {
this.id = a;
this.async = !0;
this.pipeline = null;
};
o.ID = a;
var h = [];
o.prototype.handle = function(t, e) {
var i = t.uuid;
if (!i) return t.content ? t.content : null;
cc.AssetLibrary.queryAssetInfo(i, (function(r, a, o) {
if (r) e(r); else {
t.url = t.rawUrl = a;
t.isRawAsset = o;
if (o) {
var l = cc.path.extname(a).toLowerCase();
if (!l) {
e(new Error(n.getError(4931, i, a)));
return;
}
l = l.substr(1);
var c = s.getQueue(t);
h[0] = {
queueId: t.queueId,
id: a,
url: a,
type: l,
error: null,
alias: t,
complete: !0
};
0;
c.append(h);
t.type = l;
e(null, t.content);
} else {
t.type = "uuid";
e(null, t.content);
}
}
}));
};
r.AssetLoader = e.exports = o;
}), {
"../CCDebug": 25,
"../utils/CCPath": 222,
"./loading-items": 116,
"./pipeline": 119
} ],
109: [ (function(t, e, i) {
var n = t("../utils/misc").pushToMap, r = t("../platform/js");
function s() {
this._pathToUuid = r.createMap(!0);
}
function a(t, e) {
if (t.length > e.length) {
var i = t.charCodeAt(e.length);
return 46 === i || 47 === i;
}
return !0;
}
var o = s.prototype;
o.getUuid = function(t, e) {
t = cc.url.normalize(t);
var i = this._pathToUuid[t];
if (i) if (Array.isArray(i)) {
if (!e) return i[0].uuid;
for (var n = 0; n < i.length; n++) {
var s = i[n];
if (r.isChildClassOf(s.type, e)) return s.uuid;
}
} else {
if (!e || r.isChildClassOf(i.type, e)) return i.uuid;
0;
}
return "";
};
o.getUuidArray = function(t, e, i) {
"/" === (t = cc.url.normalize(t))[t.length - 1] && (t = t.slice(0, -1));
var n = this._pathToUuid, s = [], o = r.isChildClassOf;
for (var h in n) if (h.startsWith(t) && a(h, t) || !t) {
var l = n[h];
if (Array.isArray(l)) for (var c = 0; c < l.length; c++) {
var u = l[c];
if (!e || o(u.type, e)) {
s.push(u.uuid);
i && i.push(h);
} else 0;
} else if (!e || o(l.type, e)) {
s.push(l.uuid);
i && i.push(h);
} else 0;
}
0;
return s;
};
o.add = function(t, e, i, r) {
t = t.substring(0, t.length - cc.path.extname(t).length);
var s = new function(t, e) {
this.uuid = t;
this.type = e;
}(e, i);
n(this._pathToUuid, t, s, r);
};
o._getInfo_DEBUG = !1;
o.reset = function() {
this._pathToUuid = r.createMap(!0);
};
e.exports = s;
}), {
"../platform/js": 173,
"../utils/misc": 231
} ],
110: [ (function(t, e, i) {
var n = t("../platform/CCSys"), r = t("../CCDebug"), s = n.__audioSupport, a = s.format, o = s.context;
function h(t, e) {
var i = document.createElement("audio");
i.src = t.url;
0;
var n = function() {
clearTimeout(r);
i.removeEventListener("canplaythrough", a, !1);
i.removeEventListener("error", o, !1);
s.USE_LOADER_EVENT && i.removeEventListener(s.USE_LOADER_EVENT, a, !1);
}, r = setTimeout((function() {
0 === i.readyState ? o() : a();
}), 8e3), a = function() {
n();
e(null, i);
}, o = function() {
n();
var i = "load audio failure - " + t.url;
cc.log(i);
e(i);
};
i.addEventListener("canplaythrough", a, !1);
i.addEventListener("error", o, !1);
s.USE_LOADER_EVENT && i.addEventListener(s.USE_LOADER_EVENT, a, !1);
}
function l(t, e) {
o || e(new Error(r.getError(4926)));
var i = cc.loader.getXMLHttpRequest();
i.open("GET", t.url, !0);
i.responseType = "arraybuffer";
i.onload = function() {
o.decodeAudioData(i.response, (function(t) {
e(null, t);
}), (function() {
e("decode error - " + t.id, null);
}));
};
i.onerror = function() {
e("request error - " + t.id, null);
};
i.send();
}
e.exports = function(t, e) {
if (0 === a.length) return new Error(r.getError(4927));
var i;
i = s.WEB_AUDIO ? t._owner instanceof cc.AudioClip ? t._owner.loadMode === cc.AudioClip.LoadMode.WEB_AUDIO ? l : h : t.urlParam && t.urlParam.useDom ? h : l : h;
i(t, e);
};
}), {
"../CCDebug": 25,
"../platform/CCSys": 162
} ],
111: [ (function(i, n, r) {
var s = i("../platform/js");
function a(t, e) {
var i = cc.loader.getItem(t);
if (i) {
var n = i.dependKeys;
if (n) for (var r = 0; r < n.length; r++) {
var s = n[r];
if (!e[s]) {
e[s] = !0;
a(s, e);
}
}
}
}
function o(t, e) {
if (t._uuid) {
var i = cc.loader._getReferenceKey(t);
if (!e[i]) {
e[i] = !0;
a(i, e);
}
}
}
function h(i, n) {
for (var r = Object.getOwnPropertyNames(i), s = 0; s < r.length; s++) {
var a = i[r[s]];
if ("object" === ("object" === (e = typeof a) ? t(a) : e) && a) if (Array.isArray(a)) for (var h = 0; h < a.length; h++) {
var l = a[h];
l instanceof cc.RawAsset && o(l, n);
} else if (a.constructor && a.constructor !== Object) a instanceof cc.RawAsset && o(a, n); else for (var c = Object.getOwnPropertyNames(a), u = 0; u < c.length; u++) {
var _ = a[c[u]];
_ instanceof cc.RawAsset && o(_, n);
}
}
}
function l(t, e) {
for (var i = 0; i < t._components.length; i++) h(t._components[i], e);
for (var n = 0; n < t._children.length; n++) l(t._children[n], e);
}
n.exports = {
autoRelease: function(t, e, i) {
var n = cc.loader._autoReleaseSetting, r = s.createMap();
if (e) for (var a = 0; a < e.length; a++) r[e[a]] = !0;
for (var o = 0; o < i.length; o++) l(i[o], r);
if (t) for (var h = 0; h < t.length; h++) {
var c = t[h];
!1 === n[c] || r[c] || cc.loader.release(c);
}
for (var u = Object.keys(n), _ = 0; _ < u.length; _++) {
var m = u[_];
!0 !== n[m] || r[m] || cc.loader.release(m);
}
},
getDependsRecursively: function(t) {
var e = {};
a(t, e);
return Object.keys(e);
}
};
}), {
"../platform/js": 173
} ],
112: [ (function(t, e, i) {
e.exports = function(t, e) {
var i = t.url, n = jsb.fileUtils.getDataFromFile(i);
return n || new Error("Download binary file failed: " + i);
};
}), {} ],
113: [ (function(t, e, i) {
var n = t("../platform/js"), r = t("../platform/CCSys"), s = t("../CCDebug");
t("../utils/CCPath");
var a, o = t("./pipeline"), h = t("./pack-downloader"), l = t("./binary-downloader"), c = t("./text-downloader"), u = t("./utils").urlAppendTimestamp;
function _(t, e, i, n) {
void 0 === i && (i = !0);
var r = u(t.url);
n = n || new Image();
i && "file:" !== window.location.protocol ? n.crossOrigin = "anonymous" : n.crossOrigin = null;
if (n.complete && n.naturalWidth > 0 && n.src === r) return n;
(function() {
function i() {
n.removeEventListener("load", i);
n.removeEventListener("error", a);
e(null, n);
}
function a() {
n.removeEventListener("load", i);
n.removeEventListener("error", a);
"https:" !== window.location.protocol && n.crossOrigin && "anonymous" === n.crossOrigin.toLowerCase() ? _(t, e, !1, n) : e(new Error(s.getError(4930, r)));
}
n.addEventListener("load", i);
n.addEventListener("error", a);
n.src = r;
})();
}
var m = {
".eot": "embedded-opentype",
".ttf": "truetype",
".ttc": "truetype",
".woff": "woff",
".svg": "svg"
};
function f(t, e, i) {
var n = document, r = document.createElement("style");
r.type = "text/css";
n.body.appendChild(r);
var s = "";
isNaN(t - 0) ? s += "@font-face { font-family:" + t + "; src:" : s += "@font-face { font-family:'" + t + "'; src:";
if (e instanceof Array) for (var a = 0, o = e.length; a < o; a++) {
var h = e[a];
i = cc.path.extname(h).toLowerCase();
s += "url('" + e[a] + "') format('" + m[i] + "')";
s += a === o - 1 ? ";" : ",";
} else {
i = i.toLowerCase();
s += "url('" + e + "') format('" + m[i] + "');";
}
r.textContent += s + "}";
var l = document.createElement("div"), c = l.style;
c.fontFamily = t;
l.innerHTML = ".";
c.position = "absolute";
c.left = "-100px";
c.top = "-100px";
n.body.appendChild(l);
}
function d(t, e) {
var i = t.url, n = t.type, r = t.name, s = t.srcs;
if (r && s) {
-1 === s.indexOf(i) && s.push(i);
f(r, s);
} else {
n = cc.path.extname(i);
f(r = cc.path.basename(i, n), i, n);
}
if (!document.fonts) return null;
document.fonts.load("1em " + r).then((function() {
e(null, null);
}), (function(t) {
e(t);
}));
}
var p = {
js: function(e, i, n) {
if (r.platform !== r.WECHAT_GAME) {
var a = e.url, o = document, h = document.createElement("script");
h.async = n;
h.src = u(a);
h.addEventListener("load", l, !1);
h.addEventListener("error", c, !1);
o.body.appendChild(h);
} else {
t(e.url);
i(null, e.url);
}
function l() {
h.parentNode.removeChild(h);
h.removeEventListener("load", l, !1);
h.removeEventListener("error", c, !1);
i(null, a);
}
function c() {
h.parentNode.removeChild(h);
h.removeEventListener("load", l, !1);
h.removeEventListener("error", c, !1);
i(new Error(s.getError(4928, a)));
}
},
png: _,
jpg: _,
bmp: _,
jpeg: _,
gif: _,
ico: _,
tiff: _,
webp: function(t, e, i, n) {
return cc.sys.capabilities.webp ? _(t, e, i, n) : new Error(s.getError(4929, t.url));
},
image: _,
mp3: a = t("./audio-downloader"),
ogg: a,
wav: a,
m4a: a,
txt: c,
xml: c,
vsh: c,
fsh: c,
atlas: c,
tmx: c,
tsx: c,
json: c,
ExportJson: c,
plist: c,
fnt: c,
font: d,
eot: d,
ttf: d,
woff: d,
svg: d,
ttc: d,
uuid: function(t, e) {
var i = h.load(t, e);
return void 0 === i ? this.extMap.json(t, e) : i || void 0;
},
binary: l,
default: c
}, g = "Downloader", y = function(t) {
this.id = g;
this.async = !0;
this.pipeline = null;
this._curConcurrent = 0;
this._loadQueue = [];
this.extMap = n.mixin(t, p);
};
y.ID = g;
y.PackDownloader = h;
y.prototype.addHandlers = function(t) {
n.mixin(this.extMap, t);
};
y.prototype._handleLoadQueue = function() {
for (;this._curConcurrent < cc.macro.DOWNLOAD_MAX_CONCURRENT; ) {
var t = this._loadQueue.shift();
if (!t) break;
var e = this.handle(t.item, t.callback);
void 0 !== e && (e instanceof Error ? t.callback(e) : t.callback(null, e));
}
};
y.prototype.handle = function(t, e) {
var i = this, n = this.extMap[t.type] || this.extMap.default, r = void 0;
if (this._curConcurrent < cc.macro.DOWNLOAD_MAX_CONCURRENT) {
this._curConcurrent++;
if (void 0 !== (r = n.call(this, t, (function(t, n) {
i._curConcurrent = Math.max(0, i._curConcurrent - 1);
i._handleLoadQueue();
e && e(t, n);
})))) {
this._curConcurrent = Math.max(0, this._curConcurrent - 1);
this._handleLoadQueue();
return r;
}
} else if (t.ignoreMaxConcurrency) {
if (void 0 !== (r = n.call(this, t, e))) return r;
} else this._loadQueue.push({
item: t,
callback: e
});
};
o.Downloader = e.exports = y;
}), {
"../CCDebug": 25,
"../platform/CCSys": 162,
"../platform/js": 173,
"../utils/CCPath": 222,
"./audio-downloader": 110,
"./binary-downloader": 112,
"./pack-downloader": 118,
"./pipeline": 119,
"./text-downloader": 121,
"./utils": 123
} ],
114: [ (function(t, e, i) {
t("./downloader");
t("./loader");
t("./loading-items");
t("./pipeline");
t("./CCLoader");
}), {
"./CCLoader": 107,
"./downloader": 113,
"./loader": 115,
"./loading-items": 116,
"./pipeline": 119
} ],
115: [ (function(i, n, r) {
var s = i("../platform/js"), a = (i("../platform/CCSys"), i("./pipeline")), o = i("../assets/CCTexture2D"), h = i("./uuid-loader");
function l(i, n) {
if ("string" !== ("object" === (e = typeof i.content) ? t(i.content) : e)) return new Error("JSON Loader: Input item doesn't contain string content");
try {
return JSON.parse(i.content);
} catch (t) {
return new Error("JSON Loader: Parse json [" + i.id + "] failed : " + t);
}
}
function c(t, e) {
if (t._owner instanceof cc.Asset) return null;
var i = t.content;
if (!(i instanceof Image)) return new Error("Image Loader: Input item doesn't contain Image content");
var n = t.rawUrl, r = t.texture || new o();
r._uuid = t.uuid;
r.url = n;
r._setRawAsset(n, !1);
r._nativeAsset = i;
return r;
}
function u(t, e) {
if (t._owner instanceof cc.Asset) return null;
var i = new cc.AudioClip();
i._setRawAsset(t.rawUrl, !1);
i._nativeAsset = t.content;
return i;
}
var _ = {
png: c,
jpg: c,
bmp: c,
jpeg: c,
gif: c,
ico: c,
tiff: c,
webp: c,
image: c,
mp3: u,
ogg: u,
wav: u,
m4a: u,
json: l,
ExportJson: l,
plist: function(i, n) {
if ("string" !== ("object" == (e = typeof i.content) ? t(i.content) : e)) return new Error("Plist Loader: Input item doesn't contain string content");
var r = cc.plistParser.parse(i.content);
return r || new Error("Plist Loader: Parse [" + i.id + "] failed");
},
uuid: h,
prefab: h,
fire: h,
scene: h,
binary: function(t, e) {
return t.load ? t.load(t.content) : null;
},
default: function(t, e) {
return null;
}
}, m = function(t) {
this.id = "Loader";
this.async = !0;
this.pipeline = null;
this.extMap = s.mixin(t, _);
};
m.ID = "Loader";
m.prototype.addHandlers = function(t) {
this.extMap = s.mixin(this.extMap, t);
};
m.prototype.handle = function(t, e) {
return (this.extMap[t.type] || this.extMap.default).call(this, t, e);
};
a.Loader = n.exports = m;
}), {
"../assets/CCTexture2D": 47,
"../platform/CCSys": 162,
"../platform/js": 173,
"./pipeline": 119,
"./uuid-loader": 124
} ],
116: [ (function(i, n, r) {
var s = i("../platform/callbacks-invoker");
i("../utils/CCPath");
var a = i("../platform/js"), o = 0 | 998 * Math.random(), h = a.createMap(!0), l = [], c = {
WORKING: 1,
COMPLETE: 2,
ERROR: 3
}, u = a.createMap(!0);
function _(i) {
var n = i.url || i;
return "string" === ("object" === (e = typeof n) ? t(n) : e);
}
function m(i, n) {
var r = "object" === ("object" === (e = typeof i) ? t(i) : e) ? i.url : i, s = {
queueId: n,
id: r,
url: r,
rawUrl: void 0,
urlParam: (function(t) {
if (t) {
var e = t.split("?");
if (e && e[0] && e[1]) {
var i = {};
e[1].split("&").forEach((function(t) {
var e = t.split("=");
i[e[0]] = e[1];
}));
return i;
}
}
})(r),
type: "",
error: null,
content: null,
complete: !1,
states: {},
deps: null
};
if ("object" === ("object" === (e = typeof i) ? t(i) : e)) {
a.mixin(s, i);
if (i.skips) for (var o = 0; o < i.skips.length; o++) {
var h = i.skips[o];
s.states[h] = c.COMPLETE;
}
}
s.rawUrl = s.url;
r && !s.type && (s.type = cc.path.extname(r).toLowerCase().substr(1));
return s;
}
var f = [];
function d(t, e, i) {
if (!t || !e) return !1;
var n = !1;
f.push(e.id);
if (e.deps) {
var r, s, a = e.deps;
for (r = 0; r < a.length; r++) {
if ((s = a[r]).id === t.id) {
n = !0;
break;
}
if (!(f.indexOf(s.id) >= 0) && (s.deps && d(t, s, !0))) {
n = !0;
break;
}
}
}
i || (f.length = 0);
return n;
}
var p = function(t, e, i, n) {
s.call(this);
this._id = ++o;
h[this._id] = this;
this._pipeline = t;
this._errorUrls = [];
this._appending = !1;
this._ownerQueue = null;
this.onProgress = i;
this.onComplete = n;
this.map = a.createMap(!0);
this.completed = {};
this.totalCount = 0;
this.completedCount = 0;
this._pipeline ? this.active = !0 : this.active = !1;
e && (e.length > 0 ? this.append(e) : this.allComplete());
};
p.ItemState = new cc.Enum(c);
p.create = function(i, n, r, s) {
if (void 0 === r) {
if ("function" === ("object" === (e = typeof n) ? t(n) : e)) {
s = n;
n = r = null;
}
} else if (void 0 === s) if ("function" === ("object" === (e = typeof n) ? t(n) : e)) {
s = r;
r = n;
n = null;
} else {
s = r;
r = null;
}
var a = l.pop();
if (a) {
a._pipeline = i;
a.onProgress = r;
a.onComplete = s;
h[a._id] = a;
a._pipeline && (a.active = !0);
n && a.append(n);
} else a = new p(i, n, r, s);
return a;
};
p.getQueue = function(t) {
return t.queueId ? h[t.queueId] : null;
};
p.itemComplete = function(t) {
var e = h[t.queueId];
e && e.itemComplete(t.id);
};
p.initQueueDeps = function(t) {
var e = u[t._id];
if (e) {
e.completed.length = 0;
e.deps.length = 0;
} else e = u[t._id] = {
completed: [],
deps: []
};
};
p.registerQueueDep = function(t, e) {
var i = t.queueId || t;
if (!i) return !1;
var n = u[i];
if (n) -1 === n.deps.indexOf(e) && n.deps.push(e); else if (t.id) for (var r in u) {
var s = u[r];
-1 !== s.deps.indexOf(t.id) && -1 === s.deps.indexOf(e) && s.deps.push(e);
}
};
p.finishDep = function(t) {
for (var e in u) {
var i = u[e];
-1 !== i.deps.indexOf(t) && -1 === i.completed.indexOf(t) && i.completed.push(t);
}
};
var g = p.prototype;
a.mixin(g, s.prototype);
g.append = function(t, e) {
if (!this.active) return [];
e && !e.deps && (e.deps = []);
this._appending = !0;
var i, n, r, s = [];
for (i = 0; i < t.length; ++i) if (!(n = t[i]).queueId || this.map[n.id]) {
if (_(n)) {
var a = (r = m(n, this._id)).id;
if (!this.map[a]) {
this.map[a] = r;
this.totalCount++;
e && e.deps.push(r);
p.registerQueueDep(e || this._id, a);
s.push(r);
}
}
} else {
this.map[n.id] = n;
e && e.deps.push(n);
if (n.complete || d(e, n)) {
this.totalCount++;
this.itemComplete(n.id);
continue;
}
var o = this, l = h[n.queueId];
if (l) {
this.totalCount++;
p.registerQueueDep(e || this._id, n.id);
l.addListener(n.id, (function(t) {
o.itemComplete(t.id);
}));
}
}
this._appending = !1;
this.completedCount === this.totalCount ? this.allComplete() : this._pipeline.flowIn(s);
return s;
};
g._childOnProgress = function(t) {
if (this.onProgress) {
var e = u[this._id];
this.onProgress(e ? e.completed.length : this.completedCount, e ? e.deps.length : this.totalCount, t);
}
};
g.allComplete = function() {
var t = 0 === this._errorUrls.length ? null : this._errorUrls;
this.onComplete && this.onComplete(t, this);
};
g.isCompleted = function() {
return this.completedCount >= this.totalCount;
};
g.isItemCompleted = function(t) {
return !!this.completed[t];
};
g.exists = function(t) {
return !!this.map[t];
};
g.getContent = function(t) {
var e = this.map[t], i = null;
e && (e.content ? i = e.content : e.alias && (i = e.alias.content));
return i;
};
g.getError = function(t) {
var e = this.map[t], i = null;
e && (e.error ? i = e.error : e.alias && (i = e.alias.error));
return i;
};
g.addListener = s.prototype.add;
g.hasListener = s.prototype.has;
g.removeListener = s.prototype.remove;
g.removeAllListeners = s.prototype.removeAll;
g.removeItem = function(t) {
var e = this.map[t];
if (e && this.completed[e.alias || t]) {
delete this.completed[t];
delete this.map[t];
if (e.alias) {
delete this.completed[e.alias.id];
delete this.map[e.alias.id];
}
this.completedCount--;
this.totalCount--;
}
};
g.itemComplete = function(t) {
var e = this.map[t];
if (e) {
var i = this._errorUrls.indexOf(t);
e.error && -1 === i ? this._errorUrls.push(t) : e.error || -1 === i || this._errorUrls.splice(i, 1);
this.completed[t] = e;
this.completedCount++;
p.finishDep(e.id);
if (this.onProgress) {
var n = u[this._id];
this.onProgress(n ? n.completed.length : this.completedCount, n ? n.deps.length : this.totalCount, e);
}
this.invoke(t, e);
this.removeAll(t);
!this._appending && this.completedCount >= this.totalCount && this.allComplete();
}
};
g.destroy = function() {
this.active = !1;
this._appending = !1;
this._pipeline = null;
this._ownerQueue = null;
this._errorUrls.length = 0;
this.onProgress = null;
this.onComplete = null;
this.map = a.createMap(!0);
this.completed = {};
this.totalCount = 0;
this.completedCount = 0;
s.call(this);
h[this._id] = null;
if (u[this._id]) {
u[this._id].completed.length = 0;
u[this._id].deps.length = 0;
}
-1 === l.indexOf(this) && l.length < 10 && l.push(this);
};
cc.LoadingItems = n.exports = p;
}), {
"../platform/callbacks-invoker": 166,
"../platform/js": 173,
"../utils/CCPath": 222
} ],
117: [ (function(t, e, i) {
var n = t("./pipeline"), r = /(\.[^.\n\\/]*)$/, s = function(t, e, i) {
this.id = "MD5Pipe";
this.async = !1;
this.pipeline = null;
this.md5AssetsMap = t;
this.libraryBase = e;
this.rawAssetsBase = i;
};
s.ID = "MD5Pipe";
s.prototype.handle = function(t) {
t.url = this.transformURL(t.url);
return t;
};
s.prototype.transformURL = function(t, e) {
var i = t.indexOf("?"), n = t;
-1 !== i && (n = t.substr(0, i));
if (n.startsWith(this.libraryBase)) n = n.slice(this.libraryBase.length); else {
if (!n.startsWith(this.rawAssetsBase)) return t;
n = n.slice(this.rawAssetsBase.length);
}
var s = this.md5AssetsMap[n];
if (s) if (e) {
var a = cc.path.dirname(t), o = cc.path.basename(t);
t = a + "." + s + "/" + o;
} else {
var h = !1;
t = t.replace(r, (function(t, e) {
h = !0;
return "." + s + e;
}));
h || (t = t + "." + s);
}
return t;
};
n.MD5Pipe = e.exports = s;
}), {
"./pipeline": 119
} ],
118: [ (function(i, n, r) {
var s = i("./unpackers"), a = i("../utils/misc").pushToMap, o = {
Invalid: 0,
Removed: 1,
Downloading: 2,
Loaded: 3
};
function h() {
this.unpacker = null;
this.state = o.Invalid;
}
var l = {}, c = {}, u = {};
function _(t, e) {
return new Error("Can not retrieve " + t + " from packer " + e);
}
n.exports = {
initPacks: function(t) {
c = t;
for (var e in t) for (var i = t[e], n = 0; n < i.length; n++) {
var r = i[n], s = 1 === i.length;
a(l, r, e, s);
}
},
_loadNewPack: function(t, e, i) {
var n = this, r = cc.AssetLibrary.getLibUrlNoExt(e) + ".json";
cc.loader.load({
url: r,
ignoreMaxConcurrency: !0
}, (function(r, s) {
if (r) {
cc.errorID(4916, t);
return i(r);
}
var a = n._doLoadNewPack(t, e, s);
a ? i(null, a) : i(_(t, e));
}));
},
_doPreload: function(t, e) {
var i = u[t];
i || ((i = u[t] = new h()).state = o.Downloading);
if (i.state !== o.Loaded) {
i.unpacker = new s.JsonUnpacker();
i.unpacker.load(c[t], e);
i.state = o.Loaded;
}
},
_doLoadNewPack: function(i, n, r) {
var a = u[n];
if (a.state !== o.Loaded) {
"string" === ("object" === (e = typeof r) ? t(r) : e) && (r = JSON.parse(r));
Array.isArray(r) ? a.unpacker = new s.JsonUnpacker() : r.type === s.TextureUnpacker.ID && (a.unpacker = new s.TextureUnpacker());
a.unpacker.load(c[n], r);
a.state = o.Loaded;
}
return a.unpacker.retrieve(i);
},
_selectLoadedPack: function(t) {
for (var e = o.Invalid, i = "", n = 0; n < t.length; n++) {
var r = t[n], s = u[r];
if (s) {
var a = s.state;
if (a === o.Loaded) return r;
if (a > e) {
e = a;
i = r;
}
}
}
return e !== o.Invalid ? i : t[0];
},
load: function(t, e) {
var i = t.uuid, n = l[i];
if (n) {
Array.isArray(n) && (n = this._selectLoadedPack(n));
var r = u[n];
if (r && r.state === o.Loaded) {
var s = r.unpacker.retrieve(i);
return s || _(i, n);
}
if (!r) {
console.log("Create unpacker %s for %s", n, i);
(r = u[n] = new h()).state = o.Downloading;
}
this._loadNewPack(i, n, e);
return null;
}
}
};
0;
}), {
"../utils/misc": 231,
"./unpackers": 122
} ],
119: [ (function(t, e, i) {
var n = t("../platform/js"), r = t("./loading-items"), s = r.ItemState;
function a(t, e) {
var i = t.id, n = e.states[i], r = t.next, o = t.pipeline;
if (!e.error && n !== s.WORKING && n !== s.ERROR) if (n === s.COMPLETE) r ? a(r, e) : o.flowOut(e); else {
e.states[i] = s.WORKING;
var h = t.handle(e, (function(t, n) {
if (t) {
e.error = t;
e.states[i] = s.ERROR;
o.flowOut(e);
} else {
n && (e.content = n);
e.states[i] = s.COMPLETE;
r ? a(r, e) : o.flowOut(e);
}
}));
if (h instanceof Error) {
e.error = h;
e.states[i] = s.ERROR;
o.flowOut(e);
} else if (void 0 !== h) {
null !== h && (e.content = h);
e.states[i] = s.COMPLETE;
r ? a(r, e) : o.flowOut(e);
}
}
}
var o = function(t) {
this._pipes = t;
this._cache = n.createMap(!0);
for (var e = 0; e < t.length; ++e) {
var i = t[e];
if (i.handle && i.id) {
i.pipeline = this;
i.next = e < t.length - 1 ? t[e + 1] : null;
}
}
};
o.ItemState = s;
var h = o.prototype;
h.insertPipe = function(t, e) {
if (!t.handle || !t.id || e > this._pipes.length) cc.warnID(4921); else if (this._pipes.indexOf(t) > 0) cc.warnID(4922); else {
t.pipeline = this;
var i = null;
e < this._pipes.length && (i = this._pipes[e]);
var n = null;
e > 0 && (n = this._pipes[e - 1]);
n && (n.next = t);
t.next = i;
this._pipes.splice(e, 0, t);
}
};
h.insertPipeAfter = function(t, e) {
var i = this._pipes.indexOf(t);
i < 0 || this.insertPipe(e, i + 1);
};
h.appendPipe = function(t) {
if (t.handle && t.id) {
t.pipeline = this;
t.next = null;
this._pipes.length > 0 && (this._pipes[this._pipes.length - 1].next = t);
this._pipes.push(t);
}
};
h.flowIn = function(t) {
var e, i, n = this._pipes[0];
if (n) {
for (e = 0; e < t.length; e++) {
i = t[e];
this._cache[i.id] = i;
}
for (e = 0; e < t.length; e++) a(n, i = t[e]);
} else for (e = 0; e < t.length; e++) this.flowOut(t[e]);
};
h.flowInDeps = function(t, e, i) {
return r.create(this, (function(t, e) {
i(t, e);
e.destroy();
})).append(e, t);
};
h.flowOut = function(t) {
t.error ? delete this._cache[t.id] : this._cache[t.id] || (this._cache[t.id] = t);
t.complete = !0;
r.itemComplete(t);
};
h.copyItemStates = function(t, e) {
if (e instanceof Array) for (var i = 0; i < e.length; ++i) e[i].states = t.states; else e.states = t.states;
};
h.getItem = function(t) {
var e = this._cache[t];
if (!e) return e;
e.alias && (e = e.alias);
return e;
};
h.removeItem = function(t) {
var e = this._cache[t];
e && e.complete && delete this._cache[t];
return e;
};
h.clear = function() {
for (var t in this._cache) {
var e = this._cache[t];
delete this._cache[t];
if (!e.complete) {
e.error = new Error("Canceled manually");
this.flowOut(e);
}
}
};
cc.Pipeline = e.exports = o;
}), {
"../platform/js": 173,
"./loading-items": 116
} ],
120: [ (function(t, e, i) {}), {
"../platform/js": 173
} ],
121: [ (function(i, n, r) {
i("../platform/CCSys");
n.exports = function(i, n) {
var r = i.url, s = jsb.fileUtils.getStringFromFile(r);
return "string" === ("object" === (e = typeof s) ? t(s) : e) && s ? s : new Error("Download text failed: " + r);
};
}), {
"../platform/CCSys": 162,
"./utils": 123
} ],
122: [ (function(t, e, i) {
var n = t("../assets/CCTexture2D"), r = t("../platform/js");
function s() {
this.jsons = {};
}
s.prototype.load = function(t, e) {
e.length !== t.length && cc.errorID(4915);
for (var i = 0; i < t.length; i++) {
var n = t[i], r = e[i];
this.jsons[n] = r;
}
};
s.prototype.retrieve = function(t) {
return this.jsons[t] || null;
};
function a() {
this.contents = {};
}
a.ID = r._getClassId(n);
a.prototype.load = function(t, e) {
var i = e.data.split("|");
i.length !== t.length && cc.errorID(4915);
for (var n = 0; n < t.length; n++) this.contents[t[n]] = i[n];
};
a.prototype.retrieve = function(t) {
var e = this.contents[t];
return e ? {
__type__: a.ID,
content: e
} : null;
};
0;
e.exports = {
JsonUnpacker: s,
TextureUnpacker: a
};
}), {
"../assets/CCTexture2D": 47,
"../platform/js": 173
} ],
123: [ (function(i, n, r) {
var s = /\?/;
n.exports = {
urlAppendTimestamp: function(i) {
cc.game.config.noCache && "string" === ("object" === (e = typeof i) ? t(i) : e) && (s.test(i) ? i += "&_t=" + (new Date() - 0) : i += "?_t=" + (new Date() - 0));
return i;
}
};
}), {} ],
124: [ (function(i, n, r) {
var s = i("../platform/js"), a = i("../CCDebug");
i("../platform/deserialize");
var o = i("./loading-items");
function h(t) {
return t && (t[0] && "cc.Scene" === t[0].__type__ || t[1] && "cc.Scene" === t[1].__type__ || t[0] && "cc.Prefab" === t[0].__type__);
}
function l(i, n) {
0;
var r, l;
if ("string" === ("object" === (e = typeof i.content) ? t(i.content) : e)) try {
r = JSON.parse(i.content);
} catch (t) {
return new Error(a.getError(4923, i.id, t.stack));
} else {
if ("object" !== ("object" === (e = typeof i.content) ? t(i.content) : e)) return new Error(a.getError(4924));
r = i.content;
}
var c = h(r);
l = c ? cc._MissingScript.safeFindClass : function(t) {
var e = s._getClassById(t);
if (e) return e;
cc.warnID(4903, t);
return Object;
};
var u, _ = cc.deserialize.Details.pool.get();
try {
u = cc.deserialize(r, _, {
classFinder: l,
target: i.existingAsset,
customEnv: i
});
} catch (t) {
cc.deserialize.Details.pool.put(_);
var m = t + "\n" + t.stack;
return new Error(a.getError(4925, i.id, m));
}
u._uuid = i.uuid;
0;
var f = (function(t, e, i, n) {
var r, s, a, o = i.uuidList, h = i.uuidObjList, l = i.uuidPropList, c = i._stillUseUrl, u = t.dependKeys = [];
if (n) {
r = [];
for (s = 0; s < o.length; s++) {
a = o[s];
var _ = h[s], m = l[s], f = cc.AssetLibrary._getAssetInfoInRuntime(a);
if (f.raw) {
var d = f.url;
_[m] = d;
u.push(d);
} else r.push({
type: "uuid",
uuid: a,
deferredLoadRaw: !0,
_owner: _,
_ownerProp: m,
_stillUseUrl: c[s]
});
}
} else {
r = new Array(o.length);
for (s = 0; s < o.length; s++) {
a = o[s];
r[s] = {
type: "uuid",
uuid: a,
_owner: h[s],
_ownerProp: l[s],
_stillUseUrl: c[s]
};
}
e._native && !e.constructor.preventPreloadNativeObject && r.push({
url: e.nativeUrl,
_owner: e,
_ownerProp: "_nativeAsset"
});
}
return r;
})(i, u, _, (function(t, e, i) {
var n = e.deferredLoadRaw;
n ? t instanceof cc.Asset && t.constructor.preventDeferredLoadDependents && (n = !1) : i && (t instanceof cc.SceneAsset || t instanceof cc.Prefab) && (n = t.asyncLoadAssets);
return n;
})(u, i, c));
cc.deserialize.Details.pool.put(_);
if (0 === f.length) return n(null, u);
(function(t, e, i, n, r) {
e.content = i;
var s = e.dependKeys;
t.flowInDeps(e, n, (function(t, e) {
var a, h = e.map;
for (var l in h) (a = h[l]).uuid && a.content && (a.content._uuid = a.uuid);
for (var c = 0; c < n.length; c++) {
var u = n[c], _ = u.uuid, m = u.url;
u._owner, u._ownerProp;
if (a = h[m]) {
var f = u;
if (a.complete || a.content) a.error ? cc._throw(a.error) : g.call(f, a); else {
var d = o.getQueue(a), p = d._callbackTable[_];
p ? p.unshift(g, f) : d.addListener(_, g, f);
}
}
function g(t) {
var e = t.content;
this._stillUseUrl && (e = e && cc.RawAsset.wasRawAssetType(e.constructor) ? e.nativeUrl : t.rawUrl);
this._owner[this._ownerProp] = e;
t.uuid !== i._uuid && s.indexOf(t.id) < 0 && s.push(t.id);
}
}
r(null, i);
}));
})(this.pipeline, i, u, f, n);
}
n.exports = l;
l.isSceneObj = h;
}), {
"../CCDebug": 25,
"../platform/deserialize": 168,
"../platform/js": 173,
"./loading-items": 116
} ],
125: [ (function(t, e, i) {
var n = t("./component-scheduler"), r = t("./platform/CCObject").Flags, s = t("./platform/js"), a = r.IsPreloadStarted, o = r.IsOnLoadStarted, h = r.IsOnLoadCalled, l = r.Deactivating, c = function(t) {
t.__preload();
}, u = function(t) {
t.onLoad();
t._objFlags |= h;
}, _ = cc.Class({
extends: n.LifeCycleInvoker,
add: function(t) {
this._zero.array.push(t);
},
remove: function(t) {
this._zero.fastRemove(t);
},
cancelInactive: function(t) {
n.LifeCycleInvoker.stableRemoveInactive(this._zero, t);
},
invoke: function() {
this._invoke(this._zero);
this._zero.array.length = 0;
}
}), m = n.createInvokeImpl(c), f = n.createInvokeImpl(u), d = new s.Pool(4);
d.get = function() {
var t = this._get() || {
preload: new _(m),
onLoad: new n.OneOffInvoker(f),
onEnable: new n.OneOffInvoker(n.invokeOnEnable)
};
t.preload._zero.i = -1;
var e = t.onLoad;
e._zero.i = -1;
e._neg.i = -1;
e._pos.i = -1;
(e = t.onEnable)._zero.i = -1;
e._neg.i = -1;
e._pos.i = -1;
return t;
};
function p(t, e, i) {
0;
e ? t._removeComponent(e) : s.array.removeAt(t._components, i);
}
function g() {
this._activatingStack = [];
}
var y = cc.Class({
ctor: g,
reset: g,
_activateNodeRecursively: function(t, e, i, n) {
if (t._objFlags & l) cc.errorID(3816, t.name); else {
t._activeInHierarchy = !0;
for (var r = t._components.length, s = 0; s < r; ++s) {
var a = t._components[s];
if (a instanceof cc.Component) this.activateComp(a, e, i, n); else {
p(t, a, s);
--s;
--r;
}
}
for (var o = 0, h = t._children.length; o < h; ++o) {
var c = t._children[o];
c._active && this._activateNodeRecursively(c, e, i, n);
}
t._onPostActivated(!0);
}
},
_deactivateNodeRecursively: function(t) {
0;
t._objFlags |= l;
t._activeInHierarchy = !1;
for (var e = t._components.length, i = 0; i < e; ++i) {
var n = t._components[i];
if (n._enabled) {
cc.director._compScheduler.disableComp(n);
if (t._activeInHierarchy) {
t._objFlags &= ~l;
return;
}
}
}
for (var r = 0, s = t._children.length; r < s; ++r) {
var a = t._children[r];
if (a._activeInHierarchy) {
this._deactivateNodeRecursively(a);
if (t._activeInHierarchy) {
t._objFlags &= ~l;
return;
}
}
}
t._onPostActivated(!1);
t._objFlags &= ~l;
},
activateNode: function(t, e) {
if (e) {
var i = d.get();
this._activatingStack.push(i);
this._activateNodeRecursively(t, i.preload, i.onLoad, i.onEnable);
i.preload.invoke();
i.onLoad.invoke();
i.onEnable.invoke();
this._activatingStack.pop();
d.put(i);
} else {
this._deactivateNodeRecursively(t);
for (var n = this._activatingStack, r = 0; r < n.length; r++) {
var s = n[r];
s.preload.cancelInactive(a);
s.onLoad.cancelInactive(o);
s.onEnable.cancelInactive();
}
}
t.emit("active-in-hierarchy-changed", t);
},
activateComp: function(t, e, i, n) {
if (!(t._objFlags & a)) {
t._objFlags |= a;
t.__preload && (e ? e.add(t) : t.__preload());
}
if (!(t._objFlags & o)) {
t._objFlags |= o;
if (t.onLoad) if (i) i.add(t); else {
t.onLoad();
t._objFlags |= h;
} else t._objFlags |= h;
}
if (t._enabled) {
if (!t.node._activeInHierarchy) return;
cc.director._compScheduler.enableComp(t, n);
}
},
destroyComp: function(t) {
cc.director._compScheduler.disableComp(t);
t.onDestroy && t._objFlags & h && t.onDestroy();
},
resetComp: !1
});
e.exports = y;
}), {
"./component-scheduler": 59,
"./platform/CCObject": 159,
"./platform/js": 173,
"./utils/misc": 231
} ],
126: [ (function(t, e, i) {
var n = t("./CCPhysicsTypes").PTM_RATIO, r = t("./CCPhysicsTypes").ContactType, s = [], a = [ cc.v2(), cc.v2() ], o = new b2.WorldManifold(), h = {
points: [],
separations: [],
normal: cc.v2()
};
function l() {
this.localPoint = cc.v2();
this.normalImpulse = 0;
this.tangentImpulse = 0;
}
var c = [ new l(), new l() ], u = (new b2.Manifold(), {
type: 0,
localPoint: cc.v2(),
localNormal: cc.v2(),
points: []
}), _ = {
normalImpulses: [],
tangentImpulses: []
};
function m() {}
m.prototype.init = function(t) {
this.colliderA = t.GetFixtureA().collider;
this.colliderB = t.GetFixtureB().collider;
this.disabled = !1;
this.disabledOnce = !1;
this._impulse = null;
this._inverted = !1;
this._b2contact = t;
t._contact = this;
};
m.prototype.reset = function() {
this.colliderA = null;
this.colliderB = null;
this.disabled = !1;
this._impulse = null;
this._b2contact._contact = null;
this._b2contact = null;
};
m.prototype.getWorldManifold = function() {
var t = h.points, e = h.separations, i = h.normal;
this._b2contact.GetWorldManifold(o);
var r = o.points, s = o.separations, l = this._b2contact.GetManifold().pointCount;
t.length = e.length = l;
for (var c = 0; c < l; c++) {
var u = a[c];
u.x = r[c].x * n;
u.y = r[c].y * n;
t[c] = u;
e[c] = s[c] * n;
}
i.x = o.normal.x;
i.y = o.normal.y;
if (this._inverted) {
i.x *= -1;
i.y *= -1;
}
return h;
};
m.prototype.getManifold = function() {
for (var t = u.points, e = u.localNormal, i = u.localPoint, r = this._b2contact.GetManifold(), s = r.points, a = t.length = r.pointCount, o = 0; o < a; o++) {
var h = c[o], l = s[o];
h.localPoint.x = l.localPoint.x * n;
h.localPoint.Y = l.localPoint.Y * n;
h.normalImpulse = l.normalImpulse * n;
h.tangentImpulse = l.tangentImpulse;
t[o] = h;
}
i.x = r.localPoint.x * n;
i.y = r.localPoint.y * n;
e.x = r.localNormal.x;
e.y = r.localNormal.y;
u.type = r.type;
if (this._inverted) {
e.x *= -1;
e.y *= -1;
}
return u;
};
m.prototype.getImpulse = function() {
var t = this._impulse;
if (!t) return null;
for (var e = _.normalImpulses, i = _.tangentImpulses, r = t.count, s = 0; s < r; s++) {
e[s] = t.normalImpulses[s] * n;
i[s] = t.tangentImpulses[s];
}
i.length = e.length = r;
return _;
};
m.prototype.emit = function(t) {
var e;
switch (t) {
case r.BEGIN_CONTACT:
e = "onBeginContact";
break;

case r.END_CONTACT:
e = "onEndContact";
break;

case r.PRE_SOLVE:
e = "onPreSolve";
break;

case r.POST_SOLVE:
e = "onPostSolve";
}
var i, n, s, a, o = this.colliderA, h = this.colliderB, l = o.body, c = h.body;
if (l.enabledContactListener) {
i = l.node._components;
this._inverted = !1;
for (n = 0, s = i.length; n < s; n++) (a = i[n])[e] && a[e](this, o, h);
}
if (c.enabledContactListener) {
i = c.node._components;
this._inverted = !0;
for (n = 0, s = i.length; n < s; n++) (a = i[n])[e] && a[e](this, h, o);
}
if (this.disabled || this.disabledOnce) {
this.setEnabled(!1);
this.disabledOnce = !1;
}
};
m.get = function(t) {
var e;
(e = 0 === s.length ? new cc.PhysicsContact() : s.pop()).init(t);
return e;
};
m.put = function(t) {
var e = t._contact;
if (e) {
s.push(e);
e.reset();
}
};
var f = m.prototype;
f.setEnabled = function(t) {
this._b2contact.SetEnabled(t);
};
f.isTouching = function() {
return this._b2contact.IsTouching();
};
f.setTangentSpeed = function(t) {
this._b2contact.SetTangentSpeed(t / n);
};
f.getTangentSpeed = function() {
return this._b2contact.GetTangentSpeed() * n;
};
f.setFriction = function(t) {
this._b2contact.SetFriction(t);
};
f.getFriction = function() {
return this._b2contact.GetFriction();
};
f.resetFriction = function() {
return this._b2contact.ResetFriction();
};
f.setRestitution = function(t) {
this._b2contact.SetRestitution(t);
};
f.getRestitution = function() {
return this._b2contact.GetRestitution();
};
f.resetRestitution = function() {
return this._b2contact.ResetRestitution();
};
m.ContactType = r;
cc.PhysicsContact = e.exports = m;
}), {
"./CCPhysicsTypes": 129
} ],
127: [ (function(t, e, i) {
var n = t("./CCPhysicsTypes"), r = n.BodyType, s = n.DrawBits, a = n.PTM_RATIO, o = cc.vmath, h = o.mat4, l = o.vec2, c = cc.color(127, 127, 76, 150), u = cc.color(127, 229, 127, 150), _ = cc.color(127, 127, 229, 150), m = cc.color(153, 153, 153, 150), f = cc.color(229, 178, 178, 150), d = cc.color(127, 204, 204, 150), p = cc.color(229, 77, 229, 255), g = cc.v2(), y = cc.v2(), v = h.create();
cc.rect();
function x(t, e, i, n, r) {
for (var s = 0, a = e.length; s < a; s++) {
g.x = e[s].x + i.x;
g.y = e[s].y + i.y;
l.transformMat4(g, g, r);
0 === s ? t.moveTo(g.x, g.y) : t.lineTo(g.x, g.y);
}
}
function A(t, e, i, n) {
if (e.body) {
if (e instanceof cc.PhysicsBoxCollider) {
e.offset;
var r = e.size;
x(t, [ cc.v2(-r.width / 2, -r.height / 2), cc.v2(+r.width / 2, -r.height / 2), cc.v2(+r.width / 2, +r.height / 2), cc.v2(-r.width / 2, +r.height / 2) ], e.offset, 0, n);
t.close();
} else if (e instanceof cc.PhysicsPolygonCollider) {
x(t, e.points, e.offset, 0, n);
t.close();
} else if (e instanceof cc.PhysicsChainCollider) x(t, e.points, i); else {
if (!(e instanceof cc.PhysicsCircleCollider)) return;
l.transformMat4(g, e.offset, n);
t.circle(g.x, g.y, e.radius * e._scale.x);
}
t.fillColor = i;
t.fill();
t.stroke();
}
}
function b(t, e, i, n) {
if (e.x !== i.x || e.y !== i.y) {
t.strokeColor = n;
t.moveTo(e.x, e.y);
t.lineTo(i.x, i.y);
t.stroke();
} else {
t.fillColor = n;
t.circle(e.x, e.y, 1);
t.fill();
}
}
e.exports = function(t) {
var e = t.debugDrawFlags;
if (e) {
t._checkDebugDrawValid();
var i = t._debugDrawer;
i.clear();
if (e & s.e_shapeBit || e & s.e_aabbBit) for (var n = t._bodies, o = 0, h = n.length; o < h; o++) {
var l = n[o], x = l.node.getComponents(cc.PhysicsCollider);
if (0 !== x.length) {
l.node.getWorldMatrix(v);
if (e & s.e_shapeBit) {
var T = f;
l.active ? l.type == r.Static ? T = u : l.type == r.Kinematic ? T = _ : l.awake || (T = m) : T = c;
for (var C = 0, w = x.length; C < w; C++) A(i, x[C], T, v);
}
if (e & s.e_aabbBit && l.active) for (var S = 0, E = x.length; S < E; S++) {
var D = x[S].getAABB();
i.strokeColor = p;
i.rect(D.x, D.y, D.width, D.height);
i.stroke();
}
}
}
if (e & s.e_jointBit) for (var M = t._joints, I = 0, P = M.length; I < P; I++) {
var B = M[I], R = B.body, L = B.connectedBody;
if (R && L) {
R.node.getWorldMatrix(v);
g.x = v.m12;
g.y = v.m13;
L.node.getWorldMatrix(v);
y.x = v.m12;
y.y = v.m13;
var O = cc.v2(B._joint.GetAnchorA()).mulSelf(a), F = cc.v2(B._joint.GetAnchorB()).mulSelf(a);
if (B instanceof cc.DistanceJoint) b(i, O, F, d); else {
b(i, g, O, d);
b(i, O, F, d);
b(i, y, F, d);
}
}
}
}
};
}), {
"./CCPhysicsTypes": 129
} ],
128: [ (function(t, e, i) {
var n = t("./CCPhysicsTypes"), r = n.ContactType, s = n.BodyType, a = n.RayCastType, o = n.DrawBits, h = n.PTM_RATIO, l = (n.ANGLE_TO_PHYSICS_ANGLE, 
n.PHYSICS_ANGLE_TO_ANGLE), c = t("./CCPhysicsDebugDraw"), u = t("./utils").convertToNodeRotation, _ = new b2.AABB(), m = new b2.Vec2(), f = new b2.Vec2(), d = cc.v2(), p = cc.Class({
mixins: [ cc.EventTarget ],
statics: {
DrawBits: o,
PTM_RATIO: h,
VELOCITY_ITERATIONS: 10,
POSITION_ITERATIONS: 10,
FIXED_TIME_STEP: 1 / 60,
MAX_ACCUMULATOR: .2
},
ctor: function() {
this._debugDrawFlags = 0;
this._debugDrawer = null;
this._world = null;
this._bodies = [];
this._joints = [];
this._contactMap = {};
this._contactID = 0;
this._delayEvents = [];
this._accumulator = 0;
cc.director._scheduler && cc.director._scheduler.enableForTarget(this);
this.enabledAccumulator = !1;
},
pushDelayEvent: function(t, e, i) {
this._steping ? this._delayEvents.push({
target: t,
func: e,
args: i
}) : t[e].apply(t, i);
},
update: function(t) {
var e = this._world;
if (e && this.enabled) {
this.emit("before-step");
this._steping = !0;
var i = p.VELOCITY_ITERATIONS, n = p.POSITION_ITERATIONS;
if (this.enabledAccumulator) {
this._accumulator += t;
var r = p.FIXED_TIME_STEP, s = p.MAX_ACCUMULATOR;
this._accumulator > s && (this._accumulator = s);
for (;this._accumulator > r; ) {
e.Step(r, i, n);
this._accumulator -= r;
}
} else {
var a = 1 / cc.game.config.frameRate;
e.Step(a, i, n);
}
this._steping = !1;
for (var o = this._delayEvents, h = 0, l = o.length; h < l; h++) {
var u = o[h];
u.target[u.func].apply(u.target, u.args);
}
o.length = 0;
this._syncNode();
c(this);
}
},
testPoint: function(t) {
var e = m.x = t.x / h, i = m.y = t.y / h, n = .2 / h;
_.lowerBound.x = e - n;
_.lowerBound.y = i - n;
_.upperBound.x = e + n;
_.upperBound.y = i + n;
var r = this._aabbQueryCallback;
r.init(m);
this._world.QueryAABB(r, _);
var s = r.getFixture();
return s ? s.collider : null;
},
testAABB: function(t) {
_.lowerBound.x = t.xMin / h;
_.lowerBound.y = t.yMin / h;
_.upperBound.x = t.xMax / h;
_.upperBound.y = t.yMax / h;
var e = this._aabbQueryCallback;
e.init();
this._world.QueryAABB(e, _);
return e.getFixtures().map((function(t) {
return t.collider;
}));
},
rayCast: function(t, e, i) {
if (t.equals(e)) return [];
i = i || a.Closest;
m.x = t.x / h;
m.y = t.y / h;
f.x = e.x / h;
f.y = e.y / h;
var n = this._raycastQueryCallback;
n.init(i);
this._world.RayCast(n, m, f);
var r = n.getFixtures();
if (r.length > 0) {
for (var s = n.getPoints(), o = n.getNormals(), l = n.getFractions(), c = [], u = 0, _ = r.length; u < _; u++) {
var d = r[u], p = d.collider;
if (i === a.AllClosest) {
var g = c.find((function(t) {
return t.collider === p;
}));
if (g) {
if (l[u] < g.fraction) {
g.fixtureIndex = p._getFixtureIndex(d);
g.point.x = s[u].x * h;
g.point.y = s[u].y * h;
g.normal.x = o[u].x;
g.normal.y = o[u].y;
g.fraction = l[u];
}
continue;
}
}
c.push({
collider: p,
fixtureIndex: p._getFixtureIndex(d),
point: cc.v2(s[u].x * h, s[u].y * h),
normal: cc.v2(o[u]),
fraction: l[u]
});
}
return c;
}
return [];
},
syncPosition: function() {
for (var t = this._bodies, e = 0; e < t.length; e++) t[e].syncPosition();
},
syncRotation: function() {
for (var t = this._bodies, e = 0; e < t.length; e++) t[e].syncRotation();
},
_registerContactFixture: function(t) {
this._contactListener.registerContactFixture(t);
},
_unregisterContactFixture: function(t) {
this._contactListener.unregisterContactFixture(t);
},
_addBody: function(t, e) {
var i = this._world, n = t.node;
if (i && n) {
t._b2Body = i.CreateBody(e);
t._b2Body.body = t;
this._bodies.push(t);
}
},
_removeBody: function(t) {
var e = this._world;
if (e) {
t._b2Body.body = null;
e.DestroyBody(t._b2Body);
t._b2Body = null;
cc.js.array.remove(this._bodies, t);
}
},
_addJoint: function(t, e) {
var i = this._world.CreateJoint(e);
if (i) {
i._joint = t;
t._joint = i;
this._joints.push(t);
}
},
_removeJoint: function(t) {
t._isValid() && this._world.DestroyJoint(t._joint);
t._joint && (t._joint._joint = null);
cc.js.array.remove(this._joints, t);
},
_initCallback: function() {
if (this._world) {
if (!this._contactListener) {
var t = new cc.PhysicsContactListener();
t.setBeginContact(this._onBeginContact);
t.setEndContact(this._onEndContact);
t.setPreSolve(this._onPreSolve);
t.setPostSolve(this._onPostSolve);
this._world.SetContactListener(t);
this._contactListener = t;
this._aabbQueryCallback = new cc.PhysicsAABBQueryCallback();
this._raycastQueryCallback = new cc.PhysicsRayCastCallback();
}
} else cc.warn("Please init PhysicsManager first");
},
_init: function() {
this.enabled = !0;
this.debugDrawFlags = b2.Draw.e_shapeBit;
},
_getWorld: function() {
return this._world;
},
_syncNode: function() {
for (var t = this._bodies, e = 0, i = t.length; e < i; e++) {
var n = t[e], r = n.node, a = n._b2Body, o = a.GetPosition();
d.x = o.x * h;
d.y = o.y * h;
var c = a.GetAngle() * l;
if (null !== r.parent.parent) {
d = r.parent.convertToNodeSpaceAR(d);
c = u(r.parent, c);
}
var _ = r._eventMask;
r._eventMask = 0;
r.position = d;
r.rotation = c;
r._eventMask = _;
n.type === s.Animated && n.resetVelocity();
}
},
_onBeginContact: function(t) {
cc.PhysicsContact.get(t).emit(r.BEGIN_CONTACT);
},
_onEndContact: function(t) {
var e = t._contact;
if (e) {
e.emit(r.END_CONTACT);
cc.PhysicsContact.put(t);
}
},
_onPreSolve: function(t) {
var e = t._contact;
e && e.emit(r.PRE_SOLVE);
},
_onPostSolve: function(t, e) {
var i = t._contact;
if (i) {
i._impulse = e;
i.emit(r.POST_SOLVE);
i._impulse = null;
}
},
_checkDebugDrawValid: function() {
if (!this._debugDrawer || !this._debugDrawer.isValid) {
var t = new cc.Node("PHYSICS_MANAGER_DEBUG_DRAW");
t.zIndex = cc.macro.MAX_ZINDEX;
cc.game.addPersistRootNode(t);
this._debugDrawer = t.addComponent(cc.Graphics);
}
}
});
cc.js.getset(p.prototype, "enabled", (function() {
return this._enabled;
}), (function(t) {
if (t && !this._world) {
var e = new b2.World(new b2.Vec2(0, -10));
e.SetAllowSleeping(!0);
this._world = e;
this._initCallback();
}
this._enabled = t;
}));
cc.js.getset(p.prototype, "debugDrawFlags", (function() {
return this._debugDrawFlags;
}), (function(t) {
t && !this._debugDrawFlags ? this._debugDrawer && this._debugDrawer.node && (this._debugDrawer.node.active = !0) : !t && this._debugDrawFlags && this._debugDrawer && this._debugDrawer.node && (this._debugDrawer.node.active = !1);
this._debugDrawFlags = t;
}));
cc.js.getset(p.prototype, "gravity", (function() {
if (this._world) {
var t = this._world.GetGravity();
return cc.v2(t.x * h, t.y * h);
}
return cc.v2();
}), (function(t) {
this._world && this._world.SetGravity(new b2.Vec2(t.x / h, t.y / h));
}));
cc.PhysicsManager = e.exports = p;
}), {
"./CCPhysicsDebugDraw": 127,
"./CCPhysicsTypes": 129,
"./utils": 150
} ],
129: [ (function(t, e, i) {
var n = cc.Enum({
Static: 0,
Kinematic: 1,
Dynamic: 2,
Animated: 3
});
cc.RigidBodyType = n;
var r = cc.Enum({
Closest: 0,
Any: 1,
AllClosest: 2,
All: 3
});
cc.RayCastType = r;
var s = b2.Draw;
e.exports = {
BodyType: n,
ContactType: {
BEGIN_CONTACT: "begin-contact",
END_CONTACT: "end-contact",
PRE_SOLVE: "pre-solve",
POST_SOLVE: "post-solve"
},
RayCastType: r,
DrawBits: s,
PTM_RATIO: 32,
ANGLE_TO_PHYSICS_ANGLE: -Math.PI / 180,
PHYSICS_ANGLE_TO_ANGLE: -180 / Math.PI
};
}), {} ],
130: [ (function(i, n, r) {
function s(t, e) {
var i = e.length;
return e[t < 0 ? i - -t % i : t % i];
}
function a(t, e, i) {
for (var n = []; e < t; ) e += i.length;
for (;t <= e; ++t) n.push(s(t, i));
return n;
}
function o(t, e, i) {
if (h(t, i)) {
if (u(s(t, i), s(t - 1, i), s(e, i)) && _(s(t, i), s(t + 1, i), s(e, i))) return !1;
} else if (_(s(t, i), s(t + 1, i), s(e, i)) || u(s(t, i), s(t - 1, i), s(e, i))) return !1;
if (h(e, i)) {
if (u(s(e, i), s(e - 1, i), s(t, i)) && _(s(e, i), s(e + 1, i), s(t, i))) return !1;
} else if (_(s(e, i), s(e + 1, i), s(t, i)) || u(s(e, i), s(e - 1, i), s(t, i))) return !1;
for (var n = 0; n < i.length; ++n) if ((n + 1) % i.length != t && n != t && (n + 1) % i.length != e && n != e) {
var r = cc.v2();
if (g(s(t, i), s(e, i), s(n, i), s(n + 1, i), r)) return !1;
}
return !0;
}
function h(t, e) {
return l(t, e);
}
function l(i, n, r) {
if ("undefined" === ("object" === (e = typeof r) ? t(r) : e)) {
var a = i, o = n;
i = s(a - 1, o);
n = s(a, o);
r = s(a + 1, o);
}
return y(i, n, r) < 0;
}
function c(t, e, i) {
return y(t, e, i) > 0;
}
function u(t, e, i) {
return y(t, e, i) >= 0;
}
function _(t, e, i) {
return y(t, e, i) <= 0;
}
function m(t, e) {
var i = e.x - t.x, n = e.y - t.y;
return i * i + n * n;
}
function f(t) {
d(t) || t.reverse();
}
function d(t) {
return t.length < 3 || (function(t) {
var e, i = 0;
for (e = 0; e < t.length; e++) {
var n = (e + 1) % t.length;
i += t[e].x * t[n].y;
i -= t[e].y * t[n].x;
}
return i /= 2;
})(t) > 0;
}
function p(t, e, i, n) {
var r = cc.v2(), s = e.y - t.y, a = t.x - e.x, o = s * t.x + a * t.y, h = n.y - i.y, l = i.x - n.x, c = h * i.x + l * i.y, u = s * l - h * a;
if (!(function(t, e) {
return Math.abs(t - e) <= 1e-6;
})(u, 0)) {
r.x = (l * o - a * c) / u;
r.y = (s * c - h * o) / u;
}
return r;
}
function g(t, e, i, n, r) {
if (t == i || t == n || e == i || e == n) return !1;
var s = t.x, a = t.y, o = e.x, h = e.y, l = i.x, c = i.y, u = n.x, _ = n.y;
if (Math.max(s, o) < Math.min(l, u) || Math.max(l, u) < Math.min(s, o)) return !1;
if (Math.max(a, h) < Math.min(c, _) || Math.max(c, _) < Math.min(a, h)) return !1;
var m = (u - l) * (a - c) - (_ - c) * (s - l), f = (o - s) * (a - c) - (h - a) * (s - l), d = (_ - c) * (o - s) - (u - l) * (h - a);
if (Math.abs(d) < 1e-6) return !1;
f /= d;
if (0 < (m /= d) && m < 1 && 0 < f && f < 1) {
r.x = s + m * (o - s);
r.y = a + m * (h - a);
return !0;
}
return !1;
}
function y(t, e, i) {
return t.x * (e.y - i.y) + e.x * (i.y - t.y) + i.x * (t.y - e.y);
}
n.exports = {
ConvexPartition: function t(e) {
f(e);
for (var i, n, r, d, g, y, v = [], x = cc.v2(), A = cc.v2(), b = 0, T = 0, C = 0; C < e.length; ++C) if (h(C, e)) {
n = r = 1e8;
for (var w = 0; w < e.length; ++w) {
if (c(s(C - 1, e), s(C, e), s(w, e)) && _(s(C - 1, e), s(C, e), s(w - 1, e))) {
d = p(s(C - 1, e), s(C, e), s(w, e), s(w - 1, e));
if (l(s(C + 1, e), s(C, e), d) && (i = m(s(C, e), d)) < n) {
n = i;
x = d;
b = w;
}
}
if (c(s(C + 1, e), s(C, e), s(w + 1, e)) && _(s(C + 1, e), s(C, e), s(w, e))) {
d = p(s(C + 1, e), s(C, e), s(w, e), s(w + 1, e));
if (c(s(C - 1, e), s(C, e), d) && (i = m(s(C, e), d)) < r) {
r = i;
T = w;
A = d;
}
}
}
if (b == (T + 1) % e.length) {
var S = x.add(A).div(2);
(g = a(C, T, e)).push(S);
(y = a(b, C, e)).push(S);
} else {
for (var E = 0, D = b; T < b; ) T += e.length;
for (w = b; w <= T; ++w) if (o(C, w, e)) {
var M = 1 / (m(s(C, e), s(w, e)) + 1);
h(w, e) ? _(s(w - 1, e), s(w, e), s(C, e)) && u(s(w + 1, e), s(w, e), s(C, e)) ? M += 3 : M += 2 : M += 1;
if (M > E) {
D = w;
E = M;
}
}
g = a(C, D, e);
y = a(D, C, e);
}
return v = (v = v.concat(t(g))).concat(t(y));
}
v.push(e);
for (C = v.length - 1; C >= 0; C--) 0 == v[C].length && v.splice(C, 0);
return v;
},
ForceCounterClockWise: f,
IsCounterClockWise: d
};
}), {} ],
131: [ (function(t, e, i) {
var n = t("../CCNode").EventType, r = t("./CCPhysicsTypes").PTM_RATIO, s = t("./CCPhysicsTypes").ANGLE_TO_PHYSICS_ANGLE, a = t("./CCPhysicsTypes").PHYSICS_ANGLE_TO_ANGLE, o = t("./utils").getWorldRotation, h = t("./CCPhysicsTypes").BodyType, l = new b2.Vec2(), c = new b2.Vec2(), u = cc.Vec2.ZERO, _ = cc.Class({
name: "cc.RigidBody",
extends: cc.Component,
editor: !1,
properties: {
_type: h.Dynamic,
_allowSleep: !0,
_gravityScale: 1,
_linearDamping: 0,
_angularDamping: 0,
_linearVelocity: cc.v2(0, 0),
_angularVelocity: 0,
_fixedRotation: !1,
enabled: {
get: function() {
return this._enabled;
},
set: function() {
cc.warnID("8200");
},
visible: !1,
override: !0
},
enabledContactListener: {
default: !1,
tooltip: !1
},
bullet: {
default: !1,
tooltip: !1
},
type: {
type: h,
tooltip: !1,
get: function() {
return this._type;
},
set: function(t) {
this._type = t;
this._b2Body && (t === h.Animated ? this._b2Body.SetType(h.Kinematic) : this._b2Body.SetType(t));
}
},
allowSleep: {
tooltip: !1,
get: function() {
return this._b2Body ? this._b2Body.IsSleepingAllowed() : this._allowSleep;
},
set: function(t) {
this._allowSleep = t;
this._b2Body && this._b2Body.SetSleepingAllowed(t);
}
},
gravityScale: {
tooltip: !1,
get: function() {
return this._gravityScale;
},
set: function(t) {
this._gravityScale = t;
this._b2Body && this._b2Body.SetGravityScale(t);
}
},
linearDamping: {
tooltip: !1,
get: function() {
return this._linearDamping;
},
set: function(t) {
this._linearDamping = t;
this._b2Body && this._b2Body.SetLinearDamping(this._linearDamping);
}
},
angularDamping: {
tooltip: !1,
get: function() {
return this._angularDamping;
},
set: function(t) {
this._angularDamping = t;
this._b2Body && this._b2Body.SetAngularDamping(t);
}
},
linearVelocity: {
tooltip: !1,
type: cc.Vec2,
get: function() {
var t = this._linearVelocity;
if (this._b2Body) {
var e = this._b2Body.GetLinearVelocity();
t.x = e.x * r;
t.y = e.y * r;
}
return t;
},
set: function(t) {
this._linearVelocity = t;
var e = this._b2Body;
if (e) {
var i = e.m_linearVelocity;
i.Set(t.x / r, t.y / r);
e.SetLinearVelocity(i);
}
}
},
angularVelocity: {
tooltip: !1,
get: function() {
return this._b2Body ? this._b2Body.GetAngularVelocity() * a : this._angularVelocity;
},
set: function(t) {
this._angularVelocity = t;
this._b2Body && this._b2Body.SetAngularVelocity(t * s);
}
},
fixedRotation: {
tooltip: !1,
get: function() {
return this._fixedRotation;
},
set: function(t) {
this._fixedRotation = t;
this._b2Body && this._b2Body.SetFixedRotation(t);
}
},
awake: {
tooltip: !1,
get: function() {
return !!this._b2Body && this._b2Body.IsAwake();
},
set: function(t) {
this._b2Body && this._b2Body.SetAwake(t);
}
},
active: {
visible: !1,
get: function() {
return !!this._b2Body && this._b2Body.IsActive();
},
set: function(t) {
this._b2Body && this._b2Body.SetActive(t);
}
}
},
getLocalPoint: function(t, e) {
e = e || cc.v2();
if (this._b2Body) {
l.Set(t.x / r, t.y / r);
var i = this._b2Body.GetLocalPoint(l);
e.x = i.x * r;
e.y = i.y * r;
}
return e;
},
getWorldPoint: function(t, e) {
e = e || cc.v2();
if (this._b2Body) {
l.Set(t.x / r, t.y / r);
var i = this._b2Body.GetWorldPoint(l);
e.x = i.x * r;
e.y = i.y * r;
}
return e;
},
getWorldVector: function(t, e) {
e = e || cc.v2();
if (this._b2Body) {
l.Set(t.x / r, t.y / r);
var i = this._b2Body.GetWorldVector(l);
e.x = i.x * r;
e.y = i.y * r;
}
return e;
},
getLocalVector: function(t, e) {
e = e || cc.v2();
if (this._b2Body) {
l.Set(t.x / r, t.y / r);
var i = this._b2Body.GetLocalVector(l);
e.x = i.x * r;
e.y = i.y * r;
}
return e;
},
getWorldPosition: function(t) {
t = t || cc.v2();
if (this._b2Body) {
var e = this._b2Body.GetPosition();
t.x = e.x * r;
t.y = e.y * r;
}
return t;
},
getWorldRotation: function() {
return this._b2Body ? this._b2Body.GetAngle() * a : 0;
},
getLocalCenter: function(t) {
t = t || cc.v2();
if (this._b2Body) {
var e = this._b2Body.GetLocalCenter();
t.x = e.x * r;
t.y = e.y * r;
}
return t;
},
getWorldCenter: function(t) {
t = t || cc.v2();
if (this._b2Body) {
var e = this._b2Body.GetWorldCenter();
t.x = e.x * r;
t.y = e.y * r;
}
return t;
},
getLinearVelocityFromWorldPoint: function(t, e) {
e = e || cc.v2();
if (this._b2Body) {
l.Set(t.x / r, t.y / r);
var i = this._b2Body.GetLinearVelocityFromWorldPoint(l);
e.x = i.x * r;
e.y = i.y * r;
}
return e;
},
getMass: function() {
return this._b2Body ? this._b2Body.GetMass() : 0;
},
getInertia: function() {
return this._b2Body ? this._b2Body.GetInertia() * r * r : 0;
},
getJointList: function() {
if (!this._b2Body) return [];
var t = [], e = this._b2Body.GetJointList();
if (!e) return [];
t.push(e.joint._joint);
for (var i = e.prev; i; ) {
t.push(i.joint._joint);
i = i.prev;
}
for (var n = e.next; n; ) {
t.push(n.joint._joint);
n = n.next;
}
return t;
},
applyForce: function(t, e, i) {
if (this._b2Body) {
l.Set(t.x / r, t.y / r);
c.Set(e.x / r, e.y / r);
this._b2Body.ApplyForce(l, c, i);
}
},
applyForceToCenter: function(t, e) {
if (this._b2Body) {
l.Set(t.x / r, t.y / r);
this._b2Body.ApplyForceToCenter(l, e);
}
},
applyTorque: function(t, e) {
this._b2Body && this._b2Body.ApplyTorque(t / r, e);
},
applyLinearImpulse: function(t, e, i) {
if (this._b2Body) {
l.Set(t.x / r, t.y / r);
c.Set(e.x / r, e.y / r);
this._b2Body.ApplyLinearImpulse(l, c, i);
}
},
applyAngularImpulse: function(t, e) {
this._b2Body && this._b2Body.ApplyAngularImpulse(t / r / r, e);
},
syncPosition: function(t) {
var e = this._b2Body;
if (e) {
var i, n = this.node.convertToWorldSpaceAR(u);
(i = this.type === h.Animated ? e.GetLinearVelocity() : e.GetPosition()).x = n.x / r;
i.y = n.y / r;
if (this.type === h.Animated && t) {
var s = e.GetPosition(), a = cc.game.config.frameRate;
i.x = (i.x - s.x) * a;
i.y = (i.y - s.y) * a;
e.SetAwake(!0);
e.SetLinearVelocity(i);
} else e.SetTransform(i, e.GetAngle());
}
},
syncRotation: function(t) {
var e = this._b2Body;
if (e) {
var i = s * o(this.node);
if (this.type === h.Animated && t) {
var n = e.GetAngle(), r = cc.game.config.frameRate;
e.SetAwake(!0);
e.SetAngularVelocity((i - n) * r);
} else e.SetTransform(e.GetPosition(), i);
}
},
resetVelocity: function() {
var t = this._b2Body;
if (t) {
var e = t.m_linearVelocity;
e.Set(0, 0);
t.SetLinearVelocity(e);
t.SetAngularVelocity(0);
}
},
onEnable: function() {
this._init();
},
onDisable: function() {
this._destroy();
},
_registerNodeEvents: function() {
var t = this.node;
t.on(n.POSITION_CHANGED, this._onNodePositionChanged, this);
t.on(n.ROTATION_CHANGED, this._onNodeRotationChanged, this);
t.on(n.SCALE_CHANGED, this._onNodeScaleChanged, this);
},
_unregisterNodeEvents: function() {
var t = this.node;
t.off(n.POSITION_CHANGED, this._onNodePositionChanged, this);
t.off(n.ROTATION_CHANGED, this._onNodeRotationChanged, this);
t.off(n.SCALE_CHANGED, this._onNodeScaleChanged, this);
},
_onNodePositionChanged: function() {
this.syncPosition(!0);
},
_onNodeRotationChanged: function(t) {
this.syncRotation(!0);
},
_onNodeScaleChanged: function(t) {
if (this._b2Body) for (var e = this.getComponents(cc.PhysicsCollider), i = 0; i < e.length; i++) e[i].apply();
},
_init: function() {
cc.director.getPhysicsManager().pushDelayEvent(this, "__init", []);
},
_destroy: function() {
cc.director.getPhysicsManager().pushDelayEvent(this, "__destroy", []);
},
__init: function() {
if (!this._inited) {
this._registerNodeEvents();
var t = new b2.BodyDef();
this.type === h.Animated ? t.type = h.Kinematic : t.type = this.type;
t.allowSleep = this.allowSleep;
t.gravityScale = this.gravityScale;
t.linearDamping = this.linearDamping;
t.angularDamping = this.angularDamping;
var e = this.linearVelocity;
t.linearVelocity = new b2.Vec2(e.x / r, e.y / r);
t.angularVelocity = this.angularVelocity * s;
t.fixedRotation = this.fixedRotation;
t.bullet = this.bullet;
var i = this.node, n = i.convertToWorldSpaceAR(u);
t.position = new b2.Vec2(n.x / r, n.y / r);
t.angle = -Math.PI / 180 * o(i);
cc.director.getPhysicsManager()._addBody(this, t);
this._inited = !0;
}
},
__destroy: function() {
if (this._inited) {
cc.director.getPhysicsManager()._removeBody(this);
this._unregisterNodeEvents();
this._inited = !1;
}
},
_getBody: function() {
return this._b2Body;
}
});
cc.RigidBody = e.exports = _;
}), {
"../CCNode": 28,
"./CCPhysicsTypes": 129,
"./utils": 150
} ],
132: [ (function(t, e, i) {
var n = t("../CCPhysicsTypes").PTM_RATIO, r = cc.Class({
name: "cc.PhysicsBoxCollider",
extends: cc.PhysicsCollider,
mixins: [ cc.Collider.Box ],
editor: {
menu: !1,
requireComponent: cc.RigidBody
},
_createShape: function(t) {
var e = Math.abs(t.x), i = Math.abs(t.y), r = this.size.width / 2 / n * e, s = this.size.height / 2 / n * i, a = this.offset.x / n * e, o = this.offset.y / n * i, h = new b2.PolygonShape();
h.SetAsBox(r, s, new b2.Vec2(a, o), 0);
return h;
}
});
cc.PhysicsBoxCollider = e.exports = r;
}), {
"../CCPhysicsTypes": 129
} ],
133: [ (function(t, e, i) {
var n = t("../CCPhysicsTypes").PTM_RATIO, r = cc.Class({
name: "cc.PhysicsChainCollider",
extends: cc.PhysicsCollider,
editor: {
menu: !1,
inspector: !1,
requireComponent: cc.RigidBody
},
properties: {
loop: !1,
points: {
default: function() {
return [ cc.v2(-50, 0), cc.v2(50, 0) ];
},
type: [ cc.Vec2 ]
},
threshold: {
default: 1,
serializable: !1,
visible: !1
}
},
_createShape: function(t) {
for (var e = new b2.ChainShape(), i = this.points, r = [], s = 0; s < i.length; s++) {
var a = i[s];
r.push(new b2.Vec2(a.x / n * t.x, a.y / n * t.y));
}
this.loop ? e.CreateLoop(r, r.length) : e.CreateChain(r, r.length);
return e;
},
resetInEditor: !1,
resetPointsByContour: !1
});
cc.PhysicsChainCollider = e.exports = r;
}), {
"../CCPhysicsTypes": 129
} ],
134: [ (function(t, e, i) {
var n = t("../CCPhysicsTypes").PTM_RATIO, r = cc.Class({
name: "cc.PhysicsCircleCollider",
extends: cc.PhysicsCollider,
mixins: [ cc.Collider.Circle ],
editor: {
menu: !1,
requireComponent: cc.RigidBody
},
_createShape: function(t) {
var e = Math.abs(t.x), i = Math.abs(t.y), r = this.offset.x / n * e, s = this.offset.y / n * i, a = new b2.CircleShape();
a.m_radius = this.radius / n * e;
a.m_p = new b2.Vec2(r, s);
return a;
}
});
cc.PhysicsCircleCollider = e.exports = r;
}), {
"../CCPhysicsTypes": 129
} ],
135: [ (function(t, e, i) {
var n = t("../CCPhysicsTypes").PTM_RATIO, r = t("../utils").getWorldScale, s = cc.Class({
name: "cc.PhysicsCollider",
extends: cc.Collider,
ctor: function() {
this._fixtures = [];
this._shapes = [];
this._inited = !1;
this._rect = cc.rect();
},
properties: {
_density: 1,
_sensor: !1,
_friction: .2,
_restitution: 0,
density: {
tooltip: !1,
get: function() {
return this._density;
},
set: function(t) {
this._density = t;
}
},
sensor: {
tooltip: !1,
get: function() {
return this._sensor;
},
set: function(t) {
this._sensor = t;
}
},
friction: {
tooltip: !1,
get: function() {
return this._friction;
},
set: function(t) {
this._friction = t;
}
},
restitution: {
tooltip: !1,
get: function() {
return this._restitution;
},
set: function(t) {
this._restitution = t;
}
},
body: {
default: null,
type: cc.RigidBody,
visible: !1
}
},
onDisable: function() {
this._destroy();
},
onEnable: function() {
this._init();
},
start: function() {
this._init();
},
_getFixtureIndex: function(t) {
return this._fixtures.indexOf(t);
},
_init: function() {
cc.director.getPhysicsManager().pushDelayEvent(this, "__init", []);
},
_destroy: function() {
cc.director.getPhysicsManager().pushDelayEvent(this, "__destroy", []);
},
__init: function() {
if (!this._inited) {
var t = this.body || this.getComponent(cc.RigidBody);
if (t) {
var e = t._getBody();
if (e) {
var i = t.node, n = r(i);
this._scale = n;
var s = 0 === n.x && 0 === n.y ? [] : this._createShape(n);
s instanceof Array || (s = [ s ]);
for (var a = 1 << i.groupIndex, o = 0, h = cc.game.collisionMatrix[i.groupIndex], l = 0; l < h.length; l++) h[l] && (o |= 1 << l);
for (var c = {
categoryBits: a,
maskBits: o,
groupIndex: 0
}, u = cc.director.getPhysicsManager(), _ = 0; _ < s.length; _++) {
var m = s[_], f = new b2.FixtureDef();
f.density = this.density;
f.isSensor = this.sensor;
f.friction = this.friction;
f.restitution = this.restitution;
f.shape = m;
f.filter = c;
var d = e.CreateFixture(f);
d.collider = this;
t.enabledContactListener && u._registerContactFixture(d);
this._shapes.push(m);
this._fixtures.push(d);
}
this.body = t;
this._inited = !0;
}
}
}
},
__destroy: function() {
if (this._inited) {
for (var t = this._fixtures, e = this.body._getBody(), i = cc.director.getPhysicsManager(), n = t.length - 1; n >= 0; n--) {
var r = t[n];
r.collider = null;
i._unregisterContactFixture(r);
e && e.DestroyFixture(r);
}
this.body = null;
this._fixtures.length = 0;
this._shapes.length = 0;
this._inited = !1;
}
},
_createShape: function() {},
apply: function() {
this._destroy();
this._init();
},
getAABB: function() {
for (var t = 1e7, e = 1e7, i = -1e7, r = -1e7, s = this._fixtures, a = 0; a < s.length; a++) for (var o = s[a], h = o.GetShape().GetChildCount(), l = 0; l < h; l++) {
var c = o.GetAABB(l);
c.lowerBound.x < t && (t = c.lowerBound.x);
c.lowerBound.y < e && (e = c.lowerBound.y);
c.upperBound.x > i && (i = c.upperBound.x);
c.upperBound.y > r && (r = c.upperBound.y);
}
t *= n;
e *= n;
i *= n;
r *= n;
var u = this._rect;
u.x = t;
u.y = e;
u.width = i - t;
u.height = r - e;
return u;
}
});
cc.PhysicsCollider = e.exports = s;
}), {
"../CCPhysicsTypes": 129,
"../utils": 150
} ],
136: [ (function(t, e, i) {
var n = t("../CCPhysicsTypes").PTM_RATIO, r = t("../CCPolygonSeparator"), s = cc.Class({
name: "cc.PhysicsPolygonCollider",
extends: cc.PhysicsCollider,
mixins: [ cc.Collider.Polygon ],
editor: {
menu: !1,
inspector: !1,
requireComponent: cc.RigidBody
},
_createShape: function(t) {
var e = [], i = this.points;
i.length > 0 && i[0].equals(i[i.length - 1]) && (i.length -= 1);
for (var s = r.ConvexPartition(i), a = this.offset, o = 0; o < s.length; o++) {
for (var h = s[o], l = null, c = [], u = null, _ = 0, m = h.length; _ < m; _++) {
l || (l = new b2.PolygonShape());
var f = h[_], d = (f.x + a.x) / n * t.x, p = (f.y + a.y) / n * t.y, g = new b2.Vec2(d, p);
c.push(g);
u || (u = g);
if (c.length === b2.maxPolygonVertices) {
l.Set(c, c.length);
e.push(l);
l = null;
_ < m - 1 && (c = [ u, c[c.length - 1] ]);
}
}
if (l) {
l.Set(c, c.length);
e.push(l);
}
}
return e;
}
});
cc.PhysicsPolygonCollider = e.exports = s;
}), {
"../CCPhysicsTypes": 129,
"../CCPolygonSeparator": 130
} ],
137: [ (function(t, e, i) {
window.b2 = t("../../../external/box2d/box2d");
0;
t("./CCPhysicsManager");
t("./CCRigidBody");
t("./CCPhysicsContact");
t("./collider/CCPhysicsCollider");
t("./collider/CCPhysicsChainCollider");
t("./collider/CCPhysicsCircleCollider");
t("./collider/CCPhysicsBoxCollider");
t("./collider/CCPhysicsPolygonCollider");
t("./joint/CCJoint");
t("./joint/CCDistanceJoint");
t("./joint/CCRevoluteJoint");
t("./joint/CCMouseJoint");
t("./joint/CCMotorJoint");
t("./joint/CCPrismaticJoint");
t("./joint/CCWeldJoint");
t("./joint/CCWheelJoint");
t("./joint/CCRopeJoint");
t("./platform/CCPhysicsContactListner");
t("./platform/CCPhysicsAABBQueryCallback");
t("./platform/CCPhysicsRayCastCallback");
}), {
"../../../external/box2d/box2d": 288,
"./CCPhysicsContact": 126,
"./CCPhysicsManager": 128,
"./CCRigidBody": 131,
"./collider/CCPhysicsBoxCollider": 132,
"./collider/CCPhysicsChainCollider": 133,
"./collider/CCPhysicsCircleCollider": 134,
"./collider/CCPhysicsCollider": 135,
"./collider/CCPhysicsPolygonCollider": 136,
"./joint/CCDistanceJoint": 138,
"./joint/CCJoint": 139,
"./joint/CCMotorJoint": 140,
"./joint/CCMouseJoint": 141,
"./joint/CCPrismaticJoint": 142,
"./joint/CCRevoluteJoint": 143,
"./joint/CCRopeJoint": 144,
"./joint/CCWeldJoint": 145,
"./joint/CCWheelJoint": 146,
"./platform/CCPhysicsAABBQueryCallback": 147,
"./platform/CCPhysicsContactListner": 148,
"./platform/CCPhysicsRayCastCallback": 149
} ],
138: [ (function(t, e, i) {
var n = t("../CCPhysicsTypes").PTM_RATIO, r = cc.Class({
name: "cc.DistanceJoint",
extends: cc.Joint,
editor: !1,
properties: {
_distance: 1,
_frequency: 0,
_dampingRatio: 0,
distance: {
tooltip: !1,
get: function() {
return this._distance;
},
set: function(t) {
this._distance = t;
this._joint && this._joint.SetLength(t);
}
},
frequency: {
tooltip: !1,
get: function() {
return this._frequency;
},
set: function(t) {
this._frequency = t;
this._joint && this._joint.SetFrequency(t);
}
},
dampingRatio: {
tooltip: !1,
get: function() {
return this._dampingRatio;
},
set: function(t) {
this._dampingRatio = t;
this._joint && this._joint.SetDampingRatio(t);
}
}
},
_createJointDef: function() {
var t = new b2.DistanceJointDef();
t.localAnchorA = new b2.Vec2(this.anchor.x / n, this.anchor.y / n);
t.localAnchorB = new b2.Vec2(this.connectedAnchor.x / n, this.connectedAnchor.y / n);
t.length = this.distance / n;
t.dampingRatio = this.dampingRatio;
t.frequencyHz = this.frequency;
return t;
}
});
cc.DistanceJoint = e.exports = r;
}), {
"../CCPhysicsTypes": 129
} ],
139: [ (function(t, e, i) {
var n = t("../CCPhysicsTypes").PTM_RATIO, r = cc.Class({
name: "cc.Joint",
extends: cc.Component,
editor: {
requireComponent: cc.RigidBody
},
properties: {
anchor: {
default: cc.v2(0, 0),
tooltip: !1
},
connectedAnchor: {
default: cc.v2(0, 0),
tooltip: !1
},
connectedBody: {
default: null,
type: cc.RigidBody,
tooltip: !1
},
collideConnected: {
default: !1,
tooltip: !1
}
},
onDisable: function() {
this._destroy();
},
onEnable: function() {
this._init();
},
start: function() {
this._init();
},
apply: function() {
this._destroy();
this._init();
},
getWorldAnchor: function() {
if (this._joint) {
var t = this._joint.GetAnchorA();
return cc.v2(t.x * n, t.y * n);
}
return cc.Vec2.ZERO;
},
getWorldConnectedAnchor: function() {
if (this._joint) {
var t = this._joint.GetAnchorB();
return cc.v2(t.x * n, t.y * n);
}
return cc.Vec2.ZERO;
},
getReactionForce: function(t) {
return this._joint ? this._joint.GetReactionForce(t) : 0;
},
getReactionTorque: function(t) {
return this._joint ? this._joint.GetReactionTorque(t) : 0;
},
_init: function() {
cc.director.getPhysicsManager().pushDelayEvent(this, "__init", []);
},
_destroy: function() {
cc.director.getPhysicsManager().pushDelayEvent(this, "__destroy", []);
},
__init: function() {
if (!this._inited) {
this.body = this.getComponent(cc.RigidBody);
if (this._isValid()) {
var t = this._createJointDef();
if (!t) return;
t.bodyA = this.body._getBody();
t.bodyB = this.connectedBody._getBody();
t.collideConnected = this.collideConnected;
cc.director.getPhysicsManager()._addJoint(this, t);
this._inited = !0;
}
}
},
__destroy: function() {
if (this._inited) {
cc.director.getPhysicsManager()._removeJoint(this);
this._joint = null;
this._inited = !1;
}
},
_createJointDef: function() {
return null;
},
_isValid: function() {
return this.body && this.body._getBody() && this.connectedBody && this.connectedBody._getBody();
}
});
cc.Joint = e.exports = r;
}), {
"../CCPhysicsTypes": 129
} ],
140: [ (function(t, e, i) {
var n = t("../CCPhysicsTypes").PTM_RATIO, r = t("../CCPhysicsTypes").ANGLE_TO_PHYSICS_ANGLE, s = cc.Class({
name: "cc.MotorJoint",
extends: cc.Joint,
editor: !1,
properties: {
_linearOffset: cc.v2(0, 0),
_angularOffset: 0,
_maxForce: 1,
_maxTorque: 1,
_correctionFactor: .3,
anchor: {
tooltip: !1,
default: cc.v2(0, 0),
override: !0,
visible: !1
},
connectedAnchor: {
tooltip: !1,
default: cc.v2(0, 0),
override: !0,
visible: !1
},
linearOffset: {
tooltip: !1,
get: function() {
return this._linearOffset;
},
set: function(t) {
this._linearOffset = t;
this._joint && this._joint.SetLinearOffset(new b2.Vec2(t.x / n, t.y / n));
}
},
angularOffset: {
tooltip: !1,
get: function() {
return this._angularOffset;
},
set: function(t) {
this._angularOffset = t;
this._joint && this._joint.SetAngularOffset(t);
}
},
maxForce: {
tooltip: !1,
get: function() {
return this._maxForce;
},
set: function(t) {
this._maxForce = t;
this._joint && this._joint.SetMaxForce(t);
}
},
maxTorque: {
tooltip: !1,
get: function() {
return this._maxTorque;
},
set: function(t) {
this._maxTorque = t;
this._joint && this._joint.SetMaxTorque(t);
}
},
correctionFactor: {
tooltip: !1,
get: function() {
return this._correctionFactor;
},
set: function(t) {
this._correctionFactor = t;
this._joint && this._joint.SetCorrectionFactor(t);
}
}
},
_createJointDef: function() {
var t = new b2.MotorJointDef();
t.linearOffset = new b2.Vec2(this.linearOffset.x / n, this.linearOffset.y / n);
t.angularOffset = this.angularOffset * r;
t.maxForce = this.maxForce;
t.maxTorque = this.maxTorque;
t.correctionFactor = this.correctionFactor;
return t;
}
});
cc.MotorJoint = e.exports = s;
}), {
"../CCPhysicsTypes": 129
} ],
141: [ (function(t, e, i) {
var n = t("../CCPhysicsTypes").PTM_RATIO, r = new b2.Vec2(), s = cc.Class({
name: "cc.MouseJoint",
extends: cc.Joint,
editor: !1,
properties: {
_target: 1,
_frequency: 5,
_dampingRatio: .7,
_maxForce: 0,
connectedBody: {
default: null,
type: cc.RigidBody,
visible: !1,
override: !0
},
collideConnected: {
default: !0,
visible: !1,
override: !0
},
anchor: {
tooltip: !1,
default: cc.v2(0, 0),
override: !0,
visible: !1
},
connectedAnchor: {
tooltip: !1,
default: cc.v2(0, 0),
override: !0,
visible: !1
},
mouseRegion: {
tooltip: !1,
default: null,
type: cc.Node
},
target: {
tooltip: !1,
visible: !1,
get: function() {
return this._target;
},
set: function(t) {
this._target = t;
if (this._joint) {
r.x = t.x / n;
r.y = t.y / n;
this._joint.SetTarget(r);
}
}
},
frequency: {
tooltip: !1,
get: function() {
return this._frequency;
},
set: function(t) {
this._frequency = t;
this._joint && this._joint.SetFrequency(t);
}
},
dampingRatio: {
tooltip: !1,
get: function() {
return this._dampingRatio;
},
set: function(t) {
this._dampingRatio = t;
this._joint && this._joint.SetDampingRatio(t);
}
},
maxForce: {
tooltip: !1,
visible: !1,
get: function() {
return this._maxForce;
},
set: function(t) {
this._maxForce = t;
this._joint && this._joint.SetMaxForce(t);
}
}
},
onLoad: function() {
var t = this.mouseRegion || this.node;
t.on(cc.Node.EventType.TOUCH_START, this.onTouchBegan, this);
t.on(cc.Node.EventType.TOUCH_MOVE, this.onTouchMove, this);
t.on(cc.Node.EventType.TOUCH_END, this.onTouchEnd, this);
},
onEnable: function() {},
start: function() {},
onTouchBegan: function(t) {
var e = cc.director.getPhysicsManager(), i = this._pressPoint = t.touch.getLocation();
cc.Camera && cc.Camera.main && (i = cc.Camera.main.getCameraToWorldPoint(i));
var n = e.testPoint(i);
if (n) {
(this.connectedBody = n.body).awake = !0;
this.maxForce = 1e3 * this.connectedBody.getMass();
this.target = i;
this._init();
}
},
onTouchMove: function(t) {
this._pressPoint = t.touch.getLocation();
},
onTouchEnd: function(t) {
this._destroy();
this._pressPoint = null;
},
_createJointDef: function() {
var t = new b2.MouseJointDef();
r.x = this.target.x / n;
r.y = this.target.y / n;
t.target = r;
t.maxForce = this.maxForce;
t.dampingRatio = this.dampingRatio;
t.frequencyHz = this.frequency;
return t;
},
update: function() {
if (this._pressPoint && this._isValid()) {
var t = cc.Camera.findCamera(this.node);
this.target = t ? t.getCameraToWorldPoint(this._pressPoint) : this._pressPoint;
}
}
});
cc.MouseJoint = e.exports = s;
}), {
"../CCPhysicsTypes": 129
} ],
142: [ (function(t, e, i) {
var n = t("../CCPhysicsTypes").PTM_RATIO, r = t("../CCPhysicsTypes").ANGLE_TO_PHYSICS_ANGLE, s = cc.Class({
name: "cc.PrismaticJoint",
extends: cc.Joint,
editor: !1,
properties: {
localAxisA: {
default: cc.v2(1, 0),
tooltip: !1
},
referenceAngle: {
default: 0,
tooltip: !1
},
enableLimit: {
default: !1,
tooltip: !1
},
enableMotor: {
default: !1,
tooltip: !1
},
lowerLimit: {
default: 0,
tooltip: !1
},
upperLimit: {
default: 0,
tooltip: !1
},
_maxMotorForce: 0,
_motorSpeed: 0,
maxMotorForce: {
tooltip: !1,
get: function() {
return this._maxMotorForce;
},
set: function(t) {
this._maxMotorForce = t;
this._joint && this._joint.SetMaxMotorForce(t);
}
},
motorSpeed: {
tooltip: !1,
get: function() {
return this._motorSpeed;
},
set: function(t) {
this._motorSpeed = t;
this._joint && this._joint.SetMotorSpeed(t);
}
}
},
_createJointDef: function() {
var t = new b2.PrismaticJointDef();
t.localAnchorA = new b2.Vec2(this.anchor.x / n, this.anchor.y / n);
t.localAnchorB = new b2.Vec2(this.connectedAnchor.x / n, this.connectedAnchor.y / n);
t.localAxisA = new b2.Vec2(this.localAxisA.x, this.localAxisA.y);
t.referenceAngle = this.referenceAngle * r;
t.enableLimit = this.enableLimit;
t.lowerTranslation = this.lowerLimit / n;
t.upperTranslation = this.upperLimit / n;
t.enableMotor = this.enableMotor;
t.maxMotorForce = this.maxMotorForce;
t.motorSpeed = this.motorSpeed;
return t;
}
});
cc.PrismaticJoint = e.exports = s;
}), {
"../CCPhysicsTypes": 129
} ],
143: [ (function(t, e, i) {
var n = t("../CCPhysicsTypes").PTM_RATIO, r = t("../CCPhysicsTypes").ANGLE_TO_PHYSICS_ANGLE, s = t("../CCPhysicsTypes").PHYSICS_ANGLE_TO_ANGLE, a = cc.Class({
name: "cc.RevoluteJoint",
extends: cc.Joint,
editor: !1,
properties: {
_maxMotorTorque: 0,
_motorSpeed: 0,
_enableLimit: !1,
_enableMotor: !1,
referenceAngle: {
default: 0,
tooltip: !1
},
lowerAngle: {
default: 0,
tooltip: !1
},
upperAngle: {
default: 0,
tooltip: !1
},
maxMotorTorque: {
tooltip: !1,
get: function() {
return this._maxMotorTorque;
},
set: function(t) {
this._maxMotorTorque = t;
this._joint && this._joint.SetMaxMotorTorque(t);
}
},
motorSpeed: {
tooltip: !1,
get: function() {
return this._motorSpeed;
},
set: function(t) {
this._motorSpeed = t;
this._joint && this._joint.SetMotorSpeed(t * r);
}
},
enableLimit: {
tooltip: !1,
get: function() {
return this._enableLimit;
},
set: function(t) {
this._enableLimit = t;
this._joint && this._joint.EnableLimit(t);
}
},
enableMotor: {
tooltip: !1,
get: function() {
return this._enableMotor;
},
set: function(t) {
this._enableMotor = t;
this._joint && this._joint.EnableMotor(t);
}
}
},
getJointAngle: function() {
return this._joint ? this._joint.GetJointAngle() * s : 0;
},
_createJointDef: function() {
var t = new b2.RevoluteJointDef();
t.localAnchorA = new b2.Vec2(this.anchor.x / n, this.anchor.y / n);
t.localAnchorB = new b2.Vec2(this.connectedAnchor.x / n, this.connectedAnchor.y / n);
t.lowerAngle = (this.upperAngle + 90) * r;
t.upperAngle = (this.lowerAngle + 90) * r;
t.maxMotorTorque = this.maxMotorTorque;
t.motorSpeed = this.motorSpeed * r;
t.enableLimit = this.enableLimit;
t.enableMotor = this.enableMotor;
t.referenceAngle = this.referenceAngle * r;
return t;
}
});
cc.RevoluteJoint = e.exports = a;
}), {
"../CCPhysicsTypes": 129
} ],
144: [ (function(t, e, i) {
var n = t("../CCPhysicsTypes").PTM_RATIO, r = cc.Class({
name: "cc.RopeJoint",
extends: cc.Joint,
editor: !1,
properties: {
_maxLength: 1,
maxLength: {
tooltip: !1,
get: function() {
return this._maxLength;
},
set: function(t) {
this._maxLength = t;
this._joint && this._joint.SetMaxLength(t);
}
}
},
_createJointDef: function() {
var t = new b2.RopeJointDef();
t.localAnchorA = new b2.Vec2(this.anchor.x / n, this.anchor.y / n);
t.localAnchorB = new b2.Vec2(this.connectedAnchor.x / n, this.connectedAnchor.y / n);
t.maxLength = this.maxLength / n;
return t;
}
});
cc.RopeJoint = e.exports = r;
}), {
"../CCPhysicsTypes": 129
} ],
145: [ (function(t, e, i) {
var n = t("../CCPhysicsTypes").PTM_RATIO, r = t("../CCPhysicsTypes").ANGLE_TO_PHYSICS_ANGLE, s = cc.Class({
name: "cc.WeldJoint",
extends: cc.Joint,
editor: !1,
properties: {
referenceAngle: {
default: 0,
tooltip: !1
},
_frequency: 0,
_dampingRatio: 0,
frequency: {
tooltip: !1,
get: function() {
return this._frequency;
},
set: function(t) {
this._frequency = t;
this._joint && this._joint.SetFrequency(t);
}
},
dampingRatio: {
tooltip: !1,
get: function() {
return this._dampingRatio;
},
set: function(t) {
this._dampingRatio = t;
this._joint && this._joint.SetDampingRatio(t);
}
}
},
_createJointDef: function() {
var t = new b2.WeldJointDef();
t.localAnchorA = new b2.Vec2(this.anchor.x / n, this.anchor.y / n);
t.localAnchorB = new b2.Vec2(this.connectedAnchor.x / n, this.connectedAnchor.y / n);
t.referenceAngle = this.referenceAngle * r;
t.frequencyHz = this.frequency;
t.dampingRatio = this.dampingRatio;
return t;
}
});
cc.WeldJoint = e.exports = s;
}), {
"../CCPhysicsTypes": 129
} ],
146: [ (function(t, e, i) {
var n = t("../CCPhysicsTypes").PTM_RATIO, r = t("../CCPhysicsTypes").ANGLE_TO_PHYSICS_ANGLE, s = cc.Class({
name: "cc.WheelJoint",
extends: cc.Joint,
editor: !1,
properties: {
_maxMotorTorque: 0,
_motorSpeed: 0,
_enableMotor: !1,
_frequency: 2,
_dampingRatio: .7,
localAxisA: {
default: cc.v2(1, 0),
tooltip: !1
},
maxMotorTorque: {
tooltip: !1,
get: function() {
return this._maxMotorTorque;
},
set: function(t) {
this._maxMotorTorque = t;
this._joint && this._joint.SetMaxMotorTorque(t);
}
},
motorSpeed: {
tooltip: !1,
get: function() {
return this._motorSpeed;
},
set: function(t) {
this._motorSpeed = t;
this._joint && this._joint.SetMotorSpeed(t * r);
}
},
enableMotor: {
tooltip: !1,
get: function() {
return this._enableMotor;
},
set: function(t) {
this._enableMotor = t;
this._joint && this._joint.EnableMotor(t);
}
},
frequency: {
tooltip: !1,
get: function() {
return this._frequency;
},
set: function(t) {
this._frequency = t;
this._joint && this._joint.SetFrequency(t);
}
},
dampingRatio: {
tooltip: !1,
get: function() {
return this._dampingRatio;
},
set: function(t) {
this._dampingRatio = t;
this._joint && this._joint.SetDampingRatio(t);
}
}
},
_createJointDef: function() {
var t = new b2.WheelJointDef();
t.localAnchorA = new b2.Vec2(this.anchor.x / n, this.anchor.y / n);
t.localAnchorB = new b2.Vec2(this.connectedAnchor.x / n, this.connectedAnchor.y / n);
t.localAxisA = new b2.Vec2(this.localAxisA.x, this.localAxisA.y);
t.maxMotorTorque = this.maxMotorTorque;
t.motorSpeed = this.motorSpeed * r;
t.enableMotor = this.enableMotor;
t.dampingRatio = this.dampingRatio;
t.frequencyHz = this.frequency;
return t;
}
});
cc.WheelJoint = e.exports = s;
}), {
"../CCPhysicsTypes": 129
} ],
147: [ (function(t, e, i) {
function n() {
this._point = new b2.Vec2();
this._isPoint = !1;
this._fixtures = [];
}
n.prototype.init = function(t) {
if (t) {
this._isPoint = !0;
this._point.x = t.x;
this._point.y = t.y;
} else this._isPoint = !1;
this._fixtures.length = 0;
};
n.prototype.ReportFixture = function(t) {
if (t.GetBody().GetType() === b2.Body.b2_dynamicBody) if (this._isPoint) {
if (t.TestPoint(this._point)) {
this._fixtures.push(t);
return !1;
}
} else this._fixtures.push(t);
return !0;
};
n.prototype.getFixture = function() {
return this._fixtures[0];
};
n.prototype.getFixtures = function() {
return this._fixtures;
};
cc.PhysicsAABBQueryCallback = e.exports = n;
}), {} ],
148: [ (function(t, e, i) {
function n() {
this._contactFixtures = [];
}
n.prototype.setBeginContact = function(t) {
this._BeginContact = t;
};
n.prototype.setEndContact = function(t) {
this._EndContact = t;
};
n.prototype.setPreSolve = function(t) {
this._PreSolve = t;
};
n.prototype.setPostSolve = function(t) {
this._PostSolve = t;
};
n.prototype.BeginContact = function(t) {
if (this._BeginContact) {
var e = t.GetFixtureA(), i = t.GetFixtureB(), n = this._contactFixtures;
t._shouldReport = !1;
if (-1 !== n.indexOf(e) || -1 !== n.indexOf(i)) {
t._shouldReport = !0;
this._BeginContact(t);
}
}
};
n.prototype.EndContact = function(t) {
if (this._EndContact && t._shouldReport) {
t._shouldReport = !1;
this._EndContact(t);
}
};
n.prototype.PreSolve = function(t, e) {
this._PreSolve && t._shouldReport && this._PreSolve(t, e);
};
n.prototype.PostSolve = function(t, e) {
this._PostSolve && t._shouldReport && this._PostSolve(t, e);
};
n.prototype.registerContactFixture = function(t) {
this._contactFixtures.push(t);
};
n.prototype.unregisterContactFixture = function(t) {
cc.js.array.remove(this._contactFixtures, t);
};
cc.PhysicsContactListener = e.exports = n;
}), {} ],
149: [ (function(t, e, i) {
function n() {
this._type = 0;
this._fixtures = [];
this._points = [];
this._normals = [];
this._fractions = [];
}
n.prototype.init = function(t) {
this._type = t;
this._fixtures.length = 0;
this._points.length = 0;
this._normals.length = 0;
this._fractions.length = 0;
};
n.prototype.ReportFixture = function(t, e, i, n) {
if (0 === this._type) {
this._fixtures[0] = t;
this._points[0] = e;
this._normals[0] = i;
this._fractions[0] = n;
return n;
}
this._fixtures.push(t);
this._points.push(e);
this._normals.push(i);
this._fractions.push(n);
return 1 === this._type ? 0 : this._type >= 2 ? 1 : n;
};
n.prototype.getFixtures = function() {
return this._fixtures;
};
n.prototype.getPoints = function() {
return this._points;
};
n.prototype.getNormals = function() {
return this._normals;
};
n.prototype.getFractions = function() {
return this._fractions;
};
cc.PhysicsRayCastCallback = e.exports = n;
}), {} ],
150: [ (function(t, e, i) {
e.exports = {
getWorldRotation: function(t) {
for (var e = t.rotationX, i = t.parent; i.parent; ) {
e += i.rotationX;
i = i.parent;
}
return e;
},
getWorldScale: function(t) {
for (var e = t.scaleX, i = t.scaleY, n = t.parent; n.parent; ) {
e *= n.scaleX;
i *= n.scaleY;
n = n.parent;
}
return cc.v2(e, i);
},
convertToNodeRotation: function(t, e) {
e -= t.rotationX;
for (var i = t.parent; i.parent; ) {
e -= i.rotationX;
i = i.parent;
}
return e;
}
};
}), {} ],
151: [ (function(t, e, i) {}), {
"../event-manager": 96,
"../platform/js": 173,
"./CCMacro": 158,
"./CCSys": 162
} ],
152: [ (function(i, n, r) {
i("../assets/CCAsset");
var s = i("./utils").callInNextTick, a = i("../load-pipeline/CCLoader"), o = i("../load-pipeline/pack-downloader"), h = i("../load-pipeline/auto-release-utils"), l = i("../utils/decode-uuid"), c = i("../load-pipeline/md5-pipe"), u = i("./js"), _ = "", m = "", f = u.createMap(!0);
function d(t) {
return t && (t.constructor === cc.SceneAsset || t instanceof cc.Scene);
}
function p(t, e) {
this.url = t;
this.type = e;
}
var g = {
loadAsset: function(i, n, r) {
if ("string" !== ("object" === (e = typeof i) ? t(i) : e)) return s(n, new Error("[AssetLibrary] uuid must be string"), null);
var o = {
uuid: i,
type: "uuid"
};
r && r.existingAsset && (o.existingAsset = r.existingAsset);
a.load(o, (function(t, e) {
if (t || !e) t = new Error("[AssetLibrary] loading JSON or dependencies failed: " + (t ? t.message : "Unknown error")); else {
if (e.constructor === cc.SceneAsset) {
var r = cc.loader._getReferenceKey(i);
e.scene.dependAssets = h.getDependsRecursively(r);
}
if (d(e)) {
var s = cc.loader._getReferenceKey(i);
a.removeItem(s);
}
}
n && n(t, e);
}));
},
getLibUrlNoExt: function(t, e) {
t = l(t);
return (e ? m + "assets/" : _) + t.slice(0, 2) + "/" + t;
},
_queryAssetInfoInEditor: function(t, e) {
0;
},
_getAssetInfoInRuntime: function(t, e) {
e = e || {
url: null,
raw: !1
};
var i = f[t];
if (i && !u.isChildClassOf(i.type, cc.Asset)) {
e.url = m + i.url;
e.raw = !0;
} else {
e.url = this.getLibUrlNoExt(t) + ".json";
e.raw = !1;
}
return e;
},
_uuidInSettings: function(t) {
return t in f;
},
queryAssetInfo: function(t, e) {
var i = this._getAssetInfoInRuntime(t);
e(null, i.url, i.raw);
},
parseUuidInEditor: function(t) {},
loadJson: function(t, e) {
var i = "" + (new Date().getTime() + Math.random()), n = {
uuid: i,
type: "uuid",
content: t,
skips: [ a.assetLoader.id, a.downloader.id ]
};
a.load(n, (function(t, n) {
if (t) t = new Error("[AssetLibrary] loading JSON or dependencies failed: " + t.message); else {
if (n.constructor === cc.SceneAsset) {
var r = cc.loader._getReferenceKey(i);
n.scene.dependAssets = h.getDependsRecursively(r);
}
if (d(n)) {
var s = cc.loader._getReferenceKey(i);
a.removeItem(s);
}
}
n._uuid = "";
e && e(t, n);
}));
},
getAssetByUuid: function(t) {
return g._uuidToAsset[t] || null;
},
init: function(t) {
0;
var e = t.libraryPath;
e = e.replace(/\\/g, "/");
_ = cc.path.stripSep(e) + "/";
m = t.rawAssetsBase;
var i = t.md5AssetsMap;
if (i) {
var n = new c(i, _, m);
cc.loader.insertPipeAfter(cc.loader.assetLoader, n);
cc.loader.md5Pipe = n;
}
var r = a._resources;
r.reset();
var s = t.rawAssets;
if (s) for (var h in s) {
var l = s[h];
for (var u in l) {
var d = l[u], g = d[0], y = d[1], v = cc.js._getClassById(y);
if (v) {
f[u] = new p(h + "/" + g, v);
if ("assets" === h) {
var x = cc.path.extname(g);
x && (g = g.slice(0, -x.length));
var A = 1 === d[2];
r.add(g, u, v, !A);
}
} else cc.error("Cannot get", y);
}
}
t.packedAssets && o.initPacks(t.packedAssets);
cc.url._init(t.mountPaths && t.mountPaths.assets || m + "assets");
},
_uuidToAsset: {}
};
n.exports = cc.AssetLibrary = g;
}), {
"../assets/CCAsset": 32,
"../load-pipeline/CCLoader": 107,
"../load-pipeline/auto-release-utils": 111,
"../load-pipeline/md5-pipe": 117,
"../load-pipeline/pack-downloader": 118,
"../utils/decode-uuid": 226,
"./js": 173,
"./utils": 177
} ],
153: [ (function(i, n, r) {
var s = i("./js"), a = i("./CCEnum"), o = i("./utils"), h = (o.isPlainEmptyObj_DEV, 
o.cloneable_DEV, i("./attribute")), l = h.DELIMETER, c = h.getTypeChecker, u = i("./preprocess-class");
i("./requiring-frame");
var _ = [ "name", "extends", "mixins", "ctor", "__ctor__", "properties", "statics", "editor", "__ES6__" ];
function m(t, e) {
t.indexOf(e) < 0 && t.push(e);
}
var f = {
datas: null,
push: function(t) {
if (this.datas) this.datas.push(t); else {
this.datas = [ t ];
var e = this;
setTimeout((function() {
e.init();
}), 0);
}
},
init: function() {
var i = this.datas;
if (i) {
for (var n = 0; n < i.length; ++n) {
var r = i[n], a = r.cls, o = r.props;
"function" === ("object" === (e = typeof o) ? t(o) : e) && (o = o());
var h = s.getClassName(a);
o ? I(a, h, o, a.$super, r.mixins) : cc.errorID(3633, h);
}
this.datas = null;
}
}
};
function d(t, e) {
0;
m(t.__props__, e);
}
var p = [];
function g(t, e, i, n, r) {
var s = n.default;
0;
h.setClassAttr(t, i, "default", s);
d(t, i);
var a = L(t, n, e, i, !1);
if (a) {
for (var o = p, l = 0; l < a.length; l++) {
var c = a[l];
h.attr(t, i, c);
c._onAfterProp && o.push(c._onAfterProp);
}
for (var u = 0; u < o.length; u++) o[u](t, i);
p.length = 0;
a.length = 0;
}
}
function y(t, e, i, n, r) {
var a = n.get, o = n.set, l = t.prototype, c = Object.getOwnPropertyDescriptor(l, i), u = !c;
if (a) {
0;
for (var _ = L(t, n, e, i, !0), m = 0; m < _.length; m++) h.attr(t, i, _[m]);
_.length = 0;
h.setClassAttr(t, i, "serializable", !1);
0;
r || s.get(l, i, a, u, u);
0;
}
if (o) {
if (!r) {
0;
s.set(l, i, o, u, u);
}
0;
}
}
function v(i) {
return "function" === ("object" === (e = typeof i) ? t(i) : e) ? i() : i;
}
function x(t, e, i) {
for (var n in e) t.hasOwnProperty(n) || i && !i(n) || Object.defineProperty(t, n, s.getPropertyDescriptor(e, n));
}
function A(t, e, i, n) {
var r, a, o = n.__ctor__, l = n.ctor, c = n.__ES6__;
if (c) {
r = [ l ];
a = l;
} else {
r = o ? [ o ] : (function(t, e, i) {
function n(t) {
return P._isCCClass(t) ? t.__ctors__ || [] : [ t ];
}
for (var r = [], s = [ t ].concat(e), a = 0; a < s.length; a++) {
var o = s[a];
if (o) for (var h = n(o), l = 0; l < h.length; l++) m(r, h[l]);
}
var c = i.ctor;
c && r.push(c);
return r;
})(e, i, n);
a = E(r, e, t, n);
s.value(a, "extend", (function(t) {
t.extends = this;
return P(t);
}), !0);
}
s.value(a, "__ctors__", r.length > 0 ? r : null, !0);
var u = a.prototype;
if (e) {
if (!c) {
s.extend(a, e);
u = a.prototype;
}
a.$super = e;
0;
}
if (i) {
for (var _ = i.length - 1; _ >= 0; _--) {
var f = i[_];
x(u, f.prototype);
x(a, f, (function(t) {
return f.hasOwnProperty(t) && !0;
}));
P._isCCClass(f) && x(h.getClassAttrs(a).constructor.prototype, h.getClassAttrs(f).constructor.prototype);
}
u.constructor = a;
}
c || (u.__initProps__ = S);
s.setClassName(t, a);
return a;
}
function b(i) {
for (var n = s.getClassName(i), r = i.constructor, a = "new " + n + "(", o = 0; o < r.__props__.length; o++) {
var h = i[r.__props__[o]];
if ("object" === ("object" === (e = typeof h) ? t(h) : e)) {
cc.errorID(3641, n);
return "new " + n + "()";
}
a += h;
o < r.__props__.length - 1 && (a += ",");
}
return a + ")";
}
function T(i) {
for (var n = s.getClassName(i), r = i.constructor, a = new r(), o = 0; o < r.__props__.length; o++) {
var h = r.__props__[o], l = i[h];
if ("object" === ("object" === (e = typeof l) ? t(l) : e)) {
cc.errorID(3641, n);
return a;
}
a[h] = l;
}
return a;
}
function C(t) {
return JSON.stringify(t).replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029");
}
var w = /^[A-Za-z_$][0-9A-Za-z_$]*$/;
function S(i) {
var n = h.getClassAttrs(i), r = i.__props__;
if (null === r) {
f.init();
r = i.__props__;
}
var s = (function(i, n) {
return function() {
for (var r = [], s = 0; s < n.length; s++) {
var a = n[s], o = a + l + "default";
if (o in i) {
var h, c = i[o];
if ("object" === ("object" == (e = typeof c) ? t(c) : e) && c) h = c instanceof cc.ValueType ? T(c) : Array.isArray(c) ? [] : {}; else if ("function" === (e = typeof c, 
"object" === e ? t(c) : e)) {
var u = r.length;
r.push(c);
h = r[u]();
} else h = c;
this[a] = h;
}
}
};
})(n, r);
i.prototype.__initProps__ = s;
s.call(this);
}
var E = function(t, e, i, n) {
var r = e && M(e, n, i);
return function e() {
r && (this._super = null);
this.__initProps__(e);
var n = t.length, s = e.__ctors__;
if (n > 0) {
if (!(i && i.startsWith("cc."))) try {
if (1 === n) s[0].apply(this, arguments); else for (var a = 0; a < n; a++) s[a].apply(this, arguments);
} catch (t) {
cc._throw(t);
} else if (1 === n) s[0].apply(this, arguments); else for (var o = 0; o < n; o++) s[o].apply(this, arguments);
}
};
};
var D = /xyz/.test((function() {
xyz;
})) ? /\b\._super\b/ : /.*/;
/xyz/.test((function() {
xyz;
}));
function M(i, n, r) {
var a = !1;
for (var o in n) if (!(_.indexOf(o) >= 0)) {
var h = n[o];
if ("function" === ("object" === (e = typeof h) ? t(h) : e)) {
var l = s.getPropertyDescriptor(i.prototype, o);
if (l) {
var c = l.value;
if ("function" === ("object" === (e = typeof c) ? t(c) : e)) {
if (D.test(h)) {
a = !0;
n[o] = (function(t, e) {
return function() {
var i = this._super;
this._super = t;
var n = e.apply(this, arguments);
this._super = i;
return n;
};
})(c, h);
}
continue;
}
}
0;
}
}
return a;
}
function I(t, e, i, n, r, s) {
t.__props__ = [];
n && n.__props__ && (t.__props__ = n.__props__.slice());
if (r) for (var a = 0; a < r.length; ++a) {
var o = r[a];
o.__props__ && (t.__props__ = t.__props__.concat(o.__props__.filter((function(e) {
return t.__props__.indexOf(e) < 0;
}))));
}
if (i) {
u.preprocessAttrs(i, e, t, s);
for (var h in i) {
var l = i[h];
"default" in l ? g(t, e, h, l) : y(t, e, h, l, s);
}
}
}
function P(i) {
var n = (i = i || {}).name, r = i.extends, a = i.mixins, o = (function(t, e, i, n) {
var r = cc.Component, a = cc._RF.peek();
if (a && s.isChildClassOf(e, r)) {
if (s.isChildClassOf(a.cls, r)) {
cc.errorID(3615);
return null;
}
t = t || a.script;
}
var o = A(t, e, i, n);
if (a) if (s.isChildClassOf(e, r)) {
var h = a.uuid;
h && s._setClassId(h, o);
a.cls = o;
} else s.isChildClassOf(a.cls, r) || (a.cls = o);
return o;
})(n, r, a, i);
n || (n = cc.js.getClassName(o));
o._sealed = !0;
r && (r._sealed = !1);
var h = i.properties;
if ("function" === ("object" === (e = typeof h) ? t(h) : e) || r && null === r.__props__ || a && a.some((function(t) {
return null === t.__props__;
}))) {
f.push({
cls: o,
props: h,
mixins: a
});
o.__props__ = null;
} else I(o, n, h, r, i.mixins, i.__ES6__);
var l = i.statics;
if (l) {
var c;
0;
for (c in l) o[c] = l[c];
}
for (var m in i) if (!(_.indexOf(m) >= 0)) {
var d = i[m];
u.validateMethodWithProps(d, m, n, o, r) && s.value(o.prototype, m, d, !0, !0);
}
var p = i.editor;
p && s.isChildClassOf(r, cc.Component) && cc.Component._registerEditorProps(o, p);
return o;
}
P._isCCClass = function(t) {
return t && t.hasOwnProperty("__ctors__");
};
P._fastDefine = function(t, e, i) {
s.setClassName(t, e);
for (var n = e.__props__ = Object.keys(i), r = h.getClassAttrsProto(e), a = 0; a < n.length; a++) {
var o = n[a];
r[o + l + "visible"] = !1;
r[o + l + "default"] = i[o];
}
};
P.Attr = h;
P.attr = h.attr;
P.getInheritanceChain = function(t) {
for (var e = []; t = s.getSuper(t); ) t !== Object && e.push(t);
return e;
};
var B = {
Integer: "Number",
Float: "Number",
Boolean: "Boolean",
String: "String"
}, R = [];
function L(i, n, r, s, o) {
var u = null, _ = "";
function m() {
_ = s + l;
return u = h.getClassAttrsProto(i);
}
R.length = 0;
var f = R, d = n.type;
if (d) {
var p = B[d];
if (p) f.push({
type: d,
_onAfterProp: c(p, "cc." + d)
}); else if ("Object" === d) 0; else if (d === h.ScriptUuid) {
var g = h.ObjectType(cc.ScriptAsset);
g.type = "Script";
f.push(g);
} else "object" === ("object" === (e = typeof d) ? t(d) : e) ? a.isEnum(d) && f.push({
type: "Enum",
enumList: a.getList(d)
}) : "function" === ("object" === (e = typeof d) ? t(d) : e) && (n.url ? f.push({
type: "Object",
ctor: d,
_onAfterProp: c("String", "cc.String")
}) : f.push(n._short ? {
type: "Object",
ctor: d
} : h.ObjectType(d)));
}
function y(i, r) {
if (i in n) {
var s = n[i];
("object" === (e = typeof s) ? t(s) : e) === r && ((u || m())[_ + i] = s);
}
}
n.editorOnly && ((u || m())[_ + "editorOnly"] = !0);
0;
n.url && ((u || m())[_ + "saveUrlAsAsset"] = !0);
!1 === n.serializable && ((u || m())[_ + "serializable"] = !1);
y("formerlySerializedAs", "string");
0;
var v = n.range;
if (v) if (Array.isArray(v)) if (v.length >= 2) {
(u || m())[_ + "min"] = v[0];
u[_ + "max"] = v[1];
v.length > 2 && (u[_ + "step"] = v[2]);
} else 0; else 0;
y("min", "number");
y("max", "number");
y("step", "number");
return f;
}
cc.Class = P;
n.exports = {
isArray: function(t) {
t = v(t);
return Array.isArray(t);
},
fastDefine: P._fastDefine,
getNewValueTypeCode: b,
IDENTIFIER_RE: w,
escapeForJS: C,
getDefault: v
};
0;
}), {
"./CCEnum": 155,
"./attribute": 165,
"./js": 173,
"./preprocess-class": 174,
"./requiring-frame": 175,
"./utils": 177
} ],
154: [ (function(i, n, r) {
i("./CCClass");
var s = i("./preprocess-class"), a = i("./js"), o = "__ccclassCache__";
function h(t) {
return t;
}
function l(t, e) {
return t[e] || (t[e] = {});
}
function c(i) {
return function(n) {
return "function" === ("object" === (e = typeof n) ? t(n) : e) ? i(n) : function(t) {
return i(t, n);
};
};
}
function u(t, e, i) {
return function(t) {
0;
return function(i) {
return e(i, t);
};
};
}
var _ = u.bind(null, !1);
function m(t) {
return u.bind(null, !1);
}
var f = m(), d = m();
function p(t, e) {
0;
return l(t, o);
}
function g(i, n, r, o, h, l) {
var c;
o && (c = (c = s.getFullFormOfProperty(o)) || o);
var u = n[r], _ = a.mixin(u || {}, c || {});
if (h && (h.get || h.set)) {
h.get && (_.get = h.get);
h.set && (_.set = h.set);
} else {
0;
var m = void 0;
if (h) {
if (h.initializer) {
m = (function(i) {
var n;
try {
n = i();
} catch (t) {
return i;
}
return "object" !== ("object" == (e = typeof n) ? t(n) : e) || null === n ? n : i;
})(h.initializer);
!0;
}
} else {
var f = l.default || (l.default = (function(t) {
var e;
try {
e = new t();
} catch (t) {
return {};
}
return e;
})(i));
if (f.hasOwnProperty(r)) {
m = f[r];
!0;
}
}
0;
_.default = m;
}
n[r] = _;
}
var y = c((function(t, e) {
var i = a.getSuper(t);
i === Object && (i = null);
var n = {
name: e,
extends: i,
ctor: t,
__ES6__: !0
}, r = t[o];
if (r) {
var s = r.proto;
s && a.mixin(n, s);
t[o] = void 0;
}
return cc.Class(n);
}));
function v(t, e, i) {
return t((function(t, n) {
var r = p(t);
if (r) {
var s = void 0 !== i ? i : n;
l(l(r, "proto"), "editor")[e] = s;
}
}), e);
}
function x(t) {
return t(h);
}
var A = x(c), b = v(_, "requireComponent"), T = x(f), C = v(d, "executionOrder"), w = x(c), S = x(c), E = x(f), D = x(f), M = x(f);
cc._decorator = n.exports = {
ccclass: y,
property: function(i, n, r) {
var s = null;
function a(t, e, i) {
var n = p(t.constructor);
if (n) {
var r = l(l(n, "proto"), "properties");
g(t.constructor, r, e, s, i, n);
}
}
if ("undefined" === ("object" == (e = typeof n) ? t(n) : e)) {
s = i;
return a;
}
a(i, n, r);
},
executeInEditMode: A,
requireComponent: b,
menu: T,
executionOrder: C,
disallowMultiple: w,
playOnFocus: S,
inspector: E,
icon: D,
help: M,
mixins: function() {
for (var t = [], e = 0; e < arguments.length; e++) t[e] = arguments[e];
return function(e) {
var i = p(e);
i && (l(i, "proto").mixins = t);
};
}
};
}), {
"./CCClass": 153,
"./js": 173,
"./preprocess-class": 174,
"./utils": 177
} ],
155: [ (function(i, n, r) {
var s = i("./js");
function a(i) {
if ("__enums__" in i) return i;
s.value(i, "__enums__", null, !0);
for (var n = -1, r = Object.keys(i), a = 0; a < r.length; a++) {
var o = r[a], h = i[o];
if (-1 === h) {
h = ++n;
i[o] = h;
} else if ("number" === ("object" === (e = typeof h) ? t(h) : e)) n = h; else if ("string" === (e = typeof h, 
"object" === e ? t(h) : e) && Number.isInteger(parseFloat(o))) continue;
var l = "" + h;
if (o !== l) {
0;
s.value(i, l, o);
}
}
return i;
}
a.isEnum = function(t) {
return t && t.hasOwnProperty("__enums__");
};
a.getList = function(t) {
if (t.__enums__) return t.__enums__;
var e = t.__enums__ = [];
for (var i in t) {
var n = t[i];
Number.isInteger(n) && e.push({
name: i,
value: n
});
}
e.sort((function(t, e) {
return t.value - e.value;
}));
return e;
};
n.exports = cc.Enum = a;
}), {
"./js": 173
} ],
156: [ (function(t, e, i) {
var n = t("../event-manager"), r = t("./CCInputManager"), s = void 0;
cc.Acceleration = function(t, e, i, n) {
this.x = t || 0;
this.y = e || 0;
this.z = i || 0;
this.timestamp = n || 0;
};
r.setAccelerometerEnabled = function(t) {
var e = this;
if (e._accelEnabled !== t) {
e._accelEnabled = t;
var i = cc.director.getScheduler();
i.enableForTarget(e);
if (e._accelEnabled) {
e._registerAccelerometerEvent();
e._accelCurTime = 0;
i.scheduleUpdate(e);
} else {
e._unregisterAccelerometerEvent();
e._accelCurTime = 0;
i.unscheduleUpdate(e);
}
}
};
r.setAccelerometerInterval = function(t) {
this._accelInterval !== t && (this._accelInterval = t);
};
r._registerKeyboardEvent = function() {
cc.game.canvas.addEventListener("keydown", (function(t) {
n.dispatchEvent(new cc.Event.EventKeyboard(t.keyCode, !0));
t.stopPropagation();
t.preventDefault();
}), !1);
cc.game.canvas.addEventListener("keyup", (function(t) {
n.dispatchEvent(new cc.Event.EventKeyboard(t.keyCode, !1));
t.stopPropagation();
t.preventDefault();
}), !1);
};
r._registerAccelerometerEvent = function() {
var t = window;
this._acceleration = new cc.Acceleration();
this._accelDeviceEvent = t.DeviceMotionEvent || t.DeviceOrientationEvent;
cc.sys.browserType === cc.sys.BROWSER_TYPE_MOBILE_QQ && (this._accelDeviceEvent = window.DeviceOrientationEvent);
var e = this._accelDeviceEvent === t.DeviceMotionEvent ? "devicemotion" : "deviceorientation", i = navigator.userAgent;
(/Android/.test(i) || /Adr/.test(i) && cc.sys.browserType === cc.BROWSER_TYPE_UC) && (this._minus = -1);
s = this.didAccelerate.bind(this);
t.addEventListener(e, s, !1);
};
r._unregisterAccelerometerEvent = function() {
var t = window, e = this._accelDeviceEvent === t.DeviceMotionEvent ? "devicemotion" : "deviceorientation";
s && t.removeEventListener(e, s, !1);
};
r.didAccelerate = function(t) {
var e = window;
if (this._accelEnabled) {
var i = this._acceleration, n = void 0, r = void 0, s = void 0;
if (this._accelDeviceEvent === window.DeviceMotionEvent) {
var a = t.accelerationIncludingGravity;
n = this._accelMinus * a.x * .1;
r = this._accelMinus * a.y * .1;
s = .1 * a.z;
} else {
n = t.gamma / 90 * .981;
r = -t.beta / 90 * .981;
s = t.alpha / 90 * .981;
}
if (cc.view._isRotated) {
var o = n;
n = -r;
r = o;
}
i.x = n;
i.y = r;
i.z = s;
i.timestamp = t.timeStamp || Date.now();
var h = i.x;
if (90 === e.orientation) {
i.x = -i.y;
i.y = h;
} else if (-90 === e.orientation) {
i.x = i.y;
i.y = -h;
} else if (180 === e.orientation) {
i.x = -i.x;
i.y = -i.y;
}
if (cc.sys.os === cc.sys.OS_ANDROID && cc.sys.browserType !== cc.sys.BROWSER_TYPE_MOBILE_QQ) {
i.x = -i.x;
i.y = -i.y;
}
}
};
}), {
"../event-manager": 96,
"./CCInputManager": 157
} ],
157: [ (function(t, e, i) {
t("../platform/js");
var n = t("./CCMacro"), r = t("./CCSys"), s = t("../event-manager"), a = n.TOUCH_TIMEOUT, o = {
_mousePressed: !1,
_isRegisterEvent: !1,
_preTouchPoint: cc.v2(0, 0),
_prevMousePoint: cc.v2(0, 0),
_preTouchPool: [],
_preTouchPoolPointer: 0,
_touches: [],
_touchesIntegerDict: {},
_indexBitsUsed: 0,
_maxTouches: 8,
_accelEnabled: !1,
_accelInterval: .2,
_accelMinus: 1,
_accelCurTime: 0,
_acceleration: null,
_accelDeviceEvent: null,
_getUnUsedIndex: function() {
for (var t = this._indexBitsUsed, e = cc.sys.now(), i = 0; i < this._maxTouches; i++) {
if (!(1 & t)) {
this._indexBitsUsed |= 1 << i;
return i;
}
var n = this._touches[i];
if (e - n._lastModified > a) {
this._removeUsedIndexBit(i);
delete this._touchesIntegerDict[n.getID()];
return i;
}
t >>= 1;
}
return -1;
},
_removeUsedIndexBit: function(t) {
if (!(t < 0 || t >= this._maxTouches)) {
var e = 1 << t;
e = ~e;
this._indexBitsUsed &= e;
}
},
_glView: null,
handleTouchesBegin: function(t) {
for (var e = void 0, i = void 0, n = void 0, a = [], o = this._touchesIntegerDict, h = r.now(), l = 0, c = t.length; l < c; l++) if (null == o[n = (e = t[l]).getID()]) {
var u = this._getUnUsedIndex();
if (-1 === u) {
cc.logID(2300, u);
continue;
}
(i = this._touches[u] = new cc.Touch(e._point.x, e._point.y, e.getID()))._lastModified = h;
i._setPrevPoint(e._prevPoint);
o[n] = u;
a.push(i);
}
if (a.length > 0) {
this._glView._convertTouchesWithScale(a);
var _ = new cc.Event.EventTouch(a);
_._eventCode = cc.Event.EventTouch.BEGAN;
s.dispatchEvent(_);
}
},
handleTouchesMove: function(t) {
for (var e = void 0, i = void 0, n = void 0, a = [], o = this._touches, h = r.now(), l = 0, c = t.length; l < c; l++) {
n = (e = t[l]).getID();
if (null != (i = this._touchesIntegerDict[n]) && o[i]) {
o[i]._setPoint(e._point);
o[i]._setPrevPoint(e._prevPoint);
o[i]._lastModified = h;
a.push(o[i]);
}
}
if (a.length > 0) {
this._glView._convertTouchesWithScale(a);
var u = new cc.Event.EventTouch(a);
u._eventCode = cc.Event.EventTouch.MOVED;
s.dispatchEvent(u);
}
},
handleTouchesEnd: function(t) {
var e = this.getSetOfTouchesEndOrCancel(t);
if (e.length > 0) {
this._glView._convertTouchesWithScale(e);
var i = new cc.Event.EventTouch(e);
i._eventCode = cc.Event.EventTouch.ENDED;
s.dispatchEvent(i);
}
},
handleTouchesCancel: function(t) {
var e = this.getSetOfTouchesEndOrCancel(t);
if (e.length > 0) {
this._glView._convertTouchesWithScale(e);
var i = new cc.Event.EventTouch(e);
i._eventCode = cc.Event.EventTouch.CANCELLED;
s.dispatchEvent(i);
}
},
getSetOfTouchesEndOrCancel: function(t) {
for (var e = void 0, i = void 0, n = void 0, r = [], s = this._touches, a = this._touchesIntegerDict, o = 0, h = t.length; o < h; o++) if (null != (i = a[n = (e = t[o]).getID()]) && s[i]) {
s[i]._setPoint(e._point);
s[i]._setPrevPoint(e._prevPoint);
r.push(s[i]);
this._removeUsedIndexBit(i);
delete a[n];
}
return r;
},
getHTMLElementPosition: function(t) {
if (r.platform === r.WECHAT_GAME) return {
left: 0,
top: 0,
width: window.innerWidth,
height: window.innerHeight
};
var e = document.documentElement, i = window.pageXOffset - e.clientLeft, n = window.pageYOffset - e.clientTop;
if (t.getBoundingClientRect) {
var s = t.getBoundingClientRect();
return {
left: s.left + i,
top: s.top + n,
width: s.width,
height: s.height
};
}
return t instanceof HTMLCanvasElement ? {
left: i,
top: n,
width: t.width,
height: t.height
} : {
left: i,
top: n,
width: parseInt(t.style.width),
height: parseInt(t.style.height)
};
},
getPreTouch: function(t) {
for (var e = null, i = this._preTouchPool, n = t.getID(), r = i.length - 1; r >= 0; r--) if (i[r].getID() === n) {
e = i[r];
break;
}
e || (e = t);
return e;
},
setPreTouch: function(t) {
for (var e = !1, i = this._preTouchPool, n = t.getID(), r = i.length - 1; r >= 0; r--) if (i[r].getID() === n) {
i[r] = t;
e = !0;
break;
}
if (!e) if (i.length <= 50) i.push(t); else {
i[this._preTouchPoolPointer] = t;
this._preTouchPoolPointer = (this._preTouchPoolPointer + 1) % 50;
}
},
getTouchByXY: function(t, e, i) {
var n = this._preTouchPoint, r = this._glView.convertToLocationInView(t, e, i), s = new cc.Touch(r.x, r.y, 0);
s._setPrevPoint(n.x, n.y);
n.x = r.x;
n.y = r.y;
return s;
},
getMouseEvent: function(t, e, i) {
var n = this._prevMousePoint, r = new cc.Event.EventMouse(i);
r._setPrevCursor(n.x, n.y);
n.x = t.x;
n.y = t.y;
this._glView._convertMouseToLocationInView(n, e);
r.setLocation(n.x, n.y);
return r;
},
getPointByEvent: function(t, e) {
if (null != t.pageX) return {
x: t.pageX,
y: t.pageY
};
if (r.platform === r.WECHAT_GAME) {
e.left = 0;
e.top = 0;
} else {
e.left -= document.body.scrollLeft;
e.top -= document.body.scrollTop;
}
return {
x: t.clientX,
y: t.clientY
};
},
getTouchesByEvent: function(t, e) {
for (var i = [], n = this._glView, s = void 0, a = void 0, o = void 0, h = this._preTouchPoint, l = t.changedTouches.length, c = 0; c < l; c++) if (s = t.changedTouches[c]) {
var u = void 0;
u = r.BROWSER_TYPE_FIREFOX === r.browserType ? n.convertToLocationInView(s.pageX, s.pageY, e) : n.convertToLocationInView(s.clientX, s.clientY, e);
if (null != s.identifier) {
a = new cc.Touch(u.x, u.y, s.identifier);
o = this.getPreTouch(a).getLocation();
a._setPrevPoint(o.x, o.y);
this.setPreTouch(a);
} else (a = new cc.Touch(u.x, u.y))._setPrevPoint(h.x, h.y);
h.x = u.x;
h.y = u.y;
i.push(a);
}
return i;
},
registerSystemEvent: function(t) {
if (!this._isRegisterEvent) {
this._glView = cc.view;
var e = this, i = r.isMobile, n = "mouse" in r.capabilities, a = "touches" in r.capabilities;
if (r.platform === r.WECHAT_GAME) {
i = !1;
a = !0;
n = !1;
}
if (n) {
if (!i) {
window.addEventListener("mousedown", (function() {
e._mousePressed = !0;
}), !1);
window.addEventListener("mouseup", (function(i) {
if (e._mousePressed) {
e._mousePressed = !1;
var n = e.getHTMLElementPosition(t), r = e.getPointByEvent(i, n);
if (!cc.rect(n.left, n.top, n.width, n.height).contains(r)) {
e.handleTouchesEnd([ e.getTouchByXY(r.x, r.y, n) ]);
var a = e.getMouseEvent(r, n, cc.Event.EventMouse.UP);
a.setButton(i.button);
s.dispatchEvent(a);
}
}
}), !1);
}
for (var o = cc.Event.EventMouse, h = [ !i && [ "mousedown", o.DOWN, function(i, n, r, s) {
e._mousePressed = !0;
e.handleTouchesBegin([ e.getTouchByXY(r.x, r.y, s) ]);
t.focus();
} ], !i && [ "mouseup", o.UP, function(t, i, n, r) {
e._mousePressed = !1;
e.handleTouchesEnd([ e.getTouchByXY(n.x, n.y, r) ]);
} ], !i && [ "mousemove", o.MOVE, function(t, i, n, r) {
e.handleTouchesMove([ e.getTouchByXY(n.x, n.y, r) ]);
e._mousePressed || i.setButton(null);
} ], [ "mousewheel", o.SCROLL, function(t, e) {
e.setScrollData(0, t.wheelDelta);
} ], [ "DOMMouseScroll", o.SCROLL, function(t, e) {
e.setScrollData(0, -120 * t.detail);
} ] ], l = 0; l < h.length; ++l) {
var c = h[l];
c && (function() {
var i = c[0], n = c[1], r = c[2];
t.addEventListener(i, (function(i) {
var a = e.getHTMLElementPosition(t), o = e.getPointByEvent(i, a), h = e.getMouseEvent(o, a, n);
h.setButton(i.button);
r(i, h, o, a);
s.dispatchEvent(h);
i.stopPropagation();
i.preventDefault();
}), !1);
})();
}
}
if (window.navigator.msPointerEnabled) {
var u = {
MSPointerDown: e.handleTouchesBegin,
MSPointerMove: e.handleTouchesMove,
MSPointerUp: e.handleTouchesEnd,
MSPointerCancel: e.handleTouchesCancel
}, _ = function(i) {
var n = u[i];
t.addEventListener(i, (function(i) {
var r = e.getHTMLElementPosition(t);
r.left -= document.documentElement.scrollLeft;
r.top -= document.documentElement.scrollTop;
n.call(e, [ e.getTouchByXY(i.clientX, i.clientY, r) ]);
i.stopPropagation();
}), !1);
};
for (var m in u) _(m);
}
a && (function() {
var i = {
touchstart: function(i) {
e.handleTouchesBegin(i);
r.platform !== r.WECHAT_GAME && t.focus();
},
touchmove: function(t) {
e.handleTouchesMove(t);
},
touchend: function(t) {
e.handleTouchesEnd(t);
},
touchcancel: function(t) {
e.handleTouchesCancel(t);
}
}, n = void 0;
if (cc.sys.browserType === cc.sys.BROWSER_TYPE_WECHAT_GAME_SUB) {
i = {
onTouchStart: i.touchstart,
onTouchMove: i.touchmove,
onTouchEnd: i.touchend,
onTouchCancel: i.touchcancel
};
n = function(n) {
var r = i[n];
wx[n]((function(i) {
if (i.changedTouches) {
var n = e.getHTMLElementPosition(t), s = document.body;
n.left -= s.scrollLeft || 0;
n.top -= s.scrollTop || 0;
r(e.getTouchesByEvent(i, n));
}
}));
};
} else n = function(n) {
var r = i[n];
t.addEventListener(n, (function(i) {
if (i.changedTouches) {
var n = e.getHTMLElementPosition(t), s = document.body;
n.left -= s.scrollLeft || 0;
n.top -= s.scrollTop || 0;
r(e.getTouchesByEvent(i, n));
i.stopPropagation();
i.preventDefault();
}
}), !1);
};
for (var s in i) n(s);
})();
cc.sys.browserType !== cc.sys.BROWSER_TYPE_WECHAT_GAME_SUB && this._registerKeyboardEvent();
this._isRegisterEvent = !0;
}
},
_registerKeyboardEvent: function() {},
_registerAccelerometerEvent: function() {},
update: function(t) {
if (this._accelCurTime > this._accelInterval) {
this._accelCurTime -= this._accelInterval;
s.dispatchEvent(new cc.Event.EventAcceleration(this._acceleration));
}
this._accelCurTime += t;
}
};
_cc.inputManager = o;
e.exports = o;
}), {
"../event-manager": 96,
"../platform/js": 173,
"./CCMacro": 158,
"./CCSys": 162
} ],
158: [ (function(t, e, i) {
var n = t("./js");
cc.macro = {
RAD: Math.PI / 180,
DEG: 180 / Math.PI,
REPEAT_FOREVER: Number.MAX_VALUE - 1,
FLT_EPSILON: 1.192092896e-7,
MIN_ZINDEX: -Math.pow(2, 15),
MAX_ZINDEX: Math.pow(2, 15) - 1,
ONE: 1,
ZERO: 0,
SRC_ALPHA: 770,
SRC_ALPHA_SATURATE: 776,
SRC_COLOR: 768,
DST_ALPHA: 772,
DST_COLOR: 774,
ONE_MINUS_SRC_ALPHA: 771,
ONE_MINUS_SRC_COLOR: 769,
ONE_MINUS_DST_ALPHA: 773,
ONE_MINUS_DST_COLOR: 775,
ONE_MINUS_CONSTANT_ALPHA: 32772,
ONE_MINUS_CONSTANT_COLOR: 32770,
ORIENTATION_PORTRAIT: 1,
ORIENTATION_LANDSCAPE: 2,
ORIENTATION_AUTO: 3,
DENSITYDPI_DEVICE: "device-dpi",
DENSITYDPI_HIGH: "high-dpi",
DENSITYDPI_MEDIUM: "medium-dpi",
DENSITYDPI_LOW: "low-dpi",
FIX_ARTIFACTS_BY_STRECHING_TEXEL_TMX: !0,
DIRECTOR_STATS_POSITION: cc.v2(0, 0),
ENABLE_STACKABLE_ACTIONS: !0,
TOUCH_TIMEOUT: 5e3,
BATCH_VERTEX_COUNT: 2e4,
ENABLE_GC_FOR_NATIVE_OBJECTS: !0,
ENABLE_TILEDMAP_CULLING: !0,
DOWNLOAD_MAX_CONCURRENT: 64,
ENABLE_TRANSPARENT_CANVAS: !1,
ENABLE_WEBGL_ANTIALIAS: !1,
ENABLE_CULLING: !1
};
n.getset(cc.macro, "ENABLE_3D", (function() {
return cc._polyfill3D.enabled;
}), (function(t) {
t ? cc._polyfill3D.enable() : cc._polyfill3D.disable();
}));
cc.macro.KEY = {
none: 0,
back: 6,
menu: 18,
backspace: 8,
tab: 9,
enter: 13,
shift: 16,
ctrl: 17,
alt: 18,
pause: 19,
capslock: 20,
escape: 27,
space: 32,
pageup: 33,
pagedown: 34,
end: 35,
home: 36,
left: 37,
up: 38,
right: 39,
down: 40,
select: 41,
insert: 45,
Delete: 46,
0: 48,
1: 49,
2: 50,
3: 51,
4: 52,
5: 53,
6: 54,
7: 55,
8: 56,
9: 57,
a: 65,
b: 66,
c: 67,
d: 68,
e: 69,
f: 70,
g: 71,
h: 72,
i: 73,
j: 74,
k: 75,
l: 76,
m: 77,
n: 78,
o: 79,
p: 80,
q: 81,
r: 82,
s: 83,
t: 84,
u: 85,
v: 86,
w: 87,
x: 88,
y: 89,
z: 90,
num0: 96,
num1: 97,
num2: 98,
num3: 99,
num4: 100,
num5: 101,
num6: 102,
num7: 103,
num8: 104,
num9: 105,
"*": 106,
"+": 107,
"-": 109,
numdel: 110,
"/": 111,
f1: 112,
f2: 113,
f3: 114,
f4: 115,
f5: 116,
f6: 117,
f7: 118,
f8: 119,
f9: 120,
f10: 121,
f11: 122,
f12: 123,
numlock: 144,
scrolllock: 145,
";": 186,
semicolon: 186,
equal: 187,
"=": 187,
",": 188,
comma: 188,
dash: 189,
".": 190,
period: 190,
forwardslash: 191,
grave: 192,
"[": 219,
openbracket: 219,
backslash: 220,
"]": 221,
closebracket: 221,
quote: 222,
dpadLeft: 1e3,
dpadRight: 1001,
dpadUp: 1003,
dpadDown: 1004,
dpadCenter: 1005
};
cc.macro.ImageFormat = cc.Enum({
JPG: 0,
PNG: 1,
TIFF: 2,
WEBP: 3,
PVR: 4,
ETC: 5,
S3TC: 6,
ATITC: 7,
TGA: 8,
RAWDATA: 9,
UNKNOWN: 10
});
cc.macro.BlendFactor = cc.Enum({
ONE: 1,
ZERO: 0,
SRC_ALPHA: 770,
SRC_COLOR: 768,
DST_ALPHA: 772,
DST_COLOR: 774,
ONE_MINUS_SRC_ALPHA: 771,
ONE_MINUS_SRC_COLOR: 769,
ONE_MINUS_DST_ALPHA: 773,
ONE_MINUS_DST_COLOR: 775
});
cc.macro.TextAlignment = cc.Enum({
LEFT: 0,
CENTER: 1,
RIGHT: 2
});
cc.macro.VerticalTextAlignment = cc.Enum({
TOP: 0,
CENTER: 1,
BOTTOM: 2
});
e.exports = cc.macro;
}), {
"./js": 173
} ],
159: [ (function(i, n, r) {
var s = i("./js"), a = i("./CCClass"), o = 1;
function h() {
this._name = "";
this._objFlags = 0;
}
a.fastDefine("cc.Object", h, {
_name: "",
_objFlags: 0
});
s.value(h, "Flags", {
Destroyed: o,
DontSave: 8,
EditorOnly: 16,
Dirty: 32,
DontDestroy: 64,
PersistentMask: -4192741,
Destroying: 128,
Deactivating: 256,
LockedInEditor: 512,
IsPreloadStarted: 8192,
IsOnLoadStarted: 32768,
IsOnLoadCalled: 16384,
IsOnEnableCalled: 2048,
IsStartCalled: 65536,
IsEditorOnEnableCalled: 4096,
IsPositionLocked: 1 << 21,
IsRotationLocked: 1 << 17,
IsScaleLocked: 1 << 18,
IsAnchorLocked: 1 << 19,
IsSizeLocked: 1 << 20
});
var l = [];
function c() {
for (var t = l.length, e = 0; e < t; ++e) {
var i = l[e];
i._objFlags & o || i._destroyImmediate();
}
t === l.length ? l.length = 0 : l.splice(0, t);
0;
}
s.value(h, "_deferredDestroy", c);
0;
var u = h.prototype;
s.getset(u, "name", (function() {
return this._name;
}), (function(t) {
this._name = t;
}), !0);
s.get(u, "isValid", (function() {
return !(this._objFlags & o);
}), !0);
0;
u.destroy = function() {
if (this._objFlags & o) {
cc.warnID(5e3);
return !1;
}
if (4 & this._objFlags) return !1;
this._objFlags |= 4;
l.push(this);
0;
return !0;
};
0;
u._destruct = function() {
var i = this.constructor, n = i.__destruct__;
if (!n) {
n = (function(i, n) {
var r, s = {};
for (r in i) if (i.hasOwnProperty(r)) switch ("object" == (e = typeof i[r]) ? t(i[r]) : e) {
case "string":
s[r] = "";
break;

case "object":
case "function":
s[r] = null;
}
if (cc.Class._isCCClass(n)) for (var a = cc.Class.Attr.getClassAttrs(n), o = n.__props__, h = 0; h < o.length; h++) {
var l = (r = o[h]) + cc.Class.Attr.DELIMETER + "default";
if (l in a) switch ("object" == (e = typeof a[l]) ? t(a[l]) : e) {
case "string":
s[r] = "";
break;

case "object":
case "function":
s[r] = null;
break;

case "undefined":
s[r] = void 0;
}
}
var c = i instanceof cc._BaseNode || i instanceof cc.Component;
return function(t) {
for (r in s) c && "_id" === r || (t[r] = s[r]);
};
})(this, i);
s.value(i, "__destruct__", n, !0);
}
n(this);
};
u._onPreDestroy = null;
u._destroyImmediate = function() {
if (this._objFlags & o) cc.errorID(5e3); else {
this._onPreDestroy && this._onPreDestroy();
this._destruct();
this._objFlags |= o;
}
};
0;
u._deserialize = null;
cc.isValid = function(i, n) {
return "object" === ("object" === (e = typeof i) ? t(i) : e) ? !(!i || i._objFlags & (n ? 4 | o : o)) : "undefined" !== ("object" === (e = typeof i) ? t(i) : e);
};
0;
cc.Object = n.exports = h;
}), {
"./CCClass": 153,
"./js": 173
} ],
160: [ (function(t, e, i) {
var n = t("../platform/js");
cc.SAXParser = function() {
if (window.DOMParser) {
this._isSupportDOMParser = !0;
this._parser = new DOMParser();
} else {
this._isSupportDOMParser = !1;
this._parser = null;
}
};
cc.SAXParser.prototype = {
constructor: cc.SAXParser,
parse: function(t) {
return this._parseXML(t);
},
_parseXML: function(t) {
var e;
if (this._isSupportDOMParser) e = this._parser.parseFromString(t, "text/xml"); else {
(e = new ActiveXObject("Microsoft.XMLDOM")).async = "false";
e.loadXML(t);
}
return e;
}
};
cc.PlistParser = function() {
cc.SAXParser.call(this);
};
n.extend(cc.PlistParser, cc.SAXParser);
n.mixin(cc.PlistParser.prototype, {
parse: function(t) {
var e = this._parseXML(t), i = e.documentElement;
if ("plist" !== i.tagName) {
cc.warnID(5100);
return {};
}
for (var n = null, r = 0, s = i.childNodes.length; r < s && 1 !== (n = i.childNodes[r]).nodeType; r++) ;
e = null;
return this._parseNode(n);
},
_parseNode: function(t) {
var e = null, i = t.tagName;
if ("dict" === i) e = this._parseDict(t); else if ("array" === i) e = this._parseArray(t); else if ("string" === i) if (1 === t.childNodes.length) e = t.firstChild.nodeValue; else {
e = "";
for (var n = 0; n < t.childNodes.length; n++) e += t.childNodes[n].nodeValue;
} else "false" === i ? e = !1 : "true" === i ? e = !0 : "real" === i ? e = parseFloat(t.firstChild.nodeValue) : "integer" === i && (e = parseInt(t.firstChild.nodeValue, 10));
return e;
},
_parseArray: function(t) {
for (var e = [], i = 0, n = t.childNodes.length; i < n; i++) {
var r = t.childNodes[i];
1 === r.nodeType && e.push(this._parseNode(r));
}
return e;
},
_parseDict: function(t) {
for (var e = {}, i = null, n = 0, r = t.childNodes.length; n < r; n++) {
var s = t.childNodes[n];
1 === s.nodeType && ("key" === s.tagName ? i = s.firstChild.nodeValue : e[i] = this._parseNode(s));
}
return e;
}
});
cc.saxParser = new cc.SAXParser();
cc.plistParser = new cc.PlistParser();
}), {
"../platform/js": 173
} ],
161: [ (function(t, e, i) {
cc.screen = {
_supportsFullScreen: !1,
_preOnFullScreenChange: null,
_touchEvent: "",
_fn: null,
_fnMap: [ [ "requestFullscreen", "exitFullscreen", "fullscreenchange", "fullscreenEnabled", "fullscreenElement" ], [ "requestFullScreen", "exitFullScreen", "fullScreenchange", "fullScreenEnabled", "fullScreenElement" ], [ "webkitRequestFullScreen", "webkitCancelFullScreen", "webkitfullscreenchange", "webkitIsFullScreen", "webkitCurrentFullScreenElement" ], [ "mozRequestFullScreen", "mozCancelFullScreen", "mozfullscreenchange", "mozFullScreen", "mozFullScreenElement" ], [ "msRequestFullscreen", "msExitFullscreen", "MSFullscreenChange", "msFullscreenEnabled", "msFullscreenElement" ] ],
init: function() {
this._fn = {};
var t, e, i, n, r = this._fnMap;
for (t = 0, e = r.length; t < e; t++) if ((i = r[t]) && i[1] in document) {
for (t = 0, n = i.length; t < n; t++) this._fn[r[0][t]] = i[t];
break;
}
this._supportsFullScreen = void 0 !== this._fn.requestFullscreen;
this._touchEvent = "ontouchstart" in window ? "touchstart" : "mousedown";
},
fullScreen: function() {
return !!this._supportsFullScreen && (void 0 !== document[this._fn.fullscreenElement] && null !== document[this._fn.fullscreenElement]);
},
requestFullScreen: function(t, e) {
if (this._supportsFullScreen) {
t = t || document.documentElement;
if (e) {
var i = this._fn.fullscreenchange;
this._preOnFullScreenChange && document.removeEventListener(i, this._preOnFullScreenChange);
this._preOnFullScreenChange = e;
document.addEventListener(i, e, !1);
}
return t[this._fn.requestFullscreen]();
}
},
exitFullScreen: function() {
return !this._supportsFullScreen || document[this._fn.exitFullscreen]();
},
autoFullScreen: function(t, e) {
t = t || document.body;
var i = cc.game.canvas || t, n = this;
this.requestFullScreen(t, e);
i.addEventListener(this._touchEvent, (function r() {
i.removeEventListener(n._touchEvent, r);
n.requestFullScreen(t, e);
}));
}
};
cc.screen.init();
}), {} ],
162: [ (function(i, n, r) {
var s = cc && cc.sys ? cc.sys : (function() {
cc.sys = {};
var i = cc.sys;
i.LANGUAGE_ENGLISH = "en";
i.LANGUAGE_CHINESE = "zh";
i.LANGUAGE_FRENCH = "fr";
i.LANGUAGE_ITALIAN = "it";
i.LANGUAGE_GERMAN = "de";
i.LANGUAGE_SPANISH = "es";
i.LANGUAGE_DUTCH = "du";
i.LANGUAGE_RUSSIAN = "ru";
i.LANGUAGE_KOREAN = "ko";
i.LANGUAGE_JAPANESE = "ja";
i.LANGUAGE_HUNGARIAN = "hu";
i.LANGUAGE_PORTUGUESE = "pt";
i.LANGUAGE_ARABIC = "ar";
i.LANGUAGE_NORWEGIAN = "no";
i.LANGUAGE_POLISH = "pl";
i.LANGUAGE_TURKISH = "tr";
i.LANGUAGE_UKRAINIAN = "uk";
i.LANGUAGE_ROMANIAN = "ro";
i.LANGUAGE_BULGARIAN = "bg";
i.LANGUAGE_UNKNOWN = "unknown";
i.OS_IOS = "iOS";
i.OS_ANDROID = "Android";
i.OS_WINDOWS = "Windows";
i.OS_MARMALADE = "Marmalade";
i.OS_LINUX = "Linux";
i.OS_BADA = "Bada";
i.OS_BLACKBERRY = "Blackberry";
i.OS_OSX = "OS X";
i.OS_WP8 = "WP8";
i.OS_WINRT = "WINRT";
i.OS_UNKNOWN = "Unknown";
i.UNKNOWN = -1;
i.WIN32 = 0;
i.LINUX = 1;
i.MACOS = 2;
i.ANDROID = 3;
i.IPHONE = 4;
i.IPAD = 5;
i.BLACKBERRY = 6;
i.NACL = 7;
i.EMSCRIPTEN = 8;
i.TIZEN = 9;
i.WINRT = 10;
i.WP8 = 11;
i.MOBILE_BROWSER = 100;
i.DESKTOP_BROWSER = 101;
i.EDITOR_PAGE = 102;
i.EDITOR_CORE = 103;
i.WECHAT_GAME = 104;
i.QQ_PLAY = 105;
i.BROWSER_TYPE_WECHAT = "wechat";
i.BROWSER_TYPE_WECHAT_GAME = "wechatgame";
i.BROWSER_TYPE_WECHAT_GAME_SUB = "wechatgamesub";
i.BROWSER_TYPE_QQ_PLAY = "qqplay";
i.BROWSER_TYPE_ANDROID = "androidbrowser";
i.BROWSER_TYPE_IE = "ie";
i.BROWSER_TYPE_QQ = "qqbrowser";
i.BROWSER_TYPE_MOBILE_QQ = "mqqbrowser";
i.BROWSER_TYPE_UC = "ucbrowser";
i.BROWSER_TYPE_UCBS = "ucbs";
i.BROWSER_TYPE_360 = "360browser";
i.BROWSER_TYPE_BAIDU_APP = "baiduboxapp";
i.BROWSER_TYPE_BAIDU = "baidubrowser";
i.BROWSER_TYPE_MAXTHON = "maxthon";
i.BROWSER_TYPE_OPERA = "opera";
i.BROWSER_TYPE_OUPENG = "oupeng";
i.BROWSER_TYPE_MIUI = "miuibrowser";
i.BROWSER_TYPE_FIREFOX = "firefox";
i.BROWSER_TYPE_SAFARI = "safari";
i.BROWSER_TYPE_CHROME = "chrome";
i.BROWSER_TYPE_LIEBAO = "liebao";
i.BROWSER_TYPE_QZONE = "qzone";
i.BROWSER_TYPE_SOUGOU = "sogou";
i.BROWSER_TYPE_UNKNOWN = "unknown";
i.isNative = !0;
i.isBrowser = "object" === ("object" == (e = typeof window) ? t(window) : e) && "object" === ("object" == (e = typeof document) ? t(document) : e) && !1;
var n = i.platform = __getPlatform();
i.isMobile = n === i.ANDROID || n === i.IPAD || n === i.IPHONE || n === i.WP8 || n === i.TIZEN || n === i.BLACKBERRY;
i.os = __getOS();
i.language = __getCurrentLanguage();
i.osVersion = __getOSVersion();
i.osMainVersion = parseInt(i.osVersion);
i.browserType = null;
i.browserVersion = null;
var r, s = window.innerWidth, a = window.innerHeight, o = window.devicePixelRatio || 1;
i.windowPixelResolution = {
width: o * s,
height: o * a
};
i.localStorage = window.localStorage;
r = i.capabilities = {
canvas: !1,
opengl: !0,
webp: !0
};
if (i.isMobile) {
r.accelerometer = !0;
r.touches = !0;
} else {
r.keyboard = !0;
r.mouse = !0;
r.touches = !1;
}
i.__audioSupport = {
ONLY_ONE: !1,
WEB_AUDIO: !1,
DELAY_CREATE_CTX: !1,
format: [ ".mp3" ]
};
i.NetworkType = {
NONE: 0,
LAN: 1,
WWAN: 2
};
i.getNetworkType = function() {
return i.NetworkType.LAN;
};
i.getBatteryLevel = function() {
return 1;
};
i.garbageCollect = function() {
__jsc__.garbageCollect();
};
i.dumpRoot = function() {
__jsc__.dumpRoot();
};
i.restartVM = function() {
__restartVM();
};
i.cleanScript = function(t) {
__cleanScript(t);
};
i.isObjectValid = function(t) {
return __isObjectValid(t);
};
i.dump = function() {
var t = "";
t += "isMobile : " + this.isMobile + "\r\n";
t += "language : " + this.language + "\r\n";
t += "browserType : " + this.browserType + "\r\n";
t += "browserVersion : " + this.browserVersion + "\r\n";
t += "capabilities : " + JSON.stringify(this.capabilities) + "\r\n";
t += "os : " + this.os + "\r\n";
t += "osVersion : " + this.osVersion + "\r\n";
t += "platform : " + this.platform + "\r\n";
t += "Using " + (cc.game.renderType === cc.game.RENDER_TYPE_WEBGL ? "WEBGL" : "CANVAS") + " renderer.\r\n";
cc.log(t);
};
i.openURL = function(t) {
jsb.openURL(t);
};
i.now = function() {
return Date.now ? Date.now() : +new Date();
};
return i;
})();
n.exports = s;
}), {} ],
163: [ (function(i, n, r) {
var s = i("../event/event-target"), a = i("../platform/js"), o = i("../renderer");
i("../platform/CCClass");
var h = {
init: function() {
this.html = document.getElementsByTagName("html")[0];
},
availWidth: function(t) {
return t && t !== this.html ? t.clientWidth : window.innerWidth;
},
availHeight: function(t) {
return t && t !== this.html ? t.clientHeight : window.innerHeight;
},
meta: {
width: "device-width"
},
adaptationType: cc.sys.browserType
};
cc.sys.os === cc.sys.OS_IOS && (h.adaptationType = cc.sys.BROWSER_TYPE_SAFARI);
0;
0;
switch (h.adaptationType) {
case cc.sys.BROWSER_TYPE_SAFARI:
h.meta["minimal-ui"] = "true";
h.availWidth = function(t) {
return t.clientWidth;
};
h.availHeight = function(t) {
return t.clientHeight;
};
break;

case cc.sys.BROWSER_TYPE_SOUGOU:
case cc.sys.BROWSER_TYPE_UC:
h.availWidth = function(t) {
return t.clientWidth;
};
h.availHeight = function(t) {
return t.clientHeight;
};
break;

case cc.sys.BROWSER_TYPE_WECHAT_GAME:
h.availWidth = function() {
return window.innerWidth;
};
h.availHeight = function() {
return window.innerHeight;
};
break;

case cc.sys.BROWSER_TYPE_WECHAT_GAME_SUB:
var l = wx.getSharedCanvas();
h.availWidth = function() {
return l.width;
};
h.availHeight = function() {
return l.height;
};
}
var c = null, u = function() {
s.call(this);
var t = this, e = cc.ContainerStrategy, i = cc.ContentStrategy;
h.init(this);
t._frameSize = cc.size(0, 0);
t._initFrameSize();
var n = cc.game.canvas.width, r = cc.game.canvas.height;
t._designResolutionSize = cc.size(n, r);
t._originalDesignResolutionSize = cc.size(n, r);
t._scaleX = 1;
t._scaleY = 1;
t._viewportRect = cc.rect(0, 0, n, r);
t._visibleRect = cc.rect(0, 0, n, r);
cc.visibleRect && cc.visibleRect.init(t._visibleRect);
t._autoFullScreen = !1;
t._devicePixelRatio = 1;
t._retinaEnabled = !1;
t._resizeCallback = null;
t._resizing = !1;
t._resizeWithBrowserSize = !1;
t._orientationChanging = !0;
t._isRotated = !1;
t._orientation = cc.macro.ORIENTATION_AUTO;
t._isAdjustViewport = !0;
t._antiAliasEnabled = !1;
t._resolutionPolicy = null;
t._rpExactFit = new cc.ResolutionPolicy(e.EQUAL_TO_FRAME, i.EXACT_FIT);
t._rpShowAll = new cc.ResolutionPolicy(e.EQUAL_TO_FRAME, i.SHOW_ALL);
t._rpNoBorder = new cc.ResolutionPolicy(e.EQUAL_TO_FRAME, i.NO_BORDER);
t._rpFixedHeight = new cc.ResolutionPolicy(e.EQUAL_TO_FRAME, i.FIXED_HEIGHT);
t._rpFixedWidth = new cc.ResolutionPolicy(e.EQUAL_TO_FRAME, i.FIXED_WIDTH);
t._initialized = !1;
t.enableAntiAlias(!0);
};
cc.js.extend(u, s);
cc.js.mixin(u.prototype, {
_resizeEvent: function() {
var t, e = (t = this.setDesignResolutionSize ? this : cc.view)._frameSize.width, i = t._frameSize.height, n = t._isRotated;
if (cc.sys.isMobile) {
var r = cc.game.container.style, s = r.margin;
r.margin = "0";
r.display = "none";
t._initFrameSize();
r.margin = s;
r.display = "block";
} else t._initFrameSize();
if (t._isRotated !== n || t._frameSize.width !== e || t._frameSize.height !== i) {
var a = t._originalDesignResolutionSize.width, o = t._originalDesignResolutionSize.height;
t._resizing = !0;
a > 0 && t.setDesignResolutionSize(a, o, t._resolutionPolicy);
t._resizing = !1;
t.emit("canvas-resize");
t._resizeCallback && t._resizeCallback.call();
}
},
_orientationChange: function() {
cc.view._orientationChanging = !0;
cc.view._resizeEvent();
},
resizeWithBrowserSize: function(t) {
if (t) {
if (!this._resizeWithBrowserSize) {
this._resizeWithBrowserSize = !0;
window.addEventListener("resize", this._resizeEvent);
window.addEventListener("orientationchange", this._orientationChange);
}
} else if (this.__resizeWithBrowserSize) {
this.__resizeWithBrowserSize = !1;
window.removeEventListener("resize", this._resizeEvent);
window.removeEventListener("orientationchange", this._orientationChange);
}
},
setResizeCallback: function(i) {
"function" !== ("object" === (e = typeof i) ? t(i) : e) && null != i || (this._resizeCallback = i);
},
setOrientation: function(t) {
if ((t &= cc.macro.ORIENTATION_AUTO) && this._orientation !== t) {
this._orientation = t;
var e = this._originalDesignResolutionSize.width, i = this._originalDesignResolutionSize.height;
this.setDesignResolutionSize(e, i, this._resolutionPolicy);
}
},
_initFrameSize: function() {
var t = this._frameSize, e = h.availWidth(cc.game.frame), i = h.availHeight(cc.game.frame), n = e >= i;
if (!cc.sys.isMobile || n && this._orientation & cc.macro.ORIENTATION_LANDSCAPE || !n && this._orientation & cc.macro.ORIENTATION_PORTRAIT) {
t.width = e;
t.height = i;
cc.game.container.style["-webkit-transform"] = "rotate(0deg)";
cc.game.container.style.transform = "rotate(0deg)";
this._isRotated = !1;
} else {
t.width = i;
t.height = e;
cc.game.container.style["-webkit-transform"] = "rotate(90deg)";
cc.game.container.style.transform = "rotate(90deg)";
cc.game.container.style["-webkit-transform-origin"] = "0px 0px 0px";
cc.game.container.style.transformOrigin = "0px 0px 0px";
this._isRotated = !0;
}
this._orientationChanging && setTimeout((function() {
cc.view._orientationChanging = !1;
}), 1e3);
},
_adjustSizeKeepCanvasSize: function() {
var t = this._originalDesignResolutionSize.width, e = this._originalDesignResolutionSize.height;
t > 0 && this.setDesignResolutionSize(t, e, this._resolutionPolicy);
},
_setViewportMeta: function(t, e) {
var i = document.getElementById("cocosMetaElement");
i && e && document.head.removeChild(i);
var n, r, s, a = document.getElementsByName("viewport"), o = a ? a[0] : null;
n = o ? o.content : "";
(i = i || document.createElement("meta")).id = "cocosMetaElement";
i.name = "viewport";
i.content = "";
for (r in t) if (-1 == n.indexOf(r)) n += "," + r + "=" + t[r]; else if (e) {
s = new RegExp(r + "s*=s*[^,]+");
n.replace(s, r + "=" + t[r]);
}
/^,/.test(n) && (n = n.substr(1));
i.content = n;
o && (o.content = n);
document.head.appendChild(i);
},
_adjustViewportMeta: function() {
this._isAdjustViewport, 0;
},
initialize: function() {
this._initialized = !0;
},
adjustViewportMeta: function(t) {
this._isAdjustViewport = t;
},
enableRetina: function(t) {
this._retinaEnabled = !!t;
},
isRetinaEnabled: function() {
return this._retinaEnabled;
},
enableAntiAlias: function(t) {
if (this._antiAliasEnabled !== t) {
this._antiAliasEnabled = t;
if (cc.game.renderType === cc.game.RENDER_TYPE_WEBGL) {
var e = cc.loader._cache;
for (var i in e) {
var n = e[i], r = n && n.content instanceof cc.Texture2D ? n.content : null;
if (r) {
var s = cc.Texture2D.Filter;
t ? r.setFilters(s.LINEAR, s.LINEAR) : r.setFilters(s.NEAREST, s.NEAREST);
}
}
} else if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS) {
var a = cc.game.canvas.getContext("2d");
a.imageSmoothingEnabled = t;
a.mozImageSmoothingEnabled = t;
}
}
},
isAntiAliasEnabled: function() {
return this._antiAliasEnabled;
},
enableAutoFullScreen: function(t) {
if (t && t !== this._autoFullScreen && cc.sys.isMobile && cc.sys.browserType !== cc.sys.BROWSER_TYPE_WECHAT) {
this._autoFullScreen = !0;
cc.screen.autoFullScreen(cc.game.frame);
} else this._autoFullScreen = !1;
},
isAutoFullScreenEnabled: function() {
return this._autoFullScreen;
},
setCanvasSize: function(t, e) {
var i = cc.game.canvas, n = cc.game.container;
i.width = t * this._devicePixelRatio;
i.height = e * this._devicePixelRatio;
i.style.width = t + "px";
i.style.height = e + "px";
n.style.width = t + "px";
n.style.height = e + "px";
this._resizeEvent();
},
getCanvasSize: function() {
return cc.size(cc.game.canvas.width, cc.game.canvas.height);
},
getFrameSize: function() {
return cc.size(this._frameSize.width, this._frameSize.height);
},
setFrameSize: function(t, e) {
this._frameSize.width = t;
this._frameSize.height = e;
cc.game.frame.style.width = t + "px";
cc.game.frame.style.height = e + "px";
this._resizeEvent();
cc.director.setProjection(cc.director.getProjection());
},
getVisibleSize: function() {
return cc.size(this._visibleRect.width, this._visibleRect.height);
},
getVisibleSizeInPixel: function() {
return cc.size(this._visibleRect.width * this._scaleX, this._visibleRect.height * this._scaleY);
},
getVisibleOrigin: function() {
return cc.v2(this._visibleRect.x, this._visibleRect.y);
},
getVisibleOriginInPixel: function() {
return cc.v2(this._visibleRect.x * this._scaleX, this._visibleRect.y * this._scaleY);
},
getResolutionPolicy: function() {
return this._resolutionPolicy;
},
setResolutionPolicy: function(t) {
var e = this;
if (t instanceof cc.ResolutionPolicy) e._resolutionPolicy = t; else {
var i = cc.ResolutionPolicy;
t === i.EXACT_FIT && (e._resolutionPolicy = e._rpExactFit);
t === i.SHOW_ALL && (e._resolutionPolicy = e._rpShowAll);
t === i.NO_BORDER && (e._resolutionPolicy = e._rpNoBorder);
t === i.FIXED_HEIGHT && (e._resolutionPolicy = e._rpFixedHeight);
t === i.FIXED_WIDTH && (e._resolutionPolicy = e._rpFixedWidth);
}
},
setDesignResolutionSize: function(t, e, i) {
if (t > 0 || e > 0) {
this.setResolutionPolicy(i);
var n = this._resolutionPolicy;
n && n.preApply(this);
cc.sys.isMobile && this._adjustViewportMeta();
this._orientationChanging = !0;
this._resizing || this._initFrameSize();
if (n) {
this._originalDesignResolutionSize.width = this._designResolutionSize.width = t;
this._originalDesignResolutionSize.height = this._designResolutionSize.height = e;
var r = n.apply(this, this._designResolutionSize);
if (r.scale && 2 === r.scale.length) {
this._scaleX = r.scale[0];
this._scaleY = r.scale[1];
}
if (r.viewport) {
var s = this._viewportRect, a = this._visibleRect, h = r.viewport;
s.x = h.x;
s.y = h.y;
s.width = h.width;
s.height = h.height;
a.x = -s.x / this._scaleX;
a.y = -s.y / this._scaleY;
a.width = cc.game.canvas.width / this._scaleX;
a.height = cc.game.canvas.height / this._scaleY;
cc.game._renderContext.setOffset && cc.game._renderContext.setOffset(s.x, -s.y);
}
var l = cc.director;
l._winSizeInPoints.width = this._designResolutionSize.width;
l._winSizeInPoints.height = this._designResolutionSize.height;
n.postApply(this);
cc.winSize.width = l._winSizeInPoints.width;
cc.winSize.height = l._winSizeInPoints.height;
cc.visibleRect && cc.visibleRect.init(this._visibleRect);
o.updateCameraViewport();
this.emit("design-resolution-changed");
} else cc.logID(2201);
} else cc.logID(2200);
},
getDesignResolutionSize: function() {
return cc.size(this._designResolutionSize.width, this._designResolutionSize.height);
},
setRealPixelResolution: function(t, e, i) {
0;
this.setDesignResolutionSize(t, e, i);
},
setViewportInPoints: function(t, e, i, n) {
var r = this._scaleX, s = this._scaleY;
cc.game._renderContext.viewport(t * r + this._viewportRect.x, e * s + this._viewportRect.y, i * r, n * s);
},
setScissorInPoints: function(t, e, i, n) {
var r = this._scaleX, s = this._scaleY, a = Math.ceil(t * r + this._viewportRect.x), o = Math.ceil(e * s + this._viewportRect.y), h = Math.ceil(i * r), l = Math.ceil(n * s), u = cc.game._renderContext;
if (!c) {
var _ = u.getParameter(u.SCISSOR_BOX);
c = cc.rect(_[0], _[1], _[2], _[3]);
}
if (c.x !== a || c.y !== o || c.width !== h || c.height !== l) {
c.x = a;
c.y = o;
c.width = h;
c.height = l;
u.scissor(a, o, h, l);
}
},
isScissorEnabled: function() {
return cc.game._renderContext.isEnabled(gl.SCISSOR_TEST);
},
getScissorRect: function() {
if (!c) {
var t = gl.getParameter(gl.SCISSOR_BOX);
c = cc.rect(t[0], t[1], t[2], t[3]);
}
var e = 1 / this._scaleX, i = 1 / this._scaleY;
return cc.rect((c.x - this._viewportRect.x) * e, (c.y - this._viewportRect.y) * i, c.width * e, c.height * i);
},
getViewportRect: function() {
return this._viewportRect;
},
getScaleX: function() {
return this._scaleX;
},
getScaleY: function() {
return this._scaleY;
},
getDevicePixelRatio: function() {
return this._devicePixelRatio;
},
convertToLocationInView: function(t, e, i) {
var n = this._devicePixelRatio * (t - i.left), r = this._devicePixelRatio * (i.top + i.height - e);
return this._isRotated ? {
x: this._viewportRect.width - r,
y: n
} : {
x: n,
y: r
};
},
_convertMouseToLocationInView: function(t, e) {
var i = this._viewportRect;
t.x = (this._devicePixelRatio * (t.x - e.left) - i.x) / this._scaleX;
t.y = (this._devicePixelRatio * (e.top + e.height - t.y) - i.y) / this._scaleY;
},
_convertPointWithScale: function(t) {
var e = this._viewportRect;
t.x = (t.x - e.x) / this._scaleX;
t.y = (t.y - e.y) / this._scaleY;
},
_convertTouchesWithScale: function(t) {
for (var e, i, n, r = this._viewportRect, s = this._scaleX, a = this._scaleY, o = 0; o < t.length; o++) {
i = (e = t[o])._point;
n = e._prevPoint;
i.x = (i.x - r.x) / s;
i.y = (i.y - r.y) / a;
n.x = (n.x - r.x) / s;
n.y = (n.y - r.y) / a;
}
}
});
u._getInstance = function() {
if (!this._instance) {
this._instance = this._instance || new u();
this._instance.initialize();
}
return this._instance;
};
cc.ContainerStrategy = cc.Class({
name: "ContainerStrategy",
preApply: function(t) {},
apply: function(t, e) {},
postApply: function(t) {},
_setupContainer: function(t, e, i) {
var n = cc.game.canvas, r = cc.game.container;
if (cc.sys.platform !== cc.sys.WECHAT_GAME) {
if (cc.sys.os === cc.sys.OS_ANDROID) {
document.body.style.width = (t._isRotated ? i : e) + "px";
document.body.style.height = (t._isRotated ? e : i) + "px";
}
r.style.width = n.style.width = e + "px";
r.style.height = n.style.height = i + "px";
}
var s = t._devicePixelRatio = 1;
t.isRetinaEnabled() && (s = t._devicePixelRatio = Math.min(2, window.devicePixelRatio || 1));
n.width = e * s;
n.height = i * s;
if (cc.sys.browserType === cc.sys.BROWSER_TYPE_WECHAT_GAME && wx.getOpenDataContext) {
var a = wx.getOpenDataContext().canvas;
if (a) {
a.width = n.width;
a.height = n.height;
}
}
},
_fixContainer: function() {
document.body.insertBefore(cc.game.container, document.body.firstChild);
var t = document.body.style;
t.width = window.innerWidth + "px";
t.height = window.innerHeight + "px";
t.overflow = "hidden";
var e = cc.game.container.style;
e.position = "fixed";
e.left = e.top = "0px";
document.body.scrollTop = 0;
}
});
cc.ContentStrategy = cc.Class({
name: "ContentStrategy",
ctor: function() {
this._result = {
scale: [ 1, 1 ],
viewport: null
};
},
_buildResult: function(t, e, i, n, r, s) {
Math.abs(t - i) < 2 && (i = t);
Math.abs(e - n) < 2 && (n = e);
var a = cc.rect(Math.round((t - i) / 2), Math.round((e - n) / 2), i, n);
cc.game.renderType, cc.game.RENDER_TYPE_CANVAS;
this._result.scale = [ r, s ];
this._result.viewport = a;
return this._result;
},
preApply: function(t) {},
apply: function(t, e) {
return {
scale: [ 1, 1 ]
};
},
postApply: function(t) {}
});
(function() {
var t = cc.Class({
name: "EqualToFrame",
extends: cc.ContainerStrategy,
apply: function(t) {
var e = t._frameSize.height, i = cc.game.container.style;
this._setupContainer(t, t._frameSize.width, t._frameSize.height);
t._isRotated ? i.margin = "0 0 0 " + e + "px" : i.margin = "0px";
i.padding = "0px";
}
}), e = cc.Class({
name: "ProportionalToFrame",
extends: cc.ContainerStrategy,
apply: function(t, e) {
var i, n, r = t._frameSize.width, s = t._frameSize.height, a = cc.game.container.style, o = e.width, h = e.height, l = r / o, c = s / h;
l < c ? (i = r, n = h * l) : (i = o * c, n = s);
var u = Math.round((r - i) / 2), _ = Math.round((s - n) / 2);
i = r - 2 * u;
n = s - 2 * _;
this._setupContainer(t, i, n);
t._isRotated ? a.margin = "0 0 0 " + s + "px" : a.margin = "0px";
a.paddingLeft = u + "px";
a.paddingRight = u + "px";
a.paddingTop = _ + "px";
a.paddingBottom = _ + "px";
}
}), i = (cc.Class({
name: "EqualToWindow",
extends: t,
preApply: function(t) {
this._super(t);
cc.game.frame = document.documentElement;
},
apply: function(t) {
this._super(t);
this._fixContainer();
}
}), cc.Class({
name: "ProportionalToWindow",
extends: e,
preApply: function(t) {
this._super(t);
cc.game.frame = document.documentElement;
},
apply: function(t, e) {
this._super(t, e);
this._fixContainer();
}
}), cc.Class({
name: "OriginalContainer",
extends: cc.ContainerStrategy,
apply: function(t) {
this._setupContainer(t, cc.game.canvas.width, cc.game.canvas.height);
}
}));
cc.ContainerStrategy.EQUAL_TO_FRAME = new t();
cc.ContainerStrategy.PROPORTION_TO_FRAME = new e();
cc.ContainerStrategy.ORIGINAL_CONTAINER = new i();
var n = cc.Class({
name: "ExactFit",
extends: cc.ContentStrategy,
apply: function(t, e) {
var i = cc.game.canvas.width, n = cc.game.canvas.height, r = i / e.width, s = n / e.height;
return this._buildResult(i, n, i, n, r, s);
}
}), r = cc.Class({
name: "ShowAll",
extends: cc.ContentStrategy,
apply: function(t, e) {
var i, n, r = cc.game.canvas.width, s = cc.game.canvas.height, a = e.width, o = e.height, h = r / a, l = s / o, c = 0;
h < l ? (i = r, n = o * (c = h)) : (i = a * (c = l), n = s);
return this._buildResult(r, s, i, n, c, c);
}
}), s = cc.Class({
name: "NoBorder",
extends: cc.ContentStrategy,
apply: function(t, e) {
var i, n, r, s = cc.game.canvas.width, a = cc.game.canvas.height, o = e.width, h = e.height, l = s / o, c = a / h;
l < c ? (n = o * (i = c), r = a) : (n = s, r = h * (i = l));
return this._buildResult(s, a, n, r, i, i);
}
}), a = cc.Class({
name: "FixedHeight",
extends: cc.ContentStrategy,
apply: function(t, e) {
var i = cc.game.canvas.width, n = cc.game.canvas.height, r = n / e.height, s = i, a = n;
return this._buildResult(i, n, s, a, r, r);
},
postApply: function(t) {
cc.director._winSizeInPoints = t.getVisibleSize();
}
}), o = cc.Class({
name: "FixedWidth",
extends: cc.ContentStrategy,
apply: function(t, e) {
var i = cc.game.canvas.width, n = cc.game.canvas.height, r = i / e.width, s = i, a = n;
return this._buildResult(i, n, s, a, r, r);
},
postApply: function(t) {
cc.director._winSizeInPoints = t.getVisibleSize();
}
});
cc.ContentStrategy.EXACT_FIT = new n();
cc.ContentStrategy.SHOW_ALL = new r();
cc.ContentStrategy.NO_BORDER = new s();
cc.ContentStrategy.FIXED_HEIGHT = new a();
cc.ContentStrategy.FIXED_WIDTH = new o();
})();
cc.ResolutionPolicy = cc.Class({
name: "cc.ResolutionPolicy",
ctor: function(t, e) {
this._containerStrategy = null;
this._contentStrategy = null;
this.setContainerStrategy(t);
this.setContentStrategy(e);
},
preApply: function(t) {
this._containerStrategy.preApply(t);
this._contentStrategy.preApply(t);
},
apply: function(t, e) {
this._containerStrategy.apply(t, e);
return this._contentStrategy.apply(t, e);
},
postApply: function(t) {
this._containerStrategy.postApply(t);
this._contentStrategy.postApply(t);
},
setContainerStrategy: function(t) {
t instanceof cc.ContainerStrategy && (this._containerStrategy = t);
},
setContentStrategy: function(t) {
t instanceof cc.ContentStrategy && (this._contentStrategy = t);
}
});
a.get(cc.ResolutionPolicy.prototype, "canvasSize", (function() {
return cc.v2(cc.game.canvas.width, cc.game.canvas.height);
}));
cc.ResolutionPolicy.EXACT_FIT = 0;
cc.ResolutionPolicy.NO_BORDER = 1;
cc.ResolutionPolicy.SHOW_ALL = 2;
cc.ResolutionPolicy.FIXED_HEIGHT = 3;
cc.ResolutionPolicy.FIXED_WIDTH = 4;
cc.ResolutionPolicy.UNKNOWN = 5;
n.exports = u;
}), {
"../event/event-target": 98,
"../platform/CCClass": 153,
"../platform/js": 173,
"../renderer": 194
} ],
164: [ (function(t, e, i) {
cc.visibleRect = {
topLeft: cc.v2(0, 0),
topRight: cc.v2(0, 0),
top: cc.v2(0, 0),
bottomLeft: cc.v2(0, 0),
bottomRight: cc.v2(0, 0),
bottom: cc.v2(0, 0),
center: cc.v2(0, 0),
left: cc.v2(0, 0),
right: cc.v2(0, 0),
width: 0,
height: 0,
init: function(t) {
var e = this.width = t.width, i = this.height = t.height, n = t.x, r = t.y, s = r + i, a = n + e;
this.topLeft.x = n;
this.topLeft.y = s;
this.topRight.x = a;
this.topRight.y = s;
this.top.x = n + e / 2;
this.top.y = s;
this.bottomLeft.x = n;
this.bottomLeft.y = r;
this.bottomRight.x = a;
this.bottomRight.y = r;
this.bottom.x = n + e / 2;
this.bottom.y = r;
this.center.x = n + e / 2;
this.center.y = r + i / 2;
this.left.x = n;
this.left.y = r + i / 2;
this.right.x = a;
this.right.y = r + i / 2;
}
};
}), {} ],
165: [ (function(i, n, r) {
var s = i("./js"), a = (i("./utils").isPlainEmptyObj_DEV, "$_$");
function o(t, e, i) {
var n;
n = function() {};
i && s.extend(n, i.constructor);
var r = new n();
s.value(t, "__attrs__", r);
return r;
}
function h(i, n, r) {
var s, h, c;
if ("function" === ("object" === (e = typeof i) ? t(i) : e)) h = (s = l(i)).constructor.prototype; else {
var u = i;
if (!(s = u.__attrs__)) {
s = o(u, 0, l(i = u.constructor));
}
h = s;
}
if ("undefined" === ("object" === (e = typeof r) ? t(r) : e)) {
var _ = n + a, m = {};
for (c in s) c.startsWith(_) && (m[c.slice(_.length)] = s[c]);
return m;
}
if ("object" === ("object" === (e = typeof r) ? t(r) : e)) for (c in r) 95 !== c.charCodeAt(0) && (h[n + a + c] = r[c]); else 0;
}
function l(t) {
return t.hasOwnProperty("__attrs__") && t.__attrs__ || (function(t) {
for (var e, i = cc.Class.getInheritanceChain(t), n = i.length - 1; n >= 0; n--) {
var r = i[n];
r.hasOwnProperty("__attrs__") && r.__attrs__ || o(r, 0, (e = i[n + 1]) && e.__attrs__);
}
o(t, 0, (e = i[0]) && e.__attrs__);
return t.__attrs__;
})(t);
}
function c(t) {
return l(t).constructor.prototype;
}
cc.Integer = "Integer";
cc.Float = "Float";
0;
cc.Boolean = "Boolean";
cc.String = "String";
function u(t, e) {
0;
}
n.exports = {
attr: h,
getClassAttrs: l,
getClassAttrsProto: c,
setClassAttr: function(t, e, i, n) {
c(t)[e + a + i] = n;
},
DELIMETER: a,
getTypeChecker: u,
ObjectType: function(t) {
return {
type: "Object",
ctor: t,
_onAfterProp: !1
};
},
ScriptUuid: {}
};
}), {
"./CCClass": 153,
"./js": 173,
"./utils": 177
} ],
166: [ (function(i, n, r) {
var s = i("./js"), a = s.array.fastRemoveAt;
function o() {
this.callbacks = [];
this.targets = [];
this.isInvoking = !1;
this.containCanceled = !1;
}
var h = o.prototype;
h.removeBy = function(t, e) {
for (var i = this.callbacks, n = this.targets, r = 0; r < t.length; ++r) if (t[r] === e) {
a(i, r);
a(n, r);
--r;
}
};
h.cancel = function(t) {
this.callbacks[t] = this.targets[t] = null;
this.containCanceled = !0;
};
h.cancelAll = function() {
for (var t = this.callbacks, e = this.targets, i = 0; i < t.length; i++) t[i] = e[i] = null;
this.containCanceled = !0;
};
h.purgeCanceled = function() {
this.removeBy(this.callbacks, null);
this.containCanceled = !1;
};
var l = new s.Pool(function(t) {
t.callbacks.length = 0;
t.targets.length = 0;
t.isInvoking = !1;
t.containCanceled = !1;
}, 16);
l.get = function() {
return this._get() || new o();
};
function c() {
this._callbackTable = s.createMap(!0);
}
(h = c.prototype).add = function(t, e, i) {
var n = this._callbackTable[t];
n || (n = this._callbackTable[t] = l.get());
n.callbacks.push(e);
n.targets.push(i || null);
};
h.hasEventListener = function(t, e, i) {
var n = this._callbackTable[t];
if (!n) return !1;
var r = n.callbacks;
if (!e) {
if (n.isInvoking) {
for (var s = 0; s < r.length; s++) if (r[s]) return !0;
return !1;
}
return r.length > 0;
}
i = i || null;
for (var a = n.targets, o = 0; o < r.length; ++o) if (r[o] === e && a[o] === i) return !0;
return !1;
};
h.removeAll = function(i) {
if ("string" === ("object" === (e = typeof i) ? t(i) : e)) {
var n = this._callbackTable[i];
if (n) if (n.isInvoking) n.cancelAll(); else {
l.put(n);
delete this._callbackTable[i];
}
} else if (i) for (var r in this._callbackTable) {
var s = this._callbackTable[r];
if (s.isInvoking) for (var a = s.targets, o = 0; o < a.length; ++o) a[o] === i && s.cancel(o); else s.removeBy(s.targets, i);
}
};
h.remove = function(t, e, i) {
var n = this._callbackTable[t];
if (n) {
i = i || null;
for (var r = n.callbacks, s = n.targets, o = 0; o < r.length; ++o) if (r[o] === e && s[o] === i) {
if (n.isInvoking) n.cancel(o); else {
a(r, o);
a(s, o);
}
break;
}
}
};
var u = function() {
c.call(this);
};
s.extend(u, c);
0;
u.prototype.invoke = function(t, e, i, n, r, s) {
var a = this._callbackTable[t];
if (a) {
var o = !a.isInvoking;
a.isInvoking = !0;
for (var h = a.callbacks, l = a.targets, c = 0, u = h.length; c < u; ++c) {
var _ = h[c];
if (_) {
var m = l[c];
m ? _.call(m, e, i, n, r, s) : _(e, i, n, r, s);
}
}
if (o) {
a.isInvoking = !1;
a.containCanceled && a.purgeCanceled();
}
}
};
u.CallbacksHandler = c;
n.exports = u;
}), {
"./js": 173
} ],
167: [ (function(t, e, i) {
e.exports = {
flattenCodeArray: function(t) {
var e = [];
(function t(e, i) {
for (var n = 0; n < i.length; n++) {
var r = i[n];
Array.isArray(r) ? t(e, r) : e.push(r);
}
})(e, t);
return e.join("");
}
};
}), {} ],
168: [ (function(i, n, r) {
var s = i("./js"), a = (i("./CCObject"), i("./attribute")), o = i("./CCClass"), h = i("../utils/misc"), l = function() {
this.uuidList = [];
this.uuidObjList = [];
this.uuidPropList = [];
this._stillUseUrl = s.createMap(!0);
};
l.prototype.reset = function() {
this.uuidList.length = 0;
this.uuidObjList.length = 0;
this.uuidPropList.length = 0;
s.clear(this._stillUseUrl);
};
0;
l.prototype.push = function(t, e, i, n) {
n && (this._stillUseUrl[this.uuidList.length] = !0);
this.uuidList.push(i);
this.uuidObjList.push(t);
this.uuidPropList.push(e);
};
(l.pool = new s.Pool(function(t) {
t.reset();
}, 10)).get = function() {
return this._get() || new l();
};
var c = (function() {
function i(t, e, i, n, r) {
this.result = t;
this.customEnv = n;
this.deserializedList = [];
this.deserializedData = null;
this._classFinder = i;
0;
this._idList = [];
this._idObjList = [];
this._idPropList = [];
}
var n = i.prototype;
n.deserialize = function(t) {
if (Array.isArray(t)) {
var e = t, i = e.length;
this.deserializedList.length = i;
for (var n = 0; n < i; n++) if (e[n]) {
this.deserializedList[n] = this._deserializeObject(e[n], !1);
}
this.deserializedData = i > 0 ? this.deserializedList[0] : [];
} else {
this.deserializedList.length = 1;
this.deserializedData = t ? this._deserializeObject(t, !1) : null;
this.deserializedList[0] = this.deserializedData;
}
(function(t) {
var e, i, n, r = t.deserializedList, s = t._idPropList, a = t._idList, o = t._idObjList;
t._classFinder && t._classFinder.onDereferenced;
for (e = 0; e < a.length; e++) {
i = s[e];
n = a[e];
o[e][i] = r[n];
}
})(this);
return this.deserializedData;
};
n._deserializeObject = function(i, n, r, a, o) {
var h, c = null, u = null, _ = i.__type__;
if (_) {
if (!(u = this._classFinder(_, i, a, o))) {
this._classFinder === s._getClassById && cc.deserialize.reportMissingClass(_);
return null;
}
if ((c = new u())._deserialize) {
c._deserialize(i.content, this);
return c;
}
cc.Class._isCCClass(u) ? (function(t, e, i, n, r) {
var a;
if (n.hasOwnProperty("__deserialize__")) a = n.__deserialize__; else {
a = l(t, n);
s.value(n, "__deserialize__", a, !0);
}
a(t, e, i, n, r);
0;
})(this, c, i, u, r) : this._deserializeTypedObject(c, i, u);
} else if (Array.isArray(i)) {
c = new Array(i.length);
for (var m = 0; m < i.length; m++) {
h = i[m];
"object" === ("object" === (e = typeof h) ? t(h) : e) && h ? this._deserializeObjField(c, h, "" + m, null, n) : c[m] = h;
}
} else {
c = {};
this._deserializePrimitiveObject(c, i);
}
return c;
};
n._deserializeObjField = function(t, e, i, n, r) {
var s = e.__id__;
if (void 0 === s) {
var a = e.__uuid__;
a ? this.result.push(t, i, a, r) : t[i] = this._deserializeObject(e, r);
} else {
var o = this.deserializedList[s];
if (o) t[i] = o; else {
this._idList.push(s);
this._idObjList.push(t);
this._idPropList.push(i);
}
}
};
n._deserializePrimitiveObject = function(i, n) {
for (var r in n) if (n.hasOwnProperty(r)) {
var s = n[r];
"object" !== ("object" === (e = typeof s) ? t(s) : e) ? "__type__" !== r && (i[r] = s) : s ? this._deserializeObjField(i, s, r) : i[r] = null;
}
};
n._deserializeTypedObject = function(i, n, r) {
if (r !== cc.Vec2) if (r !== cc.Color) if (r !== cc.Size) {
var s = r.__props__;
s || (s = Object.keys(i));
for (var a = 0; a < s.length; a++) {
var o = s[a], h = n[o];
void 0 !== h && n.hasOwnProperty(o) && ("object" !== ("object" === (e = typeof h) ? t(h) : e) ? i[o] = h : h ? this._deserializeObjField(i, h, o) : i[o] = null);
}
} else {
i.width = n.width || 0;
i.height = n.height || 0;
} else {
i.r = n.r || 0;
i.g = n.g || 0;
i.b = n.b || 0;
var l = n.a;
i.a = void 0 === l ? 255 : l;
} else {
i.x = n.x || 0;
i.y = n.y || 0;
}
};
var r = function(t, e, i, n, r, s, a, o) {
if (r instanceof cc.ValueType) {
var h = r.constructor;
a ? t._deserializeTypedObject(e[s], n, h) : n ? t._deserializeTypedObject(e[s], n, h) : e[s] = null;
} else n ? t._deserializeObjField(e, n, s, null, o) : e[s] = null;
}, l = function(i, n) {
var l = a.DELIMETER + "type", c = a.DELIMETER + "serializable", u = a.DELIMETER + "default", _ = a.DELIMETER + "saveUrlAsAsset", m = a.DELIMETER + "formerlySerializedAs", f = a.getClassAttrs(n), d = n.__props__, p = h.BUILTIN_CLASSID_RE.test(s._getClassId(n));
return function(i, n, s, a, h) {
for (var g, y = 0; y < d.length; y++) {
var v = d[y];
if (!1 !== f[v + c]) {
var x = v;
f[v + m] && (x = f[v + m]);
if (void 0 !== (g = s[x])) {
var A = f[v + _], b = o.getDefault(f[v + u]);
if (p) {
var T, C = f[v + l];
if (void 0 === b && C) T = C === cc.String || C === cc.Integer || C === cc.Float || C === cc.Boolean; else {
var w = "object" === (e = typeof b) ? t(b) : e;
T = "string" === w && !A || "number" === w || "boolean" === w;
}
T ? n[v] = g : r(i, n, h, g, b, v, !0, A);
} else "object" !== ("object" === (e = typeof g) ? t(g) : e) ? n[v] = g : r(i, n, h, g, b, v, !1, A);
}
}
}
(n instanceof cc._BaseNode || n instanceof cc.Component) && s._id && (n._id = s._id);
if ("_$erialized" === d[d.length - 1]) {
n._$erialized = JSON.parse(JSON.stringify(s));
i._deserializePrimitiveObject(n._$erialized, s);
}
};
};
i.pool = new s.Pool(function(t) {
t.result = null;
t.customEnv = null;
t.deserializedList.length = 0;
t.deserializedData = null;
t._classFinder = null;
0;
t._idList.length = 0;
t._idObjList.length = 0;
t._idPropList.length = 0;
}, 1);
i.pool.get = function(t, e, n, r, s) {
var a = this._get();
if (a) {
a.result = t;
a.customEnv = r;
a._classFinder = n;
0;
return a;
}
return new i(t, e, n, r, s);
};
return i;
})();
cc.deserialize = function(i, n, r) {
var a = (r = r || {}).classFinder || s._getClassById, o = r.createAssetRefs || cc.sys.platform === cc.sys.EDITOR_CORE, h = r.customEnv, u = r.ignoreEditorOnly;
0;
"string" === ("object" === (e = typeof i) ? t(i) : e) && (i = JSON.parse(i));
var _ = !n;
n = n || l.pool.get();
var m = c.pool.get(n, !1, a, h, u);
cc.game._isCloning = !0;
var f = m.deserialize(i);
cc.game._isCloning = !1;
c.pool.put(m);
o && n.assignAssetsBy(Editor.serialize.asAsset);
_ && l.pool.put(n);
return f;
};
cc.deserialize.Details = l;
cc.deserialize.reportMissingClass = function(t) {
cc.warnID(5302, t);
};
}), {
"../utils/misc": 231,
"./CCClass": 153,
"./CCObject": 159,
"./attribute": 165,
"./js": 173
} ],
169: [ (function(t, e, i) {
var n = ".";
function r(t) {
this.id = 0 | 998 * Math.random();
this.prefix = t ? t + n : "";
}
r.prototype.getNewId = function() {
return this.prefix + ++this.id;
};
r.global = new r("global");
e.exports = r;
}), {} ],
170: [ (function(t, e, i) {
t("./js");
t("./CCClass");
t("./CCClassDecorator");
t("./CCEnum");
t("./CCObject");
t("./callbacks-invoker");
t("./url");
t("./deserialize");
t("./instantiate");
t("./instantiate-jit");
t("./requiring-frame");
t("./CCSys");
t("./CCMacro");
t("./CCAssetLibrary");
t("./CCVisibleRect");
}), {
"./CCAssetLibrary": 152,
"./CCClass": 153,
"./CCClassDecorator": 154,
"./CCEnum": 155,
"./CCMacro": 158,
"./CCObject": 159,
"./CCSys": 162,
"./CCVisibleRect": 164,
"./callbacks-invoker": 166,
"./deserialize": 168,
"./instantiate": 172,
"./instantiate-jit": 171,
"./js": 173,
"./requiring-frame": 175,
"./url": 176
} ],
171: [ (function(i, n, r) {
var s = i("./CCObject"), a = s.Flags.Destroyed, o = s.Flags.PersistentMask, h = i("./attribute"), l = i("./js"), c = i("./CCClass"), u = i("./compiler"), _ = h.DELIMETER + "serializable", m = h.DELIMETER + "default", f = c.IDENTIFIER_RE, d = c.escapeForJS, p = "var ", g = "o", y = "t", v = {
"cc.Node": "cc.Node",
"cc.Sprite": "cc.Sprite",
"cc.Label": "cc.Label",
"cc.Button": "cc.Button",
"cc.Widget": "cc.Widget",
"cc.Animation": "cc.Animation",
"cc.ClickEvent": !1,
"cc.PrefabInfo": !1
};
function x(t, e) {
this.varName = t;
this.expression = e;
}
x.prototype.toString = function() {
return p + this.varName + "=" + this.expression + ";";
};
function A(t, e) {
return e instanceof x ? new x(e.varName, t + e.expression) : t + e;
}
function b(t, e, i) {
if (Array.isArray(i)) {
i[0] = A(e, i[0]);
t.push(i);
} else t.push(A(e, i) + ";");
}
function T(t) {
this._exps = [];
this._targetExp = t;
}
T.prototype.append = function(t, e) {
this._exps.push([ t, e ]);
};
T.prototype.writeCode = function(t) {
var e;
if (this._exps.length > 1) {
t.push(y + "=" + this._targetExp + ";");
e = y;
} else {
if (1 !== this._exps.length) return;
e = this._targetExp;
}
for (var i = 0; i < this._exps.length; i++) {
var n = this._exps[i];
b(t, e + w(n[0]) + "=", n[1]);
}
};
T.pool = new l.Pool(function(t) {
t._exps.length = 0;
t._targetExp = null;
}, 1);
T.pool.get = function(t) {
var e = this._get() || new T();
e._targetExp = t;
return e;
};
function C(i, n) {
if ("function" === ("object" === (e = typeof i) ? t(i) : e)) try {
i = i();
} catch (t) {
return !1;
}
if (i === n) return !0;
if (i && n) {
if (i instanceof cc.ValueType && i.equals(n)) return !0;
if (Array.isArray(i) && Array.isArray(n) || i.constructor === Object && n.constructor === Object) try {
return Array.isArray(i) && Array.isArray(n) && 0 === i.length && 0 === n.length;
} catch (t) {}
}
return !1;
}
function w(t) {
return f.test(t) ? "." + t : "[" + d(t) + "]";
}
function S(t, e) {
this.parent = e;
this.objsToClear_iN$t = [];
this.codeArray = [];
this.objs = [];
this.funcs = [];
this.funcModuleCache = l.createMap();
l.mixin(this.funcModuleCache, v);
this.globalVariables = [];
this.globalVariableId = 0;
this.localVariableId = 0;
this.codeArray.push(p + g + "," + y + ";", "if(R){", g + "=R;", "}else{", g + "=R=new " + this.getFuncModule(t.constructor, !0) + "();", "}");
t._iN$t = {
globalVar: "R"
};
this.objsToClear_iN$t.push(t);
this.enumerateObject(this.codeArray, t);
var i;
this.globalVariables.length > 0 && (i = p + this.globalVariables.join(",") + ";");
var n = u.flattenCodeArray([ "return (function(R){", i || [], this.codeArray, "return o;", "})" ]);
this.result = Function("O", "F", n)(this.objs, this.funcs);
for (var r = 0, s = this.objsToClear_iN$t.length; r < s; ++r) this.objsToClear_iN$t[r]._iN$t = null;
this.objsToClear_iN$t.length = 0;
}
var E = S.prototype;
E.getFuncModule = function(t, e) {
var i = l.getClassName(t);
if (i) {
var n = this.funcModuleCache[i];
if (n) return n;
if (void 0 === n) {
var r = -1 !== i.indexOf(".");
if (r) try {
if (r = t === Function("return " + i)()) {
this.funcModuleCache[i] = i;
return i;
}
} catch (t) {}
}
}
var s = this.funcs.indexOf(t);
if (s < 0) {
s = this.funcs.length;
this.funcs.push(t);
}
var a = "F[" + s + "]";
e && (a = "(" + a + ")");
this.funcModuleCache[i] = a;
return a;
};
E.getObjRef = function(t) {
var e = this.objs.indexOf(t);
if (e < 0) {
e = this.objs.length;
this.objs.push(t);
}
return "O[" + e + "]";
};
E.setValueType = function(t, e, i, n) {
var r = T.pool.get(n), s = e.constructor.__props__;
s || (s = Object.keys(e));
for (var a = 0; a < s.length; a++) {
var o = s[a], h = i[o];
if (e[o] !== h) {
var l = this.enumerateField(i, o, h);
r.append(o, l);
}
}
r.writeCode(t);
T.pool.put(r);
};
E.enumerateCCClass = function(i, n, r) {
for (var s = r.__props__, a = h.getClassAttrs(r), o = 0; o < s.length; o++) {
var l = s[o];
if (!1 !== a[l + _]) {
var u = n[l];
if (C(f = a[l + m], u)) continue;
if ("object" === ("object" === (e = typeof u) ? t(u) : e) && u instanceof cc.ValueType) {
var f;
if (((f = c.getDefault(f)) && f.constructor) === u.constructor) {
var d = g + w(l);
this.setValueType(i, f, u, d);
continue;
}
}
this.setObjProp(i, n, l, u);
}
}
};
E.instantiateArray = function(t) {
if (0 === t.length) return "[]";
var e = "a" + ++this.localVariableId, i = [ new x(e, "new Array(" + t.length + ")") ];
t._iN$t = {
globalVar: "",
source: i
};
this.objsToClear_iN$t.push(t);
for (var n = 0; n < t.length; ++n) {
b(i, e + "[" + n + "]=", this.enumerateField(t, n, t[n]));
}
return i;
};
E.enumerateField = function(i, n, r) {
if ("object" === ("object" === (e = typeof r) ? t(r) : e) && r) {
var a = r._iN$t;
if (a) {
var h = a.globalVar;
if (!h) {
h = a.globalVar = "v" + ++this.globalVariableId;
this.globalVariables.push(h);
var l = a.source[0];
a.source[0] = A(h + "=", l);
}
return h;
}
return Array.isArray(r) ? this.instantiateArray(r) : this.instantiateObj(r);
}
if ("function" === ("object" === (e = typeof r) ? t(r) : e)) return this.getFuncModule(r);
if ("string" === ("object" === (e = typeof r) ? t(r) : e)) return d(r);
"_objFlags" === n && i instanceof s && (r &= o);
return r;
};
E.setObjProp = function(t, e, i, n) {
b(t, g + w(i) + "=", this.enumerateField(e, i, n));
};
E.enumerateObject = function(i, n) {
var r = n.constructor;
if (cc.Class._isCCClass(r)) this.enumerateCCClass(i, n, r); else for (var s in n) if (n.hasOwnProperty(s) && (95 !== s.charCodeAt(0) || 95 !== s.charCodeAt(1) || "__type__" === s)) {
var a = n[s];
"object" === ("object" === (e = typeof a) ? t(a) : e) && a && a === n._iN$t || this.setObjProp(i, n, s, a);
}
};
E.instantiateObj = function(t) {
if (t instanceof cc.ValueType) return c.getNewValueTypeCode(t);
if (t instanceof cc.Asset) return this.getObjRef(t);
if (t._objFlags & a) return null;
var e, i = t.constructor;
if (cc.Class._isCCClass(i)) {
if (this.parent) if (this.parent instanceof cc.Component) {
if (t instanceof cc._BaseNode || t instanceof cc.Component) return this.getObjRef(t);
} else if (this.parent instanceof cc._BaseNode) if (t instanceof cc._BaseNode) {
if (!t.isChildOf(this.parent)) return this.getObjRef(t);
} else if (t instanceof cc.Component && !t.node.isChildOf(this.parent)) return this.getObjRef(t);
e = new x(g, "new " + this.getFuncModule(i, !0) + "()");
} else if (i === Object) e = new x(g, "{}"); else {
if (i) return this.getObjRef(t);
e = new x(g, "Object.create(null)");
}
var n = [ e ];
t._iN$t = {
globalVar: "",
source: n
};
this.objsToClear_iN$t.push(t);
this.enumerateObject(n, t);
return [ "(function(){", n, "return o;})();" ];
};
n.exports = {
compile: function(t) {
return new S(t, t instanceof cc._BaseNode && t).result;
},
equalsToDefault: C
};
0;
}), {
"./CCClass": 153,
"./CCObject": 159,
"./attribute": 165,
"./compiler": 167,
"./js": 173
} ],
172: [ (function(i, n, r) {
var s = i("./CCObject"), a = s.Flags.Destroyed, o = s.Flags.PersistentMask, h = i("./attribute"), l = i("./utils").isDomNode;
function c(i, n) {
if (!n) {
if ("object" !== ("object" === (e = typeof i) ? t(i) : e) || Array.isArray(i)) {
0;
return null;
}
if (!i) {
0;
return null;
}
if (!cc.isValid(i)) {
0;
return null;
}
0;
}
var r;
if (i instanceof s) {
if (i._instantiate) {
cc.game._isCloning = !0;
r = i._instantiate();
cc.game._isCloning = !1;
return r;
}
if (i instanceof cc.Asset) {
0;
return null;
}
}
cc.game._isCloning = !0;
r = _(i);
cc.game._isCloning = !1;
return r;
}
var u = [];
function _(t, e) {
if (Array.isArray(t)) {
0;
return null;
}
if (l && l(t)) {
0;
return null;
}
var i;
if (t._iN$t) i = t._iN$t; else if (t.constructor) {
i = new (0, t.constructor)();
} else i = Object.create(null);
f(t, i, e);
for (var n = 0, r = u.length; n < r; ++n) u[n]._iN$t = null;
u.length = 0;
return i;
}
var m = h.DELIMETER + "serializable";
function f(i, n, r) {
i._iN$t = n;
u.push(i);
var a = i.constructor;
if (cc.Class._isCCClass(a)) (function(i, n, r, s) {
for (var a = i.__props__, o = h.getClassAttrs(i), l = 0; l < a.length; l++) {
var c = a[l];
if (!1 !== o[c + m]) {
var u = n[c];
"object" === ("object" == (e = typeof u) ? t(u) : e) && u ? r[c] = u._iN$t || d(u, s) : r[c] = u;
}
}
})(a, i, n, r); else for (var l in i) if (i.hasOwnProperty(l) && (95 !== l.charCodeAt(0) || 95 !== l.charCodeAt(1) || "__type__" === l)) {
var c = i[l];
if ("object" === ("object" === (e = typeof c) ? t(c) : e) && c) {
if (c === n) continue;
n[l] = c._iN$t || d(c, r);
} else n[l] = c;
}
i instanceof s && (n._objFlags &= o);
}
function d(i, n) {
if (i instanceof cc.ValueType) return i.clone();
if (i instanceof cc.Asset) return i;
var r;
if (Array.isArray(i)) {
var s = i.length;
r = new Array(s);
i._iN$t = r;
for (var o = 0; o < s; ++o) {
var h = i[o];
"object" === ("object" === (e = typeof h) ? t(h) : e) && h ? r[o] = h._iN$t || d(h, n) : r[o] = h;
}
u.push(i);
return r;
}
if (i._objFlags & a) return null;
var l = i.constructor;
if (cc.Class._isCCClass(l)) {
if (n) if (n instanceof cc.Component) {
if (i instanceof cc._BaseNode || i instanceof cc.Component) return i;
} else if (n instanceof cc._BaseNode) if (i instanceof cc._BaseNode) {
if (!i.isChildOf(n)) return i;
} else if (i instanceof cc.Component && !i.node.isChildOf(n)) return i;
r = new l();
} else if (l === Object) r = {}; else {
if (l) return i;
r = Object.create(null);
}
f(i, r, n);
return r;
}
c._clone = _;
cc.instantiate = c;
n.exports = c;
}), {
"./CCObject": 159,
"./attribute": 165,
"./utils": 177
} ],
173: [ (function(i, n, r) {
var s = new (i("./id-generater"))("TmpCId.");
function a(t, e) {
for (;t; ) {
var i = Object.getOwnPropertyDescriptor(t, e);
if (i) return i;
t = Object.getPrototypeOf(t);
}
return null;
}
function o(t, e, i) {
var n = a(e, t);
Object.defineProperty(i, t, n);
}
var h = {
isNumber: function(i) {
return "number" === ("object" === (e = typeof i) ? t(i) : e) || i instanceof Number;
},
isString: function(i) {
return "string" === ("object" === (e = typeof i) ? t(i) : e) || i instanceof String;
},
addon: function(i) {
"use strict";
i = i || {};
for (var n = 1, r = arguments.length; n < r; n++) {
var s = arguments[n];
if (s) {
if ("object" !== ("object" === (e = typeof s) ? t(s) : e)) {
cc.errorID(5402, s);
continue;
}
for (var a in s) a in i || o(a, s, i);
}
}
return i;
},
mixin: function(i) {
"use strict";
i = i || {};
for (var n = 1, r = arguments.length; n < r; n++) {
var s = arguments[n];
if (s) {
if ("object" !== ("object" === (e = typeof s) ? t(s) : e)) {
cc.errorID(5403, s);
continue;
}
for (var a in s) o(a, s, i);
}
}
return i;
},
extend: function(t, e) {
0;
for (var i in e) e.hasOwnProperty(i) && (t[i] = e[i]);
t.prototype = Object.create(e.prototype, {
constructor: {
value: t,
writable: !0,
configurable: !0
}
});
return t;
},
getSuper: function(t) {
var e = t.prototype, i = e && Object.getPrototypeOf(e);
return i && i.constructor;
},
isChildClassOf: function(i, n) {
if (i && n) {
if ("function" !== ("object" === (e = typeof i) ? t(i) : e)) return !1;
if ("function" !== ("object" === (e = typeof n) ? t(n) : e)) {
0;
return !1;
}
if (i === n) return !0;
for (;;) {
if (!(i = h.getSuper(i))) return !1;
if (i === n) return !0;
}
}
return !1;
},
clear: function(t) {
for (var e = Object.keys(t), i = 0; i < e.length; i++) delete t[e[i]];
},
getPropertyDescriptor: a
}, l = {
value: void 0,
enumerable: !1,
writable: !1,
configurable: !0
};
h.value = function(t, e, i, n, r) {
l.value = i;
l.writable = n;
l.enumerable = r;
Object.defineProperty(t, e, l);
l.value = void 0;
};
var c = {
get: null,
set: null,
enumerable: !1
};
h.getset = function(i, n, r, s, a) {
if ("function" !== ("object" === (e = typeof s) ? t(s) : e)) {
a = s;
s = void 0;
}
c.get = r;
c.set = s;
c.enumerable = a;
Object.defineProperty(i, n, c);
c.get = null;
c.set = null;
};
var u = {
get: null,
enumerable: !1,
configurable: !1
};
h.get = function(t, e, i, n, r) {
u.get = i;
u.enumerable = n;
u.configurable = r;
Object.defineProperty(t, e, u);
u.get = null;
};
var _ = {
set: null,
enumerable: !1,
configurable: !1
};
h.set = function(t, e, i, n, r) {
_.set = i;
_.enumerable = n;
_.configurable = r;
Object.defineProperty(t, e, _);
_.set = null;
};
h.getClassName = function(i) {
if ("function" === ("object" === (e = typeof i) ? t(i) : e)) {
var n = i.prototype;
if (n && n.hasOwnProperty("__classname__") && n.__classname__) return n.__classname__;
var r = "";
i.name && (r = i.name);
if (i.toString) {
var s, a = i.toString();
(s = "[" === a.charAt(0) ? a.match(/\[\w+\s*(\w+)\]/) : a.match(/function\s*(\w+)/)) && 2 === s.length && (r = s[1]);
}
return "Object" !== r ? r : "";
}
return i && i.constructor ? h.getClassName(i.constructor) : "";
};
(function() {
var i = {}, n = {};
function r(t, e) {
return function(i, n) {
n.prototype.hasOwnProperty(t) && delete e[n.prototype[t]];
h.value(n.prototype, t, i);
if (i) {
var r = e[i];
if (r && r !== n) {
var s = "A Class already exists with the same " + t + ' : "' + i + '".';
0;
cc.error(s);
} else e[i] = n;
}
};
}
h._setClassId = r("__cid__", i);
var a = r("__classname__", n);
h.setClassName = function(t, e) {
a(t, e);
if (!e.prototype.hasOwnProperty("__cid__")) {
var i = t || s.getNewId();
i && h._setClassId(i, e);
}
};
h.unregisterClass = function() {
for (var t = 0; t < arguments.length; t++) {
var e = arguments[t].prototype, r = e.__cid__;
r && delete i[r];
var s = e.__classname__;
s && delete n[s];
}
};
h._getClassById = function(t) {
return i[t];
};
h.getClassByName = function(t) {
return n[t];
};
h._getClassId = function(i, n) {
n = "undefined" === ("object" === (e = typeof n) ? t(n) : e) || n;
if ("function" === ("object" === (e = typeof i) ? t(i) : e) && i.prototype.hasOwnProperty("__cid__")) {
0;
return i.prototype.__cid__;
}
if (i && i.constructor) {
var r = i.constructor.prototype;
if (r && r.hasOwnProperty("__cid__")) {
0;
return i.__cid__;
}
}
return "";
};
0;
})();
h.obsolete = function(t, e, i, n) {
var r = /([^.]+)$/, s = r.exec(e)[0], a = r.exec(i)[0];
function o() {
0;
return this[a];
}
n ? h.getset(t, s, o, (function(t) {
0;
this[a] = t;
})) : h.get(t, s, o);
};
h.obsoletes = function(t, e, i, n) {
for (var r in i) {
var s = i[r];
h.obsolete(t, e + "." + r, s, n);
}
};
var m = /(%d)|(%s)/, f = /%s/;
h.formatStr = function() {
var i = arguments.length;
if (0 === i) return "";
var n = arguments[0];
if (1 === i) return "" + n;
if ("string" === ("object" === (e = typeof n) ? t(n) : e) && m.test(n)) for (var r = 1; r < i; ++r) {
var s = arguments[r], a = "number" === ("object" === (e = typeof s) ? t(s) : e) ? m : f;
a.test(n) ? n = n.replace(a, s) : n += " " + s;
} else for (var o = 1; o < i; ++o) n += " " + arguments[o];
return n;
};
h.shiftArguments = function() {
for (var t = arguments.length - 1, e = new Array(t), i = 0; i < t; ++i) e[i] = arguments[i + 1];
return e;
};
h.createMap = function(t) {
var e = Object.create(null);
if (t) {
e["."] = !0;
e["/"] = !0;
delete e["."];
delete e["/"];
}
return e;
};
function d(t, e) {
t.splice(e, 1);
}
function p(t, e) {
var i = t.indexOf(e);
if (i >= 0) {
d(t, i);
return !0;
}
return !1;
}
var g = Array.prototype.indexOf;
h.array = {
remove: p,
fastRemove: function(t, e) {
var i = t.indexOf(e);
if (i >= 0) {
t[i] = t[t.length - 1];
--t.length;
}
},
removeAt: d,
fastRemoveAt: function(t, e) {
var i = t.length;
if (!(e < 0 || e >= i)) {
t[e] = t[i - 1];
t.length = i - 1;
}
},
contains: function(t, e) {
return t.indexOf(e) >= 0;
},
verifyType: function(t, e) {
if (t && t.length > 0) for (var i = 0; i < t.length; i++) if (!(t[i] instanceof e)) {
cc.logID(1300);
return !1;
}
return !0;
},
removeArray: function(t, e) {
for (var i = 0, n = e.length; i < n; i++) p(t, e[i]);
},
appendObjectsAt: function(t, e, i) {
t.splice.apply(t, [ i, 0 ].concat(e));
return t;
},
copy: function(t) {
var e, i = t.length, n = new Array(i);
for (e = 0; e < i; e += 1) n[e] = t[e];
return n;
},
indexOf: g,
MutableForwardIterator: i("../utils/mutable-forward-iterator")
};
function y(t, e) {
if (void 0 === e) {
e = t;
t = null;
}
this.get = null;
this.count = 0;
this._pool = new Array(e);
this._cleanup = t;
}
y.prototype._get = function() {
if (this.count > 0) {
--this.count;
var t = this._pool[this.count];
this._pool[this.count] = null;
return t;
}
return null;
};
y.prototype.put = function(t) {
var e = this._pool;
if (this.count < e.length) {
if (this._cleanup && !1 === this._cleanup(t)) return;
e[this.count] = t;
++this.count;
}
};
y.prototype.resize = function(t) {
if (t >= 0) {
this._pool.length = t;
this.count > t && (this.count = t);
}
};
h.Pool = y;
cc.js = h;
n.exports = h;
}), {
"../utils/mutable-forward-iterator": 232,
"./id-generater": 169
} ],
174: [ (function(i, n, r) {
var s = i("./js"), a = {
url: {
canUsedInGet: !0
},
default: {},
serializable: {},
editorOnly: {},
formerlySerializedAs: {}
};
function o(t, e, i, n) {
if (t.get || t.set) 0; else if (t.hasOwnProperty("default")) {
var r = "_N$" + e;
t.get = function() {
return this[r];
};
t.set = function(t) {
var e = this[r];
this[r] = t;
i.call(this, e);
};
var s = {};
n[r] = s;
for (var o in a) {
var h = a[o];
if (t.hasOwnProperty(o)) {
s[o] = t[o];
h.canUsedInGet || delete t[o];
}
}
} else 0;
}
function h(t, e, i, n) {
Array.isArray(n) && n.length > 0 && (n = n[0]);
0;
t.type = n;
}
function l(t, e, i, n) {
if (Array.isArray(e)) {
if (!(e.length > 0)) return cc.errorID(5508, i, n);
if (cc.RawAsset.isRawAssetType(e[0])) {
t.url = e[0];
delete t.type;
return;
}
t.type = e = e[0];
}
0;
}
r.getFullFormOfProperty = function(i, n, r) {
if (!(i && i.constructor === Object)) {
if (Array.isArray(i) && i.length > 0) {
var a = i[0];
0;
return {
default: [],
type: i,
_short: !0
};
}
if ("function" === ("object" === (e = typeof i) ? t(i) : e)) {
a = i;
if (!cc.RawAsset.isRawAssetType(a)) {
if (!cc.RawAsset.wasRawAssetType(a)) return {
default: s.isChildClassOf(a, cc.ValueType) ? new a() : null,
type: a,
_short: !0
};
0;
}
return {
default: "",
url: a,
_short: !0
};
}
return {
default: i,
_short: !0
};
}
return null;
};
r.preprocessAttrs = function(t, e, i, n) {
for (var s in t) {
var a = t[s], c = r.getFullFormOfProperty(a, s, e);
c && (a = t[s] = c);
if (a) {
var u = a.notify;
u && o(a, s, u, t);
"type" in a && l(a, a.type, e, s);
"url" in a && h(a, 0, 0, a.url);
"type" in a && a.type;
}
}
};
0;
r.validateMethodWithProps = function(i, n, r, s, a) {
0;
if ("function" !== ("object" === (e = typeof i) ? t(i) : e) && null !== i) {
return !1;
}
0;
return !0;
};
}), {
"./CCClass": 153,
"./js": 173
} ],
175: [ (function(t, e, i) {
var n = [];
cc._RF = {
push: function(t, e, i) {
if (void 0 === i) {
i = e;
e = "";
}
n.push({
uuid: e,
script: i,
module: t,
exports: t.exports,
beh: null
});
},
pop: function() {
var t = n.pop(), e = t.module, i = e.exports;
if (i === t.exports) {
for (var r in i) return;
e.exports = i = t.cls;
}
},
peek: function() {
return n[n.length - 1];
}
};
0;
}), {} ],
176: [ (function(t, e, i) {
cc.url = {
_rawAssets: "",
normalize: function(t) {
t && (46 === t.charCodeAt(0) && 47 === t.charCodeAt(1) ? t = t.slice(2) : 47 === t.charCodeAt(0) && (t = t.slice(1)));
return t;
},
raw: function(t) {
0;
if ((t = this.normalize(t)).startsWith("resources/")) {
var e = cc.loader._getResUuid(t.slice(10), cc.Asset, !0);
if (e) return cc.AssetLibrary.getLibUrlNoExt(e, !0) + cc.path.extname(t);
} else cc.errorID(7002, t);
return this._rawAssets + t;
},
_init: function(t) {
this._rawAssets = cc.path.stripSep(t) + "/";
}
};
e.exports = cc.url;
}), {} ],
177: [ (function(i, n, r) {
n.exports = {
contains: function(i, n) {
if ("function" == ("object" === (e = typeof i.contains) ? t(i.contains) : e)) return i.contains(n);
if ("function" == ("object" === (e = typeof i.compareDocumentPosition) ? t(i.compareDocumentPosition) : e)) return !!(16 & i.compareDocumentPosition(n));
var r = n.parentNode;
if (r) do {
if (r === i) return !0;
r = r.parentNode;
} while (null !== r);
return !1;
},
isDomNode: "object" === (e = typeof window, "object" === e ? t(window) : e) && ("function" === (e = typeof Node, 
"object" === e ? t(Node) : e) ? function(t) {
return t instanceof Node;
} : function(i) {
return i && "object" === ("object" === (e = typeof i) ? t(i) : e) && "number" === ("object" === (e = typeof i.nodeType) ? t(i.nodeType) : e) && "string" === ("object" === (e = typeof i.nodeName) ? t(i.nodeName) : e);
}),
callInNextTick: function(t, e, i) {
t && setTimeout((function() {
t(e, i);
}), 0);
}
};
0;
0;
}), {} ],
178: [ (function(t, e, i) {
t("./platform/js");
t("./value-types");
t("./utils");
t("./platform/CCInputManager");
t("./platform/CCInputExtension");
t("./event");
t("./platform/CCSys");
t("./platform/CCMacro");
t("./load-pipeline");
t("./CCDirector");
t("./renderer");
t("./platform/CCView");
t("./platform/CCScreen");
t("./CCScheduler");
t("./event-manager");
}), {
"./CCDirector": 26,
"./CCScheduler": 31,
"./event": 100,
"./event-manager": 96,
"./load-pipeline": 114,
"./platform/CCInputExtension": 156,
"./platform/CCInputManager": 157,
"./platform/CCMacro": 158,
"./platform/CCScreen": 161,
"./platform/CCSys": 162,
"./platform/CCView": 163,
"./platform/js": 173,
"./renderer": 194,
"./utils": 229,
"./value-types": 241
} ],
179: [ (function(t, e, i) {
t("../../platform/js"), t("./renderers");
var n = t("../render-flow"), r = function(t, e) {
this._device = t;
this._camera = e;
this.worldMatDirty = 0;
n.init(this);
};
r.prototype = {
constructor: r,
reset: function() {},
_commitComp: function(t, e, i) {
var n = this._device._ctx, r = this._camera;
n.setTransform(r.a, r.b, r.c, r.d, r.tx, r.ty);
e.draw(n, t);
},
visit: function(t) {
var e = this._device._ctx, i = this._device._canvas, r = cc.Camera.main.backgroundColor;
e.fillStyle = "rgba(" + r.r + ", " + r.g + ", " + r.b + ", " + r.a + ")";
e.setTransform(1, 0, 0, 1, 0, 0);
e.fillRect(0, 0, i.width, i.height);
this._device._stats.drawcalls = 0;
n.render(t);
}
};
e.exports = r;
}), {
"../../platform/js": 173,
"../render-flow": 196,
"./renderers": 184
} ],
180: [ (function(t, e, i) {
var n = function() {};
n.prototype = {
constructor: n,
_reset: function() {},
render: function() {}
};
e.exports = n;
}), {} ],
181: [ (function(t, e, i) {
e.exports = {
ForwardRenderer: t("./forward-renderer"),
RenderComponentWalker: t("./canvas-render-walker"),
_renderers: t("./renderers")
};
}), {
"./canvas-render-walker": 179,
"./forward-renderer": 180,
"./renderers": 184
} ],
182: [ (function(t, e, i) {
var n = t("../../../../graphics/helper"), r = t("../../../../graphics/types"), s = t("../../../../platform/js"), a = (r.PointFlags, 
r.LineJoin), o = r.LineCap;
function h() {
this.cmds = [];
this.style = {
strokeStyle: "black",
fillStyle: "white",
lineCap: "butt",
lineJoin: "miter",
miterLimit: 10
};
}
var l = h.prototype;
s.mixin(l, {
moveTo: function(t, e) {
this.cmds.push([ "moveTo", [ t, e ] ]);
},
lineTo: function(t, e) {
this.cmds.push([ "lineTo", [ t, e ] ]);
},
bezierCurveTo: function(t, e, i, n, r, s) {
this.cmds.push([ "bezierCurveTo", [ t, e, i, n, r, s ] ]);
},
quadraticCurveTo: function(t, e, i, n) {
this.cmds.push([ "quadraticCurveTo", [ t, e, i, n ] ]);
},
arc: function(t, e, i, r, s, a) {
n.arc(this, t, e, i, r, s, a);
},
ellipse: function(t, e, i, r) {
n.ellipse(this, t, e, i, r);
},
circle: function(t, e, i) {
n.ellipse(this, t, e, i, i);
},
rect: function(t, e, i, n) {
this.moveTo(t, e);
this.lineTo(t, e + n);
this.lineTo(t + i, e + n);
this.lineTo(t + i, e);
this.close();
},
roundRect: function(t, e, i, r, s) {
n.roundRect(this, t, e, i, r, s);
},
clear: function(t, e) {
this.cmds.length = 0;
},
close: function() {
this.cmds.push([ "closePath", [] ]);
},
stroke: function() {
this.cmds.push([ "stroke", [] ]);
},
fill: function() {
this.cmds.push([ "fill", [] ]);
}
});
s.set(l, "strokeColor", (function(t) {
var e = "rgba(" + (0 | t.r) + "," + (0 | t.g) + "," + (0 | t.b) + "," + t.a / 255 + ")";
this.cmds.push([ "strokeStyle", e ]);
this.style.strokeStyle = e;
}));
s.set(l, "fillColor", (function(t) {
var e = "rgba(" + (0 | t.r) + "," + (0 | t.g) + "," + (0 | t.b) + "," + t.a / 255 + ")";
this.cmds.push([ "fillStyle", e ]);
this.style.fillStyle = e;
}));
s.set(l, "lineWidth", (function(t) {
this.cmds.push([ "lineWidth", t ]);
this.style.lineWidth = t;
}));
s.set(l, "lineCap", (function(t) {
var e = "butt";
t === o.BUTT ? e = "butt" : t === o.ROUND ? e = "round" : t === o.SQUARE && (e = "square");
this.cmds.push([ "lineCap", e ]);
this.style.lineCap = e;
}));
s.set(l, "lineJoin", (function(t) {
var e = "bevel";
t === a.BEVEL ? e = "bevel" : t === a.ROUND ? e = "round" : t === a.MITER && (e = "miter");
this.cmds.push([ "lineJoin", e ]);
this.style.lineJoin = e;
}));
s.set(l, "miterLimit", (function(t) {
this.cmds.push([ "miterLimit", t ]);
this.style.miterLimit = t;
}));
e.exports = h;
}), {
"../../../../graphics/helper": 103,
"../../../../graphics/types": 105,
"../../../../platform/js": 173
} ],
183: [ (function(i, n, r) {
var s = i("./impl");
n.exports = {
createImpl: function() {
return new s();
},
draw: function(i, n) {
var r = n.node, s = r._worldMatrix, a = s.m00, o = s.m01, h = s.m04, l = s.m05, c = s.m12, u = s.m13;
i.transform(a, o, h, l, c, -u);
i.save();
i.scale(1, -1);
i.glphaAlpha = r.opacity / 255;
var _ = n._impl.style;
i.strokeStyle = _.strokeStyle;
i.fillStyle = _.fillStyle;
i.lineWidth = _.lineWidth;
i.lineJoin = _.lineJoin;
i.miterLimit = _.miterLimit;
for (var m = !0, f = n._impl.cmds, d = 0, p = f.length; d < p; d++) {
var g = f[d], y = g[0], v = g[1];
if ("moveTo" === y && m) {
i.beginPath();
m = !1;
} else "fill" !== y && "stroke" !== y && "fillRect" !== y || (m = !0);
"function" === ("object" === (e = typeof i[y]) ? t(i[y]) : e) ? i[y].apply(i, v) : i[y] = v;
}
i.restore();
return 1;
},
stroke: function(t) {
t._impl.stroke();
},
fill: function(t) {
t._impl.fill();
}
};
}), {
"./impl": 182
} ],
184: [ (function(t, e, i) {
var n = t("../../../platform/js"), r = t("../../../components/CCSprite"), s = t("../../../components/CCLabel"), a = t("../../../components/CCMask"), o = t("../../../components/CCRichText"), h = t("../../../graphics/graphics"), l = t("./sprite"), c = t("./label"), u = t("./graphics"), _ = t("./mask"), m = {}, f = {};
function d(t, e, i) {
var r = n.getClassName(t);
m[r] = e;
i && (f[r] = i);
t._assembler = e;
t._postAssembler = i;
}
d(r, l);
d(s, c);
d(a, _.beforeHandler, _.afterHandler);
d(o, null);
d(h, u);
e.exports = {
map: m,
postMap: f,
addRenderer: d
};
}), {
"../../../components/CCLabel": 67,
"../../../components/CCMask": 70,
"../../../components/CCRichText": 76,
"../../../components/CCSprite": 80,
"../../../graphics/graphics": 102,
"../../../platform/js": 173,
"./graphics": 183,
"./label": 186,
"./mask": 188,
"./sprite": 189
} ],
185: [ (function(t, e, i) {
var n = t("../../../utils/label/bmfont"), r = t("../../../../platform/js"), s = t("../utils");
e.exports = r.addon({
createData: function(t) {
return t.requestRenderData();
},
appendQuad: function(t, e, i, n, r, s, a) {
var o = t.dataLength;
t.dataLength += 2;
var h = t._data, l = (e.width, e.height, i.width), c = i.height, u = void 0, _ = void 0, m = void 0, f = void 0;
if (n) {
u = i.x;
m = i.x + c;
_ = i.y;
f = i.y + l;
h[o].u = u;
h[o].v = f;
h[o + 1].u = u;
h[o + 1].v = _;
} else {
u = i.x;
m = i.x + l;
_ = i.y;
f = i.y + c;
h[o].u = u;
h[o].v = _;
h[o + 1].u = m;
h[o + 1].v = f;
}
h[o].x = r;
h[o].y = s - c * a;
h[o + 1].x = r + l * a;
h[o + 1].y = s;
},
draw: function(t, e) {
var i = e.node, n = i._worldMatrix, r = n.m00, a = n.m01, o = n.m04, h = n.m05, l = n.m12, c = n.m13;
t.transform(r, a, o, h, l, -c);
t.glphaAlpha = i.opacity / 255;
for (var u = e._texture, _ = e._renderData._data, m = s.getColorizedImage(u, i.color), f = 0, d = _.length; f < d; f += 2) {
var p = _[f].x, g = _[f].y, y = _[f + 1].x - p, v = _[f + 1].y - g;
g = -g - v;
var x = _[f].u, A = _[f].v, b = _[f + 1].u - x, T = _[f + 1].v - A;
t.drawImage(m, x, A, b, T, p, g, y, v);
}
return 1;
}
}, n);
}), {
"../../../../platform/js": 173,
"../../../utils/label/bmfont": 199,
"../utils": 193
} ],
186: [ (function(t, e, i) {
var n = t("./ttf"), r = t("./bmfont");
e.exports = {
getAssembler: function(t) {
var e = n;
t.font instanceof cc.BitmapFont && (e = r);
return e;
},
createData: function(t) {
return t._assembler.createData(t);
},
draw: function(t, e) {
if (!e._texture) return 0;
var i = e._assembler;
if (!i) return 0;
i.updateRenderData(e);
return i.draw(t, e);
}
};
}), {
"./bmfont": 185,
"./ttf": 187
} ],
187: [ (function(t, e, i) {
var n = t("../../../utils/label/ttf"), r = t("../../../../platform/js"), s = t("../utils");
e.exports = r.addon({
createData: function(t) {
var e = t.requestRenderData();
e.dataLength = 2;
return e;
},
_updateVerts: function(t) {
var e = t._renderData, i = t.node, n = i.width, r = i.height, s = i.anchorX * n, a = i.anchorY * r, o = e._data;
o[0].x = -s;
o[0].y = -a;
o[1].x = n - s;
o[1].y = r - a;
},
_updateTexture: function(t) {
n._updateTexture(t);
s.dropColorizedImage(t._texture, t.node.color);
},
draw: function(t, e) {
var i = e.node, n = i._worldMatrix, r = n.m00, a = n.m01, o = n.m04, h = n.m05, l = n.m12, c = n.m13;
t.transform(r, a, o, h, l, -c);
t.glphaAlpha = i.opacity / 255;
var u = e._texture, _ = e._renderData._data, m = s.getColorizedImage(u, i.color), f = _[0].x, d = _[0].y, p = _[1].x - f, g = _[1].y - d;
d = -d - g;
t.drawImage(m, f, d, p, g);
return 1;
}
}, n);
}), {
"../../../../platform/js": 173,
"../../../utils/label/ttf": 200,
"../utils": 193
} ],
188: [ (function(t, e, i) {
var n = t("../../../CCNode"), r = t("../../../components/CCMask"), s = t("../../../graphics/graphics"), a = t("./graphics"), o = [];
var h = {
updateRenderData: function(t) {},
updateGraphics: function(t) {
var e = t.node, i = t._graphics;
i.clear(!1);
var n = e.width, s = e.height, a = -n * e.anchorX, o = -s * e.anchorY;
if (t._type === r.Type.RECT) i.rect(a, o, n, s); else if (t._type === r.Type.ELLIPSE) {
var h = a + n / 2, l = o + s / 2, c = n / 2, u = s / 2;
i.ellipse(h, l, c, u);
}
i.stroke();
},
draw: function(t, e) {
var i = e.node._worldMatrix, r = i.m00, h = i.m01, l = i.m04, c = i.m05, u = i.m12, _ = i.m13;
t.save();
t.transform(r, h, l, c, u, -_);
e._graphics = (function() {
var t = o.pop();
t || ((t = new n().addComponent(s)).lineWidth = 0);
return t;
})();
this.updateGraphics(e);
a.draw(t, e._graphics);
t.clip();
}
};
e.exports = {
beforeHandler: h,
afterHandler: {
updateRenderData: function(t) {},
draw: function(t, e) {
t.restore();
}
}
};
}), {
"../../../CCNode": 28,
"../../../components/CCMask": 70,
"../../../graphics/graphics": 102,
"./graphics": 183
} ],
189: [ (function(t, e, i) {
var n = t("../../../../components/CCSprite"), r = n.Type, s = n.FillType, a = t("./simple"), o = t("./sliced"), h = t("./tiled");
e.exports = {
getAssembler: function(t) {
switch (t.type) {
case r.SIMPLE:
return a;

case r.SLICED:
return o;

case r.TILED:
return h;

case r.FILLED:
return t._fillType, s.RADIAL, null;
}
},
createData: function(t) {
return t._assembler.createData(t);
}
};
}), {
"../../../../components/CCSprite": 80,
"./simple": 190,
"./sliced": 191,
"./tiled": 192
} ],
190: [ (function(t, e, i) {
var n = t("../utils"), r = {
createData: function(t) {
var e = t.requestRenderData();
e.dataLength = 2;
return e;
},
updateRenderData: function(t) {
t._material || t._activateMaterial();
var e = t._renderData;
e.uvDirty && this.updateUVs(t);
e.vertDirty && this.updateVerts(t);
},
updateUVs: function(t) {
var e = t.spriteFrame, i = t._renderData, n = i._data, r = e._rect;
e._texture;
if (e._rotated) {
var s = r.x, a = r.height, o = r.y, h = r.width;
n[0].u = s;
n[0].v = h;
n[1].u = a;
n[1].v = o;
} else {
var l = r.x, c = r.width, u = r.y, _ = r.height;
n[0].u = l;
n[0].v = u;
n[1].u = c;
n[1].v = _;
}
i.uvDirty = !1;
},
updateVerts: function(t) {
var e = t._renderData, i = t.node, n = e._data, r = i.width, s = i.height, a = i.anchorX * r, o = i.anchorY * s, h = void 0, l = void 0, c = void 0, u = void 0;
if (t.trim) {
h = -a;
l = -o;
c = r;
u = s;
} else {
var _ = t.spriteFrame, m = _._originalSize.width, f = _._originalSize.height, d = _._rect.width, p = _._rect.height, g = _._offset, y = r / m, v = s / f, x = g.x + (m - d) / 2, A = (g.x, 
g.y + (f - p) / 2);
g.y;
h = x * y - a;
l = A * v - o;
c = r;
u = s;
}
n[0].x = h;
n[0].y = l;
n[1].x = c;
n[1].y = u;
e.vertDirty = !1;
},
draw: function(t, e) {
var i = e.node, r = i._worldMatrix, s = r.m00, a = r.m01, o = r.m04, h = r.m05, l = r.m12, c = r.m13;
t.transform(s, a, o, h, l, -c);
t.glphaAlpha = i.opacity / 255;
var u = e._spriteFrame._texture, _ = e._renderData._data, m = n.getColorizedImage(u, i.color), f = _[0].x, d = _[0].y, p = _[1].x, g = _[1].y;
d = -d - g;
var y = _[0].u, v = _[0].v, x = _[1].u, A = _[1].v;
t.drawImage(m, y, v, x, A, f, d, p, g);
return 1;
}
};
e.exports = r;
}), {
"../utils": 193
} ],
191: [ (function(t, e, i) {
var n = t("../utils"), r = {
createData: function(t) {
var e = t.requestRenderData();
e.dataLength = 4;
return e;
},
updateRenderData: t("./simple").updateRenderData,
updateUVs: function(t) {
var e = t.spriteFrame, i = t._renderData, n = e._rect, r = (e._texture, e.insetLeft), s = e.insetRight, a = n.width - r - s, o = e.insetTop, h = e.insetBottom, l = n.height - o - h, c = i._data;
if (e._rotated) {
c[0].u = n.x;
c[1].u = h + n.x;
c[2].u = h + l + n.x;
c[3].u = n.x + n.height;
c[3].v = n.y;
c[2].v = r + n.y;
c[1].v = r + a + n.y;
c[0].v = n.y + n.width;
} else {
c[0].u = n.x;
c[1].u = r + n.x;
c[2].u = r + a + n.x;
c[3].u = n.x + n.width;
c[3].v = n.y;
c[2].v = o + n.y;
c[1].v = o + l + n.y;
c[0].v = n.y + n.height;
}
i.uvDirty = !1;
},
updateVerts: function(t) {
var e = t._renderData, i = e._data, n = t.node, r = n.width, s = n.height, a = n.anchorX * r, o = n.anchorY * s, h = t.spriteFrame, l = (h._rect, 
h.insetLeft), c = h.insetRight, u = h.insetTop, _ = h.insetBottom, m = r - l - c, f = s - u - _, d = r / (l + c), p = s / (u + _);
d = isNaN(d) || d > 1 ? 1 : d;
p = isNaN(p) || p > 1 ? 1 : p;
m = m < 0 ? 0 : m;
f = f < 0 ? 0 : f;
i[0].x = -a;
i[0].y = -o;
i[1].x = l * d - a;
i[1].y = _ * p - o;
i[2].x = i[1].x + m;
i[2].y = i[1].y + f;
i[3].x = r - a;
i[3].y = s - o;
e.vertDirty = !1;
},
draw: function(t, e) {
var i = e.node, r = i._worldMatrix, s = r.m00, a = r.m01, o = r.m04, h = r.m05, l = r.m12, c = r.m13;
t.transform(s, a, o, h, l, -c);
t.glphaAlpha = i.opacity / 255;
for (var u = e._spriteFrame._texture, _ = e._renderData._data, m = n.getColorizedImage(u, i.color), f = 0, d = void 0, p = void 0, g = void 0, y = void 0, v = void 0, x = void 0, A = void 0, b = void 0, T = void 0, C = void 0, w = void 0, S = void 0, E = 0; E < 3; ++E) {
y = _[E];
g = _[E + 1];
for (var D = 0; D < 3; ++D) {
d = _[D];
p = _[D + 1];
v = d.x;
x = y.y;
A = p.x - v;
x = -x - (b = g.y - x);
T = d.u;
C = g.v;
w = p.u - T;
S = y.v - C;
if (w > 0 && S > 0 && A > 0 && b > 0) {
t.drawImage(m, T, C, w, S, v, x, A, b);
f++;
}
}
}
return f;
}
};
e.exports = r;
}), {
"../utils": 193,
"./simple": 190
} ],
192: [ (function(t, e, i) {
var n = t("../utils"), r = (t("./simple"), {
createData: function(t) {
return t.requestRenderData();
},
updateRenderData: function(t) {
t._material || t._activateMaterial();
},
draw: function(t, e) {
var i = e.node, r = i._worldMatrix, s = r.m00, a = r.m01, o = r.m04, h = r.m05, l = r.m12, c = r.m13;
t.transform(s, a, o, h, l, -c);
t.glphaAlpha = i.opacity / 255;
var u = e.spriteFrame, _ = u._rect, m = u._texture, f = _.x, d = _.y, p = u._rotated ? _.height : _.width, g = u._rotated ? _.width : _.height, y = n.getFrameCache(m, i.color, f, d, p, g), v = i.width, x = i.height, A = -i.anchorX * v, b = -i.anchorY * x;
b = -b - x;
t.translate(A, b);
t.fillStyle = t.createPattern(y, "repeat");
t.fillRect(0, 0, v, x);
return 1;
}
});
e.exports = r;
}), {
"../utils": 193,
"./simple": 190
} ],
193: [ (function(t, e, i) {
function n(t, e, i, n, r, s, a) {
if (cc.sys.browserType === cc.sys.BROWSER_TYPE_WECHAT_GAME_SUB) return t;
var o = e._image, h = t.getContext("2d");
t.width = s;
t.height = a;
h.globalCompositeOperation = "source-over";
h.fillStyle = "rgb(" + i.r + "," + i.g + "," + i.b + ")";
h.fillRect(0, 0, s, a);
h.globalCompositeOperation = "multiply";
h.drawImage(o, n, r, s, a, 0, 0, s, a);
h.globalCompositeOperation = "destination-atop";
h.drawImage(o, n, r, s, a, 0, 0, s, a);
return t;
}
var r = {
canvasMap: {},
canvasUsed: {},
canvasPool: [],
checking: !1,
check: function() {
var t = !1;
for (var e in this.canvasUsed) {
t = !0;
if (this.canvasUsed[e]) this.canvasUsed[e] = !1; else {
var i = this.canvasMap[e];
i.width = 0;
i.height = 0;
this.canvasPool.length < 32 && this.canvasPool.push(i);
delete this.canvasMap[e];
delete this.canvasUsed[e];
}
}
if (!t) {
cc.director.off(cc.Director.EVENT_AFTER_DRAW, this.check, this);
this.checking = !1;
}
},
startCheck: function() {
cc.director.on(cc.Director.EVENT_AFTER_DRAW, this.check, this);
this.checking = !0;
},
getCanvas: function(t) {
this.canvasUsed[t] = !0;
return this.canvasMap[t];
},
cacheCanvas: function(t, e) {
this.canvasMap[e] = t;
this.canvasUsed[e] = !0;
this.checking || this.startCheck();
},
dropImage: function(t) {
this.canvasMap[t] && delete this.canvasMap[t];
}
};
e.exports = {
getColorizedImage: function(t, e) {
if (!t || !t.url) return null;
var i = 16777215 & e._val;
if (16777215 === i) return t._image;
var s = t.url + i, a = r.getCanvas(s);
if (!a) {
n(a = r.canvasPool.pop() || document.createElement("canvas"), t, e, 0, 0, t.width, t.height);
r.cacheCanvas(a, s);
}
return a;
},
getFrameCache: function(t, e, i, s, a, o) {
if (!t || !t.url || i < 0 || s < 0 || a <= 0 || o <= 0) return null;
var h = t.url, l = !1, c = 16777215 & e._val;
if (16777215 !== c) {
h += c;
l = !0;
}
if (0 !== i || 0 !== s && a !== t.width && o !== t.height) {
h += "_" + i + "_" + s + "_" + a + "_" + o;
l = !0;
}
if (!l) return t._image;
var u = r.getCanvas(h);
if (!u) {
n(u = r.canvasPool.pop() || document.createElement("canvas"), t, e, i, s, a, o);
r.cacheCanvas(u, h);
}
return u;
},
dropColorizedImage: function(t, e) {
var i = t.url + (16777215 & e._val);
r.dropImage(i);
}
};
}), {} ],
194: [ (function(t, e, i) {
var n = t("./render-engine");
n.math.vec3.create();
e.exports = {
renderEngine: n,
Texture2D: null,
canvas: null,
device: null,
scene: null,
drawCalls: 0,
_walker: null,
_cameraNode: null,
_camera: null,
_forward: null,
initWebGL: function(e, i) {
t("./webgl/assemblers");
var r = t("./webgl/render-component-walker");
this.Texture2D = n.Texture2D;
this.canvas = e;
this.device = new n.Device(e, i);
this.scene = new n.Scene();
this._walker = new r(this.device, this.scene);
var s = (function(t) {
return {
defaultTexture: new n.Texture2D(t, {
images: [],
width: 128,
height: 128,
wrapS: n.gfx.WRAP_REPEAT,
wrapT: n.gfx.WRAP_REPEAT,
format: n.gfx.TEXTURE_FMT_RGB8,
mipmap: !1
}),
programTemplates: n.shaders.templates,
programChunks: n.shaders.chunks
};
})(this.device);
this._forward = new n.ForwardRenderer(this.device, s);
},
initCanvas: function(e) {
var i = t("./canvas");
this.Texture2D = n.canvas.Texture2D;
this.canvas = e;
this.device = new n.canvas.Device(e);
this._camera = {
a: 1,
b: 0,
c: 0,
d: 1,
tx: 0,
ty: 0
};
this._walker = new i.RenderComponentWalker(this.device, this._camera);
this._forward = new i.ForwardRenderer();
},
updateCameraViewport: function() {
if (cc.director) {
var t = cc.director.getScene();
t.scaleX = t.scaleY = 1;
}
if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS) {
var e = cc.view.getViewportRect();
this.device.setViewport(e.x, e.y, e.width, e.height);
this._camera.a = cc.view.getScaleX();
this._camera.d = cc.view.getScaleY();
this._camera.tx = e.x;
this._camera.ty = e.y + e.height;
} else {
}
},
render: function(t) {
this.device._stats.drawcalls = 0;
if (t) {
this._walker.visit(t);
this._forward.render(this.scene);
this.drawCalls = this.device._stats.drawcalls;
}
},
clear: function() {
this._walker.reset();
this._forward._reset();
}
};
}), {
"./canvas": 181,
"./render-engine": 195,
"./webgl/assemblers": 204,
"./webgl/render-component-walker": 219
} ],
195: [ (function(t, e, i) {
"use strict";
var n = Math.PI / 180, r = 180 / Math.PI, s = 1e-6;
function a(t) {
return t * n;
}
var o = Math.random;
function h(t, e) {
return Math.random() * (e - t) + t;
}
var l = 32, c = -1 << l - 1;
function u(t) {
var e = 32;
(t &= -t) && e--;
65535 & t && (e -= 16);
16711935 & t && (e -= 8);
252645135 & t && (e -= 4);
858993459 & t && (e -= 2);
1431655765 & t && (e -= 1);
return e;
}
var _ = new Array(256);
(function(t) {
for (var e = 0; e < 256; ++e) {
var i = e, n = e, r = 7;
for (i >>>= 1; i; i >>>= 1) {
n <<= 1;
n |= 1 & i;
--r;
}
t[e] = n << r & 255;
}
})(_);
var m = Object.freeze({
INT_BITS: l,
INT_MAX: 2147483647,
INT_MIN: c,
sign: function(t) {
return (t > 0) - (t < 0);
},
abs: function(t) {
var e = t >> l - 1;
return (t ^ e) - e;
},
min: function(t, e) {
return e ^ (t ^ e) & -(t < e);
},
max: function(t, e) {
return t ^ (t ^ e) & -(t < e);
},
isPow2: function(t) {
return !(t & t - 1 || !t);
},
log2: function(t) {
var e, i;
e = (t > 65535) << 4;
e |= i = ((t >>>= e) > 255) << 3;
e |= i = ((t >>>= i) > 15) << 2;
return (e |= i = ((t >>>= i) > 3) << 1) | (t >>>= i) >> 1;
},
log10: function(t) {
return t >= 1e9 ? 9 : t >= 1e8 ? 8 : t >= 1e7 ? 7 : t >= 1e6 ? 6 : t >= 1e5 ? 5 : t >= 1e4 ? 4 : t >= 1e3 ? 3 : t >= 100 ? 2 : t >= 10 ? 1 : 0;
},
popCount: function(t) {
return 16843009 * ((t = (858993459 & (t -= t >>> 1 & 1431655765)) + (t >>> 2 & 858993459)) + (t >>> 4) & 252645135) >>> 24;
},
countTrailingZeros: u,
nextPow2: function(t) {
t += 0 === t;
--t;
t |= t >>> 1;
t |= t >>> 2;
t |= t >>> 4;
t |= t >>> 8;
return 1 + (t |= t >>> 16);
},
prevPow2: function(t) {
t |= t >>> 1;
t |= t >>> 2;
t |= t >>> 4;
t |= t >>> 8;
return (t |= t >>> 16) - (t >>> 1);
},
parity: function(t) {
t ^= t >>> 16;
t ^= t >>> 8;
t ^= t >>> 4;
return 27030 >>> (t &= 15) & 1;
},
reverse: function(t) {
return _[255 & t] << 24 | _[t >>> 8 & 255] << 16 | _[t >>> 16 & 255] << 8 | _[t >>> 24 & 255];
},
interleave2: function(t, e) {
return (t = 1431655765 & ((t = 858993459 & ((t = 252645135 & ((t = 16711935 & ((t &= 65535) | t << 8)) | t << 4)) | t << 2)) | t << 1)) | (e = 1431655765 & ((e = 858993459 & ((e = 252645135 & ((e = 16711935 & ((e &= 65535) | e << 8)) | e << 4)) | e << 2)) | e << 1)) << 1;
},
deinterleave2: function(t, e) {
return (t = 65535 & ((t = 16711935 & ((t = 252645135 & ((t = 858993459 & ((t = t >>> e & 1431655765) | t >>> 1)) | t >>> 2)) | t >>> 4)) | t >>> 16)) << 16 >> 16;
},
interleave3: function(t, e, i) {
t = 1227133513 & ((t = 3272356035 & ((t = 251719695 & ((t = 4278190335 & ((t &= 1023) | t << 16)) | t << 8)) | t << 4)) | t << 2);
return (t |= (e = 1227133513 & ((e = 3272356035 & ((e = 251719695 & ((e = 4278190335 & ((e &= 1023) | e << 16)) | e << 8)) | e << 4)) | e << 2)) << 1) | (i = 1227133513 & ((i = 3272356035 & ((i = 251719695 & ((i = 4278190335 & ((i &= 1023) | i << 16)) | i << 8)) | i << 4)) | i << 2)) << 2;
},
deinterleave3: function(t, e) {
return (t = 1023 & ((t = 4278190335 & ((t = 251719695 & ((t = 3272356035 & ((t = t >>> e & 1227133513) | t >>> 2)) | t >>> 4)) | t >>> 8)) | t >>> 16)) << 22 >> 22;
},
nextCombination: function(t) {
var e = t | t - 1;
return e + 1 | (~e & -~e) - 1 >>> u(t) + 1;
}
}), f = new Array(2), d = function(t, e) {
this.x = t;
this.y = e;
};
d.prototype.toJSON = function() {
f[0] = this.x;
f[1] = this.y;
return f;
};
var p = {
create: function() {
return new d(0, 0);
},
new: function(t, e) {
return new d(t, e);
},
clone: function(t) {
return new d(t.x, t.y);
},
copy: function(t, e) {
t.x = e.x;
t.y = e.y;
return t;
},
set: function(t, e, i) {
t.x = e;
t.y = i;
return t;
},
add: function(t, e, i) {
t.x = e.x + i.x;
t.y = e.y + i.y;
return t;
},
subtract: function(t, e, i) {
t.x = e.x - i.x;
t.y = e.y - i.y;
return t;
}
};
p.sub = p.subtract;
p.multiply = function(t, e, i) {
t.x = e.x * i.x;
t.y = e.y * i.y;
return t;
};
p.mul = p.multiply;
p.divide = function(t, e, i) {
t.x = e.x / i.x;
t.y = e.y / i.y;
return t;
};
p.div = p.divide;
p.ceil = function(t, e) {
t.x = Math.ceil(e.x);
t.y = Math.ceil(e.y);
return t;
};
p.floor = function(t, e) {
t.x = Math.floor(e.x);
t.y = Math.floor(e.y);
return t;
};
p.min = function(t, e, i) {
t.x = Math.min(e.x, i.x);
t.y = Math.min(e.y, i.y);
return t;
};
p.max = function(t, e, i) {
t.x = Math.max(e.x, i.x);
t.y = Math.max(e.y, i.y);
return t;
};
p.round = function(t, e) {
t.x = Math.round(e.x);
t.y = Math.round(e.y);
return t;
};
p.scale = function(t, e, i) {
t.x = e.x * i;
t.y = e.y * i;
return t;
};
p.scaleAndAdd = function(t, e, i, n) {
t.x = e.x + i.x * n;
t.y = e.y + i.y * n;
return t;
};
p.distance = function(t, e) {
var i = e.x - t.x, n = e.y - t.y;
return Math.sqrt(i * i + n * n);
};
p.dist = p.distance;
p.squaredDistance = function(t, e) {
var i = e.x - t.x, n = e.y - t.y;
return i * i + n * n;
};
p.sqrDist = p.squaredDistance;
p.length = function(t) {
var e = t.x, i = t.y;
return Math.sqrt(e * e + i * i);
};
p.len = p.length;
p.squaredLength = function(t) {
var e = t.x, i = t.y;
return e * e + i * i;
};
p.sqrLen = p.squaredLength;
p.negate = function(t, e) {
t.x = -e.x;
t.y = -e.y;
return t;
};
p.inverse = function(t, e) {
t.x = 1 / e.x;
t.y = 1 / e.y;
return t;
};
p.inverseSafe = function(t, e) {
var i = e.x, n = e.y;
Math.abs(i) < s ? t.x = 0 : t.x = 1 / i;
Math.abs(n) < s ? t.y = 0 : t.y = 1 / e.y;
return t;
};
p.normalize = function(t, e) {
var i = e.x, n = e.y, r = i * i + n * n;
if (r > 0) {
r = 1 / Math.sqrt(r);
t.x = e.x * r;
t.y = e.y * r;
}
return t;
};
p.dot = function(t, e) {
return t.x * e.x + t.y * e.y;
};
p.cross = function(t, e, i) {
var n = e.x * i.y - e.y * i.x;
t.x = t.y = 0;
t.z = n;
return t;
};
p.lerp = function(t, e, i, n) {
var r = e.x, s = e.y;
t.x = r + n * (i.x - r);
t.y = s + n * (i.y - s);
return t;
};
p.random = function(t, e) {
e = e || 1;
var i = 2 * o() * Math.PI;
t.x = Math.cos(i) * e;
t.y = Math.sin(i) * e;
return t;
};
p.transformMat2 = function(t, e, i) {
var n = e.x, r = e.y;
t.x = i.m00 * n + i.m02 * r;
t.y = i.m01 * n + i.m03 * r;
return t;
};
p.transformMat23 = function(t, e, i) {
var n = e.x, r = e.y;
t.x = i.m00 * n + i.m02 * r + i.m04;
t.y = i.m01 * n + i.m03 * r + i.m05;
return t;
};
p.transformMat3 = function(t, e, i) {
var n = e.x, r = e.y;
t.x = i.m00 * n + i.m03 * r + i.m06;
t.y = i.m01 * n + i.m04 * r + i.m07;
return t;
};
p.transformMat4 = function(t, e, i) {
var n = e.x, r = e.y;
t.x = i.m00 * n + i.m04 * r + i.m12;
t.y = i.m01 * n + i.m05 * r + i.m13;
return t;
};
p.forEach = (function() {
var t = p.create();
return function(e, i, n, r, s, a) {
var o, h;
i || (i = 2);
n || (n = 0);
h = r ? Math.min(r * i + n, e.length) : e.length;
for (o = n; o < h; o += i) {
t.x = e[o];
t.y = e[o + 1];
s(t, t, a);
e[o] = t.x;
e[o + 1] = t.y;
}
return e;
};
})();
p.str = function(t) {
return "vec2(" + t.x + ", " + t.y + ")";
};
p.array = function(t, e) {
t[0] = e.x;
t[1] = e.y;
return t;
};
p.exactEquals = function(t, e) {
return t.x === e.x && t.y === e.y;
};
p.equals = function(t, e) {
var i = t.x, n = t.y, r = e.x, a = e.y;
return Math.abs(i - r) <= s * Math.max(1, Math.abs(i), Math.abs(r)) && Math.abs(n - a) <= s * Math.max(1, Math.abs(n), Math.abs(a));
};
var g = new Array(3), y = function(t, e, i) {
this.x = t;
this.y = e;
this.z = i;
};
y.prototype.toJSON = function() {
g[0] = this.x;
g[1] = this.y;
g[2] = this.z;
return g;
};
var v = {
create: function() {
return new y(0, 0, 0);
},
new: function(t, e, i) {
return new y(t, e, i);
},
clone: function(t) {
return new y(t.x, t.y, t.z);
},
copy: function(t, e) {
t.x = e.x;
t.y = e.y;
t.z = e.z;
return t;
},
set: function(t, e, i, n) {
t.x = e;
t.y = i;
t.z = n;
return t;
},
add: function(t, e, i) {
t.x = e.x + i.x;
t.y = e.y + i.y;
t.z = e.z + i.z;
return t;
},
subtract: function(t, e, i) {
t.x = e.x - i.x;
t.y = e.y - i.y;
t.z = e.z - i.z;
return t;
}
};
v.sub = v.subtract;
v.multiply = function(t, e, i) {
t.x = e.x * i.x;
t.y = e.y * i.y;
t.z = e.z * i.z;
return t;
};
v.mul = v.multiply;
v.divide = function(t, e, i) {
t.x = e.x / i.x;
t.y = e.y / i.y;
t.z = e.z / i.z;
return t;
};
v.div = v.divide;
v.ceil = function(t, e) {
t.x = Math.ceil(e.x);
t.y = Math.ceil(e.y);
t.z = Math.ceil(e.z);
return t;
};
v.floor = function(t, e) {
t.x = Math.floor(e.x);
t.y = Math.floor(e.y);
t.z = Math.floor(e.z);
return t;
};
v.min = function(t, e, i) {
t.x = Math.min(e.x, i.x);
t.y = Math.min(e.y, i.y);
t.z = Math.min(e.z, i.z);
return t;
};
v.max = function(t, e, i) {
t.x = Math.max(e.x, i.x);
t.y = Math.max(e.y, i.y);
t.z = Math.max(e.z, i.z);
return t;
};
v.round = function(t, e) {
t.x = Math.round(e.x);
t.y = Math.round(e.y);
t.z = Math.round(e.z);
return t;
};
v.scale = function(t, e, i) {
t.x = e.x * i;
t.y = e.y * i;
t.z = e.z * i;
return t;
};
v.scaleAndAdd = function(t, e, i, n) {
t.x = e.x + i.x * n;
t.y = e.y + i.y * n;
t.z = e.z + i.z * n;
return t;
};
v.distance = function(t, e) {
var i = e.x - t.x, n = e.y - t.y, r = e.z - t.z;
return Math.sqrt(i * i + n * n + r * r);
};
v.dist = v.distance;
v.squaredDistance = function(t, e) {
var i = e.x - t.x, n = e.y - t.y, r = e.z - t.z;
return i * i + n * n + r * r;
};
v.sqrDist = v.squaredDistance;
v.length = function(t) {
var e = t.x, i = t.y, n = t.z;
return Math.sqrt(e * e + i * i + n * n);
};
v.len = v.length;
v.squaredLength = function(t) {
var e = t.x, i = t.y, n = t.z;
return e * e + i * i + n * n;
};
v.sqrLen = v.squaredLength;
v.negate = function(t, e) {
t.x = -e.x;
t.y = -e.y;
t.z = -e.z;
return t;
};
v.inverse = function(t, e) {
t.x = 1 / e.x;
t.y = 1 / e.y;
t.z = 1 / e.z;
return t;
};
v.inverseSafe = function(t, e) {
var i = e.x, n = e.y, r = e.z;
Math.abs(i) < s ? t.x = 0 : t.x = 1 / i;
Math.abs(n) < s ? t.y = 0 : t.y = 1 / n;
Math.abs(r) < s ? t.z = 0 : t.z = 1 / r;
return t;
};
v.normalize = function(t, e) {
var i = e.x, n = e.y, r = e.z, s = i * i + n * n + r * r;
if (s > 0) {
s = 1 / Math.sqrt(s);
t.x = i * s;
t.y = n * s;
t.z = r * s;
}
return t;
};
v.dot = function(t, e) {
return t.x * e.x + t.y * e.y + t.z * e.z;
};
v.cross = function(t, e, i) {
var n = e.x, r = e.y, s = e.z, a = i.x, o = i.y, h = i.z;
t.x = r * h - s * o;
t.y = s * a - n * h;
t.z = n * o - r * a;
return t;
};
v.lerp = function(t, e, i, n) {
var r = e.x, s = e.y, a = e.z;
t.x = r + n * (i.x - r);
t.y = s + n * (i.y - s);
t.z = a + n * (i.z - a);
return t;
};
v.hermite = function(t, e, i, n, r, s) {
var a = s * s, o = a * (2 * s - 3) + 1, h = a * (s - 2) + s, l = a * (s - 1), c = a * (3 - 2 * s);
t.x = e.x * o + i.x * h + n.x * l + r.x * c;
t.y = e.y * o + i.y * h + n.y * l + r.y * c;
t.z = e.z * o + i.z * h + n.z * l + r.z * c;
return t;
};
v.bezier = function(t, e, i, n, r, s) {
var a = 1 - s, o = a * a, h = s * s, l = o * a, c = 3 * s * o, u = 3 * h * a, _ = h * s;
t.x = e.x * l + i.x * c + n.x * u + r.x * _;
t.y = e.y * l + i.y * c + n.y * u + r.y * _;
t.z = e.z * l + i.z * c + n.z * u + r.z * _;
return t;
};
v.random = function(t, e) {
e = e || 1;
var i = 2 * o() * Math.PI, n = 2 * o() - 1, r = Math.sqrt(1 - n * n) * e;
t.x = Math.cos(i) * r;
t.y = Math.sin(i) * r;
t.z = n * e;
return t;
};
v.transformMat4 = function(t, e, i) {
var n = e.x, r = e.y, s = e.z, a = i.m03 * n + i.m07 * r + i.m11 * s + i.m15;
a = a || 1;
t.x = (i.m00 * n + i.m04 * r + i.m08 * s + i.m12) / a;
t.y = (i.m01 * n + i.m05 * r + i.m09 * s + i.m13) / a;
t.z = (i.m02 * n + i.m06 * r + i.m10 * s + i.m14) / a;
return t;
};
v.transformMat3 = function(t, e, i) {
var n = e.x, r = e.y, s = e.z;
t.x = n * i.m00 + r * i.m03 + s * i.m06;
t.y = n * i.m01 + r * i.m04 + s * i.m07;
t.z = n * i.m02 + r * i.m05 + s * i.m08;
return t;
};
v.transformQuat = function(t, e, i) {
var n = e.x, r = e.y, s = e.z, a = i.x, o = i.y, h = i.z, l = i.w, c = l * n + o * s - h * r, u = l * r + h * n - a * s, _ = l * s + a * r - o * n, m = -a * n - o * r - h * s;
t.x = c * l + m * -a + u * -h - _ * -o;
t.y = u * l + m * -o + _ * -a - c * -h;
t.z = _ * l + m * -h + c * -o - u * -a;
return t;
};
v.rotateX = function(t, e, i, n) {
var r = [], s = [];
r.x = e.x - i.x;
r.y = e.y - i.y;
r.z = e.z - i.z;
s.x = r.x;
s.y = r.y * Math.cos(n) - r.z * Math.sin(n);
s.z = r.y * Math.sin(n) + r.z * Math.cos(n);
t.x = s.x + i.x;
t.y = s.y + i.y;
t.z = s.z + i.z;
return t;
};
v.rotateY = function(t, e, i, n) {
var r = [], s = [];
r.x = e.x - i.x;
r.y = e.y - i.y;
r.z = e.z - i.z;
s.x = r.z * Math.sin(n) + r.x * Math.cos(n);
s.y = r.y;
s.z = r.z * Math.cos(n) - r.x * Math.sin(n);
t.x = s.x + i.x;
t.y = s.y + i.y;
t.z = s.z + i.z;
return t;
};
v.rotateZ = function(t, e, i, n) {
var r = [], s = [];
r.x = e.x - i.x;
r.y = e.y - i.y;
r.z = e.z - i.z;
s.x = r.x * Math.cos(n) - r.y * Math.sin(n);
s.y = r.x * Math.sin(n) + r.y * Math.cos(n);
s.z = r.z;
t.x = s.x + i.x;
t.y = s.y + i.y;
t.z = s.z + i.z;
return t;
};
v.forEach = (function() {
var t = v.create();
return function(e, i, n, r, s, a) {
var o, h;
i || (i = 3);
n || (n = 0);
h = r ? Math.min(r * i + n, e.length) : e.length;
for (o = n; o < h; o += i) {
t.x = e[o];
t.y = e[o + 1];
t.z = e[o + 2];
s(t, t, a);
e[o] = t.x;
e[o + 1] = t.y;
e[o + 2] = t.z;
}
return e;
};
})();
v.angle = (function() {
var t = v.create(), e = v.create();
return function(i, n) {
v.copy(t, i);
v.copy(e, n);
v.normalize(t, t);
v.normalize(e, e);
var r = v.dot(t, e);
return r > 1 ? 0 : r < -1 ? Math.PI : Math.acos(r);
};
})();
v.str = function(t) {
return "vec3(" + t.x + ", " + t.y + ", " + t.z + ")";
};
v.array = function(t, e) {
t[0] = e.x;
t[1] = e.y;
t[2] = e.z;
return t;
};
v.exactEquals = function(t, e) {
return t.x === e.x && t.y === e.y && t.z === e.z;
};
v.equals = function(t, e) {
var i = t.x, n = t.y, r = t.z, a = e.x, o = e.y, h = e.z;
return Math.abs(i - a) <= s * Math.max(1, Math.abs(i), Math.abs(a)) && Math.abs(n - o) <= s * Math.max(1, Math.abs(n), Math.abs(o)) && Math.abs(r - h) <= s * Math.max(1, Math.abs(r), Math.abs(h));
};
var x = new Array(4), A = function(t, e, i, n) {
this.x = t;
this.y = e;
this.z = i;
this.w = n;
};
A.prototype.toJSON = function() {
x[0] = this.x;
x[1] = this.y;
x[2] = this.z;
x[3] = this.w;
return x;
};
var b = {
create: function() {
return new A(0, 0, 0, 0);
},
new: function(t, e, i, n) {
return new A(t, e, i, n);
},
clone: function(t) {
return new A(t.x, t.y, t.z, t.w);
},
copy: function(t, e) {
t.x = e.x;
t.y = e.y;
t.z = e.z;
t.w = e.w;
return t;
},
set: function(t, e, i, n, r) {
t.x = e;
t.y = i;
t.z = n;
t.w = r;
return t;
},
add: function(t, e, i) {
t.x = e.x + i.x;
t.y = e.y + i.y;
t.z = e.z + i.z;
t.w = e.w + i.w;
return t;
},
subtract: function(t, e, i) {
t.x = e.x - i.x;
t.y = e.y - i.y;
t.z = e.z - i.z;
t.w = e.w - i.w;
return t;
}
};
b.sub = b.subtract;
b.multiply = function(t, e, i) {
t.x = e.x * i.x;
t.y = e.y * i.y;
t.z = e.z * i.z;
t.w = e.w * i.w;
return t;
};
b.mul = b.multiply;
b.divide = function(t, e, i) {
t.x = e.x / i.x;
t.y = e.y / i.y;
t.z = e.z / i.z;
t.w = e.w / i.w;
return t;
};
b.div = b.divide;
b.ceil = function(t, e) {
t.x = Math.ceil(e.x);
t.y = Math.ceil(e.y);
t.z = Math.ceil(e.z);
t.w = Math.ceil(e.w);
return t;
};
b.floor = function(t, e) {
t.x = Math.floor(e.x);
t.y = Math.floor(e.y);
t.z = Math.floor(e.z);
t.w = Math.floor(e.w);
return t;
};
b.min = function(t, e, i) {
t.x = Math.min(e.x, i.x);
t.y = Math.min(e.y, i.y);
t.z = Math.min(e.z, i.z);
t.w = Math.min(e.w, i.w);
return t;
};
b.max = function(t, e, i) {
t.x = Math.max(e.x, i.x);
t.y = Math.max(e.y, i.y);
t.z = Math.max(e.z, i.z);
t.w = Math.max(e.w, i.w);
return t;
};
b.round = function(t, e) {
t.x = Math.round(e.x);
t.y = Math.round(e.y);
t.z = Math.round(e.z);
t.w = Math.round(e.w);
return t;
};
b.scale = function(t, e, i) {
t.x = e.x * i;
t.y = e.y * i;
t.z = e.z * i;
t.w = e.w * i;
return t;
};
b.scaleAndAdd = function(t, e, i, n) {
t.x = e.x + i.x * n;
t.y = e.y + i.y * n;
t.z = e.z + i.z * n;
t.w = e.w + i.w * n;
return t;
};
b.distance = function(t, e) {
var i = e.x - t.x, n = e.y - t.y, r = e.z - t.z, s = e.w - t.w;
return Math.sqrt(i * i + n * n + r * r + s * s);
};
b.dist = b.distance;
b.squaredDistance = function(t, e) {
var i = e.x - t.x, n = e.y - t.y, r = e.z - t.z, s = e.w - t.w;
return i * i + n * n + r * r + s * s;
};
b.sqrDist = b.squaredDistance;
b.length = function(t) {
var e = t.x, i = t.y, n = t.z, r = t.w;
return Math.sqrt(e * e + i * i + n * n + r * r);
};
b.len = b.length;
b.squaredLength = function(t) {
var e = t.x, i = t.y, n = t.z, r = t.w;
return e * e + i * i + n * n + r * r;
};
b.sqrLen = b.squaredLength;
b.negate = function(t, e) {
t.x = -e.x;
t.y = -e.y;
t.z = -e.z;
t.w = -e.w;
return t;
};
b.inverse = function(t, e) {
t.x = 1 / e.x;
t.y = 1 / e.y;
t.z = 1 / e.z;
t.w = 1 / e.w;
return t;
};
b.inverseSafe = function(t, e) {
var i = e.x, n = e.y, r = e.z, a = e.w;
Math.abs(i) < s ? t.x = 0 : t.x = 1 / i;
Math.abs(n) < s ? t.y = 0 : t.y = 1 / n;
Math.abs(r) < s ? t.z = 0 : t.z = 1 / r;
Math.abs(a) < s ? t.w = 0 : t.w = 1 / a;
return t;
};
b.normalize = function(t, e) {
var i = e.x, n = e.y, r = e.z, s = e.w, a = i * i + n * n + r * r + s * s;
if (a > 0) {
a = 1 / Math.sqrt(a);
t.x = i * a;
t.y = n * a;
t.z = r * a;
t.w = s * a;
}
return t;
};
b.dot = function(t, e) {
return t.x * e.x + t.y * e.y + t.z * e.z + t.w * e.w;
};
b.lerp = function(t, e, i, n) {
var r = e.x, s = e.y, a = e.z, o = e.w;
t.x = r + n * (i.x - r);
t.y = s + n * (i.y - s);
t.z = a + n * (i.z - a);
t.w = o + n * (i.w - o);
return t;
};
b.random = function(t, e) {
e = e || 1;
t.x = o();
t.y = o();
t.z = o();
t.w = o();
b.normalize(t, t);
b.scale(t, t, e);
return t;
};
b.transformMat4 = function(t, e, i) {
var n = e.x, r = e.y, s = e.z, a = e.w;
t.x = i.m00 * n + i.m04 * r + i.m08 * s + i.m12 * a;
t.y = i.m01 * n + i.m05 * r + i.m09 * s + i.m13 * a;
t.z = i.m02 * n + i.m06 * r + i.m10 * s + i.m14 * a;
t.w = i.m03 * n + i.m07 * r + i.m11 * s + i.m15 * a;
return t;
};
b.transformQuat = function(t, e, i) {
var n = e.x, r = e.y, s = e.z, a = i.x, o = i.y, h = i.z, l = i.w, c = l * n + o * s - h * r, u = l * r + h * n - a * s, _ = l * s + a * r - o * n, m = -a * n - o * r - h * s;
t.x = c * l + m * -a + u * -h - _ * -o;
t.y = u * l + m * -o + _ * -a - c * -h;
t.z = _ * l + m * -h + c * -o - u * -a;
t.w = e.w;
return t;
};
b.forEach = (function() {
var t = b.create();
return function(e, i, n, r, s, a) {
var o, h;
i || (i = 4);
n || (n = 0);
h = r ? Math.min(r * i + n, e.length) : e.length;
for (o = n; o < h; o += i) {
t.x = e[o];
t.y = e[o + 1];
t.z = e[o + 2];
t.w = e[o + 3];
s(t, t, a);
e[o] = t.x;
e[o + 1] = t.y;
e[o + 2] = t.z;
e[o + 3] = t.w;
}
return e;
};
})();
b.str = function(t) {
return "vec4(" + t.x + ", " + t.y + ", " + t.z + ", " + t.w + ")";
};
b.array = function(t, e) {
t[0] = e.x;
t[1] = e.y;
t[2] = e.z;
t[3] = e.w;
return t;
};
b.exactEquals = function(t, e) {
return t.x === e.x && t.y === e.y && t.z === e.z && t.w === e.w;
};
b.equals = function(t, e) {
var i = t.x, n = t.y, r = t.z, a = t.w, o = e.x, h = e.y, l = e.z, c = e.w;
return Math.abs(i - o) <= s * Math.max(1, Math.abs(i), Math.abs(o)) && Math.abs(n - h) <= s * Math.max(1, Math.abs(n), Math.abs(h)) && Math.abs(r - l) <= s * Math.max(1, Math.abs(r), Math.abs(l)) && Math.abs(a - c) <= s * Math.max(1, Math.abs(a), Math.abs(c));
};
var T = new Array(9), C = function(t, e, i, n, r, s, a, o, h) {
this.m00 = t;
this.m01 = e;
this.m02 = i;
this.m03 = n;
this.m04 = r;
this.m05 = s;
this.m06 = a;
this.m07 = o;
this.m08 = h;
};
C.prototype.toJSON = function() {
T[0] = this.m00;
T[1] = this.m01;
T[2] = this.m02;
T[3] = this.m03;
T[4] = this.m04;
T[5] = this.m05;
T[6] = this.m06;
T[7] = this.m07;
T[8] = this.m08;
return T;
};
var w = {
create: function() {
return new C(1, 0, 0, 0, 1, 0, 0, 0, 1);
},
new: function(t, e, i, n, r, s, a, o, h) {
return new C(t, e, i, n, r, s, a, o, h);
},
clone: function(t) {
return new C(t.m00, t.m01, t.m02, t.m03, t.m04, t.m05, t.m06, t.m07, t.m08);
},
copy: function(t, e) {
t.m00 = e.m00;
t.m01 = e.m01;
t.m02 = e.m02;
t.m03 = e.m03;
t.m04 = e.m04;
t.m05 = e.m05;
t.m06 = e.m06;
t.m07 = e.m07;
t.m08 = e.m08;
return t;
},
set: function(t, e, i, n, r, s, a, o, h, l) {
t.m00 = e;
t.m01 = i;
t.m02 = n;
t.m03 = r;
t.m04 = s;
t.m05 = a;
t.m06 = o;
t.m07 = h;
t.m08 = l;
return t;
},
identity: function(t) {
t.m00 = 1;
t.m01 = 0;
t.m02 = 0;
t.m03 = 0;
t.m04 = 1;
t.m05 = 0;
t.m06 = 0;
t.m07 = 0;
t.m08 = 1;
return t;
},
transpose: function(t, e) {
if (t === e) {
var i = e.m01, n = e.m02, r = e.m05;
t.m01 = e.m03;
t.m02 = e.m06;
t.m03 = i;
t.m05 = e.m07;
t.m06 = n;
t.m07 = r;
} else {
t.m00 = e.m00;
t.m01 = e.m03;
t.m02 = e.m06;
t.m03 = e.m01;
t.m04 = e.m04;
t.m05 = e.m07;
t.m06 = e.m02;
t.m07 = e.m05;
t.m08 = e.m08;
}
return t;
},
invert: function(t, e) {
var i = e.m00, n = e.m01, r = e.m02, s = e.m03, a = e.m04, o = e.m05, h = e.m06, l = e.m07, c = e.m08, u = c * a - o * l, _ = -c * s + o * h, m = l * s - a * h, f = i * u + n * _ + r * m;
if (!f) return null;
f = 1 / f;
t.m00 = u * f;
t.m01 = (-c * n + r * l) * f;
t.m02 = (o * n - r * a) * f;
t.m03 = _ * f;
t.m04 = (c * i - r * h) * f;
t.m05 = (-o * i + r * s) * f;
t.m06 = m * f;
t.m07 = (-l * i + n * h) * f;
t.m08 = (a * i - n * s) * f;
return t;
},
adjoint: function(t, e) {
var i = e.m00, n = e.m01, r = e.m02, s = e.m03, a = e.m04, o = e.m05, h = e.m06, l = e.m07, c = e.m08;
t.m00 = a * c - o * l;
t.m01 = r * l - n * c;
t.m02 = n * o - r * a;
t.m03 = o * h - s * c;
t.m04 = i * c - r * h;
t.m05 = r * s - i * o;
t.m06 = s * l - a * h;
t.m07 = n * h - i * l;
t.m08 = i * a - n * s;
return t;
},
determinant: function(t) {
var e = t.m00, i = t.m01, n = t.m02, r = t.m03, s = t.m04, a = t.m05, o = t.m06, h = t.m07, l = t.m08;
return e * (l * s - a * h) + i * (-l * r + a * o) + n * (h * r - s * o);
},
multiply: function(t, e, i) {
var n = e.m00, r = e.m01, s = e.m02, a = e.m03, o = e.m04, h = e.m05, l = e.m06, c = e.m07, u = e.m08, _ = i.m00, m = i.m01, f = i.m02, d = i.m03, p = i.m04, g = i.m05, y = i.m06, v = i.m07, x = i.m08;
t.m00 = _ * n + m * a + f * l;
t.m01 = _ * r + m * o + f * c;
t.m02 = _ * s + m * h + f * u;
t.m03 = d * n + p * a + g * l;
t.m04 = d * r + p * o + g * c;
t.m05 = d * s + p * h + g * u;
t.m06 = y * n + v * a + x * l;
t.m07 = y * r + v * o + x * c;
t.m08 = y * s + v * h + x * u;
return t;
}
};
w.mul = w.multiply;
w.translate = function(t, e, i) {
var n = e.m00, r = e.m01, s = e.m02, a = e.m03, o = e.m04, h = e.m05, l = e.m06, c = e.m07, u = e.m08, _ = i.x, m = i.y;
t.m00 = n;
t.m01 = r;
t.m02 = s;
t.m03 = a;
t.m04 = o;
t.m05 = h;
t.m06 = _ * n + m * a + l;
t.m07 = _ * r + m * o + c;
t.m08 = _ * s + m * h + u;
return t;
};
w.rotate = function(t, e, i) {
var n = e.m00, r = e.m01, s = e.m02, a = e.m03, o = e.m04, h = e.m05, l = e.m06, c = e.m07, u = e.m08, _ = Math.sin(i), m = Math.cos(i);
t.m00 = m * n + _ * a;
t.m01 = m * r + _ * o;
t.m02 = m * s + _ * h;
t.m03 = m * a - _ * n;
t.m04 = m * o - _ * r;
t.m05 = m * h - _ * s;
t.m06 = l;
t.m07 = c;
t.m08 = u;
return t;
};
w.scale = function(t, e, i) {
var n = i.x, r = i.y;
t.m00 = n * e.m00;
t.m01 = n * e.m01;
t.m02 = n * e.m02;
t.m03 = r * e.m03;
t.m04 = r * e.m04;
t.m05 = r * e.m05;
t.m06 = e.m06;
t.m07 = e.m07;
t.m08 = e.m08;
return t;
};
w.fromMat4 = function(t, e) {
t.m00 = e.m00;
t.m01 = e.m01;
t.m02 = e.m02;
t.m03 = e.m04;
t.m04 = e.m05;
t.m05 = e.m06;
t.m06 = e.m08;
t.m07 = e.m09;
t.m08 = e.m10;
return t;
};
w.fromTranslation = function(t, e) {
t.m00 = 1;
t.m01 = 0;
t.m02 = 0;
t.m03 = 0;
t.m04 = 1;
t.m05 = 0;
t.m06 = e.x;
t.m07 = e.y;
t.m08 = 1;
return t;
};
w.fromRotation = function(t, e) {
var i = Math.sin(e), n = Math.cos(e);
t.m00 = n;
t.m01 = i;
t.m02 = 0;
t.m03 = -i;
t.m04 = n;
t.m05 = 0;
t.m06 = 0;
t.m07 = 0;
t.m08 = 1;
return t;
};
w.fromScaling = function(t, e) {
t.m00 = e.x;
t.m01 = 0;
t.m02 = 0;
t.m03 = 0;
t.m04 = e.y;
t.m05 = 0;
t.m06 = 0;
t.m07 = 0;
t.m08 = 1;
return t;
};
w.fromMat2d = function(t, e) {
t.m00 = e.m00;
t.m01 = e.m01;
t.m02 = 0;
t.m03 = e.m02;
t.m04 = e.m03;
t.m05 = 0;
t.m06 = e.m04;
t.m07 = e.m05;
t.m08 = 1;
return t;
};
w.fromQuat = function(t, e) {
var i = e.x, n = e.y, r = e.z, s = e.w, a = i + i, o = n + n, h = r + r, l = i * a, c = n * a, u = n * o, _ = r * a, m = r * o, f = r * h, d = s * a, p = s * o, g = s * h;
t.m00 = 1 - u - f;
t.m03 = c - g;
t.m06 = _ + p;
t.m01 = c + g;
t.m04 = 1 - l - f;
t.m07 = m - d;
t.m02 = _ - p;
t.m05 = m + d;
t.m08 = 1 - l - u;
return t;
};
w.fromViewUp = (function() {
var t = v.new(0, 1, 0), e = v.create(), i = v.create();
return function(n, r, a) {
if (v.sqrLen(r) < s * s) {
w.identity(n);
return n;
}
a = a || t;
v.cross(e, a, r);
if (v.sqrLen(e) < s * s) {
w.identity(n);
return n;
}
v.cross(i, r, e);
w.set(n, e.x, e.y, e.z, i.x, i.y, i.z, r.x, r.y, r.z);
return n;
};
})();
w.normalFromMat4 = function(t, e) {
var i = e.m00, n = e.m01, r = e.m02, s = e.m03, a = e.m04, o = e.m05, h = e.m06, l = e.m07, c = e.m08, u = e.m09, _ = e.m10, m = e.m11, f = e.m12, d = e.m13, p = e.m14, g = e.m15, y = i * o - n * a, v = i * h - r * a, x = i * l - s * a, A = n * h - r * o, b = n * l - s * o, T = r * l - s * h, C = c * d - u * f, w = c * p - _ * f, S = c * g - m * f, E = u * p - _ * d, D = u * g - m * d, M = _ * g - m * p, I = y * M - v * D + x * E + A * S - b * w + T * C;
if (!I) return null;
I = 1 / I;
t.m00 = (o * M - h * D + l * E) * I;
t.m01 = (h * S - a * M - l * w) * I;
t.m02 = (a * D - o * S + l * C) * I;
t.m03 = (r * D - n * M - s * E) * I;
t.m04 = (i * M - r * S + s * w) * I;
t.m05 = (n * S - i * D - s * C) * I;
t.m06 = (d * T - p * b + g * A) * I;
t.m07 = (p * x - f * T - g * v) * I;
t.m08 = (f * b - d * x + g * y) * I;
return t;
};
w.str = function(t) {
return "mat3(" + t.m00 + ", " + t.m01 + ", " + t.m02 + ", " + t.m03 + ", " + t.m04 + ", " + t.m05 + ", " + t.m06 + ", " + t.m07 + ", " + t.m08 + ")";
};
w.array = function(t, e) {
t[0] = e.m00;
t[1] = e.m01;
t[2] = e.m02;
t[3] = e.m03;
t[4] = e.m04;
t[5] = e.m05;
t[6] = e.m06;
t[7] = e.m07;
t[8] = e.m08;
return t;
};
w.frob = function(t) {
return Math.sqrt(Math.pow(t.m00, 2) + Math.pow(t.m01, 2) + Math.pow(t.m02, 2) + Math.pow(t.m03, 2) + Math.pow(t.m04, 2) + Math.pow(t.m05, 2) + Math.pow(t.m06, 2) + Math.pow(t.m07, 2) + Math.pow(t.m08, 2));
};
w.add = function(t, e, i) {
t.m00 = e.m00 + i.m00;
t.m01 = e.m01 + i.m01;
t.m02 = e.m02 + i.m02;
t.m03 = e.m03 + i.m03;
t.m04 = e.m04 + i.m04;
t.m05 = e.m05 + i.m05;
t.m06 = e.m06 + i.m06;
t.m07 = e.m07 + i.m07;
t.m08 = e.m08 + i.m08;
return t;
};
w.subtract = function(t, e, i) {
t.m00 = e.m00 - i.m00;
t.m01 = e.m01 - i.m01;
t.m02 = e.m02 - i.m02;
t.m03 = e.m03 - i.m03;
t.m04 = e.m04 - i.m04;
t.m05 = e.m05 - i.m05;
t.m06 = e.m06 - i.m06;
t.m07 = e.m07 - i.m07;
t.m08 = e.m08 - i.m08;
return t;
};
w.sub = w.subtract;
w.multiplyScalar = function(t, e, i) {
t.m00 = e.m00 * i;
t.m01 = e.m01 * i;
t.m02 = e.m02 * i;
t.m03 = e.m03 * i;
t.m04 = e.m04 * i;
t.m05 = e.m05 * i;
t.m06 = e.m06 * i;
t.m07 = e.m07 * i;
t.m08 = e.m08 * i;
return t;
};
w.multiplyScalarAndAdd = function(t, e, i, n) {
t.m00 = e.m00 + i.m00 * n;
t.m01 = e.m01 + i.m01 * n;
t.m02 = e.m02 + i.m02 * n;
t.m03 = e.m03 + i.m03 * n;
t.m04 = e.m04 + i.m04 * n;
t.m05 = e.m05 + i.m05 * n;
t.m06 = e.m06 + i.m06 * n;
t.m07 = e.m07 + i.m07 * n;
t.m08 = e.m08 + i.m08 * n;
return t;
};
w.exactEquals = function(t, e) {
return t.m00 === e.m00 && t.m01 === e.m01 && t.m02 === e.m02 && t.m03 === e.m03 && t.m04 === e.m04 && t.m05 === e.m05 && t.m06 === e.m06 && t.m07 === e.m07 && t.m08 === e.m08;
};
w.equals = function(t, e) {
var i = t.m00, n = t.m01, r = t.m02, a = t.m03, o = t.m04, h = t.m05, l = t.m06, c = t.m07, u = t.m08, _ = e.m00, m = e.m01, f = e.m02, d = e.m03, p = e.m04, g = e.m05, y = e.m06, v = e.m07, x = e.m08;
return Math.abs(i - _) <= s * Math.max(1, Math.abs(i), Math.abs(_)) && Math.abs(n - m) <= s * Math.max(1, Math.abs(n), Math.abs(m)) && Math.abs(r - f) <= s * Math.max(1, Math.abs(r), Math.abs(f)) && Math.abs(a - d) <= s * Math.max(1, Math.abs(a), Math.abs(d)) && Math.abs(o - p) <= s * Math.max(1, Math.abs(o), Math.abs(p)) && Math.abs(h - g) <= s * Math.max(1, Math.abs(h), Math.abs(g)) && Math.abs(l - y) <= s * Math.max(1, Math.abs(l), Math.abs(y)) && Math.abs(c - v) <= s * Math.max(1, Math.abs(c), Math.abs(v)) && Math.abs(u - x) <= s * Math.max(1, Math.abs(u), Math.abs(x));
};
var S = new Array(4), E = function(t, e, i, n) {
this.x = t;
this.y = e;
this.z = i;
this.w = n;
};
E.prototype.toJSON = function() {
S[0] = this.x;
S[1] = this.y;
S[2] = this.z;
S[3] = this.w;
return S;
};
var D = {
create: function() {
return new E(0, 0, 0, 1);
},
new: function(t, e, i, n) {
return new E(t, e, i, n);
},
clone: function(t) {
return new E(t.x, t.y, t.z, t.w);
}
};
D.copy = b.copy;
D.set = b.set;
D.identity = function(t) {
t.x = 0;
t.y = 0;
t.z = 0;
t.w = 1;
return t;
};
D.rotationTo = (function() {
var t = v.create(), e = v.new(1, 0, 0), i = v.new(0, 1, 0);
return function(n, r, s) {
var a = v.dot(r, s);
if (a < -.999999) {
v.cross(t, e, r);
v.length(t) < 1e-6 && v.cross(t, i, r);
v.normalize(t, t);
D.fromAxisAngle(n, t, Math.PI);
return n;
}
if (a > .999999) {
n.x = 0;
n.y = 0;
n.z = 0;
n.w = 1;
return n;
}
v.cross(t, r, s);
n.x = t.x;
n.y = t.y;
n.z = t.z;
n.w = 1 + a;
return D.normalize(n, n);
};
})();
D.getAxisAngle = function(t, e) {
var i = 2 * Math.acos(e.w), n = Math.sin(i / 2);
if (0 != n) {
t.x = e.x / n;
t.y = e.y / n;
t.z = e.z / n;
} else {
t.x = 1;
t.y = 0;
t.z = 0;
}
return i;
};
D.multiply = function(t, e, i) {
var n = e.x, r = e.y, s = e.z, a = e.w, o = i.x, h = i.y, l = i.z, c = i.w;
t.x = n * c + a * o + r * l - s * h;
t.y = r * c + a * h + s * o - n * l;
t.z = s * c + a * l + n * h - r * o;
t.w = a * c - n * o - r * h - s * l;
return t;
};
D.mul = D.multiply;
D.scale = b.scale;
D.rotateX = function(t, e, i) {
i *= .5;
var n = e.x, r = e.y, s = e.z, a = e.w, o = Math.sin(i), h = Math.cos(i);
t.x = n * h + a * o;
t.y = r * h + s * o;
t.z = s * h - r * o;
t.w = a * h - n * o;
return t;
};
D.rotateY = function(t, e, i) {
i *= .5;
var n = e.x, r = e.y, s = e.z, a = e.w, o = Math.sin(i), h = Math.cos(i);
t.x = n * h - s * o;
t.y = r * h + a * o;
t.z = s * h + n * o;
t.w = a * h - r * o;
return t;
};
D.rotateZ = function(t, e, i) {
i *= .5;
var n = e.x, r = e.y, s = e.z, a = e.w, o = Math.sin(i), h = Math.cos(i);
t.x = n * h + r * o;
t.y = r * h - n * o;
t.z = s * h + a * o;
t.w = a * h - s * o;
return t;
};
D.rotateAround = (function() {
var t = v.create(), e = D.create();
return function(i, n, r, s) {
D.invert(e, n);
v.transformQuat(t, r, e);
D.fromAxisAngle(e, t, s);
D.mul(i, n, e);
return i;
};
})();
D.rotateAroundLocal = (function() {
var t = D.create();
return function(e, i, n, r) {
D.fromAxisAngle(t, n, r);
D.mul(e, i, t);
return e;
};
})();
D.calculateW = function(t, e) {
var i = e.x, n = e.y, r = e.z;
t.x = i;
t.y = n;
t.z = r;
t.w = Math.sqrt(Math.abs(1 - i * i - n * n - r * r));
return t;
};
D.dot = b.dot;
D.lerp = b.lerp;
D.slerp = function(t, e, i, n) {
var r, s, a, o, h, l = e.x, c = e.y, u = e.z, _ = e.w, m = i.x, f = i.y, d = i.z, p = i.w;
if ((s = l * m + c * f + u * d + _ * p) < 0) {
s = -s;
m = -m;
f = -f;
d = -d;
p = -p;
}
if (1 - s > 1e-6) {
r = Math.acos(s);
a = Math.sin(r);
o = Math.sin((1 - n) * r) / a;
h = Math.sin(n * r) / a;
} else {
o = 1 - n;
h = n;
}
t.x = o * l + h * m;
t.y = o * c + h * f;
t.z = o * u + h * d;
t.w = o * _ + h * p;
return t;
};
D.sqlerp = (function() {
var t = D.create(), e = D.create();
return function(i, n, r, s, a, o) {
D.slerp(t, n, a, o);
D.slerp(e, r, s, o);
D.slerp(i, t, e, 2 * o * (1 - o));
return i;
};
})();
D.invert = function(t, e) {
var i = e.x, n = e.y, r = e.z, s = e.w, a = i * i + n * n + r * r + s * s, o = a ? 1 / a : 0;
t.x = -i * o;
t.y = -n * o;
t.z = -r * o;
t.w = s * o;
return t;
};
D.conjugate = function(t, e) {
t.x = -e.x;
t.y = -e.y;
t.z = -e.z;
t.w = e.w;
return t;
};
D.length = b.length;
D.len = D.length;
D.squaredLength = b.squaredLength;
D.sqrLen = D.squaredLength;
D.normalize = b.normalize;
D.fromAxes = (function() {
var t = w.create();
return function(e, i, n, r) {
w.set(t, i.x, i.y, i.z, n.x, n.y, n.z, r.x, r.y, r.z);
return D.normalize(e, D.fromMat3(e, t));
};
})();
D.fromViewUp = (function() {
var t = w.create();
return function(e, i, n) {
w.fromViewUp(t, i, n);
return t ? D.normalize(e, D.fromMat3(e, t)) : null;
};
})();
D.fromAxisAngle = function(t, e, i) {
i *= .5;
var n = Math.sin(i);
t.x = n * e.x;
t.y = n * e.y;
t.z = n * e.z;
t.w = Math.cos(i);
return t;
};
D.fromMat3 = function(t, e) {
var i = e.m00, n = e.m03, r = e.m06, s = e.m01, a = e.m04, o = e.m07, h = e.m02, l = e.m05, c = e.m08, u = i + a + c;
if (u > 0) {
var _ = .5 / Math.sqrt(u + 1);
t.w = .25 / _;
t.x = (l - o) * _;
t.y = (r - h) * _;
t.z = (s - n) * _;
} else if (i > a && i > c) {
var m = 2 * Math.sqrt(1 + i - a - c);
t.w = (l - o) / m;
t.x = .25 * m;
t.y = (n + s) / m;
t.z = (r + h) / m;
} else if (a > c) {
var f = 2 * Math.sqrt(1 + a - i - c);
t.w = (r - h) / f;
t.x = (n + s) / f;
t.y = .25 * f;
t.z = (o + l) / f;
} else {
var d = 2 * Math.sqrt(1 + c - i - a);
t.w = (s - n) / d;
t.x = (r + h) / d;
t.y = (o + l) / d;
t.z = .25 * d;
}
return t;
};
D.fromEuler = function(t, e, i, n) {
var r = .5 * Math.PI / 180;
e *= r;
i *= r;
n *= r;
var s = Math.sin(e), a = Math.cos(e), o = Math.sin(i), h = Math.cos(i), l = Math.sin(n), c = Math.cos(n);
t.x = s * h * c - a * o * l;
t.y = a * o * c + s * h * l;
t.z = a * h * l - s * o * c;
t.w = a * h * c + s * o * l;
return t;
};
D.str = function(t) {
return "quat(" + t.x + ", " + t.y + ", " + t.z + ", " + t.w + ")";
};
D.array = function(t, e) {
t[0] = e.x;
t[1] = e.y;
t[2] = e.z;
t[3] = e.w;
return t;
};
D.exactEquals = b.exactEquals;
D.equals = b.equals;
var M = new Array(4), I = function(t, e, i, n) {
this.m00 = t;
this.m01 = e;
this.m02 = i;
this.m03 = n;
};
I.prototype.toJSON = function() {
M[0] = this.m00;
M[1] = this.m01;
M[2] = this.m02;
M[3] = this.m03;
return M;
};
var P = {
create: function() {
return new I(1, 0, 0, 1);
},
new: function(t, e, i, n) {
return new I(t, e, i, n);
},
clone: function(t) {
return new I(t.m00, t.m01, t.m02, t.m03);
},
copy: function(t, e) {
t.m00 = e.m00;
t.m01 = e.m01;
t.m02 = e.m02;
t.m03 = e.m03;
return t;
},
identity: function(t) {
t.m00 = 1;
t.m01 = 0;
t.m02 = 0;
t.m03 = 1;
return t;
},
set: function(t, e, i, n, r) {
t.m00 = e;
t.m01 = i;
t.m02 = n;
t.m03 = r;
return t;
},
transpose: function(t, e) {
if (t === e) {
var i = e.m01;
t.m01 = e.m02;
t.m02 = i;
} else {
t.m00 = e.m00;
t.m01 = e.m02;
t.m02 = e.m01;
t.m03 = e.m03;
}
return t;
},
invert: function(t, e) {
var i = e.m00, n = e.m01, r = e.m02, s = e.m03, a = i * s - r * n;
if (!a) return null;
a = 1 / a;
t.m00 = s * a;
t.m01 = -n * a;
t.m02 = -r * a;
t.m03 = i * a;
return t;
},
adjoint: function(t, e) {
var i = e.m00;
t.m00 = e.m03;
t.m01 = -e.m01;
t.m02 = -e.m02;
t.m03 = i;
return t;
},
determinant: function(t) {
return t.m00 * t.m03 - t.m02 * t.m01;
},
multiply: function(t, e, i) {
var n = e.m00, r = e.m01, s = e.m02, a = e.m03, o = i.m00, h = i.m01, l = i.m02, c = i.m03;
t.m00 = n * o + s * h;
t.m01 = r * o + a * h;
t.m02 = n * l + s * c;
t.m03 = r * l + a * c;
return t;
}
};
P.mul = P.multiply;
P.rotate = function(t, e, i) {
var n = e.m00, r = e.m01, s = e.m02, a = e.m03, o = Math.sin(i), h = Math.cos(i);
t.m00 = n * h + s * o;
t.m01 = r * h + a * o;
t.m02 = n * -o + s * h;
t.m03 = r * -o + a * h;
return t;
};
P.scale = function(t, e, i) {
var n = e.m00, r = e.m01, s = e.m02, a = e.m03, o = i.x, h = i.y;
t.m00 = n * o;
t.m01 = r * o;
t.m02 = s * h;
t.m03 = a * h;
return t;
};
P.fromRotation = function(t, e) {
var i = Math.sin(e), n = Math.cos(e);
t.m00 = n;
t.m01 = i;
t.m02 = -i;
t.m03 = n;
return t;
};
P.fromScaling = function(t, e) {
t.m00 = e.x;
t.m01 = 0;
t.m02 = 0;
t.m03 = e.y;
return t;
};
P.str = function(t) {
return "mat2(" + t.m00 + ", " + t.m01 + ", " + t.m02 + ", " + t.m03 + ")";
};
P.array = function(t, e) {
t[0] = e.m00;
t[1] = e.m01;
t[2] = e.m02;
t[3] = e.m03;
return t;
};
P.frob = function(t) {
return Math.sqrt(Math.pow(t.m00, 2) + Math.pow(t.m01, 2) + Math.pow(t.m02, 2) + Math.pow(t.m03, 2));
};
P.LDU = function(t, e, i, n) {
t.m02 = n.m02 / n.m00;
i.m00 = n.m00;
i.m01 = n.m01;
i.m03 = n.m03 - t.m02 * i.m01;
};
P.add = function(t, e, i) {
t.m00 = e.m00 + i.m00;
t.m01 = e.m01 + i.m01;
t.m02 = e.m02 + i.m02;
t.m03 = e.m03 + i.m03;
return t;
};
P.subtract = function(t, e, i) {
t.m00 = e.m00 - i.m00;
t.m01 = e.m01 - i.m01;
t.m02 = e.m02 - i.m02;
t.m03 = e.m03 - i.m03;
return t;
};
P.sub = P.subtract;
P.exactEquals = function(t, e) {
return t.m00 === e.m00 && t.m01 === e.m01 && t.m02 === e.m02 && t.m03 === e.m03;
};
P.equals = function(t, e) {
var i = t.m00, n = t.m01, r = t.m02, a = t.m03, o = e.m00, h = e.m01, l = e.m02, c = e.m03;
return Math.abs(i - o) <= s * Math.max(1, Math.abs(i), Math.abs(o)) && Math.abs(n - h) <= s * Math.max(1, Math.abs(n), Math.abs(h)) && Math.abs(r - l) <= s * Math.max(1, Math.abs(r), Math.abs(l)) && Math.abs(a - c) <= s * Math.max(1, Math.abs(a), Math.abs(c));
};
P.multiplyScalar = function(t, e, i) {
t.m00 = e.m00 * i;
t.m01 = e.m01 * i;
t.m02 = e.m02 * i;
t.m03 = e.m03 * i;
return t;
};
P.multiplyScalarAndAdd = function(t, e, i, n) {
t.m00 = e.m00 + i.m00 * n;
t.m01 = e.m01 + i.m01 * n;
t.m02 = e.m02 + i.m02 * n;
t.m03 = e.m03 + i.m03 * n;
return t;
};
var B = new Array(6), R = function(t, e, i, n, r, s) {
this.m00 = t;
this.m01 = e;
this.m02 = i;
this.m03 = n;
this.m04 = r;
this.m05 = s;
};
R.prototype.toJSON = function() {
B[0] = this.m00;
B[1] = this.m01;
B[2] = this.m02;
B[3] = this.m03;
B[4] = this.m04;
B[5] = this.m05;
return B;
};
var L = {
create: function() {
return new R(1, 0, 0, 1, 0, 0);
},
new: function(t, e, i, n, r, s) {
return new R(t, e, i, n, r, s);
},
clone: function(t) {
return new R(t.m00, t.m01, t.m02, t.m03, t.m04, t.m05);
},
copy: function(t, e) {
t.m00 = e.m00;
t.m01 = e.m01;
t.m02 = e.m02;
t.m03 = e.m03;
t.m04 = e.m04;
t.m05 = e.m05;
return t;
},
identity: function(t) {
t.m00 = 1;
t.m01 = 0;
t.m02 = 0;
t.m03 = 1;
t.m04 = 0;
t.m05 = 0;
return t;
},
set: function(t, e, i, n, r, s, a) {
t.m00 = e;
t.m01 = i;
t.m02 = n;
t.m03 = r;
t.m04 = s;
t.m05 = a;
return t;
},
invert: function(t, e) {
var i = e.m00, n = e.m01, r = e.m02, s = e.m03, a = e.m04, o = e.m05, h = i * s - n * r;
if (!h) return null;
h = 1 / h;
t.m00 = s * h;
t.m01 = -n * h;
t.m02 = -r * h;
t.m03 = i * h;
t.m04 = (r * o - s * a) * h;
t.m05 = (n * a - i * o) * h;
return t;
},
determinant: function(t) {
return t.m00 * t.m03 - t.m01 * t.m02;
},
multiply: function(t, e, i) {
var n = e.m00, r = e.m01, s = e.m02, a = e.m03, o = e.m04, h = e.m05, l = i.m00, c = i.m01, u = i.m02, _ = i.m03, m = i.m04, f = i.m05;
t.m00 = n * l + s * c;
t.m01 = r * l + a * c;
t.m02 = n * u + s * _;
t.m03 = r * u + a * _;
t.m04 = n * m + s * f + o;
t.m05 = r * m + a * f + h;
return t;
}
};
L.mul = L.multiply;
L.rotate = function(t, e, i) {
var n = e.m00, r = e.m01, s = e.m02, a = e.m03, o = e.m04, h = e.m05, l = Math.sin(i), c = Math.cos(i);
t.m00 = n * c + s * l;
t.m01 = r * c + a * l;
t.m02 = n * -l + s * c;
t.m03 = r * -l + a * c;
t.m04 = o;
t.m05 = h;
return t;
};
L.scale = function(t, e, i) {
var n = e.m00, r = e.m01, s = e.m02, a = e.m03, o = e.m04, h = e.m05, l = i.x, c = i.y;
t.m00 = n * l;
t.m01 = r * l;
t.m02 = s * c;
t.m03 = a * c;
t.m04 = o;
t.m05 = h;
return t;
};
L.translate = function(t, e, i) {
var n = e.m00, r = e.m01, s = e.m02, a = e.m03, o = e.m04, h = e.m05, l = i.x, c = i.y;
t.m00 = n;
t.m01 = r;
t.m02 = s;
t.m03 = a;
t.m04 = n * l + s * c + o;
t.m05 = r * l + a * c + h;
return t;
};
L.fromRotation = function(t, e) {
var i = Math.sin(e), n = Math.cos(e);
t.m00 = n;
t.m01 = i;
t.m02 = -i;
t.m03 = n;
t.m04 = 0;
t.m05 = 0;
return t;
};
L.fromScaling = function(t, e) {
t.m00 = e.m00;
t.m01 = 0;
t.m02 = 0;
t.m03 = e.m01;
t.m04 = 0;
t.m05 = 0;
return t;
};
L.fromTranslation = function(t, e) {
t.m00 = 1;
t.m01 = 0;
t.m02 = 0;
t.m03 = 1;
t.m04 = e.x;
t.m05 = e.y;
return t;
};
L.str = function(t) {
return "mat23(" + t.m00 + ", " + t.m01 + ", " + t.m02 + ", " + t.m03 + ", " + t.m04 + ", " + t.m05 + ")";
};
L.array = function(t, e) {
t[0] = e.m00;
t[1] = e.m01;
t[2] = e.m02;
t[3] = e.m03;
t[4] = e.m04;
t[5] = e.m05;
return t;
};
L.array4x4 = function(t, e) {
t[0] = e.m00;
t[1] = e.m01;
t[2] = 0;
t[3] = 0;
t[4] = e.m02;
t[5] = e.m03;
t[6] = 0;
t[7] = 0;
t[8] = 0;
t[9] = 0;
t[10] = 1;
t[11] = 0;
t[12] = e.m04;
t[13] = e.m05;
t[14] = 0;
t[15] = 1;
return t;
};
L.frob = function(t) {
return Math.sqrt(Math.pow(t.m00, 2) + Math.pow(t.m01, 2) + Math.pow(t.m02, 2) + Math.pow(t.m03, 2) + Math.pow(t.m04, 2) + Math.pow(t.m05, 2) + 1);
};
L.add = function(t, e, i) {
t.m00 = e.m00 + i.m00;
t.m01 = e.m01 + i.m01;
t.m02 = e.m02 + i.m02;
t.m03 = e.m03 + i.m03;
t.m04 = e.m04 + i.m04;
t.m05 = e.m05 + i.m05;
return t;
};
L.subtract = function(t, e, i) {
t.m00 = e.m00 - i.m00;
t.m01 = e.m01 - i.m01;
t.m02 = e.m02 - i.m02;
t.m03 = e.m03 - i.m03;
t.m04 = e.m04 - i.m04;
t.m05 = e.m05 - i.m05;
return t;
};
L.sub = L.subtract;
L.multiplyScalar = function(t, e, i) {
t.m00 = e.m00 * i;
t.m01 = e.m01 * i;
t.m02 = e.m02 * i;
t.m03 = e.m03 * i;
t.m04 = e.m04 * i;
t.m05 = e.m05 * i;
return t;
};
L.multiplyScalarAndAdd = function(t, e, i, n) {
t.m00 = e.m00 + i.m00 * n;
t.m01 = e.m01 + i.m01 * n;
t.m02 = e.m02 + i.m02 * n;
t.m03 = e.m03 + i.m03 * n;
t.m04 = e.m04 + i.m04 * n;
t.m05 = e.m05 + i.m05 * n;
return t;
};
L.exactEquals = function(t, e) {
return t.m00 === e.m00 && t.m01 === e.m01 && t.m02 === e.m02 && t.m03 === e.m03 && t.m04 === e.m04 && t.m05 === e.m05;
};
L.equals = function(t, e) {
var i = t.m00, n = t.m01, r = t.m02, a = t.m03, o = t.m04, h = t.m05, l = e.m00, c = e.m01, u = e.m02, _ = e.m03, m = e.m04, f = e.m05;
return Math.abs(i - l) <= s * Math.max(1, Math.abs(i), Math.abs(l)) && Math.abs(n - c) <= s * Math.max(1, Math.abs(n), Math.abs(c)) && Math.abs(r - u) <= s * Math.max(1, Math.abs(r), Math.abs(u)) && Math.abs(a - _) <= s * Math.max(1, Math.abs(a), Math.abs(_)) && Math.abs(o - m) <= s * Math.max(1, Math.abs(o), Math.abs(m)) && Math.abs(h - f) <= s * Math.max(1, Math.abs(h), Math.abs(f));
};
var O = new Array(16), F = function(t, e, i, n, r, s, a, o, h, l, c, u, _, m, f, d) {
this.m00 = t;
this.m01 = e;
this.m02 = i;
this.m03 = n;
this.m04 = r;
this.m05 = s;
this.m06 = a;
this.m07 = o;
this.m08 = h;
this.m09 = l;
this.m10 = c;
this.m11 = u;
this.m12 = _;
this.m13 = m;
this.m14 = f;
this.m15 = d;
};
F.prototype.toJSON = function() {
O[0] = this.m00;
O[1] = this.m01;
O[2] = this.m02;
O[3] = this.m03;
O[4] = this.m04;
O[5] = this.m05;
O[6] = this.m06;
O[7] = this.m07;
O[8] = this.m08;
O[9] = this.m09;
O[10] = this.m10;
O[11] = this.m11;
O[12] = this.m12;
O[13] = this.m13;
O[14] = this.m14;
O[15] = this.m15;
return O;
};
var N = {
create: function() {
return new F(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
},
new: function(t, e, i, n, r, s, a, o, h, l, c, u, _, m, f, d) {
return new F(t, e, i, n, r, s, a, o, h, l, c, u, _, m, f, d);
},
clone: function(t) {
return new F(t.m00, t.m01, t.m02, t.m03, t.m04, t.m05, t.m06, t.m07, t.m08, t.m09, t.m10, t.m11, t.m12, t.m13, t.m14, t.m15);
},
copy: function(t, e) {
t.m00 = e.m00;
t.m01 = e.m01;
t.m02 = e.m02;
t.m03 = e.m03;
t.m04 = e.m04;
t.m05 = e.m05;
t.m06 = e.m06;
t.m07 = e.m07;
t.m08 = e.m08;
t.m09 = e.m09;
t.m10 = e.m10;
t.m11 = e.m11;
t.m12 = e.m12;
t.m13 = e.m13;
t.m14 = e.m14;
t.m15 = e.m15;
return t;
},
set: function(t, e, i, n, r, s, a, o, h, l, c, u, _, m, f, d, p) {
t.m00 = e;
t.m01 = i;
t.m02 = n;
t.m03 = r;
t.m04 = s;
t.m05 = a;
t.m06 = o;
t.m07 = h;
t.m08 = l;
t.m09 = c;
t.m10 = u;
t.m11 = _;
t.m12 = m;
t.m13 = f;
t.m14 = d;
t.m15 = p;
return t;
},
identity: function(t) {
t.m00 = 1;
t.m01 = 0;
t.m02 = 0;
t.m03 = 0;
t.m04 = 0;
t.m05 = 1;
t.m06 = 0;
t.m07 = 0;
t.m08 = 0;
t.m09 = 0;
t.m10 = 1;
t.m11 = 0;
t.m12 = 0;
t.m13 = 0;
t.m14 = 0;
t.m15 = 1;
return t;
},
transpose: function(t, e) {
if (t === e) {
var i = e.m01, n = e.m02, r = e.m03, s = e.m06, a = e.m07, o = e.m11;
t.m01 = e.m04;
t.m02 = e.m08;
t.m03 = e.m12;
t.m04 = i;
t.m06 = e.m09;
t.m07 = e.m13;
t.m08 = n;
t.m09 = s;
t.m11 = e.m14;
t.m12 = r;
t.m13 = a;
t.m14 = o;
} else {
t.m00 = e.m00;
t.m01 = e.m04;
t.m02 = e.m08;
t.m03 = e.m12;
t.m04 = e.m01;
t.m05 = e.m05;
t.m06 = e.m09;
t.m07 = e.m13;
t.m08 = e.m02;
t.m09 = e.m06;
t.m10 = e.m10;
t.m11 = e.m14;
t.m12 = e.m03;
t.m13 = e.m07;
t.m14 = e.m11;
t.m15 = e.m15;
}
return t;
},
invert: function(t, e) {
var i = e.m00, n = e.m01, r = e.m02, s = e.m03, a = e.m04, o = e.m05, h = e.m06, l = e.m07, c = e.m08, u = e.m09, _ = e.m10, m = e.m11, f = e.m12, d = e.m13, p = e.m14, g = e.m15, y = i * o - n * a, v = i * h - r * a, x = i * l - s * a, A = n * h - r * o, b = n * l - s * o, T = r * l - s * h, C = c * d - u * f, w = c * p - _ * f, S = c * g - m * f, E = u * p - _ * d, D = u * g - m * d, M = _ * g - m * p, I = y * M - v * D + x * E + A * S - b * w + T * C;
if (!I) return null;
I = 1 / I;
t.m00 = (o * M - h * D + l * E) * I;
t.m01 = (r * D - n * M - s * E) * I;
t.m02 = (d * T - p * b + g * A) * I;
t.m03 = (_ * b - u * T - m * A) * I;
t.m04 = (h * S - a * M - l * w) * I;
t.m05 = (i * M - r * S + s * w) * I;
t.m06 = (p * x - f * T - g * v) * I;
t.m07 = (c * T - _ * x + m * v) * I;
t.m08 = (a * D - o * S + l * C) * I;
t.m09 = (n * S - i * D - s * C) * I;
t.m10 = (f * b - d * x + g * y) * I;
t.m11 = (u * x - c * b - m * y) * I;
t.m12 = (o * w - a * E - h * C) * I;
t.m13 = (i * E - n * w + r * C) * I;
t.m14 = (d * v - f * A - p * y) * I;
t.m15 = (c * A - u * v + _ * y) * I;
return t;
},
adjoint: function(t, e) {
var i = e.m00, n = e.m01, r = e.m02, s = e.m03, a = e.m04, o = e.m05, h = e.m06, l = e.m07, c = e.m08, u = e.m09, _ = e.m10, m = e.m11, f = e.m12, d = e.m13, p = e.m14, g = e.m15;
t.m00 = o * (_ * g - m * p) - u * (h * g - l * p) + d * (h * m - l * _);
t.m01 = -(n * (_ * g - m * p) - u * (r * g - s * p) + d * (r * m - s * _));
t.m02 = n * (h * g - l * p) - o * (r * g - s * p) + d * (r * l - s * h);
t.m03 = -(n * (h * m - l * _) - o * (r * m - s * _) + u * (r * l - s * h));
t.m04 = -(a * (_ * g - m * p) - c * (h * g - l * p) + f * (h * m - l * _));
t.m05 = i * (_ * g - m * p) - c * (r * g - s * p) + f * (r * m - s * _);
t.m06 = -(i * (h * g - l * p) - a * (r * g - s * p) + f * (r * l - s * h));
t.m07 = i * (h * m - l * _) - a * (r * m - s * _) + c * (r * l - s * h);
t.m08 = a * (u * g - m * d) - c * (o * g - l * d) + f * (o * m - l * u);
t.m09 = -(i * (u * g - m * d) - c * (n * g - s * d) + f * (n * m - s * u));
t.m10 = i * (o * g - l * d) - a * (n * g - s * d) + f * (n * l - s * o);
t.m11 = -(i * (o * m - l * u) - a * (n * m - s * u) + c * (n * l - s * o));
t.m12 = -(a * (u * p - _ * d) - c * (o * p - h * d) + f * (o * _ - h * u));
t.m13 = i * (u * p - _ * d) - c * (n * p - r * d) + f * (n * _ - r * u);
t.m14 = -(i * (o * p - h * d) - a * (n * p - r * d) + f * (n * h - r * o));
t.m15 = i * (o * _ - h * u) - a * (n * _ - r * u) + c * (n * h - r * o);
return t;
},
determinant: function(t) {
var e = t.m00, i = t.m01, n = t.m02, r = t.m03, s = t.m04, a = t.m05, o = t.m06, h = t.m07, l = t.m08, c = t.m09, u = t.m10, _ = t.m11, m = t.m12, f = t.m13, d = t.m14, p = t.m15;
return (e * a - i * s) * (u * p - _ * d) - (e * o - n * s) * (c * p - _ * f) + (e * h - r * s) * (c * d - u * f) + (i * o - n * a) * (l * p - _ * m) - (i * h - r * a) * (l * d - u * m) + (n * h - r * o) * (l * f - c * m);
},
multiply: function(t, e, i) {
var n = e.m00, r = e.m01, s = e.m02, a = e.m03, o = e.m04, h = e.m05, l = e.m06, c = e.m07, u = e.m08, _ = e.m09, m = e.m10, f = e.m11, d = e.m12, p = e.m13, g = e.m14, y = e.m15, v = i.m00, x = i.m01, A = i.m02, b = i.m03;
t.m00 = v * n + x * o + A * u + b * d;
t.m01 = v * r + x * h + A * _ + b * p;
t.m02 = v * s + x * l + A * m + b * g;
t.m03 = v * a + x * c + A * f + b * y;
v = i.m04;
x = i.m05;
A = i.m06;
b = i.m07;
t.m04 = v * n + x * o + A * u + b * d;
t.m05 = v * r + x * h + A * _ + b * p;
t.m06 = v * s + x * l + A * m + b * g;
t.m07 = v * a + x * c + A * f + b * y;
v = i.m08;
x = i.m09;
A = i.m10;
b = i.m11;
t.m08 = v * n + x * o + A * u + b * d;
t.m09 = v * r + x * h + A * _ + b * p;
t.m10 = v * s + x * l + A * m + b * g;
t.m11 = v * a + x * c + A * f + b * y;
v = i.m12;
x = i.m13;
A = i.m14;
b = i.m15;
t.m12 = v * n + x * o + A * u + b * d;
t.m13 = v * r + x * h + A * _ + b * p;
t.m14 = v * s + x * l + A * m + b * g;
t.m15 = v * a + x * c + A * f + b * y;
return t;
}
};
N.mul = N.multiply;
N.translate = function(t, e, i) {
var n, r, s, a, o, h, l, c, u, _, m, f, d = i.x, p = i.y, g = i.z;
if (e === t) {
t.m12 = e.m00 * d + e.m04 * p + e.m08 * g + e.m12;
t.m13 = e.m01 * d + e.m05 * p + e.m09 * g + e.m13;
t.m14 = e.m02 * d + e.m06 * p + e.m10 * g + e.m14;
t.m15 = e.m03 * d + e.m07 * p + e.m11 * g + e.m15;
} else {
n = e.m00;
r = e.m01;
s = e.m02;
a = e.m03;
o = e.m04;
h = e.m05;
l = e.m06;
c = e.m07;
u = e.m08;
_ = e.m09;
m = e.m10;
f = e.m11;
t.m00 = n;
t.m01 = r;
t.m02 = s;
t.m03 = a;
t.m04 = o;
t.m05 = h;
t.m06 = l;
t.m07 = c;
t.m08 = u;
t.m09 = _;
t.m10 = m;
t.m11 = f;
t.m12 = n * d + o * p + u * g + e.m12;
t.m13 = r * d + h * p + _ * g + e.m13;
t.m14 = s * d + l * p + m * g + e.m14;
t.m15 = a * d + c * p + f * g + e.m15;
}
return t;
};
N.scale = function(t, e, i) {
var n = i.x, r = i.y, s = i.z;
t.m00 = e.m00 * n;
t.m01 = e.m01 * n;
t.m02 = e.m02 * n;
t.m03 = e.m03 * n;
t.m04 = e.m04 * r;
t.m05 = e.m05 * r;
t.m06 = e.m06 * r;
t.m07 = e.m07 * r;
t.m08 = e.m08 * s;
t.m09 = e.m09 * s;
t.m10 = e.m10 * s;
t.m11 = e.m11 * s;
t.m12 = e.m12;
t.m13 = e.m13;
t.m14 = e.m14;
t.m15 = e.m15;
return t;
};
N.rotate = function(t, e, i, n) {
var r, a, o, h, l, c, u, _, m, f, d, p, g, y, v, x, A, b, T, C, w, S, E, D, M = n.x, I = n.y, P = n.z, B = Math.sqrt(M * M + I * I + P * P);
if (Math.abs(B) < s) return null;
M *= B = 1 / B;
I *= B;
P *= B;
r = Math.sin(i);
o = 1 - (a = Math.cos(i));
h = e.m00;
l = e.m01;
c = e.m02;
u = e.m03;
_ = e.m04;
m = e.m05;
f = e.m06;
d = e.m07;
p = e.m08;
g = e.m09;
y = e.m10;
v = e.m11;
x = M * M * o + a;
A = I * M * o + P * r;
b = P * M * o - I * r;
T = M * I * o - P * r;
C = I * I * o + a;
w = P * I * o + M * r;
S = M * P * o + I * r;
E = I * P * o - M * r;
D = P * P * o + a;
t.m00 = h * x + _ * A + p * b;
t.m01 = l * x + m * A + g * b;
t.m02 = c * x + f * A + y * b;
t.m03 = u * x + d * A + v * b;
t.m04 = h * T + _ * C + p * w;
t.m05 = l * T + m * C + g * w;
t.m06 = c * T + f * C + y * w;
t.m07 = u * T + d * C + v * w;
t.m08 = h * S + _ * E + p * D;
t.m09 = l * S + m * E + g * D;
t.m10 = c * S + f * E + y * D;
t.m11 = u * S + d * E + v * D;
if (e !== t) {
t.m12 = e.m12;
t.m13 = e.m13;
t.m14 = e.m14;
t.m15 = e.m15;
}
return t;
};
N.rotateX = function(t, e, i) {
var n = Math.sin(i), r = Math.cos(i), s = e.m04, a = e.m05, o = e.m06, h = e.m07, l = e.m08, c = e.m09, u = e.m10, _ = e.m11;
if (e !== t) {
t.m00 = e.m00;
t.m01 = e.m01;
t.m02 = e.m02;
t.m03 = e.m03;
t.m12 = e.m12;
t.m13 = e.m13;
t.m14 = e.m14;
t.m15 = e.m15;
}
t.m04 = s * r + l * n;
t.m05 = a * r + c * n;
t.m06 = o * r + u * n;
t.m07 = h * r + _ * n;
t.m08 = l * r - s * n;
t.m09 = c * r - a * n;
t.m10 = u * r - o * n;
t.m11 = _ * r - h * n;
return t;
};
N.rotateY = function(t, e, i) {
var n = Math.sin(i), r = Math.cos(i), s = e.m00, a = e.m01, o = e.m02, h = e.m03, l = e.m08, c = e.m09, u = e.m10, _ = e.m11;
if (e !== t) {
t.m04 = e.m04;
t.m05 = e.m05;
t.m06 = e.m06;
t.m07 = e.m07;
t.m12 = e.m12;
t.m13 = e.m13;
t.m14 = e.m14;
t.m15 = e.m15;
}
t.m00 = s * r - l * n;
t.m01 = a * r - c * n;
t.m02 = o * r - u * n;
t.m03 = h * r - _ * n;
t.m08 = s * n + l * r;
t.m09 = a * n + c * r;
t.m10 = o * n + u * r;
t.m11 = h * n + _ * r;
return t;
};
N.rotateZ = function(t, e, i) {
var n = Math.sin(i), r = Math.cos(i), s = e.m00, a = e.m01, o = e.m02, h = e.m03, l = e.m04, c = e.m05, u = e.m06, _ = e.m07;
if (e !== t) {
t.m08 = e.m08;
t.m09 = e.m09;
t.m10 = e.m10;
t.m11 = e.m11;
t.m12 = e.m12;
t.m13 = e.m13;
t.m14 = e.m14;
t.m15 = e.m15;
}
t.m00 = s * r + l * n;
t.m01 = a * r + c * n;
t.m02 = o * r + u * n;
t.m03 = h * r + _ * n;
t.m04 = l * r - s * n;
t.m05 = c * r - a * n;
t.m06 = u * r - o * n;
t.m07 = _ * r - h * n;
return t;
};
N.fromTranslation = function(t, e) {
t.m00 = 1;
t.m01 = 0;
t.m02 = 0;
t.m03 = 0;
t.m04 = 0;
t.m05 = 1;
t.m06 = 0;
t.m07 = 0;
t.m08 = 0;
t.m09 = 0;
t.m10 = 1;
t.m11 = 0;
t.m12 = e.x;
t.m13 = e.y;
t.m14 = e.z;
t.m15 = 1;
return t;
};
N.fromScaling = function(t, e) {
t.m00 = e.x;
t.m01 = 0;
t.m02 = 0;
t.m03 = 0;
t.m04 = 0;
t.m05 = e.y;
t.m06 = 0;
t.m07 = 0;
t.m08 = 0;
t.m09 = 0;
t.m10 = e.z;
t.m11 = 0;
t.m12 = 0;
t.m13 = 0;
t.m14 = 0;
t.m15 = 1;
return t;
};
N.fromRotation = function(t, e, i) {
var n, r, a, o = i.x, h = i.y, l = i.z, c = Math.sqrt(o * o + h * h + l * l);
if (Math.abs(c) < s) return null;
o *= c = 1 / c;
h *= c;
l *= c;
n = Math.sin(e);
a = 1 - (r = Math.cos(e));
t.m00 = o * o * a + r;
t.m01 = h * o * a + l * n;
t.m02 = l * o * a - h * n;
t.m03 = 0;
t.m04 = o * h * a - l * n;
t.m05 = h * h * a + r;
t.m06 = l * h * a + o * n;
t.m07 = 0;
t.m08 = o * l * a + h * n;
t.m09 = h * l * a - o * n;
t.m10 = l * l * a + r;
t.m11 = 0;
t.m12 = 0;
t.m13 = 0;
t.m14 = 0;
t.m15 = 1;
return t;
};
N.fromXRotation = function(t, e) {
var i = Math.sin(e), n = Math.cos(e);
t.m00 = 1;
t.m01 = 0;
t.m02 = 0;
t.m03 = 0;
t.m04 = 0;
t.m05 = n;
t.m06 = i;
t.m07 = 0;
t.m08 = 0;
t.m09 = -i;
t.m10 = n;
t.m11 = 0;
t.m12 = 0;
t.m13 = 0;
t.m14 = 0;
t.m15 = 1;
return t;
};
N.fromYRotation = function(t, e) {
var i = Math.sin(e), n = Math.cos(e);
t.m00 = n;
t.m01 = 0;
t.m02 = -i;
t.m03 = 0;
t.m04 = 0;
t.m05 = 1;
t.m06 = 0;
t.m07 = 0;
t.m08 = i;
t.m09 = 0;
t.m10 = n;
t.m11 = 0;
t.m12 = 0;
t.m13 = 0;
t.m14 = 0;
t.m15 = 1;
return t;
};
N.fromZRotation = function(t, e) {
var i = Math.sin(e), n = Math.cos(e);
t.m00 = n;
t.m01 = i;
t.m02 = 0;
t.m03 = 0;
t.m04 = -i;
t.m05 = n;
t.m06 = 0;
t.m07 = 0;
t.m08 = 0;
t.m09 = 0;
t.m10 = 1;
t.m11 = 0;
t.m12 = 0;
t.m13 = 0;
t.m14 = 0;
t.m15 = 1;
return t;
};
N.fromRT = function(t, e, i) {
var n = e.x, r = e.y, s = e.z, a = e.w, o = n + n, h = r + r, l = s + s, c = n * o, u = n * h, _ = n * l, m = r * h, f = r * l, d = s * l, p = a * o, g = a * h, y = a * l;
t.m00 = 1 - (m + d);
t.m01 = u + y;
t.m02 = _ - g;
t.m03 = 0;
t.m04 = u - y;
t.m05 = 1 - (c + d);
t.m06 = f + p;
t.m07 = 0;
t.m08 = _ + g;
t.m09 = f - p;
t.m10 = 1 - (c + m);
t.m11 = 0;
t.m12 = i.x;
t.m13 = i.y;
t.m14 = i.z;
t.m15 = 1;
return t;
};
N.getTranslation = function(t, e) {
t.x = e.m12;
t.y = e.m13;
t.z = e.m14;
return t;
};
N.getScaling = function(t, e) {
var i = e.m00, n = e.m01, r = e.m02, s = e.m04, a = e.m05, o = e.m06, h = e.m08, l = e.m09, c = e.m10;
t.x = Math.sqrt(i * i + n * n + r * r);
t.y = Math.sqrt(s * s + a * a + o * o);
t.z = Math.sqrt(h * h + l * l + c * c);
return t;
};
N.getRotation = function(t, e) {
var i = e.m00 + e.m05 + e.m10, n = 0;
if (i > 0) {
n = 2 * Math.sqrt(i + 1);
t.w = .25 * n;
t.x = (e.m06 - e.m09) / n;
t.y = (e.m08 - e.m02) / n;
t.z = (e.m01 - e.m04) / n;
} else if (e.m00 > e.m05 & e.m00 > e.m10) {
n = 2 * Math.sqrt(1 + e.m00 - e.m05 - e.m10);
t.w = (e.m06 - e.m09) / n;
t.x = .25 * n;
t.y = (e.m01 + e.m04) / n;
t.z = (e.m08 + e.m02) / n;
} else if (e.m05 > e.m10) {
n = 2 * Math.sqrt(1 + e.m05 - e.m00 - e.m10);
t.w = (e.m08 - e.m02) / n;
t.x = (e.m01 + e.m04) / n;
t.y = .25 * n;
t.z = (e.m06 + e.m09) / n;
} else {
n = 2 * Math.sqrt(1 + e.m10 - e.m00 - e.m05);
t.w = (e.m01 - e.m04) / n;
t.x = (e.m08 + e.m02) / n;
t.y = (e.m06 + e.m09) / n;
t.z = .25 * n;
}
return t;
};
N.fromRTS = function(t, e, i, n) {
var r = e.x, s = e.y, a = e.z, o = e.w, h = r + r, l = s + s, c = a + a, u = r * h, _ = r * l, m = r * c, f = s * l, d = s * c, p = a * c, g = o * h, y = o * l, v = o * c, x = n.x, A = n.y, b = n.z;
t.m00 = (1 - (f + p)) * x;
t.m01 = (_ + v) * x;
t.m02 = (m - y) * x;
t.m03 = 0;
t.m04 = (_ - v) * A;
t.m05 = (1 - (u + p)) * A;
t.m06 = (d + g) * A;
t.m07 = 0;
t.m08 = (m + y) * b;
t.m09 = (d - g) * b;
t.m10 = (1 - (u + f)) * b;
t.m11 = 0;
t.m12 = i.x;
t.m13 = i.y;
t.m14 = i.z;
t.m15 = 1;
return t;
};
N.fromRTSOrigin = function(t, e, i, n, r) {
var s = e.x, a = e.y, o = e.z, h = e.w, l = s + s, c = a + a, u = o + o, _ = s * l, m = s * c, f = s * u, d = a * c, p = a * u, g = o * u, y = h * l, v = h * c, x = h * u, A = n.x, b = n.y, T = n.z, C = r.x, w = r.y, S = r.z;
t.m00 = (1 - (d + g)) * A;
t.m01 = (m + x) * A;
t.m02 = (f - v) * A;
t.m03 = 0;
t.m04 = (m - x) * b;
t.m05 = (1 - (_ + g)) * b;
t.m06 = (p + y) * b;
t.m07 = 0;
t.m08 = (f + v) * T;
t.m09 = (p - y) * T;
t.m10 = (1 - (_ + d)) * T;
t.m11 = 0;
t.m12 = i.x + C - (t.m00 * C + t.m04 * w + t.m08 * S);
t.m13 = i.y + w - (t.m01 * C + t.m05 * w + t.m09 * S);
t.m14 = i.z + S - (t.m02 * C + t.m06 * w + t.m10 * S);
t.m15 = 1;
return t;
};
N.fromQuat = function(t, e) {
var i = e.x, n = e.y, r = e.z, s = e.w, a = i + i, o = n + n, h = r + r, l = i * a, c = n * a, u = n * o, _ = r * a, m = r * o, f = r * h, d = s * a, p = s * o, g = s * h;
t.m00 = 1 - u - f;
t.m01 = c + g;
t.m02 = _ - p;
t.m03 = 0;
t.m04 = c - g;
t.m05 = 1 - l - f;
t.m06 = m + d;
t.m07 = 0;
t.m08 = _ + p;
t.m09 = m - d;
t.m10 = 1 - l - u;
t.m11 = 0;
t.m12 = 0;
t.m13 = 0;
t.m14 = 0;
t.m15 = 1;
return t;
};
N.frustum = function(t, e, i, n, r, s, a) {
var o = 1 / (i - e), h = 1 / (r - n), l = 1 / (s - a);
t.m00 = 2 * s * o;
t.m01 = 0;
t.m02 = 0;
t.m03 = 0;
t.m04 = 0;
t.m05 = 2 * s * h;
t.m06 = 0;
t.m07 = 0;
t.m08 = (i + e) * o;
t.m09 = (r + n) * h;
t.m10 = (a + s) * l;
t.m11 = -1;
t.m12 = 0;
t.m13 = 0;
t.m14 = a * s * 2 * l;
t.m15 = 0;
return t;
};
N.perspective = function(t, e, i, n, r) {
var s = 1 / Math.tan(e / 2), a = 1 / (n - r);
t.m00 = s / i;
t.m01 = 0;
t.m02 = 0;
t.m03 = 0;
t.m04 = 0;
t.m05 = s;
t.m06 = 0;
t.m07 = 0;
t.m08 = 0;
t.m09 = 0;
t.m10 = (r + n) * a;
t.m11 = -1;
t.m12 = 0;
t.m13 = 0;
t.m14 = 2 * r * n * a;
t.m15 = 0;
return t;
};
N.perspectiveFromFieldOfView = function(t, e, i, n) {
var r = Math.tan(e.upDegrees * Math.PI / 180), s = Math.tan(e.downDegrees * Math.PI / 180), a = Math.tan(e.leftDegrees * Math.PI / 180), o = Math.tan(e.rightDegrees * Math.PI / 180), h = 2 / (a + o), l = 2 / (r + s);
t.m00 = h;
t.m01 = 0;
t.m02 = 0;
t.m03 = 0;
t.m04 = 0;
t.m05 = l;
t.m06 = 0;
t.m07 = 0;
t.m08 = -(a - o) * h * .5;
t.m09 = (r - s) * l * .5;
t.m10 = n / (i - n);
t.m11 = -1;
t.m12 = 0;
t.m13 = 0;
t.m14 = n * i / (i - n);
t.m15 = 0;
return t;
};
N.ortho = function(t, e, i, n, r, s, a) {
var o = 1 / (e - i), h = 1 / (n - r), l = 1 / (s - a);
t.m00 = -2 * o;
t.m01 = 0;
t.m02 = 0;
t.m03 = 0;
t.m04 = 0;
t.m05 = -2 * h;
t.m06 = 0;
t.m07 = 0;
t.m08 = 0;
t.m09 = 0;
t.m10 = 2 * l;
t.m11 = 0;
t.m12 = (e + i) * o;
t.m13 = (r + n) * h;
t.m14 = (a + s) * l;
t.m15 = 1;
return t;
};
N.lookAt = function(t, e, i, n) {
var r, a, o, h, l, c, u, _, m, f, d = e.x, p = e.y, g = e.z, y = n.x, v = n.y, x = n.z, A = i.x, b = i.y, T = i.z;
if (Math.abs(d - A) < s && Math.abs(p - b) < s && Math.abs(g - T) < s) return N.identity(t);
u = d - A;
_ = p - b;
m = g - T;
r = v * (m *= f = 1 / Math.sqrt(u * u + _ * _ + m * m)) - x * (_ *= f);
a = x * (u *= f) - y * m;
o = y * _ - v * u;
if (f = Math.sqrt(r * r + a * a + o * o)) {
r *= f = 1 / f;
a *= f;
o *= f;
} else {
r = 0;
a = 0;
o = 0;
}
h = _ * o - m * a;
l = m * r - u * o;
c = u * a - _ * r;
if (f = Math.sqrt(h * h + l * l + c * c)) {
h *= f = 1 / f;
l *= f;
c *= f;
} else {
h = 0;
l = 0;
c = 0;
}
t.m00 = r;
t.m01 = h;
t.m02 = u;
t.m03 = 0;
t.m04 = a;
t.m05 = l;
t.m06 = _;
t.m07 = 0;
t.m08 = o;
t.m09 = c;
t.m10 = m;
t.m11 = 0;
t.m12 = -(r * d + a * p + o * g);
t.m13 = -(h * d + l * p + c * g);
t.m14 = -(u * d + _ * p + m * g);
t.m15 = 1;
return t;
};
N.str = function(t) {
return "mat4(" + t.m00 + ", " + t.m01 + ", " + t.m02 + ", " + t.m03 + ", " + t.m04 + ", " + t.m05 + ", " + t.m06 + ", " + t.m07 + ", " + t.m08 + ", " + t.m09 + ", " + t.m10 + ", " + t.m11 + ", " + t.m12 + ", " + t.m13 + ", " + t.m14 + ", " + t.m15 + ")";
};
N.array = function(t, e) {
t[0] = e.m00;
t[1] = e.m01;
t[2] = e.m02;
t[3] = e.m03;
t[4] = e.m04;
t[5] = e.m05;
t[6] = e.m06;
t[7] = e.m07;
t[8] = e.m08;
t[9] = e.m09;
t[10] = e.m10;
t[11] = e.m11;
t[12] = e.m12;
t[13] = e.m13;
t[14] = e.m14;
t[15] = e.m15;
return t;
};
N.frob = function(t) {
return Math.sqrt(Math.pow(t.m00, 2) + Math.pow(t.m01, 2) + Math.pow(t.m02, 2) + Math.pow(t.m03, 2) + Math.pow(t.m04, 2) + Math.pow(t.m05, 2) + Math.pow(t.m06, 2) + Math.pow(t.m07, 2) + Math.pow(t.m08, 2) + Math.pow(t.m09, 2) + Math.pow(t.m10, 2) + Math.pow(t.m11, 2) + Math.pow(t.m12, 2) + Math.pow(t.m13, 2) + Math.pow(t.m14, 2) + Math.pow(t.m15, 2));
};
N.add = function(t, e, i) {
t.m00 = e.m00 + i.m00;
t.m01 = e.m01 + i.m01;
t.m02 = e.m02 + i.m02;
t.m03 = e.m03 + i.m03;
t.m04 = e.m04 + i.m04;
t.m05 = e.m05 + i.m05;
t.m06 = e.m06 + i.m06;
t.m07 = e.m07 + i.m07;
t.m08 = e.m08 + i.m08;
t.m09 = e.m09 + i.m09;
t.m10 = e.m10 + i.m10;
t.m11 = e.m11 + i.m11;
t.m12 = e.m12 + i.m12;
t.m13 = e.m13 + i.m13;
t.m14 = e.m14 + i.m14;
t.m15 = e.m15 + i.m15;
return t;
};
N.subtract = function(t, e, i) {
t.m00 = e.m00 - i.m00;
t.m01 = e.m01 - i.m01;
t.m02 = e.m02 - i.m02;
t.m03 = e.m03 - i.m03;
t.m04 = e.m04 - i.m04;
t.m05 = e.m05 - i.m05;
t.m06 = e.m06 - i.m06;
t.m07 = e.m07 - i.m07;
t.m08 = e.m08 - i.m08;
t.m09 = e.m09 - i.m09;
t.m10 = e.m10 - i.m10;
t.m11 = e.m11 - i.m11;
t.m12 = e.m12 - i.m12;
t.m13 = e.m13 - i.m13;
t.m14 = e.m14 - i.m14;
t.m15 = e.m15 - i.m15;
return t;
};
N.sub = N.subtract;
N.multiplyScalar = function(t, e, i) {
t.m00 = e.m00 * i;
t.m01 = e.m01 * i;
t.m02 = e.m02 * i;
t.m03 = e.m03 * i;
t.m04 = e.m04 * i;
t.m05 = e.m05 * i;
t.m06 = e.m06 * i;
t.m07 = e.m07 * i;
t.m08 = e.m08 * i;
t.m09 = e.m09 * i;
t.m10 = e.m10 * i;
t.m11 = e.m11 * i;
t.m12 = e.m12 * i;
t.m13 = e.m13 * i;
t.m14 = e.m14 * i;
t.m15 = e.m15 * i;
return t;
};
N.multiplyScalarAndAdd = function(t, e, i, n) {
t.m00 = e.m00 + i.m00 * n;
t.m01 = e.m01 + i.m01 * n;
t.m02 = e.m02 + i.m02 * n;
t.m03 = e.m03 + i.m03 * n;
t.m04 = e.m04 + i.m04 * n;
t.m05 = e.m05 + i.m05 * n;
t.m06 = e.m06 + i.m06 * n;
t.m07 = e.m07 + i.m07 * n;
t.m08 = e.m08 + i.m08 * n;
t.m09 = e.m09 + i.m09 * n;
t.m10 = e.m10 + i.m10 * n;
t.m11 = e.m11 + i.m11 * n;
t.m12 = e.m12 + i.m12 * n;
t.m13 = e.m13 + i.m13 * n;
t.m14 = e.m14 + i.m14 * n;
t.m15 = e.m15 + i.m15 * n;
return t;
};
N.exactEquals = function(t, e) {
return t.m00 === e.m00 && t.m01 === e.m01 && t.m02 === e.m02 && t.m03 === e.m03 && t.m04 === e.m04 && t.m05 === e.m05 && t.m06 === e.m06 && t.m07 === e.m07 && t.m08 === e.m08 && t.m09 === e.m09 && t.m10 === e.m10 && t.m11 === e.m11 && t.m12 === e.m12 && t.m13 === e.m13 && t.m14 === e.m14 && t.m15 === e.m15;
};
N.equals = function(t, e) {
var i = t.m00, n = t.m01, r = t.m02, a = t.m03, o = t.m04, h = t.m05, l = t.m06, c = t.m07, u = t.m08, _ = t.m09, m = t.m10, f = t.m11, d = t.m12, p = t.m13, g = t.m14, y = t.m15, v = e.m00, x = e.m01, A = e.m02, b = e.m03, T = e.m04, C = e.m05, w = e.m06, S = e.m07, E = e.m08, D = e.m09, M = e.m10, I = e.m11, P = e.m12, B = e.m13, R = e.m14, L = e.m15;
return Math.abs(i - v) <= s * Math.max(1, Math.abs(i), Math.abs(v)) && Math.abs(n - x) <= s * Math.max(1, Math.abs(n), Math.abs(x)) && Math.abs(r - A) <= s * Math.max(1, Math.abs(r), Math.abs(A)) && Math.abs(a - b) <= s * Math.max(1, Math.abs(a), Math.abs(b)) && Math.abs(o - T) <= s * Math.max(1, Math.abs(o), Math.abs(T)) && Math.abs(h - C) <= s * Math.max(1, Math.abs(h), Math.abs(C)) && Math.abs(l - w) <= s * Math.max(1, Math.abs(l), Math.abs(w)) && Math.abs(c - S) <= s * Math.max(1, Math.abs(c), Math.abs(S)) && Math.abs(u - E) <= s * Math.max(1, Math.abs(u), Math.abs(E)) && Math.abs(_ - D) <= s * Math.max(1, Math.abs(_), Math.abs(D)) && Math.abs(m - M) <= s * Math.max(1, Math.abs(m), Math.abs(M)) && Math.abs(f - I) <= s * Math.max(1, Math.abs(f), Math.abs(I)) && Math.abs(d - P) <= s * Math.max(1, Math.abs(d), Math.abs(P)) && Math.abs(p - B) <= s * Math.max(1, Math.abs(p), Math.abs(B)) && Math.abs(g - R) <= s * Math.max(1, Math.abs(g), Math.abs(R)) && Math.abs(y - L) <= s * Math.max(1, Math.abs(y), Math.abs(L));
};
var k = new Array(3), z = function(t, e, i) {
this.r = t;
this.g = e;
this.b = i;
};
z.prototype.toJSON = function() {
k[0] = this.r;
k[1] = this.g;
k[2] = this.b;
return k;
};
var G = {
create: function() {
return new z(1, 1, 1);
},
new: function(t, e, i) {
return new z(t, e, i);
},
clone: function(t) {
return new z(t.r, t.g, t.b, t.a);
},
copy: function(t, e) {
t.r = e.r;
t.g = e.g;
t.b = e.b;
return t;
},
set: function(t, e, i, n) {
t.r = e;
t.g = i;
t.b = n;
return t;
},
fromHex: function(t, e) {
var i = (e >> 16) / 255, n = (e >> 8 & 255) / 255, r = (255 & e) / 255;
t.r = i;
t.g = n;
t.b = r;
return t;
},
add: function(t, e, i) {
t.r = e.r + i.r;
t.g = e.g + i.g;
t.b = e.b + i.b;
return t;
},
subtract: function(t, e, i) {
t.r = e.r - i.r;
t.g = e.g - i.g;
t.b = e.b - i.b;
return t;
}
};
G.sub = G.subtract;
G.multiply = function(t, e, i) {
t.r = e.r * i.r;
t.g = e.g * i.g;
t.b = e.b * i.b;
return t;
};
G.mul = G.multiply;
G.divide = function(t, e, i) {
t.r = e.r / i.r;
t.g = e.g / i.g;
t.b = e.b / i.b;
return t;
};
G.div = G.divide;
G.scale = function(t, e, i) {
t.r = e.r * i;
t.g = e.g * i;
t.b = e.b * i;
return t;
};
G.lerp = function(t, e, i, n) {
var r = e.r, s = e.g, a = e.b;
t.r = r + n * (i.r - r);
t.g = s + n * (i.g - s);
t.b = a + n * (i.b - a);
return t;
};
G.str = function(t) {
return "color3(" + t.r + ", " + t.g + ", " + t.b + ")";
};
G.array = function(t, e) {
t[0] = e.r;
t[1] = e.g;
t[2] = e.b;
return t;
};
G.exactEquals = function(t, e) {
return t.r === e.r && t.g === e.g && t.b === e.b;
};
G.equals = function(t, e) {
var i = t.r, n = t.g, r = t.b, a = e.r, o = e.g, h = e.b;
return Math.abs(i - a) <= s * Math.max(1, Math.abs(i), Math.abs(a)) && Math.abs(n - o) <= s * Math.max(1, Math.abs(n), Math.abs(o)) && Math.abs(r - h) <= s * Math.max(1, Math.abs(r), Math.abs(h));
};
G.hex = function(t) {
return 255 * t.r << 16 | 255 * t.g << 8 | 255 * t.b;
};
var U = new Array(4), V = function(t, e, i, n) {
this.r = t;
this.g = e;
this.b = i;
this.a = n;
};
V.prototype.toJSON = function() {
U[0] = this.r;
U[1] = this.g;
U[2] = this.b;
U[3] = this.a;
return U;
};
var j = {
create: function() {
return new V(1, 1, 1, 1);
},
new: function(t, e, i, n) {
return new V(t, e, i, n);
},
clone: function(t) {
return new V(t.r, t.g, t.b, t.a);
},
copy: function(t, e) {
t.r = e.r;
t.g = e.g;
t.b = e.b;
t.a = e.a;
return t;
},
set: function(t, e, i, n, r) {
t.r = e;
t.g = i;
t.b = n;
t.a = r;
return t;
},
fromHex: function(t, e) {
var i = (e >> 24) / 255, n = (e >> 16 & 255) / 255, r = (e >> 8 & 255) / 255, s = (255 & e) / 255;
t.r = i;
t.g = n;
t.b = r;
t.a = s;
return t;
},
add: function(t, e, i) {
t.r = e.r + i.r;
t.g = e.g + i.g;
t.b = e.b + i.b;
t.a = e.a + i.a;
return t;
},
subtract: function(t, e, i) {
t.r = e.r - i.r;
t.g = e.g - i.g;
t.b = e.b - i.b;
t.a = e.a - i.a;
return t;
}
};
j.sub = j.subtract;
j.multiply = function(t, e, i) {
t.r = e.r * i.r;
t.g = e.g * i.g;
t.b = e.b * i.b;
t.a = e.a * i.a;
return t;
};
j.mul = j.multiply;
j.divide = function(t, e, i) {
t.r = e.r / i.r;
t.g = e.g / i.g;
t.b = e.b / i.b;
t.a = e.a / i.a;
return t;
};
j.div = j.divide;
j.scale = function(t, e, i) {
t.r = e.r * i;
t.g = e.g * i;
t.b = e.b * i;
t.a = e.a * i;
return t;
};
j.lerp = function(t, e, i, n) {
var r = e.r, s = e.g, a = e.b, o = e.a;
t.r = r + n * (i.r - r);
t.g = s + n * (i.g - s);
t.b = a + n * (i.b - a);
t.a = o + n * (i.a - o);
return t;
};
j.str = function(t) {
return "color4(" + t.r + ", " + t.g + ", " + t.b + ", " + t.a + ")";
};
j.array = function(t, e) {
t[0] = e.r;
t[1] = e.g;
t[2] = e.b;
t[3] = e.a;
return t;
};
j.exactEquals = function(t, e) {
return t.r === e.r && t.g === e.g && t.b === e.b && t.a === e.a;
};
j.equals = function(t, e) {
var i = t.r, n = t.g, r = t.b, a = t.a, o = e.r, h = e.g, l = e.b, c = e.a;
return Math.abs(i - o) <= s * Math.max(1, Math.abs(i), Math.abs(o)) && Math.abs(n - h) <= s * Math.max(1, Math.abs(n), Math.abs(h)) && Math.abs(r - l) <= s * Math.max(1, Math.abs(r), Math.abs(l)) && Math.abs(a - c) <= s * Math.max(1, Math.abs(a), Math.abs(c));
};
j.hex = function(t) {
return (255 * t.r << 24 | 255 * t.g << 16 | 255 * t.b << 8 | 255 * t.a) >>> 0;
};
var W = m, H = Object.freeze({
bits: W,
vec2: p,
vec3: v,
vec4: b,
quat: D,
mat2: P,
mat23: L,
mat3: w,
mat4: N,
color3: G,
color4: j,
EPSILON: s,
equals: function(t, e) {
return Math.abs(t - e) <= s * Math.max(1, Math.abs(t), Math.abs(e));
},
approx: function(t, e, i) {
i = i || s;
return Math.abs(t - e) <= i;
},
clamp: function(t, e, i) {
return t < e ? e : t > i ? i : t;
},
clamp01: function(t) {
return t < 0 ? 0 : t > 1 ? 1 : t;
},
lerp: function(t, e, i) {
return t + (e - t) * i;
},
toRadian: a,
toDegree: function(t) {
return t * r;
},
random: o,
randomRange: h,
randomRangeInt: function(t, e) {
return Math.floor(h(t, e));
},
nextPow2: function(t) {
--t;
t |= t >> 1;
t |= t >> 2;
t |= t >> 4;
t |= t >> 8;
t |= t >> 16;
return ++t;
}
}), q = {
PROJ_PERSPECTIVE: 0,
PROJ_ORTHO: 1,
LIGHT_DIRECTIONAL: 0,
LIGHT_POINT: 1,
LIGHT_SPOT: 2,
SHADOW_NONE: 0,
SHADOW_HARD: 1,
SHADOW_SOFT: 2,
PARAM_INT: 0,
PARAM_INT2: 1,
PARAM_INT3: 2,
PARAM_INT4: 3,
PARAM_FLOAT: 4,
PARAM_FLOAT2: 5,
PARAM_FLOAT3: 6,
PARAM_FLOAT4: 7,
PARAM_COLOR3: 8,
PARAM_COLOR4: 9,
PARAM_MAT2: 10,
PARAM_MAT3: 11,
PARAM_MAT4: 12,
PARAM_TEXTURE_2D: 13,
PARAM_TEXTURE_CUBE: 14,
CLEAR_COLOR: 1,
CLEAR_DEPTH: 2,
CLEAR_STENCIL: 4
}, X = 6407, Y = 6408, J = [ [ 9728, 9984, 9986 ], [ 9729, 9985, 9987 ] ], Z = [ {
format: X,
internalFormat: 33776,
pixelType: null
}, {
format: Y,
internalFormat: 33777,
pixelType: null
}, {
format: Y,
internalFormat: 33778,
pixelType: null
}, {
format: Y,
internalFormat: 33779,
pixelType: null
}, {
format: X,
internalFormat: 36196,
pixelType: null
}, {
format: X,
internalFormat: 35841,
pixelType: null
}, {
format: Y,
internalFormat: 35843,
pixelType: null
}, {
format: X,
internalFormat: 35840,
pixelType: null
}, {
format: Y,
internalFormat: 35842,
pixelType: null
}, {
format: 6406,
internalFormat: 6406,
pixelType: 5121
}, {
format: 6409,
internalFormat: 6409,
pixelType: 5121
}, {
format: 6410,
internalFormat: 6410,
pixelType: 5121
}, {
format: X,
internalFormat: X,
pixelType: 33635
}, {
format: Y,
internalFormat: Y,
pixelType: 32820
}, {
format: Y,
internalFormat: Y,
pixelType: 32819
}, {
format: X,
internalFormat: X,
pixelType: 5121
}, {
format: Y,
internalFormat: Y,
pixelType: 5121
}, {
format: X,
internalFormat: X,
pixelType: 36193
}, {
format: Y,
internalFormat: Y,
pixelType: 36193
}, {
format: X,
internalFormat: X,
pixelType: 5126
}, {
format: Y,
internalFormat: Y,
pixelType: 5126
}, {
format: null,
internalFormat: null,
pixelType: null
}, {
format: null,
internalFormat: null,
pixelType: null
}, {
format: null,
internalFormat: null,
pixelType: null
}, {
format: null,
internalFormat: null,
pixelType: null
}, {
format: 6402,
internalFormat: 6402,
pixelType: 5123
}, {
format: 6402,
internalFormat: 6402,
pixelType: 5125
}, {
format: null,
internalFormat: null,
pixelType: null
} ], K = {
USAGE_STATIC: 35044,
USAGE_DYNAMIC: 35048,
USAGE_STREAM: 35040,
INDEX_FMT_UINT8: 5121,
INDEX_FMT_UINT16: 5123,
INDEX_FMT_UINT32: 5125,
ATTR_POSITION: "a_position",
ATTR_NORMAL: "a_normal",
ATTR_TANGENT: "a_tangent",
ATTR_BITANGENT: "a_bitangent",
ATTR_WEIGHTS: "a_weights",
ATTR_JOINTS: "a_joints",
ATTR_COLOR: "a_color",
ATTR_COLOR0: "a_color0",
ATTR_COLOR1: "a_color1",
ATTR_UV: "a_uv",
ATTR_UV0: "a_uv0",
ATTR_UV1: "a_uv1",
ATTR_UV2: "a_uv2",
ATTR_UV3: "a_uv3",
ATTR_UV4: "a_uv4",
ATTR_UV5: "a_uv5",
ATTR_UV6: "a_uv6",
ATTR_UV7: "a_uv7",
ATTR_TYPE_INT8: 5120,
ATTR_TYPE_UINT8: 5121,
ATTR_TYPE_INT16: 5122,
ATTR_TYPE_UINT16: 5123,
ATTR_TYPE_INT32: 5124,
ATTR_TYPE_UINT32: 5125,
ATTR_TYPE_FLOAT32: 5126,
FILTER_NEAREST: 0,
FILTER_LINEAR: 1,
WRAP_REPEAT: 10497,
WRAP_CLAMP: 33071,
WRAP_MIRROR: 33648,
TEXTURE_FMT_RGB_DXT1: 0,
TEXTURE_FMT_RGBA_DXT1: 1,
TEXTURE_FMT_RGBA_DXT3: 2,
TEXTURE_FMT_RGBA_DXT5: 3,
TEXTURE_FMT_RGB_ETC1: 4,
TEXTURE_FMT_RGB_PVRTC_2BPPV1: 5,
TEXTURE_FMT_RGBA_PVRTC_2BPPV1: 6,
TEXTURE_FMT_RGB_PVRTC_4BPPV1: 7,
TEXTURE_FMT_RGBA_PVRTC_4BPPV1: 8,
TEXTURE_FMT_A8: 9,
TEXTURE_FMT_L8: 10,
TEXTURE_FMT_L8_A8: 11,
TEXTURE_FMT_R5_G6_B5: 12,
TEXTURE_FMT_R5_G5_B5_A1: 13,
TEXTURE_FMT_R4_G4_B4_A4: 14,
TEXTURE_FMT_RGB8: 15,
TEXTURE_FMT_RGBA8: 16,
TEXTURE_FMT_RGB16F: 17,
TEXTURE_FMT_RGBA16F: 18,
TEXTURE_FMT_RGB32F: 19,
TEXTURE_FMT_RGBA32F: 20,
TEXTURE_FMT_R32F: 21,
TEXTURE_FMT_111110F: 22,
TEXTURE_FMT_SRGB: 23,
TEXTURE_FMT_SRGBA: 24,
TEXTURE_FMT_D16: 25,
TEXTURE_FMT_D32: 26,
TEXTURE_FMT_D24S8: 27,
DS_FUNC_NEVER: 512,
DS_FUNC_LESS: 513,
DS_FUNC_EQUAL: 514,
DS_FUNC_LEQUAL: 515,
DS_FUNC_GREATER: 516,
DS_FUNC_NOTEQUAL: 517,
DS_FUNC_GEQUAL: 518,
DS_FUNC_ALWAYS: 519,
RB_FMT_RGBA4: 32854,
RB_FMT_RGB5_A1: 32855,
RB_FMT_RGB565: 36194,
RB_FMT_D16: 33189,
RB_FMT_S8: 36168,
RB_FMT_D24S8: 34041,
BLEND_FUNC_ADD: 32774,
BLEND_FUNC_SUBTRACT: 32778,
BLEND_FUNC_REVERSE_SUBTRACT: 32779,
BLEND_ZERO: 0,
BLEND_ONE: 1,
BLEND_SRC_COLOR: 768,
BLEND_ONE_MINUS_SRC_COLOR: 769,
BLEND_DST_COLOR: 774,
BLEND_ONE_MINUS_DST_COLOR: 775,
BLEND_SRC_ALPHA: 770,
BLEND_ONE_MINUS_SRC_ALPHA: 771,
BLEND_DST_ALPHA: 772,
BLEND_ONE_MINUS_DST_ALPHA: 773,
BLEND_CONSTANT_COLOR: 32769,
BLEND_ONE_MINUS_CONSTANT_COLOR: 32770,
BLEND_CONSTANT_ALPHA: 32771,
BLEND_ONE_MINUS_CONSTANT_ALPHA: 32772,
BLEND_SRC_ALPHA_SATURATE: 776,
STENCIL_OP_KEEP: 7680,
STENCIL_OP_ZERO: 0,
STENCIL_OP_REPLACE: 7681,
STENCIL_OP_INCR: 7682,
STENCIL_OP_INCR_WRAP: 34055,
STENCIL_OP_DECR: 7683,
STENCIL_OP_DECR_WRAP: 34056,
STENCIL_OP_INVERT: 5386,
CULL_NONE: 0,
CULL_FRONT: 1028,
CULL_BACK: 1029,
CULL_FRONT_AND_BACK: 1032,
PT_POINTS: 0,
PT_LINES: 1,
PT_LINE_LOOP: 2,
PT_LINE_STRIP: 3,
PT_TRIANGLES: 4,
PT_TRIANGLE_STRIP: 5,
PT_TRIANGLE_FAN: 6
};
function Q(t) {
if (t === K.ATTR_TYPE_INT8) return 1;
if (t === K.ATTR_TYPE_UINT8) return 1;
if (t === K.ATTR_TYPE_INT16) return 2;
if (t === K.ATTR_TYPE_UINT16) return 2;
if (t === K.ATTR_TYPE_INT32) return 4;
if (t === K.ATTR_TYPE_UINT32) return 4;
if (t === K.ATTR_TYPE_FLOAT32) return 4;
console.warn("Unknown ATTR_TYPE: " + t);
return 0;
}
function $(t, e, i) {
void 0 === i && (i = -1);
var n = J[e][i + 1];
if (void 0 === n) {
console.warn("Unknown FILTER: " + e);
return -1 === i ? t.LINEAR : t.LINEAR_MIPMAP_LINEAR;
}
return n;
}
function tt(t) {
var e = Z[t];
if (void 0 === e) {
console.warn("Unknown TEXTURE_FMT: " + t);
return Z[K.TEXTURE_FMT_RGBA8];
}
return e;
}
var et = function(t) {
this._attr2el = {};
this._elements = [];
this._bytes = 0;
for (var e = 0, i = 0, n = t.length; i < n; ++i) {
var r = t[i], s = {
name: r.name,
offset: e,
stride: 0,
stream: -1,
type: r.type,
num: r.num,
normalize: void 0 !== r.normalize && r.normalize,
bytes: r.num * Q(r.type)
};
this._attr2el[s.name] = s;
this._elements.push(s);
this._bytes += s.bytes;
e += s.bytes;
}
for (var a = 0, o = this._elements.length; a < o; ++a) {
this._elements[a].stride = this._bytes;
}
};
et.prototype.element = function(t) {
return this._attr2el[t];
};
var it = function(t, e, i, n, r) {
this._device = t;
this._format = e;
this._usage = i;
this._numIndices = r;
this._bytesPerIndex = 0;
e === K.INDEX_FMT_UINT8 ? this._bytesPerIndex = 1 : e === K.INDEX_FMT_UINT16 ? this._bytesPerIndex = 2 : e === K.INDEX_FMT_UINT32 && (this._bytesPerIndex = 4);
this._bytes = this._bytesPerIndex * r;
this._glID = t._gl.createBuffer();
this.update(0, n);
t._stats.ib += this._bytes;
}, nt = {
count: {
configurable: !0
}
};
it.prototype.destroy = function() {
if (-1 !== this._glID) {
this._device._gl.deleteBuffer(this._glID);
this._device._stats.ib -= this.bytes;
this._glID = -1;
} else console.error("The buffer already destroyed");
};
it.prototype.update = function(t, e) {
if (-1 !== this._glID) if (e && e.byteLength + t > this._bytes) console.error("Failed to update data, bytes exceed."); else {
var i = this._device._gl, n = this._usage;
i.bindBuffer(i.ELEMENT_ARRAY_BUFFER, this._glID);
e ? t ? i.bufferSubData(i.ELEMENT_ARRAY_BUFFER, t, e) : i.bufferData(i.ELEMENT_ARRAY_BUFFER, e, n) : this._bytes ? i.bufferData(i.ELEMENT_ARRAY_BUFFER, this._bytes, n) : console.warn("bufferData should not submit 0 bytes data");
this._device._restoreIndexBuffer();
} else console.error("The buffer is destroyed");
};
nt.count.get = function() {
return this._numIndices;
};
Object.defineProperties(it.prototype, nt);
var rt = function(t, e, i, n, r) {
this._device = t;
this._format = e;
this._usage = i;
this._numVertices = r;
this._bytes = this._format._bytes * r;
this._glID = t._gl.createBuffer();
this.update(0, n);
t._stats.vb += this._bytes;
}, st = {
count: {
configurable: !0
}
};
rt.prototype.destroy = function() {
if (-1 !== this._glID) {
this._device._gl.deleteBuffer(this._glID);
this._device._stats.vb -= this.bytes;
this._glID = -1;
} else console.error("The buffer already destroyed");
};
rt.prototype.update = function(t, e) {
if (-1 !== this._glID) if (e && e.byteLength + t > this._bytes) console.error("Failed to update data, bytes exceed."); else {
var i = this._device._gl, n = this._usage;
i.bindBuffer(i.ARRAY_BUFFER, this._glID);
e ? t ? i.bufferSubData(i.ARRAY_BUFFER, t, e) : i.bufferData(i.ARRAY_BUFFER, e, n) : this._bytes ? i.bufferData(i.ARRAY_BUFFER, this._bytes, n) : console.warn("bufferData should not submit 0 bytes data");
i.bindBuffer(i.ARRAY_BUFFER, null);
} else console.error("The buffer is destroyed");
};
st.count.get = function() {
return this._numVertices;
};
Object.defineProperties(rt.prototype, st);
var at = 0;
function ot(t, e, i) {
i.split("\n").forEach((function(i) {
if (!(i.length < 5)) {
var n = /^ERROR\:\s+(\d+)\:(\d+)\:\s*(.*)$/.exec(i);
n ? t.push({
type: e,
fileID: 0 | n[1],
line: 0 | n[2],
message: n[3].trim()
}) : i.length > 0 && t.push({
type: e,
fileID: -1,
line: 0,
message: i
});
}
}));
}
var ht = function(t, e) {
this._device = t;
this._attributes = [];
this._uniforms = [];
this._samplers = [];
this._errors = [];
this._linked = !1;
this._vertSource = e.vert;
this._fragSource = e.frag;
this._glID = null;
this._id = at++;
}, lt = {
id: {
configurable: !0
}
};
lt.id.get = function() {
return this._id;
};
ht.prototype.link = function() {
if (!this._linked) {
var t = this._device._gl, e = ct(t, t.VERTEX_SHADER, this._vertSource), i = ct(t, t.FRAGMENT_SHADER, this._fragSource), n = t.createProgram();
t.attachShader(n, e);
t.attachShader(n, i);
t.linkProgram(n);
var r = !1, s = this._errors;
if (!t.getShaderParameter(e, t.COMPILE_STATUS)) {
ot(s, "vs", t.getShaderInfoLog(e));
r = !0;
}
if (!t.getShaderParameter(i, t.COMPILE_STATUS)) {
ot(s, "fs", t.getShaderInfoLog(i));
r = !0;
}
t.deleteShader(e);
t.deleteShader(i);
if (r) s.forEach((function(t) {
console.error("Failed to compile " + t.type + " " + t.fileID + " (ln " + t.line + "): " + t.message);
})); else {
if (!t.getProgramParameter(n, t.LINK_STATUS)) {
console.error("Failed to link shader program: " + t.getProgramInfoLog(n));
r = !0;
}
if (!r) {
this._glID = n;
for (var a = t.getProgramParameter(n, t.ACTIVE_ATTRIBUTES), o = 0; o < a; ++o) {
var h = t.getActiveAttrib(n, o), l = t.getAttribLocation(n, h.name);
this._attributes.push({
name: h.name,
location: l,
type: h.type
});
}
for (var c = t.getProgramParameter(n, t.ACTIVE_UNIFORMS), u = 0; u < c; ++u) {
var _ = t.getActiveUniform(n, u), m = _.name, f = t.getUniformLocation(n, m), d = "[0]" === m.substr(m.length - 3);
d && (m = m.substr(0, m.length - 3));
this._uniforms.push({
name: m,
location: f,
type: _.type,
size: d ? _.size : void 0
});
}
this._linked = !0;
}
}
}
};
ht.prototype.destroy = function() {
this._device._gl.deleteProgram(this._glID);
this._linked = !1;
this._glID = null;
this._attributes = [];
this._uniforms = [];
this._samplers = [];
};
Object.defineProperties(ht.prototype, lt);
function ct(t, e, i) {
var n = t.createShader(e);
t.shaderSource(n, i);
t.compileShader(n);
return n;
}
var ut = function(t) {
this._device = t;
this._width = 4;
this._height = 4;
this._hasMipmap = !1;
this._compressed = !1;
this._anisotropy = 1;
this._minFilter = K.FILTER_LINEAR;
this._magFilter = K.FILTER_LINEAR;
this._mipFilter = K.FILTER_LINEAR;
this._wrapS = K.WRAP_REPEAT;
this._wrapT = K.WRAP_REPEAT;
this._format = K.TEXTURE_FMT_RGBA8;
this._target = -1;
};
ut.prototype.destroy = function() {
if (-1 !== this._glID) {
this._device._gl.deleteTexture(this._glID);
this._device._stats.tex -= this.bytes;
this._glID = -1;
} else console.error("The texture already destroyed");
};
function _t(t) {
return !(t & t - 1 || !t);
}
var mt = (function(t) {
function e(e, i) {
t.call(this, e);
var n = this._device._gl;
this._target = n.TEXTURE_2D;
this._glID = n.createTexture();
i.images = i.images || [ null ];
this.update(i);
}
t && (e.__proto__ = t);
e.prototype = Object.create(t && t.prototype);
e.prototype.constructor = e;
e.prototype.update = function(t) {
var e = this._device._gl, i = this._hasMipmap;
if (t) {
void 0 !== t.width && (this._width = t.width);
void 0 !== t.height && (this._height = t.height);
void 0 !== t.anisotropy && (this._anisotropy = t.anisotropy);
void 0 !== t.minFilter && (this._minFilter = t.minFilter);
void 0 !== t.magFilter && (this._magFilter = t.magFilter);
void 0 !== t.mipFilter && (this._mipFilter = t.mipFilter);
void 0 !== t.wrapS && (this._wrapS = t.wrapS);
void 0 !== t.wrapT && (this._wrapT = t.wrapT);
if (void 0 !== t.format) {
this._format = t.format;
this._compressed = this._format >= K.TEXTURE_FMT_RGB_DXT1 && this._format <= K.TEXTURE_FMT_RGBA_PVRTC_4BPPV1;
}
if (void 0 !== t.mipmap) {
this._hasMipmap = t.mipmap;
i = t.mipmap;
}
if (void 0 !== t.images && t.images.length > 1) {
i = !1;
(t.width > t.height ? t.width : t.height) >> t.images.length - 1 != 1 && console.error("texture-2d mipmap is invalid, should have a 1x1 mipmap.");
}
}
_t(this._width) && _t(this._height) || (i = !1);
e.activeTexture(e.TEXTURE0);
e.bindTexture(e.TEXTURE_2D, this._glID);
void 0 !== t.images && t.images.length > 0 && this._setMipmap(t.images, t.flipY, t.premultiplyAlpha);
this._setTexInfo();
if (i) {
e.hint(e.GENERATE_MIPMAP_HINT, e.NICEST);
e.generateMipmap(e.TEXTURE_2D);
}
this._device._restoreTexture(0);
};
e.prototype.updateSubImage = function(t) {
var e = this._device._gl, i = tt(this._format);
e.activeTexture(e.TEXTURE0);
e.bindTexture(e.TEXTURE_2D, this._glID);
this._setSubImage(i, t);
this._device._restoreTexture(0);
};
e.prototype.updateImage = function(t) {
var e = this._device._gl, i = tt(this._format);
e.activeTexture(e.TEXTURE0);
e.bindTexture(e.TEXTURE_2D, this._glID);
this._setImage(i, t);
this._device._restoreTexture(0);
};
e.prototype._setSubImage = function(t, e) {
var i = this._device._gl, n = e.flipY, r = e.premultiplyAlpha, s = e.image;
if (s instanceof HTMLCanvasElement || s instanceof HTMLImageElement || s instanceof HTMLVideoElement) {
void 0 === n ? i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL, !0) : i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL, n);
void 0 === r ? i.pixelStorei(i.UNPACK_PREMULTIPLY_ALPHA_WEBGL, !1) : i.pixelStorei(i.UNPACK_PREMULTIPLY_ALPHA_WEBGL, r);
i.texSubImage2D(i.TEXTURE_2D, e.level, e.x, e.y, t.format, t.pixelType, s);
} else {
void 0 === n ? i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL, !1) : i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL, n);
void 0 === r ? i.pixelStorei(i.UNPACK_PREMULTIPLY_ALPHA_WEBGL, !1) : i.pixelStorei(i.UNPACK_PREMULTIPLY_ALPHA_WEBGL, r);
this._compressed ? i.compressedTexSubImage2D(i.TEXTURE_2D, e.level, e.x, e.y, e.width, e.height, t.format, s) : i.texSubImage2D(i.TEXTURE_2D, e.level, e.x, e.y, e.width, e.height, t.format, t.pixelType, s);
}
};
e.prototype._setImage = function(t, e) {
var i = this._device._gl, n = e.flipY, r = e.premultiplyAlpha, s = e.image;
if (s instanceof HTMLCanvasElement || s instanceof HTMLImageElement || s instanceof HTMLVideoElement) {
void 0 === n ? i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL, !0) : i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL, n);
void 0 === r ? i.pixelStorei(i.UNPACK_PREMULTIPLY_ALPHA_WEBGL, !1) : i.pixelStorei(i.UNPACK_PREMULTIPLY_ALPHA_WEBGL, r);
i.texImage2D(i.TEXTURE_2D, e.level, t.internalFormat, t.format, t.pixelType, s);
} else {
void 0 === n ? i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL, !1) : i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL, n);
void 0 === r ? i.pixelStorei(i.UNPACK_PREMULTIPLY_ALPHA_WEBGL, !1) : i.pixelStorei(i.UNPACK_PREMULTIPLY_ALPHA_WEBGL, r);
this._compressed ? i.compressedTexImage2D(i.TEXTURE_2D, e.level, t.internalFormat, e.width, e.height, 0, s) : i.texImage2D(i.TEXTURE_2D, e.level, t.internalFormat, e.width, e.height, 0, t.format, t.pixelType, s);
}
};
e.prototype._setMipmap = function(t, e, i) {
for (var n = tt(this._format), r = {
width: this._width,
height: this._height,
flipY: e,
premultiplyAlpha: i,
level: 0,
image: null
}, s = 0; s < t.length; ++s) {
r.level = s;
r.width = this._width >> s;
r.height = this._height >> s;
r.image = t[s];
this._setImage(n, r);
}
};
e.prototype._setTexInfo = function() {
var t = this._device._gl, e = _t(this._width) && _t(this._height);
if (!e && (this._wrapS !== K.WRAP_CLAMP || this._wrapT !== K.WRAP_CLAMP)) {
console.warn("WebGL1 doesn't support all wrap modes with NPOT textures");
this._wrapS = K.WRAP_CLAMP;
this._wrapT = K.WRAP_CLAMP;
}
var i = this._hasMipmap ? this._mipFilter : -1;
if (!e && -1 !== i) {
console.warn("NPOT textures do not support mipmap filter");
i = -1;
}
t.texParameteri(t.TEXTURE_2D, t.TEXTURE_MIN_FILTER, $(t, this._minFilter, i));
t.texParameteri(t.TEXTURE_2D, t.TEXTURE_MAG_FILTER, $(t, this._magFilter, -1));
t.texParameteri(t.TEXTURE_2D, t.TEXTURE_WRAP_S, this._wrapS);
t.texParameteri(t.TEXTURE_2D, t.TEXTURE_WRAP_T, this._wrapT);
var n = this._device.ext("EXT_texture_filter_anisotropic");
n && t.texParameteri(t.TEXTURE_2D, n.TEXTURE_MAX_ANISOTROPY_EXT, this._anisotropy);
};
return e;
})(ut), ft = (function(t) {
function e(e, i) {
t.call(this, e);
var n = this._device._gl;
this._target = n.TEXTURE_CUBE_MAP;
this._glID = n.createTexture();
this.update(i);
}
t && (e.__proto__ = t);
e.prototype = Object.create(t && t.prototype);
e.prototype.constructor = e;
e.prototype.update = function(t) {
var e = this._device._gl, i = this._hasMipmap;
if (t) {
void 0 !== t.width && (this._width = t.width);
void 0 !== t.height && (this._height = t.height);
void 0 !== t.anisotropy && (this._anisotropy = t.anisotropy);
void 0 !== t.minFilter && (this._minFilter = t.minFilter);
void 0 !== t.magFilter && (this._magFilter = t.magFilter);
void 0 !== t.mipFilter && (this._mipFilter = t.mipFilter);
void 0 !== t.wrapS && (this._wrapS = t.wrapS);
void 0 !== t.wrapT && (this._wrapT = t.wrapT);
if (void 0 !== t.format) {
this._format = t.format;
this._compressed = this._format >= K.TEXTURE_FMT_RGB_DXT1 && this._format <= K.TEXTURE_FMT_RGBA_PVRTC_4BPPV1;
}
if (void 0 !== t.mipmap) {
this._hasMipmap = t.mipmap;
i = t.mipmap;
}
if (void 0 !== t.images && t.images.length > 1) {
i = !1;
t.width !== t.height && console.warn("texture-cube width and height should be identical.");
t.width >> t.images.length - 1 != 1 && console.error("texture-cube mipmap is invalid. please set mipmap as 1x1, 2x2, 4x4 ... nxn");
}
}
_t(this._width) && _t(this._height) || (i = !1);
e.activeTexture(e.TEXTURE0);
e.bindTexture(e.TEXTURE_CUBE_MAP, this._glID);
void 0 !== t.images && t.images.length > 0 && this._setMipmap(t.images, t.flipY, t.premultiplyAlpha);
this._setTexInfo();
if (i) {
e.hint(e.GENERATE_MIPMAP_HINT, e.NICEST);
e.generateMipmap(e.TEXTURE_CUBE_MAP);
}
this._device._restoreTexture(0);
};
e.prototype.updateSubImage = function(t) {
var e = this._device._gl, i = tt(this._format);
e.activeTexture(e.TEXTURE0);
e.bindTexture(e.TEXTURE_CUBE_MAP, this._glID);
this._setSubImage(i, t);
this._device._restoreTexture(0);
};
e.prototype.updateImage = function(t) {
var e = this._device._gl, i = tt(this._format);
e.activeTexture(e.TEXTURE0);
e.bindTexture(e.TEXTURE_CUBE_MAP, this._glID);
this._setImage(i, t);
this._device._restoreTexture(0);
};
e.prototype._setSubImage = function(t, e) {
var i = this._device._gl, n = e.flipY, r = e.premultiplyAlpha, s = e.faceIndex, a = e.image;
void 0 === n ? i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL, !1) : i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL, n);
void 0 === r ? i.pixelStorei(i.UNPACK_PREMULTIPLY_ALPHA_WEBGL, !1) : i.pixelStorei(i.UNPACK_PREMULTIPLY_ALPHA_WEBGL, r);
a instanceof HTMLCanvasElement || a instanceof HTMLImageElement || a instanceof HTMLVideoElement ? i.texSubImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X + s, e.level, e.x, e.y, t.format, t.pixelType, a) : this._compressed ? i.compressedTexSubImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X + s, e.level, e.x, e.y, e.width, e.height, t.format, a) : i.texSubImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X + s, e.level, e.x, e.y, e.width, e.height, t.format, t.pixelType, a);
};
e.prototype._setImage = function(t, e) {
var i = this._device._gl, n = e.flipY, r = e.premultiplyAlpha, s = e.faceIndex, a = e.image;
void 0 === n ? i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL, !1) : i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL, n);
void 0 === r ? i.pixelStorei(i.UNPACK_PREMULTIPLY_ALPHA_WEBGL, !1) : i.pixelStorei(i.UNPACK_PREMULTIPLY_ALPHA_WEBGL, r);
a instanceof HTMLCanvasElement || a instanceof HTMLImageElement || a instanceof HTMLVideoElement ? i.texImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X + s, e.level, t.internalFormat, t.format, t.pixelType, a) : this._compressed ? i.compressedTexImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X + s, e.level, t.internalFormat, e.width, e.height, 0, a) : i.texImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X + s, e.level, t.internalFormat, e.width, e.height, 0, t.format, t.pixelType, a);
};
e.prototype._setMipmap = function(t, e, i) {
for (var n = tt(this._format), r = {
width: this._width,
height: this._height,
faceIndex: 0,
flipY: e,
premultiplyAlpha: i,
level: 0,
image: null
}, s = 0; s < t.length; ++s) {
var a = t[s];
r.level = s;
r.width = this._width >> s;
r.height = this._height >> s;
for (var o = 0; o < 6; ++o) {
r.faceIndex = o;
r.image = a[o];
this._setImage(n, r);
}
}
};
e.prototype._setTexInfo = function() {
var t = this._device._gl, e = _t(this._width) && _t(this._height);
if (!e && (this._wrapS !== K.WRAP_CLAMP || this._wrapT !== K.WRAP_CLAMP)) {
console.warn("WebGL1 doesn't support all wrap modes with NPOT textures");
this._wrapS = K.WRAP_CLAMP;
this._wrapT = K.WRAP_CLAMP;
}
var i = this._hasMipmap ? this._mipFilter : -1;
if (!e && -1 !== i) {
console.warn("NPOT textures do not support mipmap filter");
i = -1;
}
t.texParameteri(t.TEXTURE_CUBE_MAP, t.TEXTURE_MIN_FILTER, $(t, this._minFilter, i));
t.texParameteri(t.TEXTURE_CUBE_MAP, t.TEXTURE_MAG_FILTER, $(t, this._magFilter, -1));
t.texParameteri(t.TEXTURE_CUBE_MAP, t.TEXTURE_WRAP_S, this._wrapS);
t.texParameteri(t.TEXTURE_CUBE_MAP, t.TEXTURE_WRAP_T, this._wrapT);
var n = this._device.ext("EXT_texture_filter_anisotropic");
n && t.texParameteri(t.TEXTURE_CUBE_MAP, n.TEXTURE_MAX_ANISOTROPY_EXT, this._anisotropy);
};
return e;
})(ut), dt = function(t, e, i, n) {
this._device = t;
this._format = e;
this._width = i;
this._height = n;
var r = t._gl;
this._glID = r.createRenderbuffer();
r.bindRenderbuffer(r.RENDERBUFFER, this._glID);
r.renderbufferStorage(r.RENDERBUFFER, e, i, n);
r.bindRenderbuffer(r.RENDERBUFFER, null);
};
dt.prototype.destroy = function() {
if (null !== this._glID) {
var t = this._device._gl;
t.bindRenderbuffer(t.RENDERBUFFER, null);
t.deleteRenderbuffer(this._glID);
this._glID = null;
} else console.error("The render-buffer already destroyed");
};
var pt = function(t, e, i, n) {
this._device = t;
this._width = e;
this._height = i;
this._colors = n.colors || [];
this._depth = n.depth || null;
this._stencil = n.stencil || null;
this._depthStencil = n.depthStencil || null;
this._glID = t._gl.createFramebuffer();
};
pt.prototype.destroy = function() {
if (null !== this._glID) {
this._device._gl.deleteFramebuffer(this._glID);
this._glID = null;
} else console.error("The frame-buffer already destroyed");
};
var gt = {
blend: !1,
blendSep: !1,
blendColor: 4294967295,
blendEq: K.BLEND_FUNC_ADD,
blendAlphaEq: K.BLEND_FUNC_ADD,
blendSrc: K.BLEND_ONE,
blendDst: K.BLEND_ZERO,
blendSrcAlpha: K.BLEND_ONE,
blendDstAlpha: K.BLEND_ZERO,
depthTest: !1,
depthWrite: !1,
depthFunc: K.DS_FUNC_LESS,
stencilTest: !1,
stencilSep: !1,
stencilFuncFront: K.DS_FUNC_ALWAYS,
stencilRefFront: 0,
stencilMaskFront: 255,
stencilFailOpFront: K.STENCIL_OP_KEEP,
stencilZFailOpFront: K.STENCIL_OP_KEEP,
stencilZPassOpFront: K.STENCIL_OP_KEEP,
stencilWriteMaskFront: 255,
stencilFuncBack: K.DS_FUNC_ALWAYS,
stencilRefBack: 0,
stencilMaskBack: 255,
stencilFailOpBack: K.STENCIL_OP_KEEP,
stencilZFailOpBack: K.STENCIL_OP_KEEP,
stencilZPassOpBack: K.STENCIL_OP_KEEP,
stencilWriteMaskBack: 255,
cullMode: K.CULL_BACK,
primitiveType: K.PT_TRIANGLES,
maxStream: -1,
vertexBuffers: [],
vertexBufferOffsets: [],
indexBuffer: null,
maxTextureSlot: -1,
textureUnits: [],
program: null
}, yt = function(t) {
this.vertexBuffers = new Array(t._caps.maxVertexStreams);
this.vertexBufferOffsets = new Array(t._caps.maxVertexStreams);
this.textureUnits = new Array(t._caps.maxTextureUnits);
this.set(gt);
};
yt.initDefault = function(t) {
gt.vertexBuffers = new Array(t._caps.maxVertexStreams);
gt.vertexBufferOffsets = new Array(t._caps.maxVertexStreams);
gt.textureUnits = new Array(t._caps.maxTextureUnits);
};
yt.prototype.reset = function() {
this.set(gt);
};
yt.prototype.set = function(t) {
this.blend = t.blend;
this.blendSep = t.blendSep;
this.blendColor = t.blendColor;
this.blendEq = t.blendEq;
this.blendAlphaEq = t.blendAlphaEq;
this.blendSrc = t.blendSrc;
this.blendDst = t.blendDst;
this.blendSrcAlpha = t.blendSrcAlpha;
this.blendDstAlpha = t.blendDstAlpha;
this.depthTest = t.depthTest;
this.depthWrite = t.depthWrite;
this.depthFunc = t.depthFunc;
this.stencilTest = t.stencilTest;
this.stencilSep = t.stencilSep;
this.stencilFuncFront = t.stencilFuncFront;
this.stencilRefFront = t.stencilRefFront;
this.stencilMaskFront = t.stencilMaskFront;
this.stencilFailOpFront = t.stencilFailOpFront;
this.stencilZFailOpFront = t.stencilZFailOpFront;
this.stencilZPassOpFront = t.stencilZPassOpFront;
this.stencilWriteMaskFront = t.stencilWriteMaskFront;
this.stencilFuncBack = t.stencilFuncBack;
this.stencilRefBack = t.stencilRefBack;
this.stencilMaskBack = t.stencilMaskBack;
this.stencilFailOpBack = t.stencilFailOpBack;
this.stencilZFailOpBack = t.stencilZFailOpBack;
this.stencilZPassOpBack = t.stencilZPassOpBack;
this.stencilWriteMaskBack = t.stencilWriteMaskBack;
this.cullMode = t.cullMode;
this.primitiveType = t.primitiveType;
this.maxStream = t.maxStream;
for (var e = 0; e < t.vertexBuffers.length; ++e) this.vertexBuffers[e] = t.vertexBuffers[e];
for (var i = 0; i < t.vertexBufferOffsets.length; ++i) this.vertexBufferOffsets[i] = t.vertexBufferOffsets[i];
this.indexBuffer = t.indexBuffer;
this.maxTextureSlot = t.maxTextureSlot;
for (var n = 0; n < t.textureUnits.length; ++n) this.textureUnits[n] = t.textureUnits[n];
this.program = t.program;
};
var vt = {
5124: function(t, e, i) {
t.uniform1i(e, i);
},
5126: function(t, e, i) {
t.uniform1f(e, i);
},
35664: function(t, e, i) {
t.uniform2fv(e, i);
},
35665: function(t, e, i) {
t.uniform3fv(e, i);
},
35666: function(t, e, i) {
t.uniform4fv(e, i);
},
35667: function(t, e, i) {
t.uniform2iv(e, i);
},
35668: function(t, e, i) {
t.uniform3iv(e, i);
},
35669: function(t, e, i) {
t.uniform4iv(e, i);
},
35670: function(t, e, i) {
t.uniform1i(e, i);
},
35671: function(t, e, i) {
t.uniform2iv(e, i);
},
35672: function(t, e, i) {
t.uniform3iv(e, i);
},
35673: function(t, e, i) {
t.uniform4iv(e, i);
},
35674: function(t, e, i) {
t.uniformMatrix2fv(e, !1, i);
},
35675: function(t, e, i) {
t.uniformMatrix3fv(e, !1, i);
},
35676: function(t, e, i) {
t.uniformMatrix4fv(e, !1, i);
},
35678: function(t, e, i) {
t.uniform1i(e, i);
},
35680: function(t, e, i) {
t.uniform1i(e, i);
}
}, xt = {
5124: function(t, e, i) {
t.uniform1iv(e, i);
},
5126: function(t, e, i) {
t.uniform1fv(e, i);
},
35664: function(t, e, i) {
t.uniform2fv(e, i);
},
35665: function(t, e, i) {
t.uniform3fv(e, i);
},
35666: function(t, e, i) {
t.uniform4fv(e, i);
},
35667: function(t, e, i) {
t.uniform2iv(e, i);
},
35668: function(t, e, i) {
t.uniform3iv(e, i);
},
35669: function(t, e, i) {
t.uniform4iv(e, i);
},
35670: function(t, e, i) {
t.uniform1iv(e, i);
},
35671: function(t, e, i) {
t.uniform2iv(e, i);
},
35672: function(t, e, i) {
t.uniform3iv(e, i);
},
35673: function(t, e, i) {
t.uniform4iv(e, i);
},
35674: function(t, e, i) {
t.uniformMatrix2fv(e, !1, i);
},
35675: function(t, e, i) {
t.uniformMatrix3fv(e, !1, i);
},
35676: function(t, e, i) {
t.uniformMatrix4fv(e, !1, i);
},
35678: function(t, e, i) {
t.uniform1iv(e, i);
},
35680: function(t, e, i) {
t.uniform1iv(e, i);
}
};
function At(t, e, i, n) {
void 0 === n && (n = 0);
i instanceof mt ? t.framebufferTexture2D(t.FRAMEBUFFER, e, t.TEXTURE_2D, i._glID, 0) : i instanceof ft ? t.framebufferTexture2D(t.FRAMEBUFFER, e, t.TEXTURE_CUBE_MAP_POSITIVE_X + n, i._glID, 0) : t.framebufferRenderbuffer(t.FRAMEBUFFER, e, t.RENDERBUFFER, i._glID);
}
var bt = function(t, e) {
var i;
void 0 === (e = e || {}).alpha && (e.alpha = !1);
void 0 === e.stencil && (e.stencil = !0);
void 0 === e.depth && (e.depth = !0);
void 0 === e.antialias && (e.antialias = !1);
void 0 === e.preserveDrawingBuffer && (e.preserveDrawingBuffer = !1);
try {
i = t.getContext("webgl", e);
} catch (t) {
console.error(t);
return;
}
this._gl = i;
this._extensions = {};
this._caps = {};
this._stats = {
texture: 0,
vb: 0,
ib: 0,
drawcalls: 0
};
this._initExtensions([ "EXT_texture_filter_anisotropic", "EXT_shader_texture_lod", "OES_standard_derivatives", "OES_texture_float", "OES_texture_float_linear", "OES_texture_half_float", "OES_texture_half_float_linear", "OES_vertex_array_object", "WEBGL_compressed_texture_atc", "WEBGL_compressed_texture_etc1", "WEBGL_compressed_texture_pvrtc", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture", "WEBGL_draw_buffers" ]);
this._initCaps();
this._initStates();
yt.initDefault(this);
this._current = new yt(this);
this._next = new yt(this);
this._uniforms = {};
this._vx = this._vy = this._vw = this._vh = 0;
this._sx = this._sy = this._sw = this._sh = 0;
this._framebuffer = null;
this._enabledAttributes = new Array(this._caps.maxVertexAttribs);
this._newAttributes = new Array(this._caps.maxVertexAttribs);
for (var n = 0; n < this._caps.maxVertexAttribs; ++n) {
this._enabledAttributes[n] = 0;
this._newAttributes[n] = 0;
}
};
bt.prototype._initExtensions = function(t) {
for (var e = this._gl, i = 0; i < t.length; ++i) {
var n = t[i];
try {
var r = e.getExtension(n);
r && (this._extensions[n] = r);
} catch (t) {
console.error(t);
}
}
};
bt.prototype._initCaps = function() {
var t = this._gl, e = this.ext("WEBGL_draw_buffers");
this._caps.maxVertexStreams = 4;
this._caps.maxVertexTextures = t.getParameter(t.MAX_VERTEX_TEXTURE_IMAGE_UNITS);
this._caps.maxFragUniforms = t.getParameter(t.MAX_FRAGMENT_UNIFORM_VECTORS);
this._caps.maxTextureUnits = t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS);
this._caps.maxVertexAttribs = t.getParameter(t.MAX_VERTEX_ATTRIBS);
this._caps.maxDrawBuffers = e ? t.getParameter(e.MAX_DRAW_BUFFERS_WEBGL) : 1;
this._caps.maxColorAttachments = e ? t.getParameter(e.MAX_COLOR_ATTACHMENTS_WEBGL) : 1;
};
bt.prototype._initStates = function() {
var t = this._gl;
t.disable(t.BLEND);
t.blendFunc(t.ONE, t.ZERO);
t.blendEquation(t.FUNC_ADD);
t.blendColor(1, 1, 1, 1);
t.colorMask(!0, !0, !0, !0);
t.enable(t.CULL_FACE);
t.cullFace(t.BACK);
t.disable(t.DEPTH_TEST);
t.depthFunc(t.LESS);
t.depthMask(!1);
t.disable(t.POLYGON_OFFSET_FILL);
t.depthRange(0, 1);
t.disable(t.STENCIL_TEST);
t.stencilFunc(t.ALWAYS, 0, 255);
t.stencilMask(255);
t.stencilOp(t.KEEP, t.KEEP, t.KEEP);
t.clearDepth(1);
t.clearColor(0, 0, 0, 0);
t.clearStencil(0);
t.disable(t.SCISSOR_TEST);
};
bt.prototype._restoreTexture = function(t) {
var e = this._gl, i = this._current.textureUnits[t];
i && -1 !== i._glID ? e.bindTexture(i._target, i._glID) : e.bindTexture(e.TEXTURE_2D, null);
};
bt.prototype._restoreIndexBuffer = function() {
var t = this._gl, e = this._current.indexBuffer;
t.bindBuffer(t.ELEMENT_ARRAY_BUFFER, e ? e._glID : null);
};
bt.prototype.ext = function(t) {
return this._extensions[t];
};
bt.prototype.setFrameBuffer = function(t) {
if (this._framebuffer !== t) {
this._framebuffer = t;
var e = this._gl;
if (null !== t) {
e.bindFramebuffer(e.FRAMEBUFFER, t._glID);
for (var i = this._framebuffer._colors.length, n = 0; n < i; ++n) {
var r = this._framebuffer._colors[n];
At(e, e.COLOR_ATTACHMENT0 + n, r);
}
for (var s = i; s < this._caps.maxColorAttachments; ++s) e.framebufferTexture2D(e.FRAMEBUFFER, e.COLOR_ATTACHMENT0 + s, e.TEXTURE_2D, null, 0);
this._framebuffer._depth && At(e, e.DEPTH_ATTACHMENT, this._framebuffer._depth);
this._framebuffer._stencil && At(e, e.STENCIL_ATTACHMENT, t._stencil);
this._framebuffer._depthStencil && At(e, e.DEPTH_STENCIL_ATTACHMENT, t._depthStencil);
} else e.bindFramebuffer(e.FRAMEBUFFER, null);
}
};
bt.prototype.setViewport = function(t, e, i, n) {
if (this._vx !== t || this._vy !== e || this._vw !== i || this._vh !== n) {
this._gl.viewport(t, e, i, n);
this._vx = t;
this._vy = e;
this._vw = i;
this._vh = n;
}
};
bt.prototype.setScissor = function(t, e, i, n) {
if (this._sx !== t || this._sy !== e || this._sw !== i || this._sh !== n) {
this._gl.scissor(t, e, i, n);
this._sx = t;
this._sy = e;
this._sw = i;
this._sh = n;
}
};
bt.prototype.clear = function(t) {
var e = this._gl, i = 0;
if (void 0 !== t.color) {
i |= e.COLOR_BUFFER_BIT;
e.clearColor(t.color[0], t.color[1], t.color[2], t.color[3]);
}
if (void 0 !== t.depth) {
i |= e.DEPTH_BUFFER_BIT;
e.clearDepth(t.depth);
e.enable(e.DEPTH_TEST);
e.depthMask(!0);
e.depthFunc(e.ALWAYS);
}
if (void 0 !== t.stencil) {
i |= e.STENCIL_BUFFER_BIT;
e.clearStencil(t.stencil);
}
e.clear(i);
if (void 0 !== t.depth) if (!1 === this._current.depthTest) e.disable(e.DEPTH_TEST); else {
!1 === this._current.depthWrite && e.depthMask(!1);
this._current.depthFunc !== K.DS_FUNC_ALWAYS && e.depthFunc(this._current.depthFunc);
}
};
bt.prototype.enableBlend = function() {
this._next.blend = !0;
};
bt.prototype.enableDepthTest = function() {
this._next.depthTest = !0;
};
bt.prototype.enableDepthWrite = function() {
this._next.depthWrite = !0;
};
bt.prototype.enableStencilTest = function() {
this._next.stencilTest = !0;
};
bt.prototype.setStencilFunc = function(t, e, i) {
this._next.stencilSep = !1;
this._next.stencilFuncFront = this._next.stencilFuncBack = t;
this._next.stencilRefFront = this._next.stencilRefBack = e;
this._next.stencilMaskFront = this._next.stencilMaskBack = i;
};
bt.prototype.setStencilFuncFront = function(t, e, i) {
this._next.stencilSep = !0;
this._next.stencilFuncFront = t;
this._next.stencilRefFront = e;
this._next.stencilMaskFront = i;
};
bt.prototype.setStencilFuncBack = function(t, e, i) {
this._next.stencilSep = !0;
this._next.stencilFuncBack = t;
this._next.stencilRefBack = e;
this._next.stencilMaskBack = i;
};
bt.prototype.setStencilOp = function(t, e, i, n) {
this._next.stencilFailOpFront = this._next.stencilFailOpBack = t;
this._next.stencilZFailOpFront = this._next.stencilZFailOpBack = e;
this._next.stencilZPassOpFront = this._next.stencilZPassOpBack = i;
this._next.stencilWriteMaskFront = this._next.stencilWriteMaskBack = n;
};
bt.prototype.setStencilOpFront = function(t, e, i, n) {
this._next.stencilSep = !0;
this._next.stencilFailOpFront = t;
this._next.stencilZFailOpFront = e;
this._next.stencilZPassOpFront = i;
this._next.stencilWriteMaskFront = n;
};
bt.prototype.setStencilOpBack = function(t, e, i, n) {
this._next.stencilSep = !0;
this._next.stencilFailOpBack = t;
this._next.stencilZFailOpBack = e;
this._next.stencilZPassOpBack = i;
this._next.stencilWriteMaskBack = n;
};
bt.prototype.setDepthFunc = function(t) {
this._next.depthFunc = t;
};
bt.prototype.setBlendColor32 = function(t) {
this._next.blendColor = t;
};
bt.prototype.setBlendColor = function(t, e, i, n) {
this._next.blendColor = (255 * t << 24 | 255 * e << 16 | 255 * i << 8 | 255 * n) >>> 0;
};
bt.prototype.setBlendFunc = function(t, e) {
this._next.blendSep = !1;
this._next.blendSrc = t;
this._next.blendDst = e;
};
bt.prototype.setBlendFuncSep = function(t, e, i, n) {
this._next.blendSep = !0;
this._next.blendSrc = t;
this._next.blendDst = e;
this._next.blendSrcAlpha = i;
this._next.blendDstAlpha = n;
};
bt.prototype.setBlendEq = function(t) {
this._next.blendSep = !1;
this._next.blendEq = t;
};
bt.prototype.setBlendEqSep = function(t, e) {
this._next.blendSep = !0;
this._next.blendEq = t;
this._next.blendAlphaEq = e;
};
bt.prototype.setCullMode = function(t) {
this._next.cullMode = t;
};
bt.prototype.setVertexBuffer = function(t, e, i) {
void 0 === i && (i = 0);
this._next.vertexBuffers[t] = e;
this._next.vertexBufferOffsets[t] = i;
this._next.maxStream < t && (this._next.maxStream = t);
};
bt.prototype.setIndexBuffer = function(t) {
this._next.indexBuffer = t;
};
bt.prototype.setProgram = function(t) {
this._next.program = t;
};
bt.prototype.setTexture = function(t, e, i) {
if (i >= this._caps.maxTextureUnits) console.warn("Can not set texture " + t + " at stage " + i + ", max texture exceed: " + this._caps.maxTextureUnits); else {
this._next.textureUnits[i] = e;
this.setUniform(t, i);
this._next.maxTextureSlot < i && (this._next.maxTextureSlot = i);
}
};
bt.prototype.setTextureArray = function(t, e, i) {
var n = e.length;
if (n >= this._caps.maxTextureUnits) console.warn("Can not set " + n + " textures for " + t + ", max texture exceed: " + this._caps.maxTextureUnits); else {
for (var r = 0; r < n; ++r) {
var s = i[r];
this._next.textureUnits[s] = e[r];
}
this.setUniform(t, i);
}
};
bt.prototype.setUniform = function(t, e) {
var i = this._uniforms[t];
if (i) {
var n = i.value, r = !1;
if (i.isArray) {
for (var s = 0, a = n.length; s < a; s++) if (n[s] !== e[s]) {
r = !0;
n[s] = e[s];
}
} else if (n !== e) {
r = !0;
i.value = e;
}
r && (i.dirty = !0);
} else {
var o = e, h = !1;
if (e instanceof Float32Array || Array.isArray(e)) {
o = new Float32Array(e);
h = !0;
} else if (e instanceof Int32Array) {
o = new Int32Array(e);
h = !0;
}
i = {
dirty: !0,
value: o,
isArray: h
};
}
this._uniforms[t] = i;
};
bt.prototype.setPrimitiveType = function(t) {
this._next.primitiveType = t;
};
bt.prototype.draw = function(t, e) {
var i = this._gl, n = this._current, r = this._next;
(function(t, e, i) {
if (e.blend === i.blend) {
if (!1 !== i.blend) {
e.blendColor !== i.blendColor && t.blendColor((i.blendColor >> 24) / 255, (i.blendColor >> 16 & 255) / 255, (i.blendColor >> 8 & 255) / 255, (255 & i.blendColor) / 255);
if (e.blendSep === i.blendSep) if (i.blendSep) {
e.blendSrc === i.blendSrc && e.blendDst === i.blendDst && e.blendSrcAlpha === i.blendSrcAlpha && e.blendDstAlpha === i.blendDstAlpha || t.blendFuncSeparate(i.blendSrc, i.blendDst, i.blendSrcAlpha, i.blendDstAlpha);
e.blendEq === i.blendEq && e.blendAlphaEq === i.blendAlphaEq || t.blendEquationSeparate(i.blendEq, i.blendAlphaEq);
} else {
e.blendSrc === i.blendSrc && e.blendDst === i.blendDst || t.blendFunc(i.blendSrc, i.blendDst);
e.blendEq !== i.blendEq && t.blendEquation(i.blendEq);
} else if (i.blendSep) {
t.blendFuncSeparate(i.blendSrc, i.blendDst, i.blendSrcAlpha, i.blendDstAlpha);
t.blendEquationSeparate(i.blendEq, i.blendAlphaEq);
} else {
t.blendFunc(i.blendSrc, i.blendDst);
t.blendEquation(i.blendEq);
}
}
} else {
if (!i.blend) {
t.disable(t.BLEND);
return;
}
t.enable(t.BLEND);
i.blendSrc !== K.BLEND_CONSTANT_COLOR && i.blendSrc !== K.BLEND_ONE_MINUS_CONSTANT_COLOR && i.blendDst !== K.BLEND_CONSTANT_COLOR && i.blendDst !== K.BLEND_ONE_MINUS_CONSTANT_COLOR || t.blendColor((i.blendColor >> 24) / 255, (i.blendColor >> 16 & 255) / 255, (i.blendColor >> 8 & 255) / 255, (255 & i.blendColor) / 255);
if (i.blendSep) {
t.blendFuncSeparate(i.blendSrc, i.blendDst, i.blendSrcAlpha, i.blendDstAlpha);
t.blendEquationSeparate(i.blendEq, i.blendAlphaEq);
} else {
t.blendFunc(i.blendSrc, i.blendDst);
t.blendEquation(i.blendEq);
}
}
})(i, n, r);
(function(t, e, i) {
if (e.depthTest === i.depthTest) {
e.depthWrite !== i.depthWrite && t.depthMask(i.depthWrite);
if (!1 !== i.depthTest) e.depthFunc !== i.depthFunc && t.depthFunc(i.depthFunc); else if (i.depthWrite) {
i.depthTest = !0;
i.depthFunc = K.DS_FUNC_ALWAYS;
t.enable(t.DEPTH_TEST);
t.depthFunc(i.depthFunc);
}
} else {
if (!i.depthTest) {
t.disable(t.DEPTH_TEST);
return;
}
t.enable(t.DEPTH_TEST);
t.depthFunc(i.depthFunc);
t.depthMask(i.depthWrite);
}
})(i, n, r);
(function(t, e, i) {
if (i.stencilTest === e.stencilTest) {
if (i.stencilTest) if (e.stencilSep === i.stencilSep) if (i.stencilSep) {
e.stencilFuncFront === i.stencilFuncFront && e.stencilRefFront === i.stencilRefFront && e.stencilMaskFront === i.stencilMaskFront || t.stencilFuncSeparate(t.FRONT, i.stencilFuncFront, i.stencilRefFront, i.stencilMaskFront);
e.stencilWriteMaskFront !== i.stencilWriteMaskFront && t.stencilMaskSeparate(t.FRONT, i.stencilWriteMaskFront);
e.stencilFailOpFront === i.stencilFailOpFront && e.stencilZFailOpFront === i.stencilZFailOpFront && e.stencilZPassOpFront === i.stencilZPassOpFront || t.stencilOpSeparate(t.FRONT, i.stencilFailOpFront, i.stencilZFailOpFront, i.stencilZPassOpFront);
e.stencilFuncBack === i.stencilFuncBack && e.stencilRefBack === i.stencilRefBack && e.stencilMaskBack === i.stencilMaskBack || t.stencilFuncSeparate(t.BACK, i.stencilFuncBack, i.stencilRefBack, i.stencilMaskBack);
e.stencilWriteMaskBack !== i.stencilWriteMaskBack && t.stencilMaskSeparate(t.BACK, i.stencilWriteMaskBack);
e.stencilFailOpBack === i.stencilFailOpBack && e.stencilZFailOpBack === i.stencilZFailOpBack && e.stencilZPassOpBack === i.stencilZPassOpBack || t.stencilOpSeparate(t.BACK, i.stencilFailOpBack, i.stencilZFailOpBack, i.stencilZPassOpBack);
} else {
e.stencilFuncFront === i.stencilFuncFront && e.stencilRefFront === i.stencilRefFront && e.stencilMaskFront === i.stencilMaskFront || t.stencilFunc(i.stencilFuncFront, i.stencilRefFront, i.stencilMaskFront);
e.stencilWriteMaskFront !== i.stencilWriteMaskFront && t.stencilMask(i.stencilWriteMaskFront);
e.stencilFailOpFront === i.stencilFailOpFront && e.stencilZFailOpFront === i.stencilZFailOpFront && e.stencilZPassOpFront === i.stencilZPassOpFront || t.stencilOp(i.stencilFailOpFront, i.stencilZFailOpFront, i.stencilZPassOpFront);
} else if (i.stencilSep) {
t.stencilFuncSeparate(t.FRONT, i.stencilFuncFront, i.stencilRefFront, i.stencilMaskFront);
t.stencilMaskSeparate(t.FRONT, i.stencilWriteMaskFront);
t.stencilOpSeparate(t.FRONT, i.stencilFailOpFront, i.stencilZFailOpFront, i.stencilZPassOpFront);
t.stencilFuncSeparate(t.BACK, i.stencilFuncBack, i.stencilRefBack, i.stencilMaskBack);
t.stencilMaskSeparate(t.BACK, i.stencilWriteMaskBack);
t.stencilOpSeparate(t.BACK, i.stencilFailOpBack, i.stencilZFailOpBack, i.stencilZPassOpBack);
} else {
t.stencilFunc(i.stencilFuncFront, i.stencilRefFront, i.stencilMaskFront);
t.stencilMask(i.stencilWriteMaskFront);
t.stencilOp(i.stencilFailOpFront, i.stencilZFailOpFront, i.stencilZPassOpFront);
}
} else {
if (!i.stencilTest) {
t.disable(t.STENCIL_TEST);
return;
}
t.enable(t.STENCIL_TEST);
if (i.stencilSep) {
t.stencilFuncSeparate(t.FRONT, i.stencilFuncFront, i.stencilRefFront, i.stencilMaskFront);
t.stencilMaskSeparate(t.FRONT, i.stencilWriteMaskFront);
t.stencilOpSeparate(t.FRONT, i.stencilFailOpFront, i.stencilZFailOpFront, i.stencilZPassOpFront);
t.stencilFuncSeparate(t.BACK, i.stencilFuncBack, i.stencilRefBack, i.stencilMaskBack);
t.stencilMaskSeparate(t.BACK, i.stencilWriteMaskBack);
t.stencilOpSeparate(t.BACK, i.stencilFailOpBack, i.stencilZFailOpBack, i.stencilZPassOpBack);
} else {
t.stencilFunc(i.stencilFuncFront, i.stencilRefFront, i.stencilMaskFront);
t.stencilMask(i.stencilWriteMaskFront);
t.stencilOp(i.stencilFailOpFront, i.stencilZFailOpFront, i.stencilZPassOpFront);
}
}
})(i, n, r);
(function(t, e, i) {
if (e.cullMode !== i.cullMode) if (i.cullMode !== K.CULL_NONE) {
t.enable(t.CULL_FACE);
t.cullFace(i.cullMode);
} else t.disable(t.CULL_FACE);
})(i, n, r);
(function(t, e, i, n) {
var r = !1;
if (-1 !== n.maxStream) {
if (i.maxStream !== n.maxStream) r = !0; else if (i.program !== n.program) r = !0; else for (var s = 0; s < n.maxStream + 1; ++s) if (i.vertexBuffers[s] !== n.vertexBuffers[s] || i.vertexBufferOffsets[s] !== n.vertexBufferOffsets[s]) {
r = !0;
break;
}
if (r) {
for (var a = 0; a < t._caps.maxVertexAttribs; ++a) t._newAttributes[a] = 0;
for (var o = 0; o < n.maxStream + 1; ++o) {
var h = n.vertexBuffers[o], l = n.vertexBufferOffsets[o];
if (h) {
e.bindBuffer(e.ARRAY_BUFFER, h._glID);
for (var c = 0; c < n.program._attributes.length; ++c) {
var u = n.program._attributes[c], _ = h._format.element(u.name);
if (_) {
if (0 === t._enabledAttributes[u.location]) {
e.enableVertexAttribArray(u.location);
t._enabledAttributes[u.location] = 1;
}
t._newAttributes[u.location] = 1;
e.vertexAttribPointer(u.location, _.num, _.type, _.normalize, _.stride, _.offset + l * _.stride);
} else console.warn("Can not find vertex attribute: " + u.name);
}
}
}
for (var m = 0; m < t._caps.maxVertexAttribs; ++m) if (t._enabledAttributes[m] !== t._newAttributes[m]) {
e.disableVertexAttribArray(m);
t._enabledAttributes[m] = 0;
}
}
} else console.warn("VertexBuffer not assigned, please call setVertexBuffer before every draw.");
})(this, i, n, r);
n.indexBuffer !== r.indexBuffer && i.bindBuffer(i.ELEMENT_ARRAY_BUFFER, r.indexBuffer ? r.indexBuffer._glID : null);
var s = !1;
if (n.program !== r.program) {
r.program._linked ? i.useProgram(r.program._glID) : console.warn("Failed to use program: has not linked yet.");
s = !0;
}
(function(t, e, i) {
for (var n = 0; n < i.maxTextureSlot + 1; ++n) if (e.textureUnits[n] !== i.textureUnits[n]) {
var r = i.textureUnits[n];
if (void 0 !== r && -1 !== r._glID) {
t.activeTexture(t.TEXTURE0 + n);
t.bindTexture(r._target, r._glID);
}
}
})(i, n, r);
for (var a = 0; a < r.program._uniforms.length; ++a) {
var o = r.program._uniforms[a], h = this._uniforms[o.name];
if (h && (s || h.dirty)) {
h.dirty = !1;
var l = void 0 === o.size ? vt[o.type] : xt[o.type];
l ? l(i, o.location, h.value) : console.warn("Can not find commit function for uniform " + o.name);
}
}
r.indexBuffer ? i.drawElements(this._next.primitiveType, e, r.indexBuffer._format, t * r.indexBuffer._bytesPerIndex) : i.drawArrays(this._next.primitiveType, t, e);
this._stats.drawcalls += 1;
n.set(r);
r.reset();
};
var Tt = {
VertexFormat: et,
IndexBuffer: it,
VertexBuffer: rt,
Program: ht,
Texture: ut,
Texture2D: mt,
TextureCube: ft,
RenderBuffer: dt,
FrameBuffer: pt,
Device: bt,
attrTypeBytes: Q,
glFilter: $,
glTextureFmt: tt
};
Object.assign(Tt, K);
var Ct = function(t, e, i) {
void 0 === i && (i = Tt.PT_TRIANGLES);
this._vertexBuffer = t;
this._indexBuffer = e;
this._primitiveType = i;
this._start = 0;
this._count = -1;
};
Ct.prototype.getPrimitiveCount = function() {
return -1 !== this._count ? this._count : this._indexBuffer ? this._indexBuffer.count : this._vertexBuffer.count;
};
var wt = function(t) {
this._programName = t;
this._cullMode = Tt.CULL_BACK;
this._blend = !1;
this._blendEq = Tt.BLEND_FUNC_ADD;
this._blendAlphaEq = Tt.BLEND_FUNC_ADD;
this._blendSrc = Tt.BLEND_ONE;
this._blendDst = Tt.BLEND_ZERO;
this._blendSrcAlpha = Tt.BLEND_ONE;
this._blendDstAlpha = Tt.BLEND_ZERO;
this._blendColor = 4294967295;
this._depthTest = !1;
this._depthWrite = !1;
this._depthFunc = Tt.DS_FUNC_LESS, this._stencilTest = !1;
this._stencilFuncFront = Tt.DS_FUNC_ALWAYS;
this._stencilRefFront = 0;
this._stencilMaskFront = 255;
this._stencilFailOpFront = Tt.STENCIL_OP_KEEP;
this._stencilZFailOpFront = Tt.STENCIL_OP_KEEP;
this._stencilZPassOpFront = Tt.STENCIL_OP_KEEP;
this._stencilWriteMaskFront = 255;
this._stencilFuncBack = Tt.DS_FUNC_ALWAYS;
this._stencilRefBack = 0;
this._stencilMaskBack = 255;
this._stencilFailOpBack = Tt.STENCIL_OP_KEEP;
this._stencilZFailOpBack = Tt.STENCIL_OP_KEEP;
this._stencilZPassOpBack = Tt.STENCIL_OP_KEEP;
this._stencilWriteMaskBack = 255;
};
wt.prototype.setCullMode = function(t) {
this._cullMode = t;
};
wt.prototype.setBlend = function(t, e, i, n, r, s, a) {
void 0 === t && (t = Tt.BLEND_FUNC_ADD);
void 0 === e && (e = Tt.BLEND_ONE);
void 0 === i && (i = Tt.BLEND_ZERO);
void 0 === n && (n = Tt.BLEND_FUNC_ADD);
void 0 === r && (r = Tt.BLEND_ONE);
void 0 === s && (s = Tt.BLEND_ZERO);
void 0 === a && (a = 4294967295);
this._blend = !0;
this._blendEq = t;
this._blendSrc = e;
this._blendDst = i;
this._blendAlphaEq = n;
this._blendSrcAlpha = r;
this._blendDstAlpha = s;
this._blendColor = a;
};
wt.prototype.setDepth = function(t, e, i) {
void 0 === t && (t = !1);
void 0 === e && (e = !1);
void 0 === i && (i = Tt.DS_FUNC_LESS);
this._depthTest = t;
this._depthWrite = e;
this._depthFunc = i;
};
wt.prototype.setStencilFront = function(t, e, i, n, r, s, a) {
void 0 === t && (t = Tt.DS_FUNC_ALWAYS);
void 0 === e && (e = 0);
void 0 === i && (i = 255);
void 0 === n && (n = Tt.STENCIL_OP_KEEP);
void 0 === r && (r = Tt.STENCIL_OP_KEEP);
void 0 === s && (s = Tt.STENCIL_OP_KEEP);
void 0 === a && (a = 255);
this._stencilTest = !0;
this._stencilFuncFront = t;
this._stencilRefFront = e;
this._stencilMaskFront = i;
this._stencilFailOpFront = n;
this._stencilZFailOpFront = r;
this._stencilZPassOpFront = s;
this._stencilWriteMaskFront = a;
};
wt.prototype.setStencilBack = function(t, e, i, n, r, s, a) {
void 0 === t && (t = Tt.DS_FUNC_ALWAYS);
void 0 === e && (e = 0);
void 0 === i && (i = 255);
void 0 === n && (n = Tt.STENCIL_OP_KEEP);
void 0 === r && (r = Tt.STENCIL_OP_KEEP);
void 0 === s && (s = Tt.STENCIL_OP_KEEP);
void 0 === a && (a = 255);
this._stencilTest = !0;
this._stencilFuncBack = t;
this._stencilRefBack = e;
this._stencilMaskBack = i;
this._stencilFailOpBack = n;
this._stencilZFailOpBack = r;
this._stencilZPassOpBack = s;
this._stencilWriteMaskBack = a;
};
wt.prototype.disableStencilTest = function() {
this._stencilTest = !1;
};
var St = 0, Et = {}, Dt = {
addStage: function(t) {
if (void 0 === Et[t]) {
var e = 1 << St;
Et[t] = e;
St += 1;
}
},
stageID: function(t) {
var e = Et[t];
return void 0 === e ? -1 : e;
},
stageIDs: function(t) {
for (var e = 0, i = 0; i < t.length; ++i) {
var n = Et[t[i]];
void 0 !== n && (e |= n);
}
return e;
}
}, Mt = 0, It = function(t, e, i, n) {
void 0 === n && (n = 0);
this._id = Mt++;
this._stageIDs = Dt.stageIDs(t);
this._parameters = e;
this._passes = i;
this._layer = n;
}, Pt = {
passes: {
configurable: !0
},
stageIDs: {
configurable: !0
}
};
It.prototype.setStages = function(t) {
this._stageIDs = Dt.stageIDs(t);
};
Pt.passes.get = function() {
return this._passes;
};
Pt.stageIDs.get = function() {
return this._stageIDs;
};
Object.defineProperties(It.prototype, Pt);
var Bt = function(t, e, i) {
void 0 === e && (e = {});
void 0 === i && (i = []);
this._techniques = t;
this._properties = e;
this._defines = i;
};
Bt.prototype.clear = function() {
this._techniques.length = 0;
this._properties = null;
this._defines.length = 0;
};
Bt.prototype.getTechnique = function(t) {
for (var e = Dt.stageID(t), i = 0; i < this._techniques.length; ++i) {
var n = this._techniques[i];
if (n.stageIDs & e) return n;
}
return null;
};
Bt.prototype.getProperty = function(t) {
return this._properties[t];
};
Bt.prototype.setProperty = function(t, e) {
this._properties[t] = e;
};
Bt.prototype.getDefine = function(t) {
for (var e = 0; e < this._defines.length; ++e) {
var i = this._defines[e];
if (i.name === t) return i.value;
}
console.warn("Failed to get define " + t + ", define not found.");
return null;
};
Bt.prototype.define = function(t, e) {
for (var i = 0; i < this._defines.length; ++i) {
var n = this._defines[i];
if (n.name === t) {
n.value = e;
return;
}
}
console.warn("Failed to set define " + t + ", define not found.");
};
Bt.prototype.extractDefines = function(t) {
void 0 === t && (t = {});
for (var e = 0; e < this._defines.length; ++e) {
var i = this._defines[e];
t[i.name] = i.value;
}
return t;
};
var Rt = N.create(), Lt = 0, Ot = function() {
this._id = Lt++;
this._rect = {
x: 0,
y: 0,
w: 1,
h: 1
};
this._color = j.new(.3, .3, .3, 1);
this._depth = 1;
this._stencil = 1;
this._clearFlags = q.CLEAR_COLOR | q.CLEAR_DEPTH;
this._matView = N.create();
this._matProj = N.create();
this._matViewProj = N.create();
this._matInvViewProj = N.create();
this._stages = [];
this._cullingMask = 1;
this._framebuffer = null;
this._shadowLight = null;
};
Ot.prototype.getForward = function(t) {
return v.set(t, -this._matView.m02, -this._matView.m06, -this._matView.m10);
};
Ot.prototype.getPosition = function(t) {
N.invert(Rt, this._matView);
return N.getTranslation(t, Rt);
};
var Ft = v.new(0, 0, -1), Nt = N.create(), kt = w.create(), zt = v.create();
var Gt = function() {
this._poolID = -1;
this._node = null;
this._type = q.LIGHT_DIRECTIONAL;
this._color = G.new(1, 1, 1);
this._intensity = 1;
this._range = 1;
this._spotAngle = a(60);
this._spotExp = 1;
this._directionUniform = new Float32Array(3);
this._positionUniform = new Float32Array(3);
this._colorUniform = new Float32Array([ this._color.r * this._intensity, this._color.g * this._intensity, this._color.b * this._intensity ]);
this._spotUniform = new Float32Array([ Math.cos(.5 * this._spotAngle), this._spotExp ]);
this._shadowType = q.SHADOW_NONE;
this._shadowFrameBuffer = null;
this._shadowMap = null;
this._shadowMapDirty = !1;
this._shadowDepthBuffer = null;
this._shadowResolution = 1024;
this._shadowBias = 5e-5;
this._shadowDarkness = 1;
this._shadowMinDepth = 1;
this._shadowMaxDepth = 1e3;
this._shadowDepthScale = 50;
this._frustumEdgeFalloff = 0;
this._viewProjMatrix = N.create();
this._spotAngleScale = 1;
this._shadowFustumSize = 80;
}, Ut = {
color: {
configurable: !0
},
intensity: {
configurable: !0
},
type: {
configurable: !0
},
spotAngle: {
configurable: !0
},
spotExp: {
configurable: !0
},
range: {
configurable: !0
},
shadowType: {
configurable: !0
},
shadowMap: {
configurable: !0
},
viewProjMatrix: {
configurable: !0
},
shadowResolution: {
configurable: !0
},
shadowBias: {
configurable: !0
},
shadowDarkness: {
configurable: !0
},
shadowMinDepth: {
configurable: !0
},
shadowMaxDepth: {
configurable: !0
},
shadowDepthScale: {
configurable: !0
},
frustumEdgeFalloff: {
configurable: !0
}
};
Gt.prototype.setNode = function(t) {
this._node = t;
};
Gt.prototype.setColor = function(t, e, i) {
G.set(this._color, t, e, i);
this._colorUniform[0] = t * this._intensity;
this._colorUniform[1] = e * this._intensity;
this._colorUniform[2] = i * this._intensity;
};
Ut.color.get = function() {
return this._color;
};
Gt.prototype.setIntensity = function(t) {
this._intensity = t;
this._colorUniform[0] = t * this._color.r;
this._colorUniform[1] = t * this._color.g;
this._colorUniform[2] = t * this._color.b;
};
Ut.intensity.get = function() {
return this._intensity;
};
Gt.prototype.setType = function(t) {
this._type = t;
};
Ut.type.get = function() {
return this._type;
};
Gt.prototype.setSpotAngle = function(t) {
this._spotAngle = t;
this._spotUniform[0] = Math.cos(.5 * this._spotAngle);
};
Ut.spotAngle.get = function() {
return this._spotAngle;
};
Gt.prototype.setSpotExp = function(t) {
this._spotExp = t;
this._spotUniform[1] = t;
};
Ut.spotExp.get = function() {
return this._spotExp;
};
Gt.prototype.setRange = function(t) {
this._range = t;
};
Ut.range.get = function() {
return this._range;
};
Gt.prototype.setShadowType = function(t) {
this._shadowType === q.SHADOW_NONE && t !== q.SHADOW_NONE && (this._shadowMapDirty = !0);
this._shadowType = t;
};
Ut.shadowType.get = function() {
return this._shadowType;
};
Ut.shadowMap.get = function() {
return this._shadowMap;
};
Ut.viewProjMatrix.get = function() {
return this._viewProjMatrix;
};
Gt.prototype.setShadowResolution = function(t) {
this._shadowResolution !== t && (this._shadowMapDirty = !0);
this._shadowResolution = t;
};
Ut.shadowResolution.get = function() {
return this._shadowResolution;
};
Gt.prototype.setShadowBias = function(t) {
this._shadowBias = t;
};
Ut.shadowBias.get = function() {
return this._shadowBias;
};
Gt.prototype.setShadowDarkness = function(t) {
this._shadowDarkness = t;
};
Ut.shadowDarkness.get = function() {
return this._shadowDarkness;
};
Gt.prototype.setShadowMinDepth = function(t) {
this._shadowMinDepth = t;
};
Ut.shadowMinDepth.get = function() {
return this._type === q.LIGHT_DIRECTIONAL ? 1 : this._shadowMinDepth;
};
Gt.prototype.setShadowMaxDepth = function(t) {
this._shadowMaxDepth = t;
};
Ut.shadowMaxDepth.get = function() {
return this._type === q.LIGHT_DIRECTIONAL ? 1 : this._shadowMaxDepth;
};
Gt.prototype.setShadowDepthScale = function(t) {
this._shadowDepthScale = t;
};
Ut.shadowDepthScale.get = function() {
return this._shadowDepthScale;
};
Gt.prototype.setFrustumEdgeFalloff = function(t) {
this._frustumEdgeFalloff = t;
};
Ut.frustumEdgeFalloff.get = function() {
return this._frustumEdgeFalloff;
};
Gt.prototype.extractView = function(t, e) {
t._shadowLight = this;
t._rect.x = 0;
t._rect.y = 0;
t._rect.w = this._shadowResolution;
t._rect.h = this._shadowResolution;
j.set(t._color, 1, 1, 1, 1);
t._depth = 1;
t._stencil = 1;
t._clearFlags = q.CLEAR_COLOR | q.CLEAR_DEPTH;
t._stages = e;
t._framebuffer = this._shadowFrameBuffer;
switch (this._type) {
case q.LIGHT_SPOT:
(function(t, e, i) {
t._node.getWorldRT(e);
N.invert(e, e);
N.perspective(i, t._spotAngle * t._spotAngleScale, 1, t._shadowMinDepth, t._shadowMaxDepth);
})(this, t._matView, t._matProj);
break;

case q.LIGHT_DIRECTIONAL:
(function(t, e, i) {
t._node.getWorldRT(e);
N.invert(e, e);
var n = t._shadowFustumSize / 2;
N.ortho(i, -n, n, -n, n, t._shadowMinDepth, t._shadowMaxDepth);
})(this, t._matView, t._matProj);
break;

case q.LIGHT_POINT:
t._matView, t._matProj;
break;

default:
console.warn("shadow of this light type is not supported");
}
N.mul(t._matViewProj, t._matProj, t._matView);
this._viewProjMatrix = t._matViewProj;
N.invert(t._matInvViewProj, t._matViewProj);
};
Gt.prototype._updateLightPositionAndDirection = function() {
this._node.getWorldMatrix(Nt);
w.fromMat4(kt, Nt);
v.transformMat3(zt, Ft, kt);
v.array(this._directionUniform, zt);
var t = this._positionUniform;
t[0] = Nt.m12;
t[1] = Nt.m13;
t[2] = Nt.m14;
};
Gt.prototype._generateShadowMap = function(t) {
this._shadowMap = new Tt.Texture2D(t, {
width: this._shadowResolution,
height: this._shadowResolution,
format: Tt.TEXTURE_FMT_RGBA8,
wrapS: Tt.WRAP_CLAMP,
wrapT: Tt.WRAP_CLAMP
});
this._shadowDepthBuffer = new Tt.RenderBuffer(t, Tt.RB_FMT_D16, this._shadowResolution, this._shadowResolution);
this._shadowFrameBuffer = new Tt.FrameBuffer(t, this._shadowResolution, this._shadowResolution, {
colors: [ this._shadowMap ],
depth: this._shadowDepthBuffer
});
};
Gt.prototype._destroyShadowMap = function() {
if (this._shadowMap) {
this._shadowMap.destroy();
this._shadowDepthBuffer.destroy();
this._shadowFrameBuffer.destroy();
this._shadowMap = null;
this._shadowDepthBuffer = null;
this._shadowFrameBuffer = null;
}
};
Gt.prototype.update = function(t) {
this._updateLightPositionAndDirection();
if (this._shadowType === q.SHADOW_NONE) this._destroyShadowMap(); else if (this._shadowMapDirty) {
this._destroyShadowMap();
this._generateShadowMap(t);
this._shadowMapDirty = !1;
}
};
Object.defineProperties(Gt.prototype, Ut);
var Vt = N.create(), jt = N.create(), Wt = N.create(), Ht = N.create(), qt = v.create(), Xt = function() {
this._poolID = -1;
this._node = null;
this._projection = q.PROJ_PERSPECTIVE;
this._color = j.new(.2, .3, .47, 1);
this._depth = 1;
this._stencil = 1;
this._clearFlags = q.CLEAR_COLOR | q.CLEAR_DEPTH;
this._cullingMask = 1;
this._stages = [];
this._framebuffer = null;
this._near = .01;
this._far = 1e3;
this._fov = Math.PI / 4;
this._rect = {
x: 0,
y: 0,
w: 1,
h: 1
};
this._orthoHeight = 10;
}, Yt = {
cullingMask: {
configurable: !0
}
};
Yt.cullingMask.get = function() {
return this._cullingMask;
};
Yt.cullingMask.set = function(t) {
this._cullingMask = t;
};
Xt.prototype.getNode = function() {
return this._node;
};
Xt.prototype.setNode = function(t) {
this._node = t;
};
Xt.prototype.getType = function() {
return this._projection;
};
Xt.prototype.setType = function(t) {
this._projection = t;
};
Xt.prototype.getOrthoHeight = function() {
return this._orthoHeight;
};
Xt.prototype.setOrthoHeight = function(t) {
this._orthoHeight = t;
};
Xt.prototype.getFov = function() {
return this._fov;
};
Xt.prototype.setFov = function(t) {
this._fov = t;
};
Xt.prototype.getNear = function() {
return this._near;
};
Xt.prototype.setNear = function(t) {
this._near = t;
};
Xt.prototype.getFar = function() {
return this._far;
};
Xt.prototype.setFar = function(t) {
this._far = t;
};
Xt.prototype.getColor = function(t) {
return j.copy(t, this._color);
};
Xt.prototype.setColor = function(t, e, i, n) {
j.set(this._color, t, e, i, n);
};
Xt.prototype.getDepth = function() {
return this._depth;
};
Xt.prototype.setDepth = function(t) {
this._depth = t;
};
Xt.prototype.getStencil = function() {
return this._stencil;
};
Xt.prototype.setStencil = function(t) {
this._stencil = t;
};
Xt.prototype.getClearFlags = function() {
return this._clearFlags;
};
Xt.prototype.setClearFlags = function(t) {
this._clearFlags = t;
};
Xt.prototype.getRect = function(t) {
t.x = this._rect.x;
t.y = this._rect.y;
t.w = this._rect.w;
t.h = this._rect.h;
return t;
};
Xt.prototype.setRect = function(t, e, i, n) {
this._rect.x = t;
this._rect.y = e;
this._rect.w = i;
this._rect.h = n;
};
Xt.prototype.getStages = function() {
return this._stages;
};
Xt.prototype.setStages = function(t) {
this._stages = t;
};
Xt.prototype.getFramebuffer = function() {
return this._framebuffer;
};
Xt.prototype.setFramebuffer = function(t) {
this._framebuffer = t;
};
Xt.prototype.extractView = function(t, e, i) {
t._rect.x = this._rect.x * e;
t._rect.y = this._rect.y * i;
t._rect.w = this._rect.w * e;
t._rect.h = this._rect.h * i;
t._color = this._color;
t._depth = this._depth;
t._stencil = this._stencil;
t._clearFlags = this._clearFlags;
t._cullingMask = this._cullingMask;
t._stages = this._stages;
t._framebuffer = this._framebuffer;
this._node.getWorldRT(t._matView);
N.invert(t._matView, t._matView);
var n = e / i;
if (this._projection === q.PROJ_PERSPECTIVE) N.perspective(t._matProj, this._fov, n, this._near, this._far); else {
var r = this._orthoHeight * n, s = this._orthoHeight;
N.ortho(t._matProj, -r, r, -s, s, this._near, this._far);
}
N.mul(t._matViewProj, t._matProj, t._matView);
N.invert(t._matInvViewProj, t._matViewProj);
};
Xt.prototype.screenToWorld = function(t, e, i, n) {
var r = i / n, s = this._rect.x * i, a = this._rect.y * n, o = this._rect.w * i, h = this._rect.h * n;
this._node.getWorldRT(Vt);
N.invert(Vt, Vt);
if (this._projection === q.PROJ_PERSPECTIVE) N.perspective(jt, this._fov, r, this._near, this._far); else {
var l = this._orthoHeight * r, c = this._orthoHeight;
N.ortho(jt, -l, l, -c, c, this._near, this._far);
}
N.mul(Wt, jt, Vt);
N.invert(Ht, Wt);
if (this._projection === q.PROJ_PERSPECTIVE) {
v.set(t, 2 * (e.x - s) / o - 1, 2 * (e.y - a) / h - 1, 1);
v.transformMat4(t, t, Ht);
this._node.getWorldPos(qt);
v.lerp(t, qt, t, e.z / this._far);
} else {
var u = this._farClip - this._nearClip;
v.set(t, 2 * (e.x - s) / o - 1, 2 * (e.y - a) / h - 1, (this._far - e.z) / u * 2 - 1);
v.transformMat4(t, t, Ht);
}
return t;
};
Xt.prototype.worldToScreen = function(t, e, i, n) {
var r = i / n, s = this._rect.x * i, a = this._rect.y * n, o = this._rect.w * i, h = this._rect.h * n;
this._node.getWorldRT(Vt);
N.invert(Vt, Vt);
if (this._projection === q.PROJ_PERSPECTIVE) N.perspective(jt, this._fov, r, this._near, this._far); else {
var l = this._orthoHeight * r, c = this._orthoHeight;
N.ortho(jt, -l, l, -c, c, this._near, this._far);
}
N.mul(Wt, jt, Vt);
var u = e.x * Wt.m03 + e.y * Wt.m07 + e.z * Wt.m11 + Wt.m15;
v.transformMat4(t, e, Wt);
t.x = s + .5 * (t.x / u + 1) * o;
t.y = a + .5 * (t.y / u + 1) * h;
return t;
};
Object.defineProperties(Xt.prototype, Yt);
var Jt = function() {
this._poolID = -1;
this._node = null;
this._inputAssemblers = [];
this._effects = [];
this._defines = [];
this._dynamicIA = !1;
this._cullingMask = -1;
}, Zt = {
inputAssemblerCount: {
configurable: !0
},
dynamicIA: {
configurable: !0
},
drawItemCount: {
configurable: !0
},
cullingMask: {
configurable: !0
}
};
Zt.inputAssemblerCount.get = function() {
return this._inputAssemblers.length;
};
Zt.dynamicIA.get = function() {
return this._dynamicIA;
};
Zt.drawItemCount.get = function() {
return this._dynamicIA ? 1 : this._inputAssemblers.length;
};
Zt.cullingMask.get = function() {
return this._cullingMask;
};
Zt.cullingMask.set = function(t) {
this._cullingMask = t;
};
Jt.prototype.setNode = function(t) {
this._node = t;
};
Jt.prototype.setDynamicIA = function(t) {
this._dynamicIA = t;
};
Jt.prototype.addInputAssembler = function(t) {
-1 === this._inputAssemblers.indexOf(t) && this._inputAssemblers.push(t);
};
Jt.prototype.clearInputAssemblers = function() {
this._inputAssemblers.length = 0;
};
Jt.prototype.addEffect = function(t) {
if (-1 === this._effects.indexOf(t)) {
this._effects.push(t);
var e = Object.create(null);
t.extractDefines(e);
this._defines.push(e);
}
};
Jt.prototype.clearEffects = function() {
this._effects.length = 0;
this._defines.length = 0;
};
Jt.prototype.extractDrawItem = function(t, e) {
if (this._dynamicIA) {
t.model = this;
t.node = this._node;
t.ia = null;
t.effect = this._effects[0];
t.defines = t.effect.extractDefines(this._defines[0]);
} else if (e >= this._inputAssemblers.length) {
t.model = null;
t.node = null;
t.ia = null;
t.effect = null;
t.defines = null;
} else {
t.model = this;
t.node = this._node;
t.ia = this._inputAssemblers[e];
var i, n;
if (e < this._effects.length) {
i = this._effects[e];
n = this._defines[e];
} else {
i = this._effects[this._effects.length - 1];
n = this._defines[this._effects.length - 1];
}
t.effect = i;
t.defines = i.extractDefines(n);
}
};
Object.defineProperties(Jt.prototype, Zt);
var Kt = 32, Qt = [ 1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9 ];
function $t(t) {
return t < 1e5 ? t < 100 ? t < 10 ? 0 : 1 : t < 1e4 ? t < 1e3 ? 2 : 3 : 4 : t < 1e7 ? t < 1e6 ? 5 : 6 : t < 1e9 ? t < 1e8 ? 7 : 8 : 9;
}
function te(t, e) {
if (t === e) return 0;
if (~~t === t && ~~e === e) {
if (0 === t || 0 === e) return t < e ? -1 : 1;
if (t < 0 || e < 0) {
if (e >= 0) return -1;
if (t >= 0) return 1;
t = -t;
e = -e;
}
var i = $t(t), n = $t(e), r = 0;
if (i < n) {
t *= Qt[n - i - 1];
e /= 10;
r = -1;
} else if (i > n) {
e *= Qt[i - n - 1];
t /= 10;
r = 1;
}
return t === e ? r : t < e ? -1 : 1;
}
var s = String(t), a = String(e);
return s === a ? 0 : s < a ? -1 : 1;
}
function ee(t, e, i, n) {
var r = e + 1;
if (r === i) return 1;
if (n(t[r++], t[e]) < 0) {
for (;r < i && n(t[r], t[r - 1]) < 0; ) r++;
(function(t, e, i) {
i--;
for (;e < i; ) {
var n = t[e];
t[e++] = t[i];
t[i--] = n;
}
})(t, e, r);
} else for (;r < i && n(t[r], t[r - 1]) >= 0; ) r++;
return r - e;
}
function ie(t, e, i, n, r) {
n === e && n++;
for (;n < i; n++) {
for (var s = t[n], a = e, o = n; a < o; ) {
var h = a + o >>> 1;
r(s, t[h]) < 0 ? o = h : a = h + 1;
}
var l = n - a;
switch (l) {
case 3:
t[a + 3] = t[a + 2];

case 2:
t[a + 2] = t[a + 1];

case 1:
t[a + 1] = t[a];
break;

default:
for (;l > 0; ) {
t[a + l] = t[a + l - 1];
l--;
}
}
t[a] = s;
}
}
function ne(t, e, i, n, r, s) {
var a = 0, o = 0, h = 1;
if (s(t, e[i + r]) > 0) {
o = n - r;
for (;h < o && s(t, e[i + r + h]) > 0; ) {
a = h;
(h = 1 + (h << 1)) <= 0 && (h = o);
}
h > o && (h = o);
a += r;
h += r;
} else {
o = r + 1;
for (;h < o && s(t, e[i + r - h]) <= 0; ) {
a = h;
(h = 1 + (h << 1)) <= 0 && (h = o);
}
h > o && (h = o);
var l = a;
a = r - h;
h = r - l;
}
a++;
for (;a < h; ) {
var c = a + (h - a >>> 1);
s(t, e[i + c]) > 0 ? a = c + 1 : h = c;
}
return h;
}
function re(t, e, i, n, r, s) {
var a = 0, o = 0, h = 1;
if (s(t, e[i + r]) < 0) {
o = r + 1;
for (;h < o && s(t, e[i + r - h]) < 0; ) {
a = h;
(h = 1 + (h << 1)) <= 0 && (h = o);
}
h > o && (h = o);
var l = a;
a = r - h;
h = r - l;
} else {
o = n - r;
for (;h < o && s(t, e[i + r + h]) >= 0; ) {
a = h;
(h = 1 + (h << 1)) <= 0 && (h = o);
}
h > o && (h = o);
a += r;
h += r;
}
a++;
for (;a < h; ) {
var c = a + (h - a >>> 1);
s(t, e[i + c]) < 0 ? h = c : a = c + 1;
}
return h;
}
var se = function(t, e) {
this.array = t;
this.compare = e;
this.minGallop = 7;
this.length = t.length;
this.tmpStorageLength = 256;
this.length < 512 && (this.tmpStorageLength = this.length >>> 1);
this.tmp = new Array(this.tmpStorageLength);
this.stackLength = this.length < 120 ? 5 : this.length < 1542 ? 10 : this.length < 119151 ? 19 : 40;
this.runStart = new Array(this.stackLength);
this.runLength = new Array(this.stackLength);
this.stackSize = 0;
};
se.prototype.pushRun = function(t, e) {
this.runStart[this.stackSize] = t;
this.runLength[this.stackSize] = e;
this.stackSize += 1;
};
se.prototype.mergeRuns = function() {
for (var t = this; this.stackSize > 1; ) {
var e = t.stackSize - 2;
if (e >= 1 && t.runLength[e - 1] <= t.runLength[e] + t.runLength[e + 1] || e >= 2 && t.runLength[e - 2] <= t.runLength[e] + t.runLength[e - 1]) t.runLength[e - 1] < t.runLength[e + 1] && e--; else if (t.runLength[e] > t.runLength[e + 1]) break;
t.mergeAt(e);
}
};
se.prototype.forceMergeRuns = function() {
for (;this.stackSize > 1; ) {
var t = this.stackSize - 2;
t > 0 && this.runLength[t - 1] < this.runLength[t + 1] && t--;
this.mergeAt(t);
}
};
se.prototype.mergeAt = function(t) {
var e = this.compare, i = this.array, n = this.runStart[t], r = this.runLength[t], s = this.runStart[t + 1], a = this.runLength[t + 1];
this.runLength[t] = r + a;
if (t === this.stackSize - 3) {
this.runStart[t + 1] = this.runStart[t + 2];
this.runLength[t + 1] = this.runLength[t + 2];
}
this.stackSize--;
var o = re(i[s], i, n, r, 0, e);
n += o;
0 !== (r -= o) && 0 !== (a = ne(i[n + r - 1], i, s, a, a - 1, e)) && (r <= a ? this.mergeLow(n, r, s, a) : this.mergeHigh(n, r, s, a));
};
se.prototype.mergeLow = function(t, e, i, n) {
var r = this.compare, s = this.array, a = this.tmp, o = 0;
for (o = 0; o < e; o++) a[o] = s[t + o];
var h = 0, l = i, c = t;
s[c++] = s[l++];
if (0 != --n) if (1 !== e) {
for (var u = this.minGallop; ;) {
var _ = 0, m = 0, f = !1;
do {
if (r(s[l], a[h]) < 0) {
s[c++] = s[l++];
m++;
_ = 0;
if (0 == --n) {
f = !0;
break;
}
} else {
s[c++] = a[h++];
_++;
m = 0;
if (1 == --e) {
f = !0;
break;
}
}
} while ((_ | m) < u);
if (f) break;
do {
if (0 !== (_ = re(s[l], a, h, e, 0, r))) {
for (o = 0; o < _; o++) s[c + o] = a[h + o];
c += _;
h += _;
if ((e -= _) <= 1) {
f = !0;
break;
}
}
s[c++] = s[l++];
if (0 == --n) {
f = !0;
break;
}
if (0 !== (m = ne(a[h], s, l, n, 0, r))) {
for (o = 0; o < m; o++) s[c + o] = s[l + o];
c += m;
l += m;
if (0 === (n -= m)) {
f = !0;
break;
}
}
s[c++] = a[h++];
if (1 == --e) {
f = !0;
break;
}
u--;
} while (_ >= 7 || m >= 7);
if (f) break;
u < 0 && (u = 0);
u += 2;
}
this.minGallop = u;
u < 1 && (this.minGallop = 1);
if (1 === e) {
for (o = 0; o < n; o++) s[c + o] = s[l + o];
s[c + n] = a[h];
} else {
if (0 === e) throw new Error("mergeLow preconditions were not respected");
for (o = 0; o < e; o++) s[c + o] = a[h + o];
}
} else {
for (o = 0; o < n; o++) s[c + o] = s[l + o];
s[c + n] = a[h];
} else for (o = 0; o < e; o++) s[c + o] = a[h + o];
};
se.prototype.mergeHigh = function(t, e, i, n) {
var r = this.compare, s = this.array, a = this.tmp, o = 0;
for (o = 0; o < n; o++) a[o] = s[i + o];
var h = t + e - 1, l = n - 1, c = i + n - 1, u = 0, _ = 0;
s[c--] = s[h--];
if (0 != --e) if (1 !== n) {
for (var m = this.minGallop; ;) {
var f = 0, d = 0, p = !1;
do {
if (r(a[l], s[h]) < 0) {
s[c--] = s[h--];
f++;
d = 0;
if (0 == --e) {
p = !0;
break;
}
} else {
s[c--] = a[l--];
d++;
f = 0;
if (1 == --n) {
p = !0;
break;
}
}
} while ((f | d) < m);
if (p) break;
do {
if (0 !== (f = e - re(a[l], s, t, e, e - 1, r))) {
e -= f;
_ = (c -= f) + 1;
u = (h -= f) + 1;
for (o = f - 1; o >= 0; o--) s[_ + o] = s[u + o];
if (0 === e) {
p = !0;
break;
}
}
s[c--] = a[l--];
if (1 == --n) {
p = !0;
break;
}
if (0 !== (d = n - ne(s[h], a, 0, n, n - 1, r))) {
n -= d;
_ = (c -= d) + 1;
u = (l -= d) + 1;
for (o = 0; o < d; o++) s[_ + o] = a[u + o];
if (n <= 1) {
p = !0;
break;
}
}
s[c--] = s[h--];
if (0 == --e) {
p = !0;
break;
}
m--;
} while (f >= 7 || d >= 7);
if (p) break;
m < 0 && (m = 0);
m += 2;
}
this.minGallop = m;
m < 1 && (this.minGallop = 1);
if (1 === n) {
_ = (c -= e) + 1;
u = (h -= e) + 1;
for (o = e - 1; o >= 0; o--) s[_ + o] = s[u + o];
s[c] = a[l];
} else {
if (0 === n) throw new Error("mergeHigh preconditions were not respected");
u = c - (n - 1);
for (o = 0; o < n; o++) s[u + o] = a[o];
}
} else {
_ = (c -= e) + 1;
u = (h -= e) + 1;
for (o = e - 1; o >= 0; o--) s[_ + o] = s[u + o];
s[c] = a[l];
} else {
u = c - (n - 1);
for (o = 0; o < n; o++) s[u + o] = a[o];
}
};
function ae(t, e, i, n) {
if (!Array.isArray(t)) throw new TypeError("Can only sort arrays");
void 0 === e && (e = 0);
void 0 === i && (i = t.length);
void 0 === n && (n = te);
var r = i - e;
if (!(r < 2)) {
var s = 0;
if (r < Kt) ie(t, e, i, e + (s = ee(t, e, i, n)), n); else {
var a = new se(t, n), o = (function(t) {
for (var e = 0; t >= Kt; ) {
e |= 1 & t;
t >>= 1;
}
return t + e;
})(r);
do {
if ((s = ee(t, e, i, n)) < o) {
var h = r;
h > o && (h = o);
ie(t, e, e + h, e + s, n);
s = h;
}
a.pushRun(e, s);
a.mergeRuns();
r -= s;
e += s;
} while (0 !== r);
a.forceMergeRuns();
}
}
}
var oe = function(t) {
this._count = 0;
this._data = new Array(t);
}, he = {
length: {
configurable: !0
},
data: {
configurable: !0
}
};
oe.prototype._resize = function(t) {
if (t > this._data.length) for (var e = this._data.length; e < t; ++e) this._data[e] = void 0;
};
he.length.get = function() {
return this._count;
};
he.data.get = function() {
return this._data;
};
oe.prototype.reset = function() {
for (var t = 0; t < this._count; ++t) this._data[t] = void 0;
this._count = 0;
};
oe.prototype.push = function(t) {
this._count >= this._data.length && this._resize(2 * this._data.length);
this._data[this._count] = t;
++this._count;
};
oe.prototype.pop = function() {
--this._count;
this._count < 0 && (this._count = 0);
var t = this._data[this._count];
this._data[this._count] = void 0;
return t;
};
oe.prototype.fastRemove = function(t) {
if (!(t >= this._count)) {
var e = this._count - 1;
this._data[t] = this._data[e];
this._data[e] = void 0;
this._count -= 1;
}
};
oe.prototype.indexOf = function(t) {
var e = this._data.indexOf(t);
return e >= this._count ? -1 : e;
};
oe.prototype.sort = function(t) {
return ae(this._data, 0, this._count, t);
};
Object.defineProperties(oe.prototype, he);
var le = function(t, e) {
this._fn = t;
this._idx = e - 1;
this._frees = new Array(e);
for (var i = 0; i < e; ++i) this._frees[i] = t();
};
le.prototype._expand = function(t) {
var e = this._frees;
this._frees = new Array(t);
for (var i = t - e.length, n = 0; n < i; ++n) this._frees[n] = this._fn();
for (var r = i, s = 0; r < t; ++r, ++s) this._frees[r] = e[s];
this._idx += i;
};
le.prototype.alloc = function() {
this._idx < 0 && this._expand(Math.round(1.2 * this._frees.length) + 1);
var t = this._frees[this._idx];
this._frees[this._idx] = null;
--this._idx;
return t;
};
le.prototype.free = function(t) {
++this._idx;
this._frees[this._idx] = t;
};
var ce = function(t, e) {
this._fn = t;
this._count = 0;
this._head = null;
this._tail = null;
this._pool = new le(t, e);
}, ue = {
head: {
configurable: !0
},
tail: {
configurable: !0
},
length: {
configurable: !0
}
};
ue.head.get = function() {
return this._head;
};
ue.tail.get = function() {
return this._tail;
};
ue.length.get = function() {
return this._count;
};
ce.prototype.add = function() {
var t = this._pool.alloc();
if (this._tail) {
this._tail._next = t;
t._prev = this._tail;
} else this._head = t;
this._tail = t;
this._count += 1;
return t;
};
ce.prototype.remove = function(t) {
t._prev ? t._prev._next = t._next : this._head = t._next;
t._next ? t._next._prev = t._prev : this._tail = t._prev;
t._next = null;
t._prev = null;
this._pool.free(t);
this._count -= 1;
};
ce.prototype.forEach = function(t, e) {
var i = this._head;
if (i) {
e && (t = t.bind(e));
for (var n = 0, r = i; i; ) {
r = i._next;
t(i, n, this);
i = r;
++n;
}
}
};
Object.defineProperties(ce.prototype, ue);
var _e = function(t, e) {
this._fn = t;
this._count = 0;
this._data = new Array(e);
for (var i = 0; i < e; ++i) this._data[i] = t();
}, me = {
length: {
configurable: !0
},
data: {
configurable: !0
}
};
me.length.get = function() {
return this._count;
};
me.data.get = function() {
return this._data;
};
_e.prototype.reset = function() {
this._count = 0;
};
_e.prototype.resize = function(t) {
if (t > this._data.length) for (var e = this._data.length; e < t; ++e) this._data[e] = this._fn();
};
_e.prototype.add = function() {
this._count >= this._data.length && this.resize(2 * this._data.length);
return this._data[this._count++];
};
_e.prototype.remove = function(t) {
if (!(t >= this._count)) {
var e = this._count - 1, i = this._data[t];
this._data[t] = this._data[e];
this._data[e] = i;
this._count -= 1;
}
};
_e.prototype.sort = function(t) {
return ae(this._data, 0, this._count, t);
};
Object.defineProperties(_e.prototype, me);
for (var fe = Array(8), de = 0; de < 8; ++de) fe[de] = [];
var pe = function() {
this._lights = new oe(16);
this._models = new oe(16);
this._cameras = new oe(16);
this._debugCamera = null;
this._views = [];
};
pe.prototype._add = function(t, e) {
if (-1 === e._poolID) {
t.push(e);
e._poolID = t.length - 1;
}
};
pe.prototype._remove = function(t, e) {
if (-1 !== e._poolID) {
t.data[t.length - 1]._poolID = e._poolID;
t.fastRemove(e._poolID);
e._poolID = -1;
}
};
pe.prototype.reset = function() {
for (var t = 0; t < this._models.length; ++t) {
this._models.data[t]._cullingMask = -1;
}
};
pe.prototype.setDebugCamera = function(t) {
this._debugCamera = t;
};
pe.prototype.getCameraCount = function() {
return this._cameras.length;
};
pe.prototype.getCamera = function(t) {
return this._cameras.data[t];
};
pe.prototype.addCamera = function(t) {
this._add(this._cameras, t);
};
pe.prototype.removeCamera = function(t) {
this._remove(this._cameras, t);
};
pe.prototype.getModelCount = function() {
return this._models.length;
};
pe.prototype.getModel = function(t) {
return this._models.data[t];
};
pe.prototype.addModel = function(t) {
this._add(this._models, t);
};
pe.prototype.removeModel = function(t) {
this._remove(this._models, t);
};
pe.prototype.getLightCount = function() {
return this._lights.length;
};
pe.prototype.getLight = function(t) {
return this._lights.data[t];
};
pe.prototype.addLight = function(t) {
this._add(this._lights, t);
};
pe.prototype.removeLight = function(t) {
this._remove(this._lights, t);
};
pe.prototype.addView = function(t) {
-1 === this._views.indexOf(t) && this._views.push(t);
};
pe.prototype.removeView = function(t) {
var e = this._views.indexOf(t);
-1 !== e && this._views.splice(e, 1);
};
var ge = 0;
function ye(t, e) {
var i = {}, n = t;
for (var r in e) Number.isInteger(e[r]) && (i[r] = e[r]);
for (var s in i) {
var a = new RegExp(s, "g");
n = n.replace(a, i[s]);
}
return n;
}
function ve(t) {
return t.replace(/#pragma for (\w+) in range\(\s*(\d+)\s*,\s*(\d+)\s*\)([\s\S]+?)#pragma endFor/g, (function(t, e, i, n, r) {
var s = "", a = parseInt(i), o = parseInt(n);
(a.isNaN || o.isNaN) && console.error("Unroll For Loops Error: begin and end of range must be an int num.");
for (var h = a; h < o; ++h) s += r.replace(new RegExp("{" + e + "}", "g"), h);
return s;
}));
}
var xe = function(t, e, i) {
void 0 === e && (e = []);
void 0 === i && (i = {});
this._device = t;
this._precision = "precision highp float;\n";
this._templates = {};
for (var n = 0; n < e.length; ++n) {
var r = e[n];
this.define(r.name, r.vert, r.frag, r.defines);
}
this._chunks = {};
Object.assign(this._chunks, i);
this._cache = {};
};
xe.prototype.define = function(t, e, i, n) {
if (this._templates[t]) console.warn("Failed to define shader " + t + ": already exists."); else {
for (var r = ++ge, s = 0, a = function(t) {
var e = n[t];
e._offset = s;
var i = 1;
if (void 0 !== e.min && void 0 !== e.max) {
i = Math.ceil(.5 * (e.max - e.min));
e._map = function(t) {
return t - this._min << e._offset;
}.bind(e);
} else e._map = function(t) {
return t ? 1 << e._offset : 0;
}.bind(e);
s += i;
e._offset = s;
}, o = 0; o < n.length; ++o) a(o);
e = this._precision + e;
i = this._precision + i;
this._templates[t] = {
id: r,
name: t,
vert: e,
frag: i,
defines: n
};
}
};
xe.prototype.getKey = function(t, e) {
for (var i = this._templates[t], n = 0, r = 0; r < i.defines.length; ++r) {
var s = i.defines[r], a = e[s.name];
void 0 !== a && (n |= s._map(a));
}
return n << 8 | i.id;
};
xe.prototype.getProgram = function(t, e) {
var i = this.getKey(t, e), n = this._cache[i];
if (n) return n;
var r = this._templates[t], s = (function(t) {
var e = [];
for (var i in t) !0 === t[i] && e.push("#define " + i);
return e.join("\n");
})(e) + "\n", a = ye(r.vert, e);
a = s + ve(a);
var o = ye(r.frag, e);
o = s + ve(o);
(n = new Tt.Program(this._device, {
vert: a,
frag: o
})).link();
this._cache[i] = n;
return n;
};
var Ae = w.create(), be = N.create(), Te = new _e(function() {
return {
stage: null,
items: null
};
}, 8), Ce = new _e(function() {
return new Float32Array(2);
}, 8), we = new _e(function() {
return new Float32Array(3);
}, 8), Se = new _e(function() {
return new Float32Array(4);
}, 8), Ee = new _e(function() {
return new Float32Array(9);
}, 8), De = new _e(function() {
return new Float32Array(16);
}, 8), Me = new _e(function() {
return new Float32Array(64);
}, 8), Ie = new _e(function() {
return new Int32Array(2);
}, 8), Pe = new _e(function() {
return new Int32Array(3);
}, 8), Be = new _e(function() {
return new Int32Array(4);
}, 8), Re = new _e(function() {
return new Int32Array(64);
}, 8), Le = {};
Le[q.PARAM_INT] = function(t) {
return t;
};
Le[q.PARAM_INT2] = function(t) {
return p.array(Ie.add(), t);
};
Le[q.PARAM_INT3] = function(t) {
return v.array(Pe.add(), t);
};
Le[q.PARAM_INT4] = function(t) {
return b.array(Be.add(), t);
};
Le[q.PARAM_FLOAT] = function(t) {
return t;
};
Le[q.PARAM_FLOAT2] = function(t) {
return p.array(Ce.add(), t);
};
Le[q.PARAM_FLOAT3] = function(t) {
return v.array(we.add(), t);
};
Le[q.PARAM_FLOAT4] = function(t) {
return b.array(Se.add(), t);
};
Le[q.PARAM_COLOR3] = function(t) {
return G.array(we.add(), t);
};
Le[q.PARAM_COLOR4] = function(t) {
return j.array(Se.add(), t);
};
Le[q.PARAM_MAT2] = function(t) {
return P.array(Se.add(), t);
};
Le[q.PARAM_MAT3] = function(t) {
return w.array(Ee.add(), t);
};
Le[q.PARAM_MAT4] = function(t) {
return N.array(De.add(), t);
};
var Oe = {};
Oe[q.PARAM_INT] = {
func: function(t) {
for (var e = Re.add(), i = 0; i < t.length; ++i) e[i] = t[i];
return e;
},
size: 1
};
Oe[q.PARAM_INT2] = {
func: function(t) {
for (var e = Re.add(), i = 0; i < t.length; ++i) {
e[2 * i] = t[i].x;
e[2 * i + 1] = t[i].y;
}
return e;
},
size: 2
};
Oe[q.PARAM_INT3] = {
func: void 0,
size: 3
};
Oe[q.PARAM_INT4] = {
func: function(t) {
for (var e = Re.add(), i = 0; i < t.length; ++i) {
var n = t[i];
e[4 * i] = n.x;
e[4 * i + 1] = n.y;
e[4 * i + 2] = n.z;
e[4 * i + 3] = n.w;
}
return e;
},
size: 4
};
Oe[q.PARAM_FLOAT] = {
func: function(t) {
for (var e = Me.add(), i = 0; i < t.length; ++i) e[i] = t[i];
return e;
},
size: 1
};
Oe[q.PARAM_FLOAT2] = {
func: function(t) {
for (var e = Me.add(), i = 0; i < t.length; ++i) {
e[2 * i] = t[i].x;
e[2 * i + 1] = t[i].y;
}
return e;
},
size: 2
};
Oe[q.PARAM_FLOAT3] = {
func: void 0,
size: 3
};
Oe[q.PARAM_FLOAT4] = {
func: function(t) {
for (var e = Me.add(), i = 0; i < t.length; ++i) {
var n = t[i];
e[4 * i] = n.x;
e[4 * i + 1] = n.y;
e[4 * i + 2] = n.z;
e[4 * i + 3] = n.w;
}
return e;
},
size: 4
};
Oe[q.PARAM_COLOR3] = {
func: void 0,
size: 3
};
Oe[q.PARAM_COLOR4] = {
func: function(t) {
for (var e = Me.add(), i = 0; i < t.length; ++i) {
var n = t[i];
e[4 * i] = n.r;
e[4 * i + 1] = n.g;
e[4 * i + 2] = n.b;
e[4 * i + 3] = n.a;
}
return e;
},
size: 4
};
Oe[q.PARAM_MAT2] = {
func: function(t) {
for (var e = Me.add(), i = 0; i < t.length; ++i) {
var n = t[i];
e[4 * i] = n.m00;
e[4 * i + 1] = n.m01;
e[4 * i + 2] = n.m02;
e[4 * i + 3] = n.m03;
}
return e;
},
size: 4
};
Oe[q.PARAM_MAT3] = {
func: void 0,
size: 9
};
Oe[q.PARAM_MAT4] = {
func: function(t) {
for (var e = Me.add(), i = 0; i < t.length; ++i) {
var n = t[i];
e[16 * i] = n.m00;
e[16 * i + 1] = n.m01;
e[16 * i + 2] = n.m02;
e[16 * i + 3] = n.m03;
e[16 * i + 4] = n.m04;
e[16 * i + 5] = n.m05;
e[16 * i + 6] = n.m06;
e[16 * i + 7] = n.m07;
e[16 * i + 8] = n.m08;
e[16 * i + 9] = n.m09;
e[16 * i + 10] = n.m10;
e[16 * i + 11] = n.m11;
e[16 * i + 12] = n.m12;
e[16 * i + 13] = n.m13;
e[16 * i + 14] = n.m14;
e[16 * i + 15] = n.m15;
}
return e;
},
size: 16
};
var Fe = function(t, e) {
var i;
this._device = t;
this._programLib = new xe(t, e.programTemplates, e.programChunks);
this._opts = e;
this._type2defaultValue = ((i = {})[q.PARAM_INT] = 0, i[q.PARAM_INT2] = p.new(0, 0), 
i[q.PARAM_INT3] = v.new(0, 0, 0), i[q.PARAM_INT4] = b.new(0, 0, 0, 0), i[q.PARAM_FLOAT] = 0, 
i[q.PARAM_FLOAT2] = p.new(0, 0), i[q.PARAM_FLOAT3] = v.new(0, 0, 0), i[q.PARAM_FLOAT4] = b.new(0, 0, 0, 0), 
i[q.PARAM_COLOR3] = G.new(0, 0, 0), i[q.PARAM_COLOR4] = j.new(0, 0, 0, 1), i[q.PARAM_MAT2] = P.create(), 
i[q.PARAM_MAT3] = w.create(), i[q.PARAM_MAT4] = N.create(), i[q.PARAM_TEXTURE_2D] = e.defaultTexture, 
i[q.PARAM_TEXTURE_CUBE] = e.defaultTextureCube, i);
this._stage2fn = {};
this._usedTextureUnits = 0;
this._viewPools = new _e(function() {
return new Ot();
}, 8);
this._drawItemsPools = new _e(function() {
return {
model: null,
node: null,
ia: null,
effect: null,
defines: null
};
}, 100);
this._stageItemsPools = new _e(function() {
return new _e(function() {
return {
model: null,
node: null,
ia: null,
effect: null,
defines: null,
technique: null,
sortKey: -1
};
}, 100);
}, 16);
};
Fe.prototype._resetTextuerUnit = function() {
this._usedTextureUnits = 0;
};
Fe.prototype._allocTextuerUnit = function() {
var t = this._device, e = this._usedTextureUnits;
e >= t._caps.maxTextureUnits && console.warn("Trying to use " + e + " texture units while this GPU supports only " + t._caps.maxTextureUnits);
this._usedTextureUnits += 1;
return e;
};
Fe.prototype._registerStage = function(t, e) {
this._stage2fn[t] = e;
};
Fe.prototype._reset = function() {
this._viewPools.reset();
this._stageItemsPools.reset();
};
Fe.prototype._requestView = function() {
return this._viewPools.add();
};
Fe.prototype._render = function(t, e) {
var i = this._device;
i.setFrameBuffer(t._framebuffer);
i.setViewport(t._rect.x, t._rect.y, t._rect.w, t._rect.h);
var n = {};
t._clearFlags & q.CLEAR_COLOR && (n.color = [ t._color.r, t._color.g, t._color.b, t._color.a ]);
t._clearFlags & q.CLEAR_DEPTH && (n.depth = t._depth);
t._clearFlags & q.CLEAR_STENCIL && (n.stencil = t._stencil);
i.clear(n);
this._drawItemsPools.reset();
for (var r = 0; r < e._models.length; ++r) {
var s = e._models.data[r];
if (0 != (s._cullingMask & t._cullingMask)) for (var a = 0; a < s.drawItemCount; ++a) {
var o = this._drawItemsPools.add();
s.extractDrawItem(o, a);
}
}
Te.reset();
for (var h = 0; h < t._stages.length; ++h) {
var l = t._stages[h], c = this._stageItemsPools.add();
c.reset();
for (var u = 0; u < this._drawItemsPools.length; ++u) {
var _ = this._drawItemsPools.data[u], m = _.effect.getTechnique(l);
if (m) {
var f = c.add();
f.model = _.model;
f.node = _.node;
f.ia = _.ia;
f.effect = _.effect;
f.defines = _.defines;
f.technique = m;
f.sortKey = -1;
}
}
var d = Te.add();
d.stage = l;
d.items = c;
}
for (var p = 0; p < Te.length; ++p) {
var g = Te.data[p];
(0, this._stage2fn[g.stage])(t, g.items);
}
};
Fe.prototype._draw = function(t) {
var e = this._device, i = this._programLib, n = t.node, r = t.ia, s = t.effect, a = t.technique, o = t.defines;
Ce.reset();
we.reset();
Se.reset();
Ee.reset();
De.reset();
Me.reset();
Ie.reset();
Pe.reset();
Be.reset();
Re.reset();
n.getWorldMatrix(be);
e.setUniform("model", N.array(De.add(), be));
w.transpose(Ae, w.invert(Ae, w.fromMat4(Ae, be)));
e.setUniform("normalMatrix", w.array(Ee.add(), Ae));
for (var h = 0; h < a._parameters.length; ++h) {
var l = a._parameters[h], c = s.getProperty(l.name);
void 0 === c && (c = l.val);
void 0 === c && (c = this._type2defaultValue[l.type]);
if (void 0 !== c) if (l.type === q.PARAM_TEXTURE_2D || l.type === q.PARAM_TEXTURE_CUBE) if (void 0 !== l.size) {
if (l.size !== c.length) {
console.error("The length of texture array (" + c.length + ") is not corrent(expect " + l.size + ").");
continue;
}
for (var u = Re.add(), _ = 0; _ < c.length; ++_) u[_] = this._allocTextuerUnit();
e.setTextureArray(l.name, c, u);
} else e.setTexture(l.name, c, this._allocTextuerUnit()); else {
var m = void 0;
if (void 0 !== l.size) {
var f = Oe[l.type];
if (void 0 === f.func) {
console.error("Uniform array of color3/int3/float3/mat3 can not be supportted!");
continue;
}
if (l.size * f.size > 64) {
console.error("Uniform array is too long!");
continue;
}
m = f.func(c);
} else {
m = (0, Le[l.type])(c);
}
e.setUniform(l.name, m);
} else console.warn("Failed to set technique property " + l.name + ", value not found.");
}
for (var d = 0; d < a._passes.length; ++d) {
var p = a._passes[d], g = r.getPrimitiveCount();
e.setVertexBuffer(0, r._vertexBuffer);
r._indexBuffer && e.setIndexBuffer(r._indexBuffer);
e.setPrimitiveType(r._primitiveType);
var y = i.getProgram(p._programName, o);
e.setProgram(y);
e.setCullMode(p._cullMode);
if (p._blend) {
e.enableBlend();
e.setBlendFuncSep(p._blendSrc, p._blendDst, p._blendSrcAlpha, p._blendDstAlpha);
e.setBlendEqSep(p._blendEq, p._blendAlphaEq);
e.setBlendColor32(p._blendColor);
}
if (p._depthTest) {
e.enableDepthTest();
e.setDepthFunc(p._depthFunc);
}
p._depthWrite && e.enableDepthWrite();
if (p._stencilTest) {
e.enableStencilTest();
e.setStencilFuncFront(p._stencilFuncFront, p._stencilRefFront, p._stencilMaskFront);
e.setStencilOpFront(p._stencilFailOpFront, p._stencilZFailOpFront, p._stencilZPassOpFront, p._stencilWriteMaskFront);
e.setStencilFuncBack(p._stencilFuncBack, p._stencilRefBack, p._stencilMaskBack);
e.setStencilOpBack(p._stencilFailOpBack, p._stencilZFailOpBack, p._stencilZPassOpBack, p._stencilWriteMaskBack);
}
e.draw(r._start, g);
this._resetTextuerUnit();
}
};
var Ne = {
addStage: Dt.addStage,
createIA: function(t, e) {
if (!e.positions) {
console.error("The data must have positions field");
return null;
}
for (var i = [], n = e.positions.length / 3, r = 0; r < n; ++r) {
i.push(e.positions[3 * r], e.positions[3 * r + 1], e.positions[3 * r + 2]);
e.normals && i.push(e.normals[3 * r], e.normals[3 * r + 1], e.normals[3 * r + 2]);
e.uvs && i.push(e.uvs[2 * r], e.uvs[2 * r + 1]);
}
var s = [];
s.push({
name: Tt.ATTR_POSITION,
type: Tt.ATTR_TYPE_FLOAT32,
num: 3
});
e.normals && s.push({
name: Tt.ATTR_NORMAL,
type: Tt.ATTR_TYPE_FLOAT32,
num: 3
});
e.uvs && s.push({
name: Tt.ATTR_UV0,
type: Tt.ATTR_TYPE_FLOAT32,
num: 2
});
var a = new Tt.VertexBuffer(t, new Tt.VertexFormat(s), Tt.USAGE_STATIC, new Float32Array(i), n), o = null;
e.indices && (o = new Tt.IndexBuffer(t, Tt.INDEX_FMT_UINT16, Tt.USAGE_STATIC, new Uint16Array(e.indices), e.indices.length));
return new Ct(a, o);
},
Pass: wt,
Technique: It,
Effect: Bt,
InputAssembler: Ct,
View: Ot,
Light: Gt,
Camera: Xt,
Model: Jt,
Scene: pe,
Base: Fe,
ProgramLib: xe
};
Object.assign(Ne, q);
var ke, ze = new Float32Array(16), Ge = new Float32Array(16), Ue = new Float32Array(16), Ve = (function(t) {
function e(e, i) {
t.call(this, e, i);
this._registerStage("transparent", this._transparentStage.bind(this));
}
t && (e.__proto__ = t);
e.prototype = Object.create(t && t.prototype);
e.prototype.constructor = e;
e.prototype.reset = function() {
this._reset();
};
e.prototype.render = function(t) {
this._reset();
t._cameras.sort((function(t, e) {
return t._depth > e._depth ? 1 : t._depth < e._depth ? -1 : 0;
}));
for (var e = 0; e < t._cameras.length; ++e) {
var i = t._cameras.data[e];
i._poolID = e;
this.renderCamera(i, t);
}
};
e.prototype.renderCamera = function(t, e) {
var i = this._device._gl.canvas, n = t.view, r = t.dirty;
if (!n) {
n = this._requestView();
r = !0;
}
if (r) {
var s = i.width, a = i.height;
if (t._framebuffer) {
s = t._framebuffer._width;
a = t._framebuffer._height;
}
t.extractView(n, s, a);
}
this._render(n, e);
};
e.prototype._transparentStage = function(t, e) {
this._device.setUniform("view", N.array(ze, t._matView));
this._device.setUniform("proj", N.array(Ge, t._matProj));
this._device.setUniform("viewProj", N.array(Ue, t._matViewProj));
for (var i = 0; i < e.length; ++i) {
var n = e.data[i];
this._draw(n);
}
};
return e;
})(Ne.Base), je = {
chunks: {},
templates: [ {
name: "gray_sprite",
vert: "\n \nuniform mat4 viewProj;\nattribute vec3 a_position;\nattribute vec2 a_uv0;\nvarying vec2 uv0;\nvoid main () {\n  vec4 pos = viewProj * vec4(a_position, 1);\n  gl_Position = pos;\n  uv0 = a_uv0;\n}",
frag: "\n \nuniform sampler2D texture;\nvarying vec2 uv0;\nuniform vec4 color;\nvoid main () {\n  vec4 c = color * texture2D(texture, uv0);\n  float gray = 0.2126*c.r + 0.7152*c.g + 0.0722*c.b;\n  gl_FragColor = vec4(gray, gray, gray, c.a);\n}",
defines: []
}, {
name: "sprite",
vert: "\n \nuniform mat4 viewProj;\n#ifdef use2DPos\nattribute vec2 a_position;\n#else\nattribute vec3 a_position;\n#endif\nattribute vec4 a_color;\n#ifdef useModel\n  uniform mat4 model;\n#endif\n#ifdef useTexture\n  attribute vec2 a_uv0;\n  varying vec2 uv0;\n#endif\n#ifndef useColor\nvarying lowp vec4 v_fragmentColor;\n#endif\nvoid main () {\n  mat4 mvp;\n  #ifdef useModel\n    mvp = viewProj * model;\n  #else\n    mvp = viewProj;\n  #endif\n  #ifdef use2DPos\n  vec4 pos = mvp * vec4(a_position, 0, 1);\n  #else\n  vec4 pos = mvp * vec4(a_position, 1);\n  #endif\n  #ifndef useColor\n  v_fragmentColor = a_color;\n  #endif\n  #ifdef useTexture\n    uv0 = a_uv0;\n  #endif\n  gl_Position = pos;\n}",
frag: "\n \n#ifdef useTexture\n  uniform sampler2D texture;\n  varying vec2 uv0;\n#endif\n#ifdef alphaTest\n  uniform float alphaThreshold;\n#endif\n#ifdef useColor\n  uniform vec4 color;\n#else\n  varying vec4 v_fragmentColor;\n#endif\nvoid main () {\n  #ifdef useColor\n    vec4 o = color;\n  #else\n    vec4 o = v_fragmentColor;\n  #endif\n  #ifdef useTexture\n    o *= texture2D(texture, uv0);\n  #endif\n  #ifdef alphaTest\n    if (o.a <= alphaThreshold)\n      discard;\n  #endif\n  gl_FragColor = o;\n}",
defines: [ {
name: "useTexture"
}, {
name: "useModel"
}, {
name: "alphaTest"
}, {
name: "use2DPos"
}, {
name: "useColor"
} ]
} ]
}, We = function() {
this.material = null;
this.vertexCount = 0;
this.indiceCount = 0;
}, He = new le(function() {
return {
x: 0,
y: 0,
u: 0,
v: 0,
color: 0
};
}, 128), qe = (function(t) {
function e() {
t.call(this);
this._data = [];
this._indices = [];
this._pivotX = 0;
this._pivotY = 0;
this._width = 0;
this._height = 0;
this.uvDirty = !0;
this.vertDirty = !0;
}
t && (e.__proto__ = t);
e.prototype = Object.create(t && t.prototype);
e.prototype.constructor = e;
var i = {
type: {
configurable: !0
},
dataLength: {
configurable: !0
}
};
i.type.get = function() {
return e.type;
};
i.dataLength.get = function() {
return this._data.length;
};
i.dataLength.set = function(t) {
var e = this._data;
if (e.length !== t) {
for (var i = t; i < e.length; i++) He.free(e[i]);
for (var n = e.length; n < t; n++) e[n] = He.alloc();
e.length = t;
}
};
e.prototype.updateSizeNPivot = function(t, e, i, n) {
if (t !== this._width || e !== this._height || i !== this._pivotX || n !== this._pivotY) {
this._width = t;
this._height = e;
this._pivotX = i;
this._pivotY = n;
this.vertDirty = !0;
}
};
e.alloc = function() {
return ke.alloc();
};
e.free = function(t) {
if (t instanceof e) {
for (var i = t.length - 1; i > 0; i--) He.free(t._data[i]);
t._data.length = 0;
t._indices.length = 0;
t.material = null;
t.uvDirty = !0;
t.vertDirty = !0;
t.vertexCount = 0;
t.indiceCount = 0;
ke.free(t);
}
};
Object.defineProperties(e.prototype, i);
return e;
})(We);
qe.type = "RenderData";
ke = new le(function() {
return new qe();
}, 32);
var Xe = (function(t) {
function e() {
t.call(this);
this.ia = null;
}
t && (e.__proto__ = t);
e.prototype = Object.create(t && t.prototype);
e.prototype.constructor = e;
var i = {
type: {
configurable: !0
}
};
i.type.get = function() {
return e.type;
};
Object.defineProperties(e.prototype, i);
return e;
})(We);
Xe.type = "IARenderData";
var Ye = function(t) {
void 0 === t && (t = !0);
this._loaded = !1;
this._persist = t;
};
Ye.prototype.unload = function() {
this._loaded = !1;
};
Ye.prototype.reload = function() {};
var Je = (function(t) {
function e(e) {
void 0 === e && (e = !0);
t.call(this, e);
this._texture = null;
}
t && (e.__proto__ = t);
e.prototype = Object.create(t && t.prototype);
e.prototype.constructor = e;
e.prototype.getImpl = function() {
return this._texture;
};
e.prototype.getId = function() {};
e.prototype.destroy = function() {
this._texture && this._texture.destroy();
};
return e;
})(Ye);
function Ze(t) {
var e = t._programName + t._cullMode;
t._blend && (e += t._blendEq + t._blendAlphaEq + t._blendSrc + t._blendDst + t._blendSrcAlpha + t._blendDstAlpha + t._blendColor);
t._depthTest && (e += t._depthWrite + t._depthFunc);
t._stencilTest && (e += t._stencilFuncFront + t._stencilRefFront + t._stencilMaskFront + t._stencilFailOpFront + t._stencilZFailOpFront + t._stencilZPassOpFront + t._stencilWriteMaskFront + t._stencilFuncBack + t._stencilRefBack + t._stencilMaskBack + t._stencilFailOpBack + t._stencilZFailOpBack + t._stencilZPassOpBack + t._stencilWriteMaskBack);
return e;
}
var Ke = (function(t) {
function e(e) {
void 0 === e && (e = !1);
t.call(this, e);
this._effect = null;
this._texIds = {};
this._hash = "";
}
t && (e.__proto__ = t);
e.prototype = Object.create(t && t.prototype);
e.prototype.constructor = e;
var i = {
hash: {
configurable: !0
}
};
i.hash.get = function() {
return this._hash;
};
e.prototype.updateHash = function(t) {
this._hash = t || (function(t) {
var e = t._effect, i = "";
if (e) {
var n, r, s, a, o, h;
i += (function(t) {
for (var e = "", i = 0; i < t.length; i++) e += t[i].name + t[i].value;
return e;
})(e._defines);
for (n = 0; n < e._techniques.length; n++) {
i += (s = e._techniques[n]).stageIDs;
for (r = 0; r < s.passes.length; r++) i += Ze(s.passes[r]);
for (r = 0; r < s._parameters.length; r++) {
h = (a = s._parameters[r]).name;
if (o = e._properties[h]) switch (a.type) {
case Ne.PARAM_INT:
case Ne.PARAM_FLOAT:
i += o + ";";
break;

case Ne.PARAM_INT2:
case Ne.PARAM_FLOAT2:
i += o.x + "," + o.y + ";";
break;

case Ne.PARAM_INT4:
case Ne.PARAM_FLOAT4:
i += o.x + "," + o.y + "," + o.z + "," + o.w + ";";
break;

case Ne.PARAM_COLOR4:
i += o.r + "," + o.g + "," + o.b + "," + o.a + ";";
break;

case Ne.PARAM_MAT2:
i += o.m00 + "," + o.m01 + "," + o.m02 + "," + o.m03 + ";";
break;

case Ne.PARAM_TEXTURE_2D:
case Ne.PARAM_TEXTURE_CUBE:
i += t._texIds[h] + ";";
break;

case Ne.PARAM_INT3:
case Ne.PARAM_FLOAT3:
case Ne.PARAM_COLOR3:
case Ne.PARAM_MAT3:
case Ne.PARAM_MAT4:
i += JSON.stringify(o) + ";";
}
}
}
}
return i ? (function(t, e) {
for (var i, n = t.length, r = e ^ n, s = 0; n >= 4; ) {
i = 1540483477 * (65535 & (i = 255 & t.charCodeAt(s) | (255 & t.charCodeAt(++s)) << 8 | (255 & t.charCodeAt(++s)) << 16 | (255 & t.charCodeAt(++s)) << 24)) + ((1540483477 * (i >>> 16) & 65535) << 16);
r = 1540483477 * (65535 & r) + ((1540483477 * (r >>> 16) & 65535) << 16) ^ (i = 1540483477 * (65535 & (i ^= i >>> 24)) + ((1540483477 * (i >>> 16) & 65535) << 16));
n -= 4;
++s;
}
switch (n) {
case 3:
r ^= (255 & t.charCodeAt(s + 2)) << 16;

case 2:
r ^= (255 & t.charCodeAt(s + 1)) << 8;

case 1:
r = 1540483477 * (65535 & (r ^= 255 & t.charCodeAt(s))) + ((1540483477 * (r >>> 16) & 65535) << 16);
}
r = 1540483477 * (65535 & (r ^= r >>> 13)) + ((1540483477 * (r >>> 16) & 65535) << 16);
return (r ^= r >>> 15) >>> 0;
})(i, 666) : i;
})(this);
};
Object.defineProperties(e.prototype, i);
return e;
})(Ye), Qe = (function(t) {
function e() {
t.call(this, !1);
var e = new Ne.Pass("sprite");
e.setDepth(!1, !1);
e.setCullMode(Tt.CULL_NONE);
e.setBlend(Tt.BLEND_FUNC_ADD, Tt.BLEND_SRC_ALPHA, Tt.BLEND_ONE_MINUS_SRC_ALPHA, Tt.BLEND_FUNC_ADD, Tt.BLEND_SRC_ALPHA, Tt.BLEND_ONE_MINUS_SRC_ALPHA);
var i = new Ne.Technique([ "transparent" ], [ {
name: "texture",
type: Ne.PARAM_TEXTURE_2D
}, {
name: "color",
type: Ne.PARAM_COLOR4
} ], [ e ]);
this._color = {
r: 1,
g: 1,
b: 1,
a: 1
};
this._effect = new Ne.Effect([ i ], {
color: this._color
}, [ {
name: "useTexture",
value: !0
}, {
name: "useModel",
value: !1
}, {
name: "alphaTest",
value: !1
}, {
name: "use2DPos",
value: !0
}, {
name: "useColor",
value: !0
} ]);
this._mainTech = i;
this._texture = null;
}
t && (e.__proto__ = t);
e.prototype = Object.create(t && t.prototype);
e.prototype.constructor = e;
var i = {
effect: {
configurable: !0
},
useTexture: {
configurable: !0
},
useModel: {
configurable: !0
},
use2DPos: {
configurable: !0
},
useColor: {
configurable: !0
},
texture: {
configurable: !0
},
color: {
configurable: !0
}
};
i.effect.get = function() {
return this._effect;
};
i.useTexture.get = function() {
this._effect.getDefine("useTexture");
};
i.useTexture.set = function(t) {
this._effect.define("useTexture", t);
};
i.useModel.get = function() {
this._effect.getDefine("useModel");
};
i.useModel.set = function(t) {
this._effect.define("useModel", t);
};
i.use2DPos.get = function() {
this._effect.getDefine("use2DPos");
};
i.use2DPos.set = function(t) {
this._effect.define("use2DPos", t);
};
i.useColor.get = function() {
this._effect.getDefine("useColor");
};
i.useColor.set = function(t) {
this._effect.define("useColor", t);
};
i.texture.get = function() {
return this._texture;
};
i.texture.set = function(t) {
if (this._texture !== t) {
this._texture = t;
this._effect.setProperty("texture", t.getImpl());
this._texIds.texture = t.getId();
}
};
i.color.get = function() {
return this._color;
};
i.color.set = function(t) {
var e = this._color;
e.r = t.r / 255;
e.g = t.g / 255;
e.b = t.b / 255;
e.a = t.a / 255;
this._effect.setProperty("color", e);
};
e.prototype.clone = function() {
var t = new e();
t.texture = this.texture;
t.useTexture = this.useTexture;
t.useModel = this.useModel;
t.use2DPos = this.use2DPos;
t.useColor = this.useColor;
t.updateHash();
return t;
};
Object.defineProperties(e.prototype, i);
return e;
})(Ke), $e = (function(t) {
function e() {
t.call(this, !1);
var e = new Ne.Pass("gray_sprite");
e.setDepth(!1, !1);
e.setCullMode(Tt.CULL_NONE);
e.setBlend(Tt.BLEND_FUNC_ADD, Tt.BLEND_SRC_ALPHA, Tt.BLEND_ONE_MINUS_SRC_ALPHA, Tt.BLEND_FUNC_ADD, Tt.BLEND_SRC_ALPHA, Tt.BLEND_ONE_MINUS_SRC_ALPHA);
var i = new Ne.Technique([ "transparent" ], [ {
name: "texture",
type: Ne.PARAM_TEXTURE_2D
}, {
name: "color",
type: Ne.PARAM_COLOR4
} ], [ e ]);
this._color = {
r: 1,
g: 1,
b: 1,
a: 1
};
this._effect = new Ne.Effect([ i ], {
color: this._color
}, []);
this._mainTech = i;
this._texture = null;
}
t && (e.__proto__ = t);
e.prototype = Object.create(t && t.prototype);
e.prototype.constructor = e;
var i = {
effect: {
configurable: !0
},
texture: {
configurable: !0
},
color: {
configurable: !0
}
};
i.effect.get = function() {
return this._effect;
};
i.texture.get = function() {
return this._texture;
};
i.texture.set = function(t) {
if (this._texture !== t) {
this._texture = t;
this._effect.setProperty("texture", t.getImpl());
this._texIds.texture = t.getId();
}
};
i.color.get = function() {
return this._color;
};
i.color.set = function(t) {
var e = this._color;
e.r = t.r / 255;
e.g = t.g / 255;
e.b = t.b / 255;
e.a = t.a / 255;
this._effect.setProperty("color", e);
};
e.prototype.clone = function() {
var t = new e();
t.texture = this.texture;
t.color = this.color;
t.updateHash();
return t;
};
Object.defineProperties(e.prototype, i);
return e;
})(Ke), ti = (function(t) {
function e() {
t.call(this, !1);
this._pass = new Ne.Pass("sprite");
this._pass.setDepth(!1, !1);
this._pass.setCullMode(Tt.CULL_NONE);
this._pass.setBlend(Tt.BLEND_FUNC_ADD, Tt.BLEND_SRC_ALPHA, Tt.BLEND_ONE_MINUS_SRC_ALPHA, Tt.BLEND_FUNC_ADD, Tt.BLEND_SRC_ALPHA, Tt.BLEND_ONE_MINUS_SRC_ALPHA);
var e = new Ne.Technique([ "transparent" ], [ {
name: "texture",
type: Ne.PARAM_TEXTURE_2D
}, {
name: "alphaThreshold",
type: Ne.PARAM_FLOAT
}, {
name: "color",
type: Ne.PARAM_COLOR4
} ], [ this._pass ]);
this._effect = new Ne.Effect([ e ], {
color: {
r: 1,
g: 1,
b: 1,
a: 1
}
}, [ {
name: "useTexture",
value: !0
}, {
name: "useModel",
value: !1
}, {
name: "alphaTest",
value: !0
}, {
name: "use2DPos",
value: !0
}, {
name: "useColor",
value: !0
} ]);
this._mainTech = e;
this._texture = null;
}
t && (e.__proto__ = t);
e.prototype = Object.create(t && t.prototype);
e.prototype.constructor = e;
var i = {
effect: {
configurable: !0
},
useTexture: {
configurable: !0
},
useColor: {
configurable: !0
},
texture: {
configurable: !0
},
alphaThreshold: {
configurable: !0
}
};
i.effect.get = function() {
return this._effect;
};
i.useTexture.get = function() {
this._effect.getDefine("useTexture");
};
i.useTexture.set = function(t) {
this._effect.define("useTexture", t);
};
i.useColor.get = function() {
this._effect.getDefine("useColor");
};
i.useColor.set = function(t) {
this._effect.define("useColor", t);
};
i.texture.get = function() {
return this._texture;
};
i.texture.set = function(t) {
if (this._texture !== t) {
this._texture = t;
this._effect.setProperty("texture", t.getImpl());
this._texIds.texture = t.getId();
}
};
i.alphaThreshold.get = function() {
return this._effect.getProperty("alphaThreshold");
};
i.alphaThreshold.set = function(t) {
this._effect.setProperty("alphaThreshold", t);
};
e.prototype.clone = function() {
var t = new e();
t.useTexture = this.useTexture;
t.useColor = this.useColor;
t.texture = this.texture;
t.alphaThreshold = this.alphaThreshold;
t.updateHash();
return t;
};
Object.defineProperties(e.prototype, i);
return e;
})(Ke), ei = function(t) {
var e;
try {
e = t.getContext("2d");
} catch (t) {
console.error(t);
return;
}
this._canvas = t;
this._ctx = e;
this._caps = {};
this._stats = {
drawcalls: 0
};
this._vx = this._vy = this._vw = this._vh = 0;
this._sx = this._sy = this._sw = this._sh = 0;
};
ei.prototype._restoreTexture = function(t) {};
ei.prototype.setViewport = function(t, e, i, n) {
if (this._vx !== t || this._vy !== e || this._vw !== i || this._vh !== n) {
this._vx = t;
this._vy = e;
this._vw = i;
this._vh = n;
}
};
ei.prototype.setScissor = function(t, e, i, n) {
if (this._sx !== t || this._sy !== e || this._sw !== i || this._sh !== n) {
this._sx = t;
this._sy = e;
this._sw = i;
this._sh = n;
}
};
ei.prototype.clear = function(t) {
var e = this._ctx;
e.clearRect(this._vx, this._vy, this._vw, this._vh);
if (t && (0 !== t[0] || 0 !== t[1] || 0 !== t[2])) {
e.fillStyle = "rgb(" + t[0] + "," + t[1] + "," + t[2] + ")";
e.globalAlpha = t[3];
e.fillRect(this._vx, this._vy, this._vw, this._vh);
}
};
var ii = function(t, e) {
this._device = t;
this._width = 4;
this._height = 4;
this._image = null;
if (e) {
void 0 !== e.width && (this._width = e.width);
void 0 !== e.height && (this._height = e.height);
this.updateImage(e);
}
};
ii.prototype.update = function(t) {
this.updateImage(t);
};
ii.prototype.updateImage = function(t) {
if (t.images && t.images[0]) {
var e = t.images[0];
e && e !== this._image && (this._image = e);
}
};
ii.prototype.destroy = function() {
this._image = null;
};
var ni = {
Device: ei,
Texture2D: ii
}, ri = Ne.Scene, si = Ne.Camera, ai = Ne.View, oi = Tt.Texture2D, hi = Tt.Device, li = Ne.Model, ci = Ne.InputAssembler;
Ne.addStage("transparent");
var ui = {
Device: hi,
ForwardRenderer: Ve,
Texture2D: oi,
canvas: ni,
Scene: ri,
Camera: si,
View: ai,
Model: li,
RenderData: qe,
IARenderData: Xe,
InputAssembler: ci,
Asset: Ye,
TextureAsset: Je,
Material: Ke,
SpriteMaterial: Qe,
GraySpriteMaterial: $e,
StencilMaterial: ti,
shaders: je,
RecyclePool: _e,
Pool: le,
math: H,
renderer: Ne,
gfx: Tt
};
e.exports = ui;
}), {} ],
196: [ (function(t, e, i) {
cc.vmath.mat4, Math.PI;
var n = 0, r = 1, s = 2, a = r | s, o = 4, h = 8, l = 16, c = 32, u = 64, _ = 128, m = 256, f = 512, d = 1024, p = null, g = 0;
function y() {
this._func = T;
this._next = null;
}
var v = y.prototype;
v._doNothing = function() {};
v._localTransform = function(t) {
t._updateLocalMatrix();
t._renderFlag &= ~r;
this._next._func(t);
};
v._worldTransform = function(t) {
p.worldMatDirty++;
var e = t._matrix, i = t._position;
e.m12 = i.x;
e.m13 = i.y;
(function(t, e, i) {
var n = e.m00, r = e.m01, s = e.m04, a = e.m05, o = e.m12, h = e.m13, l = i.m00, c = i.m01, u = i.m04, _ = i.m05, m = i.m12, f = i.m13;
if (0 !== c || 0 !== u) {
t.m00 = n * l + r * u;
t.m01 = n * c + r * _;
t.m04 = s * l + a * u;
t.m05 = s * c + a * _;
t.m12 = l * o + u * h + m;
t.m13 = c * o + _ * h + f;
} else {
t.m00 = n * l;
t.m01 = r * _;
t.m04 = s * l;
t.m05 = a * _;
t.m12 = l * o + m;
t.m13 = _ * h + f;
}
})(t._worldMatrix, e, t._parent._worldMatrix);
t._renderFlag &= ~s;
this._next._func(t);
p.worldMatDirty--;
};
v._color = function(t) {
var e = t._renderComponent;
e ? e._updateColor() : t._renderFlag &= ~l;
this._next._func(t);
};
v._opacity = function(t) {
p.parentOpacityDirty++;
t._renderFlag &= ~h;
this._next._func(t);
p.parentOpacityDirty--;
};
v._updateRenderData = function(t) {
var e = t._renderComponent;
e._assembler.updateRenderData(e);
t._renderFlag &= ~o;
this._next._func(t);
};
v._render = function(t) {
var e = t._renderComponent;
p._commitComp(e, e._assembler, t._cullingMask);
this._next._func(t);
};
v._customIARender = function(t) {
var e = t._renderComponent;
p._commitIA(e, e._assembler, t._cullingMask);
this._next._func(t);
};
v._children = function(t) {
var e = g, i = p.parentOpacity;
p.parentOpacity *= t._opacity / 255;
for (var n = p.worldMatDirty ? s : 0, r = p.parentOpacityDirty ? l : 0, a = t._children, o = 0, h = a.length; o < h; o++) {
var c = a[o];
if (c._activeInHierarchy) {
g = c._cullingMask = 0 === c.groupIndex ? e : 1 << c.groupIndex;
c._renderFlag |= n | r;
c._color.a = c._opacity * p.parentOpacity;
A[c._renderFlag]._func(c);
c._color.a = 255;
}
}
p.parentOpacity = i;
this._next._func(t);
g = e;
};
v._postUpdateRenderData = function(t) {
var e = t._renderComponent;
e._postAssembler && e._postAssembler.updateRenderData(e);
t._renderFlag &= ~m;
this._next._func(t);
};
v._postRender = function(t) {
var e = t._renderComponent;
p._commitComp(e, e._postAssembler, t._cullingMask);
this._next._func(t);
};
var x = new y();
x._func = x._doNothing;
x._next = x;
var A = {};
function b(t, e) {
var i = new y();
i._next = e || x;
switch (t) {
case n:
i._func = i._doNothing;
break;

case r:
i._func = i._localTransform;
break;

case s:
i._func = i._worldTransform;
break;

case l:
i._func = i._color;
break;

case h:
i._func = i._opacity;
break;

case o:
i._func = i._updateRenderData;
break;

case c:
i._func = i._render;
break;

case u:
i._func = i._customIARender;
break;

case _:
i._func = i._children;
break;

case m:
i._func = i._postUpdateRenderData;
break;

case f:
i._func = i._postRender;
}
return i;
}
function T(t) {
var e = t._renderFlag;
(A[e] = (function(t) {
for (var e = null, i = d; i > 0; ) {
i & t && (e = b(i, e));
i >>= 1;
}
return e;
})(e))._func(t);
}
y.flows = A;
y.createFlow = b;
y.render = function(t) {
g = 1 << t.groupIndex;
if (t._renderFlag & s) {
p.worldMatDirty++;
t._calculWorldMatrix();
t._renderFlag &= ~s;
A[t._renderFlag]._func(t);
p.worldMatDirty--;
} else A[t._renderFlag]._func(t);
};
y.init = function(t) {
p = t;
A[0] = x;
for (var e = 1; e < d; e++) A[e] = new y();
};
y.FLAG_DONOTHING = n;
y.FLAG_LOCAL_TRANSFORM = r;
y.FLAG_WORLD_TRANSFORM = s;
y.FLAG_TRANSFORM = a;
y.FLAG_COLOR = l;
y.FLAG_OPACITY = h;
y.FLAG_UPDATE_RENDER_DATA = o;
y.FLAG_RENDER = c;
y.FLAG_CUSTOM_IA_RENDER = u;
y.FLAG_CHILDREN = _;
y.FLAG_POST_UPDATE_RENDER_DATA = m;
y.FLAG_POST_RENDER = f;
y.FLAG_FINAL = d;
e.exports = cc.RenderFlow = y;
}), {} ],
197: [ (function(t, e, i) {
var n = 2;
function r(t, e) {
var i = new cc.RenderTexture();
i.initWithSize(t, e);
i.update();
this._texture = i;
this._x = n;
this._y = n;
this._nexty = n;
this._width = t;
this._height = e;
this._innerTextureInfos = {};
this._innerSpriteFrames = [];
}
cc.js.mixin(r.prototype, {
insertSpriteFrame: function(t) {
var e = t._rect, i = t._texture, r = this._innerTextureInfos[i._id], s = e.x, a = e.y;
if (r) {
e.x += r.x;
e.y += r.y;
} else {
var o = i.width, h = i.height;
if (this._x + o + n > this._width) {
this._x = n;
this._y = this._nexty;
}
this._y + h > this._nexty && (this._nexty = this._y + h + n);
if (this._nexty > this._height) return !1;
this._texture.drawTextureAt(i, this._x - 1, this._y);
this._texture.drawTextureAt(i, this._x + 1, this._y);
this._texture.drawTextureAt(i, this._x, this._y - 1);
this._texture.drawTextureAt(i, this._x, this._y + 1);
this._texture.drawTextureAt(i, this._x, this._y);
this._innerTextureInfos[i._id] = {
x: this._x,
y: this._y,
texture: i
};
e.x += this._x;
e.y += this._y;
this._x += o + n;
this._dirty = !0;
}
t._original = {
x: s,
y: a,
texture: t._texture
};
t._texture = this._texture;
t._calculateUV();
this._innerSpriteFrames.push(t);
return !0;
},
update: function() {
if (this._dirty) {
this._texture.update();
this._dirty = !1;
}
},
reset: function() {
this._x = n;
this._y = n;
this._nexty = n;
for (var t = this._innerSpriteFrames, e = 0, i = t.length; e < i; e++) {
var r = t[e];
if (r.isValid) {
var s = r._original;
r._rect.x = s.x;
r._rect.y = s.y;
r._texture = s.texture;
r._calculateUV();
r._original = null;
}
}
this._innerSpriteFrames.length = 0;
this._innerTextureInfos = {};
},
destroy: function() {
this.reset();
this._texture.destroy();
}
});
e.exports = r;
}), {} ],
198: [ (function(t, e, i) {
var n = t("./atlas"), r = [], s = -1, a = 5, o = 2048, h = 512;
function l() {
var t = r[++s];
if (!t) {
t = new n(o, o);
r.push(t);
}
return t;
}
function c() {
_.reset();
}
var u = !1, _ = {
get enabled() {
return u;
},
set enabled(t) {
if (u !== t) {
if (t) {
this.reset();
cc.director.on(cc.Director.EVENT_BEFORE_SCENE_LAUNCH, c);
} else cc.director.off(cc.Director.EVENT_BEFORE_SCENE_LAUNCH, c);
u = t;
}
},
get maxAtlasCount() {
return a;
},
set maxAtlasCount(t) {
a = t;
},
get textureSize() {
return o;
},
set textureSize(t) {
o = t;
},
get maxFrameSize() {
return h;
},
set maxFrameSize(t) {
h = t;
},
insertSpriteFrame: function(t) {
0;
if (u && s !== a && t && !t._original) {
var e = t._texture, i = e.width, n = e.height, o = e._minFilter, c = e._magFilter, _ = cc.Texture2D.Filter.LINEAR;
if (!(i > h || n > h || i <= 8 || n <= 8 || (o & c) !== _)) {
var m = r[s];
m || (m = l());
m.insertSpriteFrame(t) || s === a || (m = l()).insertSpriteFrame(t);
}
}
},
reset: function() {
for (var t = 0, e = r.length; t < e; t++) r[t].destroy();
r.length = 0;
s = -1;
},
showDebug: !1,
update: function() {
if (this.enabled) for (var t = 0; t <= s; t++) r[t].update();
}
};
e.exports = cc.dynamicAtlasManager = _;
}), {
"./atlas": 197
} ],
199: [ (function(t, e, i) {
var n = t("../../../platform/CCMacro"), r = (t("../../render-engine"), t("../../../components/CCLabel").Overflow), s = t("../../../utils/text-utils").TextUtils, a = function() {
this._u = 0;
this._v = 0;
this._width = 0;
this._height = 0;
this._offsetX = 0;
this._offsetY = 0;
this._textureID = 0;
this._validDefinition = !1;
this._xAdvance = 0;
};
cc.FontAtlas = function(t) {
this._letterDefinitions = {};
};
cc.FontAtlas.prototype = {
constructor: cc.FontAtlas,
addLetterDefinitions: function(t, e) {
this._letterDefinitions[t] = e;
},
cloneLetterDefinition: function() {
var t = {};
for (var e in this._letterDefinitions) {
var i = new a();
cc.js.mixin(i, this._letterDefinitions[e]);
t[e] = i;
}
return t;
},
assignLetterDefinitions: function(t) {
for (var e in this._letterDefinitions) {
var i = t[e], n = this._letterDefinitions[e];
cc.js.mixin(n, i);
}
},
scaleFontLetterDefinition: function(t) {
for (var e in this._letterDefinitions) {
var i = this._letterDefinitions[e];
i._width *= t;
i._height *= t;
i._offsetX *= t;
i._offsetY *= t;
i._xAdvance *= t;
}
},
getLetterDefinitionForChar: function(t) {
return this._letterDefinitions.hasOwnProperty(t.charCodeAt(0)) ? this._letterDefinitions[t.charCodeAt(0)] : null;
}
};
var o = function() {
this._char = "";
this._valid = !0;
this._positionX = 0;
this._positionY = 0;
this._lineIndex = 0;
}, h = cc.rect(), l = null, c = [], u = [], _ = [], m = [], f = cc.size(), d = null, p = null, g = 0, y = 0, v = 0, x = 0, A = 0, b = 1, T = null, C = "", w = 0, S = 0, E = cc.size(), D = 0, M = 0, I = 0, P = 0, B = 0, R = !1, L = 0, O = 0, F = 0;
e.exports = {
updateRenderData: function(t) {
if (t._renderData.vertDirty) {
l = t;
this._updateProperties();
this._updateContent();
l._actualFontSize = w;
l.node.setContentSize(E);
l._renderData.vertDirty = l._renderData.uvDirty = !1;
l = null;
this._resetProperties();
}
},
_updateFontScale: function() {
b = w / S;
},
_updateProperties: function() {
var t = l.font;
T = t.spriteFrame;
p = t._fntConfig;
if (!(d = l._fontAtlas)) {
d = new cc.FontAtlas(p);
var e = p.fontDefDictionary;
for (var i in e) {
var n = new a(), s = e[i].rect;
n._offsetX = e[i].xOffset;
n._offsetY = e[i].yOffset;
n._width = s.width;
n._height = s.height;
n._u = s.x;
n._v = s.y;
n._textureID = 0;
n._validDefinition = !0;
n._xAdvance = e[i].xAdvance;
d.addLetterDefinitions(i, n);
}
l._fontAtlas = d;
}
C = l.string.toString();
w = l.fontSize;
S = p.fontSize;
E = l.node._contentSize;
D = l.horizontalAlign;
M = l.verticalAlign;
I = l.spacingX;
B = l.overflow;
P = l._lineHeight;
R = B !== r.NONE && (B === r.RESIZE_HEIGHT || l.enableWrapText);
this._setupBMFontOverflowMetrics();
},
_resetProperties: function() {
d = null;
p = null;
T = null;
},
_updateContent: function() {
this._updateFontScale();
this._computeHorizontalKerningForText();
this._alignText();
},
_computeHorizontalKerningForText: function() {
for (var t = C, e = t.length, i = p.kerningDict, n = c, r = -1, s = 0; s < e; ++s) {
var a = t.charCodeAt(s), o = i[r << 16 | 65535 & a] || 0;
n[s] = s < e - 1 ? o : 0;
r = a;
}
},
_multilineTextWrap: function(t) {
var e = C.length, i = 0, n = 0, r = 0, a = 0, o = 0, h = 0, l = 0, u = null, m = cc.v2(0, 0);
this._updateFontScale();
for (var f = d._letterDefinitions, v = 0; v < e; ) {
var T = C.charAt(v);
if ("\n" !== T) {
for (var w = t(C, v, e), S = h, D = l, M = o, B = n, N = !1, k = 0; k < w; ++k) {
var z = v + k;
if ("\r" !== (T = C.charAt(z))) if (u = d.getLetterDefinitionForChar(T)) {
var G = B + u._offsetX * b;
if (R && F > 0 && n > 0 && G + u._width * b > F && !s.isUnicodeSpace(T)) {
_.push(o);
o = 0;
i++;
n = 0;
r -= P * b + 0;
N = !0;
break;
}
m.x = G;
m.y = r - u._offsetY * b;
this._recordLetterInfo(f, m, T, z, i);
z + 1 < c.length && z < e - 1 && (B += c[z + 1]);
B += u._xAdvance * b + I;
M = m.x + u._width * b;
S < m.y && (S = m.y);
D > m.y - u._height * b && (D = m.y - u._height * b);
} else {
this._recordPlaceholderInfo(z, T);
console.log("Can't find letter definition in texture atlas " + p.atlasName + " for letter:" + T);
} else this._recordPlaceholderInfo(z, T);
}
if (!N) {
n = B;
o = M;
h < S && (h = S);
l > D && (l = D);
a < o && (a = o);
v += w;
}
} else {
_.push(o);
o = 0;
i++;
n = 0;
r -= P * b + 0;
this._recordPlaceholderInfo(v, T);
v++;
}
}
_.push(o);
y = (g = i + 1) * P * b;
g > 1 && (y += 0 * (g - 1));
E.width = L;
E.height = O;
L <= 0 && (E.width = parseFloat(a.toFixed(2)));
O <= 0 && (E.height = parseFloat(y.toFixed(2)));
x = E.height;
A = 0;
h > 0 && (x = E.height + h);
l < -y && (A = y + l);
return !0;
},
_getFirstCharLen: function() {
return 1;
},
_getFirstWordLen: function(t, e, i) {
var n = t.charAt(e);
if (s.isUnicodeCJK(n) || "\n" === n || s.isUnicodeSpace(n)) return 1;
var r = 1, a = d.getLetterDefinitionForChar(n);
if (!a) return r;
for (var o = a._xAdvance * b + I, h = e + 1; h < i; ++h) {
n = t.charAt(h);
if (!(a = d.getLetterDefinitionForChar(n))) break;
if (o + a._offsetX * b + a._width * b > F && !s.isUnicodeSpace(n) && F > 0) return r;
o += a._xAdvance * b + I;
if ("\n" === n || s.isUnicodeSpace(n) || s.isUnicodeCJK(n)) break;
r++;
}
return r;
},
_multilineTextWrapByWord: function() {
return this._multilineTextWrap(this._getFirstWordLen);
},
_multilineTextWrapByChar: function() {
return this._multilineTextWrap(this._getFirstCharLen);
},
_recordPlaceholderInfo: function(t, e) {
if (t >= u.length) {
var i = new o();
u.push(i);
}
u[t]._char = e;
u[t]._valid = !1;
},
_recordLetterInfo: function(t, e, i, n, r) {
if (n >= u.length) {
var s = new o();
u.push(s);
}
i = i.charCodeAt(0);
u[n]._lineIndex = r;
u[n]._char = i;
u[n]._valid = t[i]._validDefinition;
u[n]._positionX = e.x;
u[n]._positionY = e.y;
},
_alignText: function() {
y = 0;
_.length = 0;
this._multilineTextWrapByWord();
this._computeAlignmentOffset();
B === r.SHRINK && w > 0 && this._isVerticalClamp() && this._shrinkLabelToContentSize(this._isVerticalClamp);
this._updateQuads() || B === r.SHRINK && this._shrinkLabelToContentSize(this._isHorizontalClamp);
},
_scaleFontSizeDown: function(t) {
var e = !0;
if (!t) {
t = .1;
e = !1;
}
w = t;
e && this._updateContent();
},
_shrinkLabelToContentSize: function(t) {
for (var e = w, i = P, n = d, r = 0, s = n.cloneLetterDefinition(), a = !0; t(); ) {
var o = e - ++r;
a = !1;
if (o <= 0) break;
var h = o / e;
n.assignLetterDefinitions(s);
n.scaleFontLetterDefinition(h);
P = i * h;
this._multilineTextWrapByWord();
this._computeAlignmentOffset();
}
P = i;
n.assignLetterDefinitions(s);
a || e - r >= 0 && this._scaleFontSizeDown(e - r);
},
_isVerticalClamp: function() {
return y > E.height;
},
_isHorizontalClamp: function() {
for (var t = d._letterDefinitions, e = !1, i = 0, n = C.length; i < n; ++i) {
var r = u[i];
if (r._valid) {
var s = t[r._char], a = r._positionX + s._width / 2 * b, o = r._lineIndex;
if (L > 0) if (R) {
if (_[o] > E.width && (a > E.width || a < 0)) {
e = !0;
break;
}
} else if (a > E.width) {
e = !0;
break;
}
}
}
return e;
},
_isHorizontalClamped: function(t, e) {
var i = _[e], n = t > E.width || t < 0;
return R ? i > E.width && n : n;
},
_updateQuads: function() {
var t = d._letterDefinitions, e = T._texture, i = l.node, n = l._renderData;
n.dataLength = n.vertexCount = n.indiceCount = 0;
for (var s = E, a = i._anchorPoint.x * s.width, o = i._anchorPoint.y * s.height, c = !0, _ = 0, f = C.length; _ < f; ++_) {
var p = u[_];
if (p._valid) {
var g = t[p._char];
h.height = g._height;
h.width = g._width;
h.x = g._u;
h.y = g._v;
var y = p._positionY + v;
if (O > 0) {
if (y > x) {
var w = y - x;
h.y += w;
h.height -= w;
y -= w;
}
y - g._height * b < A && (h.height = y < A ? 0 : y - A);
}
var S = p._lineIndex, D = p._positionX + g._width / 2 * b + m[S];
if (L > 0 && this._isHorizontalClamped(D, S)) if (B === r.CLAMP) h.width = 0; else if (B === r.SHRINK) {
if (E.width > g._width) {
c = !1;
break;
}
h.width = 0;
}
if (h.height > 0 && h.width > 0) {
var M = T.isRotated(), I = T._originalSize, P = T._rect, R = T._offset, F = R.x + (I.width - P.width) / 2, N = R.y - (I.height - P.height) / 2;
if (M) {
var k = h.x;
h.x = P.x + P.height - h.y - h.height - N;
h.y = k + P.y - F;
h.y < 0 && (h.height = h.height + N);
} else {
h.x += P.x - F;
h.y += P.y + N;
}
var z = p._positionX + m[p._lineIndex];
this.appendQuad(n, e, h, M, z - a, y - o, b);
}
}
}
return c;
},
appendQuad: function(t, e, i, n, r, s, a) {},
_computeAlignmentOffset: function() {
m.length = 0;
switch (D) {
case n.TextAlignment.LEFT:
for (var t = 0; t < g; ++t) m.push(0);
break;

case n.TextAlignment.CENTER:
for (var e = 0, i = _.length; e < i; e++) m.push((E.width - _[e]) / 2);
break;

case n.TextAlignment.RIGHT:
for (var r = 0, s = _.length; r < s; r++) m.push(E.width - _[r]);
}
switch (M) {
case n.VerticalTextAlignment.TOP:
v = E.height;
break;

case n.VerticalTextAlignment.CENTER:
v = (E.height + y) / 2;
break;

case n.VerticalTextAlignment.BOTTOM:
v = y;
}
},
_setupBMFontOverflowMetrics: function() {
var t = E.width, e = E.height;
B === r.RESIZE_HEIGHT && (e = 0);
if (B === r.NONE) {
t = 0;
e = 0;
}
L = t;
O = e;
f.width = t;
f.height = e;
F = t;
}
};
}), {
"../../../components/CCLabel": 67,
"../../../platform/CCMacro": 158,
"../../../utils/text-utils": 238,
"../../render-engine": 195
} ],
200: [ (function(t, e, i) {
var n = t("../../../platform/CCMacro"), r = t("../../../utils/text-utils"), s = (t("../../render-engine"), 
t("../../../components/CCLabel")), a = t("../../../components/CCLabelOutline"), o = s.Overflow, h = r.TextUtils, l = r.CustomFontLoader, c = cc.Color.WHITE, u = null, _ = null, m = null, f = "", d = "", p = 0, g = 0, y = [], v = cc.size(), x = 0, A = 0, b = 0, T = null, C = "", w = o.NONE, S = !1, E = !1, D = null, M = 0, I = 0, P = !1, B = !1, R = !1, L = void 0, O = {
pool: [],
get: function() {
var t = this.pool.pop();
if (!t) {
var e = document.createElement("canvas");
t = {
canvas: e,
context: e.getContext("2d")
};
}
return t;
},
put: function(t) {
this.pool.length >= 32 || this.pool.push(t);
}
};
e.exports = {
_getAssemblerData: function() {
if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS) L = O.get(); else if (!L) {
var t = document.createElement("canvas");
L = {
canvas: t,
context: t.getContext("2d")
};
}
L.canvas.width = L.canvas.height = 1;
return L;
},
_resetAssemblerData: function(t) {
cc.game.renderType === cc.game.RENDER_TYPE_CANVAS && t && O.put(t);
},
updateRenderData: function(t) {
if (t._renderData.vertDirty && this._updateFontFamly(t)) {
this._updateProperties(t);
this._calculateLabelFont();
this._calculateSplitedStrings();
this._updateLabelDimensions();
this._calculateTextBaseline();
this._updateTexture(t);
t._actualFontSize = p;
t.node.setContentSize(v);
this._updateVerts(t);
t._renderData.vertDirty = t._renderData.uvDirty = !1;
u = null;
_ = null;
m = null;
}
},
_updateVerts: function() {},
_updateFontFamly: function(t) {
if (t.useSystemFont) C = t.fontFamily; else {
if (!t.font) return !1;
var e = t.font.nativeUrl;
C = l._getFontFamily(e);
var i = l._fontCache[C];
if (!i || !i.isLoaded()) {
l.loadTTF(e, (function() {
t._updateRenderData();
}));
return !1;
}
}
return !0;
},
_updateProperties: function(t) {
var e = t._assemblerData;
u = e.context;
_ = e.canvas;
m = t._texture;
d = t.string.toString();
p = t._fontSize;
g = p;
w = t.overflow;
v.width = t.node.width;
v.height = t.node.height;
x = t._lineHeight;
A = t.horizontalAlign;
b = t.verticalAlign;
T = t.node.color;
P = t._isBold;
B = t._isItalic;
R = t._isUnderline;
S = w !== o.NONE && (w === o.RESIZE_HEIGHT || t.enableWrapText);
var i = a && t.getComponent(a);
if (i && i.enabled) {
E = !0;
I = M = i.width;
(D = cc.color(i.color)).a = D.a * t.node.color.a / 255;
} else {
E = !1;
I = 0;
}
},
_calculateFillTextStartPosition: function() {
var t = this._getLineHeight(), e = y.length, i = void 0, r = void 0;
i = A === n.TextAlignment.RIGHT ? v.width - I : A === n.TextAlignment.CENTER ? v.width / 2 : 0 + I;
r = b === n.VerticalTextAlignment.TOP ? 0 : b === n.VerticalTextAlignment.CENTER ? v.height / 2 - t * (e - 1) / 2 : v.height - t * (e - 1);
return cc.v2(i, r);
},
_updateTexture: function() {
u.clearRect(0, 0, _.width, _.height);
u.font = f;
var t = this._calculateFillTextStartPosition(), e = this._getLineHeight();
u.lineJoin = "round";
u.fillStyle = "rgba(" + T.r + ", " + T.g + ", " + T.b + ", " + T.a / 255 + ")";
for (var i = void 0, n = 0; n < y.length; ++n) {
if (E) {
var r = D || c;
u.globalCompositeOperation = "source-over";
u.strokeStyle = "rgba(" + r.r + ", " + r.g + ", " + r.b + ", " + r.a / 255 + ")";
u.lineWidth = 2 * M;
u.strokeText(y[n], t.x, t.y + n * e);
}
u.fillText(y[n], t.x, t.y + n * e);
if (R) {
i = this._calculateUnderlineStartPosition();
u.save();
u.beginPath();
u.lineWidth = p / 8;
u.strokeStyle = "rgba(" + T.r + ", " + T.g + ", " + T.b + ", " + T.a / 255 + ")";
u.moveTo(i.x, i.y + n * e - 1);
u.lineTo(i.x + _.width, i.y + n * e - 1);
u.stroke();
u.restore();
}
}
m.handleLoadedTexture();
},
_calculateUnderlineStartPosition: function() {
var t, e = this._getLineHeight(), i = y.length, r = void 0;
t = 0 + I;
r = b === n.VerticalTextAlignment.TOP ? p : b === n.VerticalTextAlignment.CENTER ? v.height / 2 - e * (i - 1) / 2 + p / 2 : v.height - e * (i - 1);
return cc.v2(t, r);
},
_updateLabelDimensions: function() {
var t = d.split("\n");
if (w === o.RESIZE_HEIGHT) v.height = y.length * this._getLineHeight(); else if (w === o.NONE) {
y = t;
for (var e = 0, i = 0, n = 0; n < t.length; ++n) {
var r = u.measureText(t[n]).width;
e = e > r ? e : r;
}
i = y.length * this._getLineHeight();
v.width = parseFloat(e.toFixed(2)) + 2 * I;
v.height = parseFloat(i.toFixed(2));
B && (v.width += g * Math.tan(.20943951));
}
_.width = v.width;
_.height = v.height;
},
_calculateTextBaseline: function() {
this._node;
var t = void 0, e = void 0;
t = A === n.TextAlignment.RIGHT ? "right" : A === n.TextAlignment.CENTER ? "center" : "left";
u.textAlign = t;
e = b === n.VerticalTextAlignment.TOP ? "top" : b === n.VerticalTextAlignment.CENTER ? "middle" : "bottom";
u.textBaseline = e;
},
_calculateSplitedStrings: function() {
var t = d.split("\n");
if (S) {
y = [];
for (var e = v.width - 2 * I, i = 0; i < t.length; ++i) {
var n = u.measureText(t[i]).width, r = h.fragmentText(t[i], n, e, this._measureText(u));
y = y.concat(r);
}
} else y = t;
},
_getFontDesc: function() {
var t = p.toString() + "px ";
t += C;
P && (t = "bold " + t);
return t;
},
_getLineHeight: function() {
var t = x;
return 0 | (t = 0 === t ? p : t * p / g);
},
_calculateParagraphLength: function(t, e) {
for (var i = [], n = 0; n < t.length; ++n) {
var r = e.measureText(t[n]);
i.push(r.width);
}
return i;
},
_measureText: function(t) {
return function(e) {
return t.measureText(e).width;
};
},
_calculateLabelFont: function() {
f = this._getFontDesc();
u.font = f;
if (w === o.SHRINK) {
var t = d.split("\n"), e = this._calculateParagraphLength(t, u);
y = t;
var i = 0, n = 0, r = 0;
if (S) {
var s = v.width - 2 * I, a = v.height - 2 * I;
if (s < 0 || a < 0) {
f = this._getFontDesc();
u.font = f;
return;
}
n = a + 1;
r = s + 1;
for (var l = p + 1, c = "", _ = !0, m = 0 | l; n > a || r > s; ) {
_ ? l = m / 2 | 0 : m = l = m - 1;
if (l <= 0) {
cc.logID(4003);
break;
}
p = l;
f = this._getFontDesc();
u.font = f;
y = [];
n = 0;
for (i = 0; i < t.length; ++i) {
var x = 0, A = u.measureText(t[i]).width;
c = h.fragmentText(t[i], A, s, this._measureText(u));
for (;x < c.length; ) {
r = u.measureText(c[x]).width;
n += this._getLineHeight();
++x;
}
y = y.concat(c);
}
if (_) if (n > a) m = 0 | l; else {
_ = !1;
n = a + 1;
}
}
} else {
n = t.length * this._getLineHeight();
for (i = 0; i < t.length; ++i) r < e[i] && (r = e[i]);
var b = (v.width - 2 * I) / r, T = v.height / n;
p = g * Math.min(1, b, T) | 0;
f = this._getFontDesc();
u.font = f;
}
}
}
};
}), {
"../../../components/CCLabel": 67,
"../../../components/CCLabelOutline": 68,
"../../../platform/CCMacro": 158,
"../../../utils/text-utils": 238,
"../../render-engine": 195
} ],
201: [ (function(t, e, i) {
"use strict";
e.exports = n;
function n(t, e, i) {
i = i || 2;
var n, o, h, l, c, m, d, p = e && e.length, g = p ? e[0] * i : t.length, y = r(t, 0, g, i, !0), v = [];
if (!y) return v;
p && (y = (function(t, e, i, n) {
var a, o, h, l, c, m = [];
for (a = 0, o = e.length; a < o; a++) {
h = e[a] * n;
l = a < o - 1 ? e[a + 1] * n : t.length;
(c = r(t, h, l, n, !1)) === c.next && (c.steiner = !0);
m.push(f(c));
}
m.sort(u);
for (a = 0; a < m.length; a++) {
_(m[a], i);
i = s(i, i.next);
}
return i;
})(t, e, y, i));
if (t.length > 80 * i) {
n = h = t[0];
o = l = t[1];
for (var x = i; x < g; x += i) {
c = t[x];
m = t[x + 1];
c < n && (n = c);
m < o && (o = m);
c > h && (h = c);
m > l && (l = m);
}
d = Math.max(h - n, l - o);
}
a(y, v, i, n, o, d);
return v;
}
function r(t, e, i, n, r) {
var s, a;
if (r === w(t, e, i, n) > 0) for (s = e; s < i; s += n) a = b(s, t[s], t[s + 1], a); else for (s = i - n; s >= e; s -= n) a = b(s, t[s], t[s + 1], a);
if (a && y(a, a.next)) {
T(a);
a = a.next;
}
return a;
}
function s(t, e) {
if (!t) return t;
e || (e = t);
var i, n = t;
do {
i = !1;
if (n.steiner || !y(n, n.next) && 0 !== g(n.prev, n, n.next)) n = n.next; else {
T(n);
if ((n = e = n.prev) === n.next) return null;
i = !0;
}
} while (i || n !== e);
return e;
}
function a(t, e, i, n, r, u, _) {
if (t) {
!_ && u && (function(t, e, i, n) {
var r = t;
do {
null === r.z && (r.z = m(r.x, r.y, e, i, n));
r.prevZ = r.prev;
r.nextZ = r.next;
r = r.next;
} while (r !== t);
r.prevZ.nextZ = null;
r.prevZ = null;
(function(t) {
var e, i, n, r, s, a, o, h, l = 1;
do {
i = t;
t = null;
s = null;
a = 0;
for (;i; ) {
a++;
n = i;
o = 0;
for (e = 0; e < l; e++) {
o++;
if (!(n = n.nextZ)) break;
}
h = l;
for (;o > 0 || h > 0 && n; ) {
if (0 === o) {
r = n;
n = n.nextZ;
h--;
} else if (0 !== h && n) if (i.z <= n.z) {
r = i;
i = i.nextZ;
o--;
} else {
r = n;
n = n.nextZ;
h--;
} else {
r = i;
i = i.nextZ;
o--;
}
s ? s.nextZ = r : t = r;
r.prevZ = s;
s = r;
}
i = n;
}
s.nextZ = null;
l *= 2;
} while (a > 1);
})(r);
})(t, n, r, u);
for (var f, d, p = t; t.prev !== t.next; ) {
f = t.prev;
d = t.next;
if (u ? h(t, n, r, u) : o(t)) {
e.push(f.i / i);
e.push(t.i / i);
e.push(d.i / i);
T(t);
t = d.next;
p = d.next;
} else if ((t = d) === p) {
_ ? 1 === _ ? a(t = l(t, e, i), e, i, n, r, u, 2) : 2 === _ && c(t, e, i, n, r, u) : a(s(t), e, i, n, r, u, 1);
break;
}
}
}
}
function o(t) {
var e = t.prev, i = t, n = t.next;
if (g(e, i, n) >= 0) return !1;
for (var r = t.next.next; r !== t.prev; ) {
if (d(e.x, e.y, i.x, i.y, n.x, n.y, r.x, r.y) && g(r.prev, r, r.next) >= 0) return !1;
r = r.next;
}
return !0;
}
function h(t, e, i, n) {
var r = t.prev, s = t, a = t.next;
if (g(r, s, a) >= 0) return !1;
for (var o = r.x < s.x ? r.x < a.x ? r.x : a.x : s.x < a.x ? s.x : a.x, h = r.y < s.y ? r.y < a.y ? r.y : a.y : s.y < a.y ? s.y : a.y, l = r.x > s.x ? r.x > a.x ? r.x : a.x : s.x > a.x ? s.x : a.x, c = r.y > s.y ? r.y > a.y ? r.y : a.y : s.y > a.y ? s.y : a.y, u = m(o, h, e, i, n), _ = m(l, c, e, i, n), f = t.nextZ; f && f.z <= _; ) {
if (f !== t.prev && f !== t.next && d(r.x, r.y, s.x, s.y, a.x, a.y, f.x, f.y) && g(f.prev, f, f.next) >= 0) return !1;
f = f.nextZ;
}
f = t.prevZ;
for (;f && f.z >= u; ) {
if (f !== t.prev && f !== t.next && d(r.x, r.y, s.x, s.y, a.x, a.y, f.x, f.y) && g(f.prev, f, f.next) >= 0) return !1;
f = f.prevZ;
}
return !0;
}
function l(t, e, i) {
var n = t;
do {
var r = n.prev, s = n.next.next;
if (!y(r, s) && v(r, n, n.next, s) && x(r, s) && x(s, r)) {
e.push(r.i / i);
e.push(n.i / i);
e.push(s.i / i);
T(n);
T(n.next);
n = t = s;
}
n = n.next;
} while (n !== t);
return n;
}
function c(t, e, i, n, r, o) {
var h = t;
do {
for (var l = h.next.next; l !== h.prev; ) {
if (h.i !== l.i && p(h, l)) {
var c = A(h, l);
h = s(h, h.next);
c = s(c, c.next);
a(h, e, i, n, r, o);
a(c, e, i, n, r, o);
return;
}
l = l.next;
}
h = h.next;
} while (h !== t);
}
function u(t, e) {
return t.x - e.x;
}
function _(t, e) {
if (e = (function(t, e) {
var i, n = e, r = t.x, s = t.y, a = -Infinity;
do {
if (s <= n.y && s >= n.next.y) {
var o = n.x + (s - n.y) * (n.next.x - n.x) / (n.next.y - n.y);
if (o <= r && o > a) {
a = o;
if (o === r) {
if (s === n.y) return n;
if (s === n.next.y) return n.next;
}
i = n.x < n.next.x ? n : n.next;
}
}
n = n.next;
} while (n !== e);
if (!i) return null;
if (r === a) return i.prev;
var h, l = i, c = i.x, u = i.y, _ = Infinity;
n = i.next;
for (;n !== l; ) {
if (r >= n.x && n.x >= c && d(s < u ? r : a, s, c, u, s < u ? a : r, s, n.x, n.y) && ((h = Math.abs(s - n.y) / (r - n.x)) < _ || h === _ && n.x > i.x) && x(n, t)) {
i = n;
_ = h;
}
n = n.next;
}
return i;
})(t, e)) {
var i = A(e, t);
s(i, i.next);
}
}
function m(t, e, i, n, r) {
return (t = 1431655765 & ((t = 858993459 & ((t = 252645135 & ((t = 16711935 & ((t = 32767 * (t - i) / r) | t << 8)) | t << 4)) | t << 2)) | t << 1)) | (e = 1431655765 & ((e = 858993459 & ((e = 252645135 & ((e = 16711935 & ((e = 32767 * (e - n) / r) | e << 8)) | e << 4)) | e << 2)) | e << 1)) << 1;
}
function f(t) {
var e = t, i = t;
do {
e.x < i.x && (i = e);
e = e.next;
} while (e !== t);
return i;
}
function d(t, e, i, n, r, s, a, o) {
return (r - a) * (e - o) - (t - a) * (s - o) >= 0 && (t - a) * (n - o) - (i - a) * (e - o) >= 0 && (i - a) * (s - o) - (r - a) * (n - o) >= 0;
}
function p(t, e) {
return t.next.i !== e.i && t.prev.i !== e.i && !(function(t, e) {
var i = t;
do {
if (i.i !== t.i && i.next.i !== t.i && i.i !== e.i && i.next.i !== e.i && v(i, i.next, t, e)) return !0;
i = i.next;
} while (i !== t);
return !1;
})(t, e) && x(t, e) && x(e, t) && (function(t, e) {
var i = t, n = !1, r = (t.x + e.x) / 2, s = (t.y + e.y) / 2;
do {
i.y > s != i.next.y > s && r < (i.next.x - i.x) * (s - i.y) / (i.next.y - i.y) + i.x && (n = !n);
i = i.next;
} while (i !== t);
return n;
})(t, e);
}
function g(t, e, i) {
return (e.y - t.y) * (i.x - e.x) - (e.x - t.x) * (i.y - e.y);
}
function y(t, e) {
return t.x === e.x && t.y === e.y;
}
function v(t, e, i, n) {
return !!(y(t, e) && y(i, n) || y(t, n) && y(i, e)) || g(t, e, i) > 0 != g(t, e, n) > 0 && g(i, n, t) > 0 != g(i, n, e) > 0;
}
function x(t, e) {
return g(t.prev, t, t.next) < 0 ? g(t, e, t.next) >= 0 && g(t, t.prev, e) >= 0 : g(t, e, t.prev) < 0 || g(t, t.next, e) < 0;
}
function A(t, e) {
var i = new C(t.i, t.x, t.y), n = new C(e.i, e.x, e.y), r = t.next, s = e.prev;
t.next = e;
e.prev = t;
i.next = r;
r.prev = i;
n.next = i;
i.prev = n;
s.next = n;
n.prev = s;
return n;
}
function b(t, e, i, n) {
var r = new C(t, e, i);
if (n) {
r.next = n.next;
r.prev = n;
n.next.prev = r;
n.next = r;
} else {
r.prev = r;
r.next = r;
}
return r;
}
function T(t) {
t.next.prev = t.prev;
t.prev.next = t.next;
t.prevZ && (t.prevZ.nextZ = t.nextZ);
t.nextZ && (t.nextZ.prevZ = t.prevZ);
}
function C(t, e, i) {
this.i = t;
this.x = e;
this.y = i;
this.prev = null;
this.next = null;
this.z = null;
this.prevZ = null;
this.nextZ = null;
this.steiner = !1;
}
n.deviation = function(t, e, i, n) {
var r = e && e.length, s = r ? e[0] * i : t.length, a = Math.abs(w(t, 0, s, i));
if (r) for (var o = 0, h = e.length; o < h; o++) {
var l = e[o] * i, c = o < h - 1 ? e[o + 1] * i : t.length;
a -= Math.abs(w(t, l, c, i));
}
var u = 0;
for (o = 0; o < n.length; o += 3) {
var _ = n[o] * i, m = n[o + 1] * i, f = n[o + 2] * i;
u += Math.abs((t[_] - t[f]) * (t[m + 1] - t[_ + 1]) - (t[_] - t[m]) * (t[f + 1] - t[_ + 1]));
}
return 0 === a && 0 === u ? 0 : Math.abs((u - a) / a);
};
function w(t, e, i, n) {
for (var r = 0, s = e, a = i - n; s < i; s += n) {
r += (t[a] - t[s]) * (t[s + 1] + t[a + 1]);
a = s;
}
return r;
}
n.flatten = function(t) {
for (var e = t[0][0].length, i = {
vertices: [],
holes: [],
dimensions: e
}, n = 0, r = 0; r < t.length; r++) {
for (var s = 0; s < t[r].length; s++) for (var a = 0; a < e; a++) i.vertices.push(t[r][s][a]);
if (r > 0) {
n += t[r - 1].length;
i.holes.push(n);
}
}
return i;
};
}), {} ],
202: [ (function(t, e, i) {
var n = t("../../../../graphics/helper"), r = t("../../../../graphics/types").PointFlags, s = cc.Class({
name: "cc.GraphicsPoint",
extends: cc.Vec2,
ctor: function(t, e) {
this.reset();
},
reset: function() {
this.dx = 0;
this.dy = 0;
this.dmx = 0;
this.dmy = 0;
this.flags = 0;
this.len = 0;
}
});
function a() {
this.reset();
}
cc.js.mixin(a.prototype, {
reset: function() {
this.closed = !1;
this.nbevel = 0;
this.complex = !0;
this.points ? this.points.length = 0 : this.points = [];
}
});
function o() {
this._tessTol = .25;
this._distTol = .01;
this._updatePathOffset = !1;
this._paths = null;
this._pathLength = 0;
this._pathOffset = 0;
this._points = null;
this._pointsOffset = 0;
this._commandx = 0;
this._commandy = 0;
this._paths = [];
this._points = [];
this._renderDatas = [];
this._dataOffset = 0;
}
cc.js.mixin(o.prototype, {
moveTo: function(t, e) {
if (this._updatePathOffset) {
this._pathOffset = this._pathLength;
this._updatePathOffset = !1;
}
this._addPath();
this._addPoint(t, e, r.PT_CORNER);
this._commandx = t;
this._commandy = e;
},
lineTo: function(t, e) {
this._addPoint(t, e, r.PT_CORNER);
this._commandx = t;
this._commandy = e;
},
bezierCurveTo: function(t, e, i, s, a, o) {
var h = this._curPath, l = h.points[h.points.length - 1];
if (l.x !== t || l.y !== e || i !== a || s !== o) {
n.tesselateBezier(this, l.x, l.y, t, e, i, s, a, o, 0, r.PT_CORNER);
this._commandx = a;
this._commandy = o;
} else this.lineTo(a, o);
},
quadraticCurveTo: function(t, e, i, n) {
var r = this._commandx, s = this._commandy;
this.bezierCurveTo(r + 2 / 3 * (t - r), s + 2 / 3 * (e - s), i + 2 / 3 * (t - i), n + 2 / 3 * (e - n), i, n);
},
arc: function(t, e, i, r, s, a) {
n.arc(this, t, e, i, r, s, a);
},
ellipse: function(t, e, i, r) {
n.ellipse(this, t, e, i, r);
this._curPath.complex = !1;
},
circle: function(t, e, i) {
n.ellipse(this, t, e, i, i);
this._curPath.complex = !1;
},
rect: function(t, e, i, n) {
this.moveTo(t, e);
this.lineTo(t, e + n);
this.lineTo(t + i, e + n);
this.lineTo(t + i, e);
this.close();
this._curPath.complex = !1;
},
roundRect: function(t, e, i, r, s) {
n.roundRect(this, t, e, i, r, s);
this._curPath.complex = !1;
},
clear: function(t, e) {
this._pathLength = 0;
this._pathOffset = 0;
this._pointsOffset = 0;
this._dataOffset = 0;
this._curPath = null;
var i = this._renderDatas;
if (e) {
this._paths.length = 0;
this._points.length = 0;
for (var n = 0, r = i.length; n < r; n++) t.destroyRenderData(i[n]);
i.length = 0;
} else for (var s = 0, a = i.length; s < a; s++) {
var o = i[s];
o.indiceCount = o._indices.length = 0;
o.vertexCount = 0;
}
},
close: function() {
this._curPath.closed = !0;
},
_addPath: function() {
var t = this._pathLength, e = this._paths[t];
if (e) e.reset(); else {
e = new a();
this._paths.push(e);
}
this._pathLength++;
this._curPath = e;
return e;
},
_addPoint: function(t, e, i) {
var n = this._curPath;
if (n) {
var r, a = this._points, o = n.points;
if (r = a[this._pointsOffset++]) {
r.x = t;
r.y = e;
} else {
r = new s(t, e);
a.push(r);
}
r.flags = i;
o.push(r);
}
}
});
e.exports = o;
}), {
"../../../../graphics/helper": 103,
"../../../../graphics/types": 105
} ],
203: [ (function(t, e, i) {
var n = t("../../../../graphics/graphics"), r = t("../../../../graphics/types").PointFlags, s = n.LineJoin, a = n.LineCap, o = t("./earcut"), h = t("./impl"), l = t("../../vertex-format").vfmtPosUvColor, c = (t("../../../../platform/CCMacro"), 
t("../../../../platform/js"), t("../../../render-engine").math, Math.PI), u = Math.min, _ = Math.max, m = Math.ceil, f = Math.acos, d = Math.cos, p = Math.sin, g = Math.atan2, y = (Math.abs, 
null), v = null, x = 0;
function A(t, e, i) {
return t < e ? e : t > i ? i : t;
}
var b = {
createImpl: function() {
return new h();
},
updateRenderData: function(t) {
var e = t._impl._renderDatas;
0 === e.length && e.push(t.requestRenderData());
for (var i = 0, n = e.length; i < n; i++) e[i].material = t.getMaterial();
},
fillBuffers: function(t, e) {
for (var i = t.node, n = (i._position.z, i._worldMatrix), r = n.m00, s = n.m01, a = n.m04, o = n.m05, h = n.m12, c = n.m13, u = i.color, _ = u.r / 255, m = u.g / 255, f = u.b / 255, d = u.a / 255, p = e.getBuffer("mesh", l), g = p.byteOffset >> 2, y = p._vData, v = p._uintVData, x = p._iData, A = p.indiceOffset, b = p.vertexOffset, T = t._impl._renderDatas, C = 0, w = T.length; C < w; C++) {
var S = T[C], E = S._data;
p.request(S.vertexCount, S.indiceCount);
for (var D = 0, M = E.length; D < M; D++) {
y[g++] = E[D].x * r + E[D].y * a + h;
y[g++] = E[D].x * s + E[D].y * o + c;
g += 2;
var I = E[D].color;
I = (((4278190080 & I) >>> 24) * d << 24 >>> 0) + (((16711680 & I) >> 16) * f << 16) + (((65280 & I) >> 8) * m << 8) + (255 & I) * _;
v[g++] = I;
}
for (var P = S._indices, B = 0, R = P.length; B < R; B++) x[A + B] = b + P[B];
}
},
genRenderData: function(t, e) {
var i = v._renderDatas, n = i[v._dataOffset], r = n.vertexCount + e;
if (r > 65535 || 3 * r > 131070) {
++v._dataOffset;
r = e;
if (v._dataOffset < i.length) n = i[v._dataOffset]; else {
n = t.requestRenderData();
i[v._dataOffset] = n;
}
}
r > n.dataLength && (n.dataLength = r);
return n;
},
stroke: function(t) {
var e = t._impl._renderDatas;
0 === e.length && e.push(t.requestRenderData());
x = t._strokeColor._val;
this._flattenPaths(t._impl);
this._expandStroke(t);
t._impl._updatePathOffset = !0;
},
fill: function(t) {
var e = t._impl._renderDatas;
0 === e.length && e.push(t.requestRenderData());
x = t._fillColor._val;
this._expandFill(t);
t._impl._updatePathOffset = !0;
},
_expandStroke: function(t) {
var e = .5 * t.lineWidth, i = t.lineCap, n = t.lineJoin, o = t.miterLimit;
v = t._impl;
var h = (function(t, e, i) {
var n = 2 * f(t / (t + i));
return _(2, m(e / n));
})(e, c, v._tessTol);
this._calculateJoins(v, e, n, o);
for (var l = v._paths, u = 0, d = v._pathOffset, p = v._pathLength; d < p; d++) {
var g = l[d], x = g.points.length;
n === s.ROUND ? u += 2 * (x + g.nbevel * (h + 2) + 1) : u += 2 * (x + 5 * g.nbevel + 1);
g.closed || (i === a.ROUND ? u += 2 * (2 * h + 2) : u += 12);
}
for (var A = y = this.genRenderData(t, u), b = A._data, T = A._indices, C = v._pathOffset, w = v._pathLength; C < w; C++) {
var S, E = l[C], D = E.points, M = D.length, I = A.vertexCount, P = void 0, B = void 0, R = void 0, L = void 0;
if (S = E.closed) {
P = D[M - 1];
B = D[0];
R = 0;
L = M;
} else {
P = D[0];
B = D[1];
R = 1;
L = M - 1;
}
if (!S) {
var O = B.sub(P);
O.normalizeSelf();
var F = O.x, N = O.y;
i === a.BUTT ? this._buttCap(P, F, N, e, 0) : i === a.SQUARE ? this._buttCap(P, F, N, e, e) : i === a.ROUND && this._roundCapStart(P, F, N, e, h);
}
for (var k = R; k < L; ++k) {
if (n === s.ROUND) this._roundJoin(P, B, e, e, h); else if (0 != (B.flags & (r.PT_BEVEL | r.PT_INNERBEVEL))) this._bevelJoin(P, B, e, e); else {
this._vset(B.x + B.dmx * e, B.y + B.dmy * e);
this._vset(B.x - B.dmx * e, B.y - B.dmy * e);
}
P = B;
B = D[k + 1];
}
if (S) {
this._vset(b[I].x, b[I].y);
this._vset(b[I + 1].x, b[I + 1].y);
} else {
var z = B.sub(P);
z.normalizeSelf();
var G = z.x, U = z.y;
i === a.BUTT ? this._buttCap(B, G, U, e, 0) : i === a.BUTT || i === a.SQUARE ? this._buttCap(B, G, U, e, e) : i === a.ROUND && this._roundCapEnd(B, G, U, e, h);
}
for (var V = T.length, j = I + 2, W = A.vertexCount; j < W; j++) {
T[V++] = j - 2;
T[V++] = j - 1;
T[V++] = j;
}
}
A.indiceCount = T.length;
y = null;
v = null;
},
_expandFill: function(t) {
for (var e = (v = t._impl)._paths, i = 0, n = v._pathOffset, r = v._pathLength; n < r; n++) {
i += e[n].points.length;
}
for (var s = y = this.genRenderData(t, i), a = s._data, h = s._indices, l = v._pathOffset, c = v._pathLength; l < c; l++) {
var u = e[l], _ = u.points, m = _.length;
if (0 !== m) {
for (var f = s.vertexCount, d = 0; d < m; ++d) this._vset(_[d].x, _[d].y);
var p = h.length;
if (u.complex) {
for (var g = [], x = f, A = s.vertexCount; x < A; x++) {
g.push(a[x].x);
g.push(a[x].y);
}
var b = o(g, null, 2);
if (!b || 0 === b.length) continue;
for (var T = 0, C = b.length; T < C; T++) h[p + T] = b[T] + f;
} else for (var w = f, S = f + 2, E = s.vertexCount; S < E; S++) {
h[p++] = w;
h[p++] = S - 1;
h[p++] = S;
}
}
}
s.indiceCount = h.length;
y = null;
v = null;
},
_calculateJoins: function(t, e, i, n) {
var a = 0;
e > 0 && (a = 1 / e);
for (var o = t._paths, h = t._pathOffset, l = t._pathLength; h < l; h++) {
var c = o[h], m = c.points, f = m.length, d = m[f - 1], p = m[0];
c.nbevel = 0;
for (var g = 0; g < f; g++) {
var y, v, x = d.dy, A = -d.dx, b = p.dy, T = -p.dx;
p.dmx = .5 * (x + b);
p.dmy = .5 * (A + T);
if ((y = p.dmx * p.dmx + p.dmy * p.dmy) > 1e-6) {
var C = 1 / y;
C > 600 && (C = 600);
p.dmx *= C;
p.dmy *= C;
}
if (p.dx * d.dy - d.dx * p.dy > 0) {
0;
p.flags |= r.PT_LEFT;
}
y * (v = _(11, u(d.len, p.len) * a)) * v < 1 && (p.flags |= r.PT_INNERBEVEL);
p.flags & r.PT_CORNER && (y * n * n < 1 || i === s.BEVEL || i === s.ROUND) && (p.flags |= r.PT_BEVEL);
0 != (p.flags & (r.PT_BEVEL | r.PT_INNERBEVEL)) && c.nbevel++;
d = p;
p = m[g + 1];
}
}
},
_flattenPaths: function(t) {
for (var e = t._paths, i = t._pathOffset, n = t._pathLength; i < n; i++) {
var r = e[i], s = r.points, a = s[s.length - 1], o = s[0];
if (a.equals(o)) {
r.closed = !0;
s.pop();
a = s[s.length - 1];
}
for (var h = 0, l = s.length; h < l; h++) {
var c = o.sub(a);
a.len = c.mag();
(c.x || c.y) && c.normalizeSelf();
a.dx = c.x;
a.dy = c.y;
a = o;
o = s[h + 1];
}
}
},
_chooseBevel: function(t, e, i, n) {
var r = i.x, s = i.y, a = void 0, o = void 0, h = void 0, l = void 0;
if (0 !== t) {
a = r + e.dy * n;
o = s - e.dx * n;
h = r + i.dy * n;
l = s - i.dx * n;
} else {
a = h = r + i.dmx * n;
o = l = s + i.dmy * n;
}
return [ a, o, h, l ];
},
_buttCap: function(t, e, i, n, r) {
var s = t.x - e * r, a = t.y - i * r, o = i, h = -e;
this._vset(s + o * n, a + h * n);
this._vset(s - o * n, a - h * n);
},
_roundCapStart: function(t, e, i, n, r) {
for (var s = t.x, a = t.y, o = i, h = -e, l = 0; l < r; l++) {
var u = l / (r - 1) * c, _ = d(u) * n, m = p(u) * n;
this._vset(s - o * _ - e * m, a - h * _ - i * m);
this._vset(s, a);
}
this._vset(s + o * n, a + h * n);
this._vset(s - o * n, a - h * n);
},
_roundCapEnd: function(t, e, i, n, r) {
var s = t.x, a = t.y, o = i, h = -e;
this._vset(s + o * n, a + h * n);
this._vset(s - o * n, a - h * n);
for (var l = 0; l < r; l++) {
var u = l / (r - 1) * c, _ = d(u) * n, m = p(u) * n;
this._vset(s, a);
this._vset(s - o * _ + e * m, a - h * _ + i * m);
}
},
_roundJoin: function(t, e, i, n, s) {
var a = t.dy, o = -t.dx, h = e.dy, l = -e.dx, u = e.x, _ = e.y;
if (0 != (e.flags & r.PT_LEFT)) {
var f = this._chooseBevel(e.flags & r.PT_INNERBEVEL, t, e, i), y = f[0], v = f[1], x = f[2], b = f[3], T = g(-o, -a), C = g(-l, -h);
C > T && (C -= 2 * c);
this._vset(y, v);
this._vset(u - a * n, e.y - o * n);
for (var w = A(m((T - C) / c) * s, 2, s), S = 0; S < w; S++) {
var E = T + S / (w - 1) * (C - T), D = u + d(E) * n, M = _ + p(E) * n;
this._vset(u, _);
this._vset(D, M);
}
this._vset(x, b);
this._vset(u - h * n, _ - l * n);
} else {
var I = this._chooseBevel(e.flags & r.PT_INNERBEVEL, t, e, -n), P = I[0], B = I[1], R = I[2], L = I[3], O = g(o, a), F = g(l, h);
F < O && (F += 2 * c);
this._vset(u + a * n, _ + o * n);
this._vset(P, B);
for (var N = A(m((F - O) / c) * s, 2, s), k = 0; k < N; k++) {
var z = O + k / (N - 1) * (F - O), G = u + d(z) * i, U = _ + p(z) * i;
this._vset(G, U);
this._vset(u, _);
}
this._vset(u + h * n, _ + l * n);
this._vset(R, L);
}
},
_bevelJoin: function(t, e, i, n) {
var s = void 0, a = void 0, o = void 0, h = void 0, l = void 0, c = void 0, u = void 0, _ = void 0, m = t.dy, f = -t.dx, d = e.dy, p = -e.dx;
if (e.flags & r.PT_LEFT) {
var g = this._chooseBevel(e.flags & r.PT_INNERBEVEL, t, e, i);
l = g[0];
c = g[1];
u = g[2];
_ = g[3];
this._vset(l, c);
this._vset(e.x - m * n, e.y - f * n);
this._vset(u, _);
this._vset(e.x - d * n, e.y - p * n);
} else {
var y = this._chooseBevel(e.flags & r.PT_INNERBEVEL, t, e, -n);
s = y[0];
a = y[1];
o = y[2];
h = y[3];
this._vset(e.x + m * i, e.y + f * i);
this._vset(s, a);
this._vset(e.x + d * i, e.y + p * i);
this._vset(o, h);
}
},
_vset: function(t, e) {
var i = y._data, n = y.vertexCount;
i[n].x = t;
i[n].y = e;
i[n].color = x;
y.vertexCount++;
}
};
n._assembler = b;
e.exports = b;
}), {
"../../../../graphics/graphics": 102,
"../../../../graphics/types": 105,
"../../../../platform/CCMacro": 158,
"../../../../platform/js": 173,
"../../../render-engine": 195,
"../../vertex-format": 221,
"./earcut": 201,
"./impl": 202
} ],
204: [ (function(t, e, i) {
t("./sprite");
t("./mask-assembler");
t("./graphics");
t("./label");
t("./motion-streak");
}), {
"./graphics": 203,
"./label": 206,
"./mask-assembler": 208,
"./motion-streak": 209,
"./sprite": 211
} ],
205: [ (function(t, e, i) {
t("../../../../platform/CCMacro"), t("../../../render-engine");
var n = t("../../../../platform/js"), r = t("../../../utils/label/bmfont");
t("./ttf");
e.exports = n.addon({
createData: function(t) {
return t.requestRenderData();
},
fillBuffers: function(t, e) {
var i = t.node, n = t._renderData, r = n._data, s = (i.color._val, i._worldMatrix), a = s.m00, o = s.m01, h = s.m04, l = s.m05, c = s.m12, u = s.m13, _ = e._quadBuffer, m = _.byteOffset >> 2, f = _._vData, d = n.vertexCount;
_.request(d, n.indiceCount);
for (var p = 0; p < d; p++) {
var g = r[p];
f[m++] = g.x * a + g.y * h + c;
f[m++] = g.x * o + g.y * l + u;
f[m++] = g.u;
f[m++] = g.v;
}
},
appendQuad: function(t, e, i, n, r, s, a) {
var o = t.dataLength;
t.dataLength += 4;
t.vertexCount = t.dataLength;
t.indiceCount = t.dataLength / 2 * 3;
var h = t._data, l = e.width, c = e.height, u = i.width, _ = i.height, m = void 0, f = void 0, d = void 0, p = void 0;
if (n) {
m = i.x / l;
d = (i.x + _) / l;
f = (i.y + u) / c;
p = i.y / c;
h[o].u = m;
h[o].v = p;
h[o + 1].u = m;
h[o + 1].v = f;
h[o + 2].u = d;
h[o + 2].v = p;
h[o + 3].u = d;
h[o + 3].v = f;
} else {
m = i.x / l;
d = (i.x + u) / l;
f = (i.y + _) / c;
p = i.y / c;
h[o].u = m;
h[o].v = f;
h[o + 1].u = d;
h[o + 1].v = f;
h[o + 2].u = m;
h[o + 2].v = p;
h[o + 3].u = d;
h[o + 3].v = p;
}
h[o].x = r;
h[o].y = s - _ * a;
h[o + 1].x = r + u * a;
h[o + 1].y = s - _ * a;
h[o + 2].x = r;
h[o + 2].y = s;
h[o + 3].x = r + u * a;
h[o + 3].y = s;
}
}, r);
}), {
"../../../../platform/CCMacro": 158,
"../../../../platform/js": 173,
"../../../render-engine": 195,
"../../../utils/label/bmfont": 199,
"./ttf": 207
} ],
206: [ (function(t, e, i) {
var n = t("../../../../components/CCLabel"), r = t("./ttf"), s = t("./bmfont"), a = {
getAssembler: function(t) {
var e = r;
t.font instanceof cc.BitmapFont && (e = s);
return e;
},
updateRenderData: function(t) {
return t.__allocedDatas;
}
};
n._assembler = a;
e.exports = a;
}), {
"../../../../components/CCLabel": 67,
"./bmfont": 205,
"./ttf": 207
} ],
207: [ (function(t, e, i) {
t("../../../../platform/CCMacro"), t("../../../render-engine");
var n = t("../../../../platform/js"), r = t("../../../utils/label/ttf");
e.exports = n.addon({
createData: function(t) {
var e = t.requestRenderData();
e.dataLength = 4;
e.vertexCount = 4;
e.indiceCount = 6;
var i = e._data;
i[0].u = 0;
i[0].v = 1;
i[1].u = 1;
i[1].v = 1;
i[2].u = 0;
i[2].v = 0;
i[3].u = 1;
i[3].v = 0;
return e;
},
fillBuffers: function(t, e) {
var i = t._renderData._data, n = t.node._worldMatrix, r = n.m00, s = n.m01, a = n.m04, o = n.m05, h = n.m12, l = n.m13, c = e._quadBuffer, u = c.byteOffset >> 2, _ = c._vData;
c.request(4, 6);
for (var m = 0; m < 4; m++) {
var f = i[m];
_[u++] = f.x * r + f.y * a + h;
_[u++] = f.x * s + f.y * o + l;
_[u++] = f.u;
_[u++] = f.v;
}
},
_updateVerts: function(t) {
var e = t._renderData, i = t.node, n = i.width, r = i.height, s = i.anchorX * n, a = i.anchorY * r, o = e._data;
o[0].x = -s;
o[0].y = -a;
o[1].x = n - s;
o[1].y = -a;
o[2].x = -s;
o[2].y = r - a;
o[3].x = n - s;
o[3].y = r - a;
}
}, r);
}), {
"../../../../platform/CCMacro": 158,
"../../../../platform/js": 173,
"../../../render-engine": 195,
"../../../utils/label/ttf": 200
} ],
208: [ (function(t, e, i) {
var n = t("../stencil-manager"), r = t("../../../CCNode"), s = t("../../../components/CCMask"), a = (t("../../render-engine"), 
t("../../render-flow")), o = (t("../../../platform/js"), t("./sprite/simple")), h = t("../../../graphics/graphics"), l = t("./graphics"), c = n.sharedManager, u = (cc.color(255, 255, 255, 0), 
[]);
var _ = {
updateGraphics: function(t) {
var e = t._renderData, i = t._graphics;
i.clear(!1);
var n = e._width, r = e._height, a = -n * e._pivotX, o = -r * e._pivotY;
if (t._type === s.Type.RECT) i.rect(a, o, n, r); else if (t._type === s.Type.ELLIPSE) {
var h = a + n / 2, l = o + r / 2, c = n / 2, u = r / 2;
i.ellipse(h, l, c, u);
}
i.fill();
},
updateRenderData: function(t) {
t._renderData || (t._type === s.Type.IMAGE_STENCIL ? t._renderData = o.createData(t) : t._renderData = t.requestRenderData());
var e = t._renderData, i = t.node._contentSize, n = t.node._anchorPoint;
e.updateSizeNPivot(i.width, i.height, n.x, n.y);
t._material = t._frontMaterial;
if (t._type === s.Type.IMAGE_STENCIL) if (t.spriteFrame) {
e.dataLength = 4;
o.updateRenderData(t);
e.material = t.getMaterial();
} else t._material = null; else {
t._graphics = (function() {
var t = u.pop();
t || ((t = new r().addComponent(h)).lineWidth = 0);
return t;
})();
this.updateGraphics(t);
t._graphics._material = t._material;
l.updateRenderData(t._graphics);
}
},
fillBuffers: function(t, e) {
if (t._type !== s.Type.IMAGE_STENCIL || t.spriteFrame) {
c.pushMask(t);
if (t._type === s.Type.IMAGE_STENCIL) o.fillBuffers(t, e); else {
t._graphics.node = t.node;
l.fillBuffers(t._graphics, e);
}
}
t.node._renderFlag |= a.FLAG_UPDATE_RENDER_DATA;
}
}, m = {
updateRenderData: function(t) {
t._type !== s.Type.IMAGE_STENCIL || t.spriteFrame ? t._material = t._endMaterial : t._material = null;
var e = t._material;
if (t._type === s.Type.IMAGE_STENCIL) {
t._renderData.material = e;
} else for (var i = t._graphics._impl._renderDatas, n = 0; n < i.length; n++) i[n].material = e;
},
fillBuffers: function(t, e) {
if (t._type !== s.Type.IMAGE_STENCIL || t.spriteFrame) {
c.popMask();
if (t._type === s.Type.IMAGE_STENCIL) o.fillBuffers(t, e); else {
t._graphics.node = t.node;
l.fillBuffers(t._graphics, e);
u.push(t._graphics);
t._graphics = null;
}
}
t.node._renderFlag |= a.FLAG_UPDATE_RENDER_DATA | a.FLAG_POST_UPDATE_RENDER_DATA;
}
};
s._assembler = _;
s._postAssembler = m;
e.exports = {
front: _,
end: m
};
}), {
"../../../CCNode": 28,
"../../../components/CCMask": 70,
"../../../graphics/graphics": 102,
"../../../platform/js": 173,
"../../render-engine": 195,
"../../render-flow": 196,
"../stencil-manager": 220,
"./graphics": 203,
"./sprite/simple": 214
} ],
209: [ (function(t, e, i) {
t("../../../platform/js"), t("../../../renderer/render-engine");
var n = t("../../../components/CCMotionStreak"), r = t("../../render-flow"), s = t("../vertex-format").vfmtPosUvColor;
function a(t, e) {
this.point = t || cc.v2();
this.dir = e || cc.v2();
this.distance = 0;
this.time = 0;
}
a.prototype.setPoint = function(t, e) {
this.point.x = t;
this.point.y = e;
};
a.prototype.setDir = function(t, e) {
this.dir.x = t;
this.dir.y = e;
};
cc.v2(), cc.v2();
var o = cc.v2(), h = cc.v2();
function l(t, e) {
t.x = -e.y;
t.y = e.x;
return t;
}
var c = {
updateRenderData: function(t) {
var e = cc.director.getDeltaTime();
this.update(t, e);
var i = t._renderData, n = t.node._contentSize, r = t.node._anchorPoint;
i.updateSizeNPivot(n.width, n.height, r.x, r.y);
i.material = t.getMaterial();
},
update: function(t, e) {
var i = t._renderData;
i || (i = t._renderData = t.requestRenderData());
0;
var n = t._stroke / 2, r = t.node._worldMatrix, s = (r.m00, r.m01, r.m04, r.m05, 
r.m12), c = r.m13, u = t._points, _ = void 0;
if (u.length > 1) {
var m = u[0].x - s, f = u[0].y - c;
m * m + f * f < t.minSeg && (_ = u[0]);
}
if (!_) {
_ = new a();
u.splice(0, 0, _);
}
_.setPoint(s, c);
_.time = t._fadeTime;
i.dataLength = 0;
if (!(u.length < 2)) {
var d = i._data, p = t._color, g = p.r, y = p.g, v = p.b, x = p.a, A = u[1];
A.distance = _.point.sub(A.point, h).mag();
h.normalizeSelf();
A.setDir(h.x, h.y);
_.setDir(h.x, h.y);
for (var b = t._fadeTime, T = !1, C = u.length - 1; C >= 0; C--) {
var w = u[C], S = w.point, E = w.dir;
w.time -= e;
if (w.time < 0) u.splice(C, 1); else {
var D = w.time / b, M = u[C - 1];
if (!T) {
if (!M) {
u.splice(C, 1);
continue;
}
S.x = M.point.x - E.x * D;
S.y = M.point.y - E.y * D;
}
T = !0;
l(o, E);
i.dataLength += 2;
var I = (D * x << 24 >>> 0) + (v << 16) + (y << 8) + g, P = d.length - 1;
d[P].x = S.x - o.x * n;
d[P].y = S.y - o.y * n;
d[P].u = 0;
d[P].v = D;
d[P].color = I;
d[--P].x = S.x + o.x * n;
d[P].y = S.y + o.y * n;
d[P].u = 1;
d[P].v = D;
d[P].color = I;
}
}
i.vertexCount = i.dataLength;
i.indiceCount = 3 * (i.vertexCount - 2);
}
},
fillBuffers: function(t, e) {
t.node;
var i = t._renderData, n = i._data, a = e.getBuffer("mesh", s), o = a.byteOffset >> 2, h = a._vData, l = a._uintVData, c = i.vertexCount, u = a._iData, _ = a.indiceOffset, m = a.vertexOffset;
a.request(c, i.indiceCount);
for (var f = void 0, d = 0, p = i.vertexCount; d < p; d++) {
f = n[d];
h[o++] = f.x;
h[o++] = f.y;
h[o++] = f.u;
h[o++] = f.v;
l[o++] = f.color;
}
for (var g = 0, y = i.vertexCount; g < y; g += 2) {
var v = m + g;
u[_++] = v;
u[_++] = v + 2;
u[_++] = v + 1;
u[_++] = v + 1;
u[_++] = v + 2;
u[_++] = v + 3;
}
t.node._renderFlag |= r.FLAG_UPDATE_RENDER_DATA;
}
};
e.exports = n._assembler = c;
}), {
"../../../components/CCMotionStreak": 71,
"../../../platform/js": 173,
"../../../renderer/render-engine": 195,
"../../render-flow": 196,
"../vertex-format": 221
} ],
210: [ (function(t, e, i) {
var n = t("../../../../components/CCSprite").FillType, r = t("../../../utils/dynamic-atlas/manager");
e.exports = {
useModel: !1,
updateRenderData: function(t) {
var e = t.spriteFrame;
if (e) {
e._original || r.insertSpriteFrame(e);
t._material && t._material._texture === e._texture || t._activateMaterial();
}
var i = t._renderData;
if (i && e) {
var n = i.uvDirty, s = i.vertDirty;
if (!n && !s) return t.__allocedDatas;
var a = t._fillStart, o = t._fillRange;
if (o < 0) {
a += o;
o = -o;
}
o = a + o;
a = (a = a > 1 ? 1 : a) < 0 ? 0 : a;
o = (o = o > 1 ? 1 : o) < 0 ? 0 : o;
var h = a + (o = (o -= a) < 0 ? 0 : o);
h = h > 1 ? 1 : h;
n && this.updateUVs(t, a, h);
if (s) {
this.updateVerts(t, a, h);
this.updateWorldVerts(t);
}
}
},
updateUVs: function(t, e, i) {
var r = t._spriteFrame, s = t._renderData, a = s._data, o = r._texture.width, h = r._texture.height, l = r._rect, c = void 0, u = void 0, _ = void 0, m = void 0, f = void 0, d = void 0, p = void 0, g = void 0, y = void 0, v = void 0, x = void 0, A = void 0;
if (r._rotated) {
c = l.x / o;
u = (l.y + l.width) / h;
_ = (l.x + l.height) / o;
m = l.y / h;
f = p = c;
y = x = _;
g = A = u;
d = v = m;
} else {
c = l.x / o;
u = (l.y + l.height) / h;
_ = (l.x + l.width) / o;
m = l.y / h;
f = y = c;
p = x = _;
d = g = u;
v = A = m;
}
switch (t._fillType) {
case n.HORIZONTAL:
a[0].u = f + (p - f) * e;
a[0].v = d;
a[1].u = f + (p - f) * i;
a[1].v = g;
a[2].u = y + (x - y) * e;
a[2].v = v;
a[3].u = y + (x - y) * i;
a[3].v = A;
break;

case n.VERTICAL:
a[0].u = f;
a[0].v = d + (v - d) * e;
a[1].u = p;
a[1].v = g + (A - g) * e;
a[2].u = y;
a[2].v = d + (v - d) * i;
a[3].u = x;
a[3].v = g + (A - g) * i;
break;

default:
cc.errorID(2626);
}
s.uvDirty = !1;
},
updateVerts: function(t, e, i) {
var r = t._renderData, s = r._data, a = t.node, o = a.width, h = a.height, l = a.anchorX * o, c = a.anchorY * h, u = -l, _ = -c, m = o - l, f = h - c, d = void 0;
switch (t._fillType) {
case n.HORIZONTAL:
d = u + (m - u) * i;
u = u + (m - u) * e;
m = d;
break;

case n.VERTICAL:
d = _ + (f - _) * i;
_ = _ + (f - _) * e;
f = d;
break;

default:
cc.errorID(2626);
}
s[4].x = u;
s[4].y = _;
s[5].x = m;
s[5].y = _;
s[6].x = u;
s[6].y = f;
s[7].x = m;
s[7].y = f;
r.vertDirty = !1;
},
createData: function(t) {
var e = t.requestRenderData();
e.dataLength = 8;
e.vertexCount = 4;
e.indiceCount = 6;
return e;
},
updateWorldVerts: function(t) {
for (var e = t.node, i = t._renderData._data, n = e._worldMatrix, r = n.m00, s = n.m01, a = n.m04, o = n.m05, h = n.m12, l = n.m13, c = 0; c < 4; c++) {
var u = i[c + 4], _ = i[c];
_.x = u.x * r + u.y * a + h;
_.y = u.x * s + u.y * o + l;
}
},
fillBuffers: function(t, e) {
e.worldMatDirty && this.updateWorldVerts(t);
var i = t._renderData._data, n = t.node._worldMatrix, r = (n.m00, n.m01, n.m04, 
n.m05, n.m12, n.m13, e._quadBuffer), s = r.byteOffset >> 2, a = r._vData;
r.request(4, 6);
for (var o = 0; o < 4; o++) {
var h = i[o];
a[s++] = h.x;
a[s++] = h.y;
a[s++] = h.u;
a[s++] = h.v;
}
}
};
}), {
"../../../../components/CCSprite": 80,
"../../../utils/dynamic-atlas/manager": 198
} ],
211: [ (function(t, e, i) {
var n = t("../../../../components/CCSprite"), r = (t("../../../utils/dynamic-atlas/manager"), 
n.Type), s = n.FillType, a = t("./simple"), o = t("./sliced"), h = t("./tiled"), l = t("./radial-filled"), c = t("./bar-filled"), u = t("./mesh"), _ = {
getAssembler: function(t) {
var e = a;
switch (t.type) {
case r.SLICED:
e = o;
break;

case r.TILED:
e = h;
break;

case r.FILLED:
e = t._fillType === s.RADIAL ? l : c;
break;

case r.MESH:
e = u;
}
return e;
},
updateRenderData: function(t) {
return t.__allocedDatas;
}
};
n._assembler = _;
e.exports = _;
}), {
"../../../../components/CCSprite": 80,
"../../../utils/dynamic-atlas/manager": 198,
"./bar-filled": 210,
"./mesh": 212,
"./radial-filled": 213,
"./simple": 214,
"./sliced": 215,
"./tiled": 216
} ],
212: [ (function(t, e, i) {
var n = t("../../../utils/dynamic-atlas/manager");
e.exports = {
useModel: !1,
createData: function(t) {
return t.requestRenderData();
},
updateRenderData: function(t) {
var e = t.spriteFrame;
if (e) {
e._original || n.insertSpriteFrame(e);
t._material && t._material._texture === e._texture || t._activateMaterial();
}
var i = t._renderData;
if (i && e) {
var r = e.vertices;
if (r) {
if (i.vertexCount !== r.x.length) {
i.vertexCount = r.x.length;
i.indiceCount = r.triangles.length;
i.dataLength = 2 * i.vertexCount;
i.uvDirty = i.vertDirty = !0;
}
i.uvDirty && this.updateUVs(t);
if (i.vertDirty) {
this.updateVerts(t);
this.updateWorldVerts(t);
}
}
}
},
updateUVs: function(t) {
for (var e = t.getMaterial().effect.getProperty("texture"), i = (e._width, e._height, 
t.spriteFrame.vertices), n = i.nu, r = i.nv, s = t._renderData, a = s._data, o = 0, h = n.length; o < h; o++) {
var l = a[o];
l.u = n[o];
l.v = r[o];
}
s.uvDirty = !1;
},
updateVerts: function(t) {
var e = t.node, i = Math.abs(e.width), n = Math.abs(e.height), r = e.anchorX * i, s = e.anchorY * n, a = t.spriteFrame, o = a.vertices, h = o.x, l = o.y, c = a._originalSize.width, u = a._originalSize.height, _ = a._rect.width, m = a._rect.height, f = a._offset.x + (c - _) / 2, d = a._offset.y + (u - m) / 2, p = i / (t.trim ? _ : c), g = n / (t.trim ? m : u), y = t._renderData, v = y._data;
if (t.trim) for (var x = 0, A = h.length; x < A; x++) {
var b = v[x + A];
b.x = (h[x] - f) * p - r;
b.y = (u - l[x] - d) * g - s;
} else for (var T = 0, C = h.length; T < C; T++) {
var w = v[T + C];
w.x = h[T] * p - r;
w.y = (u - l[T]) * g - s;
}
y.vertDirty = !1;
},
updateWorldVerts: function(t) {
for (var e = t.node, i = t._renderData, n = i._data, r = e._worldMatrix, s = r.m00, a = r.m01, o = r.m04, h = r.m05, l = r.m12, c = r.m13, u = 0, _ = i.vertexCount; u < _; u++) {
var m = n[u + _], f = n[u];
f.x = m.x * s + m.y * o + l;
f.y = m.x * a + m.y * h + c;
}
},
fillBuffers: function(t, e) {
t.node;
var i = t._renderData, n = i._data;
e.worldMatDirty && this.updateWorldVerts(t);
var r = e._meshBuffer, s = r.byteOffset >> 2, a = r._vData, o = r._iData, h = r.indiceOffset, l = r.vertexOffset;
r.request(i.vertexCount, i.indiceCount);
for (var c = 0, u = i.vertexCount; c < u; c++) {
var _ = n[c];
a[s++] = _.x;
a[s++] = _.y;
a[s++] = _.u;
a[s++] = _.v;
}
for (var m = t.spriteFrame.vertices.triangles, f = 0, d = m.length; f < d; f++) o[h++] = l + m[f];
}
};
}), {
"../../../utils/dynamic-atlas/manager": 198
} ],
213: [ (function(t, e, i) {
var n = t("../../../utils/dynamic-atlas/manager"), r = 2 * Math.PI;
e.exports = {
useModel: !1,
_vertPos: [ cc.v2(0, 0), cc.v2(0, 0), cc.v2(0, 0), cc.v2(0, 0) ],
_vertices: [ 0, 0, 0, 0 ],
_uvs: [ 0, 0, 0, 0, 0, 0, 0, 0 ],
_intersectPoint_1: [ cc.v2(0, 0), cc.v2(0, 0), cc.v2(0, 0), cc.v2(0, 0) ],
_intersectPoint_2: [ cc.v2(0, 0), cc.v2(0, 0), cc.v2(0, 0), cc.v2(0, 0) ],
_center: cc.v2(0, 0),
_triangles: [],
createData: function(t) {
return t.requestRenderData();
},
updateRenderData: function(t) {
var e = t.spriteFrame;
if (e) {
e._original || n.insertSpriteFrame(e);
t._material && t._material._texture === e._texture || t._activateMaterial();
}
var i = t._renderData;
if (i && e && (i.vertDirty || i.uvDirty)) {
var s = i._data, a = t._fillStart, o = t._fillRange;
if (o < 0) {
a += o;
o = -o;
}
for (;a >= 1; ) a -= 1;
for (;a < 0; ) a += 1;
var h = (a *= r) + (o *= r);
this._calculateVertices(t);
this._calculateUVs(e);
var l = this._center, c = this._vertPos, u = this._vertices, _ = this._triangles;
this._calcInsectedPoints(u[0], u[2], u[1], u[3], l, a, this._intersectPoint_1);
this._calcInsectedPoints(u[0], u[2], u[1], u[3], l, a + o, this._intersectPoint_2);
for (var m = 0, f = 0; f < 4; ++f) {
var d = _[f];
if (d) if (o >= r) {
i.dataLength = m + 3;
this._generateTriangle(s, m, l, c[d[0]], c[d[1]]);
m += 3;
} else {
var p = this._getVertAngle(l, c[d[0]]), g = this._getVertAngle(l, c[d[1]]);
g < p && (g += r);
p -= r;
g -= r;
for (var y = 0; y < 3; ++y) {
if (p >= h) ; else if (p >= a) {
i.dataLength = m + 3;
g >= h ? this._generateTriangle(s, m, l, c[d[0]], this._intersectPoint_2[f]) : this._generateTriangle(s, m, l, c[d[0]], c[d[1]]);
m += 3;
} else if (g <= a) ; else if (g <= h) {
i.dataLength = m + 3;
this._generateTriangle(s, m, l, this._intersectPoint_1[f], c[d[1]]);
m += 3;
} else {
i.dataLength = m + 3;
this._generateTriangle(s, m, l, this._intersectPoint_1[f], this._intersectPoint_2[f]);
m += 3;
}
p += r;
g += r;
}
}
}
i.indiceCount = i.vertexCount = m;
i.vertDirty = i.uvDirty = !1;
}
},
_getVertAngle: function(t, e) {
var i, n;
i = e.x - t.x;
n = e.y - t.y;
if (0 !== i || 0 !== n) {
if (0 === i) return n > 0 ? .5 * Math.PI : 1.5 * Math.PI;
var r = Math.atan(n / i);
i < 0 && (r += Math.PI);
return r;
}
},
_generateTriangle: function(t, e, i, n, r) {
var s = this._vertices, a = s[0], o = s[1], h = s[2], l = s[3];
t[e].x = i.x;
t[e].y = i.y;
t[e + 1].x = n.x;
t[e + 1].y = n.y;
t[e + 2].x = r.x;
t[e + 2].y = r.y;
var c = void 0, u = void 0;
c = (i.x - a) / (h - a);
u = (i.y - o) / (l - o);
this._generateUV(c, u, t, e);
c = (n.x - a) / (h - a);
u = (n.y - o) / (l - o);
this._generateUV(c, u, t, e + 1);
c = (r.x - a) / (h - a);
u = (r.y - o) / (l - o);
this._generateUV(c, u, t, e + 2);
},
_generateUV: function(t, e, i, n) {
var r = this._uvs, s = r[0] + (r[2] - r[0]) * t, a = r[4] + (r[6] - r[4]) * t, o = r[1] + (r[3] - r[1]) * t, h = r[5] + (r[7] - r[5]) * t, l = i[n];
l.u = s + (a - s) * e;
l.v = o + (h - o) * e;
},
_calcInsectedPoints: function(t, e, i, n, r, s, a) {
var o = Math.sin(s), h = Math.cos(s), l = void 0, c = void 0;
if (0 !== Math.cos(s)) {
l = o / h;
if ((t - r.x) * h > 0) {
var u = r.y + l * (t - r.x);
a[0].x = t;
a[0].y = u;
}
if ((e - r.x) * h > 0) {
var _ = r.y + l * (e - r.x);
a[2].x = e;
a[2].y = _;
}
}
if (0 !== Math.sin(s)) {
c = h / o;
if ((n - r.y) * o > 0) {
var m = r.x + c * (n - r.y);
a[3].x = m;
a[3].y = n;
}
if ((i - r.y) * o > 0) {
var f = r.x + c * (i - r.y);
a[1].x = f;
a[1].y = i;
}
}
},
_calculateVertices: function(t) {
var e = t.node, i = e.width, n = e.height, r = e.anchorX * i, s = e.anchorY * n, a = -r, o = -s, h = i - r, l = n - s, c = this._vertices;
c[0] = a;
c[1] = o;
c[2] = h;
c[3] = l;
var u = this._center, _ = t._fillCenter, m = u.x = Math.min(Math.max(0, _.x), 1) * (h - a) + a, f = u.y = Math.min(Math.max(0, _.y), 1) * (l - o) + o, d = this._vertPos;
d[0].x = d[3].x = a;
d[1].x = d[2].x = h;
d[0].y = d[1].y = o;
d[2].y = d[3].y = l;
var p = this._triangles;
p.length = 0;
m !== c[0] && (p[0] = [ 3, 0 ]);
m !== c[2] && (p[2] = [ 1, 2 ]);
f !== c[1] && (p[1] = [ 0, 1 ]);
f !== c[3] && (p[3] = [ 2, 3 ]);
},
_calculateUVs: function(t) {
var e = t._texture.width, i = t._texture.height, n = t._rect, r = void 0, s = void 0, a = void 0, o = void 0, h = this._uvs;
if (t._rotated) {
r = n.x / e;
s = (n.x + n.height) / e;
a = n.y / i;
o = (n.y + n.width) / i;
h[0] = h[2] = r;
h[4] = h[6] = s;
h[3] = h[7] = o;
h[1] = h[5] = a;
} else {
r = n.x / e;
s = (n.x + n.width) / e;
a = n.y / i;
o = (n.y + n.height) / i;
h[0] = h[4] = r;
h[2] = h[6] = s;
h[1] = h[3] = o;
h[5] = h[7] = a;
}
},
fillBuffers: function(t, e) {
var i = t._renderData, n = i._data, r = t.node._worldMatrix, s = r.m00, a = r.m01, o = r.m04, h = r.m05, l = r.m12, c = r.m13, u = e._meshBuffer, _ = u.byteOffset >> 2, m = u._vData, f = u._iData, d = u.indiceOffset, p = u.vertexOffset;
u.request(i.vertexCount, i.indiceCount);
for (var g = n.length, y = 0; y < g; y++) {
var v = n[y];
m[_++] = v.x * s + v.y * o + l;
m[_++] = v.x * a + v.y * h + c;
m[_++] = v.u;
m[_++] = v.v;
}
for (var x = 0; x < g; x++) f[d + x] = p + x;
}
};
}), {
"../../../utils/dynamic-atlas/manager": 198
} ],
214: [ (function(t, e, i) {
t("../../../../platform/js");
var n = t("../../../utils/dynamic-atlas/manager");
e.exports = {
useModel: !1,
updateRenderData: function(t) {
var e = t._spriteFrame;
if (e) {
e._original || n.insertSpriteFrame(e);
t._material && t._material._texture === e._texture || t._activateMaterial();
}
var i = t._renderData;
i && e && i.vertDirty && this.updateVerts(t);
},
fillBuffers: function(t, e) {
var i = t._renderData._data, n = t.node._worldMatrix, r = n.m00, s = n.m01, a = n.m04, o = n.m05, h = n.m12, l = n.m13, c = e._quadBuffer, u = c.byteOffset >> 2, _ = c._vData;
c.request(4, 6);
var m = t._spriteFrame.uv;
_[u + 2] = m[0];
_[u + 3] = m[1];
_[u + 6] = m[2];
_[u + 7] = m[3];
_[u + 10] = m[4];
_[u + 11] = m[5];
_[u + 14] = m[6];
_[u + 15] = m[7];
var f = i[0], d = i[3], p = f.x, g = d.x, y = f.y, v = d.y, x = r * p, A = r * g, b = s * p, T = s * g, C = a * y, w = a * v, S = o * y, E = o * v;
_[u] = x + C + h;
_[u + 1] = b + S + l;
_[u + 4] = A + C + h;
_[u + 5] = T + S + l;
_[u + 8] = x + w + h;
_[u + 9] = b + E + l;
_[u + 12] = A + w + h;
_[u + 13] = T + E + l;
},
createData: function(t) {
var e = t.requestRenderData();
e.dataLength = 4;
e.vertexCount = 4;
e.indiceCount = 6;
return e;
},
updateVerts: function(t) {
var e = t._renderData, i = t.node, n = e._data, r = i.width, s = i.height, a = i.anchorX * r, o = i.anchorY * s, h = void 0, l = void 0, c = void 0, u = void 0;
if (t.trim) {
h = -a;
l = -o;
c = r - a;
u = s - o;
} else {
var _ = t.spriteFrame, m = _._originalSize.width, f = _._originalSize.height, d = _._rect.width, p = _._rect.height, g = _._offset, y = r / m, v = s / f, x = g.x + (m - d) / 2, A = g.x - (m - d) / 2, b = g.y + (f - p) / 2, T = g.y - (f - p) / 2;
h = x * y - a;
l = b * v - o;
c = r + A * y - a;
u = s + T * v - o;
}
n[0].x = h;
n[0].y = l;
n[3].x = c;
n[3].y = u;
e.vertDirty = !1;
}
};
}), {
"../../../../platform/js": 173,
"../../../utils/dynamic-atlas/manager": 198
} ],
215: [ (function(t, e, i) {
var n = t("../../../../components/CCSprite"), r = t("../../../utils/dynamic-atlas/manager");
n.FillType;
e.exports = {
useModel: !1,
createData: function(t) {
var e = t.requestRenderData();
e.dataLength = 20;
e.vertexCount = 16;
e.indiceCount = 54;
return e;
},
updateRenderData: function(t, e) {
var i = t.spriteFrame;
if (i) {
i._original || r.insertSpriteFrame(i);
t._material && t._material._texture === i._texture || t._activateMaterial();
}
var n = t._renderData;
if (n && i) {
if (n.vertDirty) {
this.updateVerts(t);
this.updateWorldVerts(t);
}
}
},
updateVerts: function(t) {
var e = t._renderData, i = e._data, n = t.node, r = n.width, s = n.height, a = n.anchorX * r, o = n.anchorY * s, h = t.spriteFrame, l = (h._rect, 
h.insetLeft), c = h.insetRight, u = h.insetTop, _ = h.insetBottom, m = r - l - c, f = s - u - _, d = r / (l + c), p = s / (u + _);
d = isNaN(d) || d > 1 ? 1 : d;
p = isNaN(p) || p > 1 ? 1 : p;
m = m < 0 ? 0 : m;
f = f < 0 ? 0 : f;
i[0].x = -a;
i[0].y = -o;
i[1].x = l * d - a;
i[1].y = _ * p - o;
i[2].x = i[1].x + m;
i[2].y = i[1].y + f;
i[3].x = r - a;
i[3].y = s - o;
e.vertDirty = !1;
},
fillBuffers: function(t, e) {
e.worldMatDirty && this.updateWorldVerts(t);
var i = t._renderData, n = i._data, r = (t.node, e._meshBuffer), s = r.byteOffset >> 2, a = r._vData, o = i.vertexCount, h = r._iData, l = r.indiceOffset, c = r.vertexOffset, u = t.spriteFrame.uvSliced;
r.request(o, i.indiceCount);
for (var _ = 4; _ < 20; ++_) {
var m = n[_], f = u[_ - 4];
a[s++] = m.x;
a[s++] = m.y;
a[s++] = f.u;
a[s++] = f.v;
}
for (var d = 0; d < 3; ++d) for (var p = 0; p < 3; ++p) {
var g = c + 4 * d + p;
h[l++] = g;
h[l++] = g + 1;
h[l++] = g + 4;
h[l++] = g + 1;
h[l++] = g + 5;
h[l++] = g + 4;
}
},
updateWorldVerts: function(t) {
for (var e = t.node, i = t._renderData._data, n = e._worldMatrix, r = n.m00, s = n.m01, a = n.m04, o = n.m05, h = n.m12, l = n.m13, c = 0; c < 4; ++c) for (var u = i[c], _ = 0; _ < 4; ++_) {
var m = i[_], f = i[4 + 4 * c + _];
f.x = m.x * r + u.y * a + h;
f.y = m.x * s + u.y * o + l;
}
}
};
}), {
"../../../../components/CCSprite": 80,
"../../../utils/dynamic-atlas/manager": 198
} ],
216: [ (function(t, e, i) {
var n = t("../../../utils/dynamic-atlas/manager");
e.exports = {
useModel: !1,
createData: function(t) {
return t.requestRenderData();
},
updateRenderData: function(t) {
var e = t.spriteFrame;
if (e) {
e._original || n.insertSpriteFrame(e);
t._material && t._material._texture === e._texture || t._activateMaterial();
}
var i = t._renderData;
if (e && i && (i.uvDirty || i.vertDirty)) {
var r = e._texture, s = r.width, a = r.height, o = e._rect, h = t.node, l = Math.abs(h.width), c = Math.abs(h.height), u = h.anchorX * l, _ = h.anchorY * c, m = o.width, f = o.height, d = l / m, p = c / f, g = Math.ceil(p), y = Math.ceil(d), v = i._data;
i.dataLength = Math.max(8, g + 1, y + 1);
var x = void 0, A = void 0, b = void 0, T = void 0;
if (e._rotated) {
x = o.x / s;
b = (o.x + f) / s;
A = (o.y + m) / a;
T = o.y / a;
v[0].u = x;
v[0].v = T;
v[1].u = x;
v[1].v = A;
v[2].u = b;
v[2].v = T;
v[3].u = b;
v[3].v = A;
v[4].u = x;
v[4].v = T;
v[5].u = x;
v[5].v = T + (A - T) * Math.min(1, p - y + 1);
v[6].u = x + (b - x) * Math.min(1, d - g + 1);
v[6].v = T;
v[7].u = v[5].u;
v[7].v = v[6].v;
} else {
x = o.x / s;
b = (o.x + m) / s;
A = (o.y + f) / a;
T = o.y / a;
v[0].u = x;
v[0].v = A;
v[1].u = b;
v[1].v = A;
v[2].u = x;
v[2].v = T;
v[3].u = b;
v[3].v = T;
v[4].u = x;
v[4].v = A;
v[5].u = x + (b - x) * Math.min(1, d - y + 1);
v[5].v = A;
v[6].u = x;
v[6].v = A + (T - A) * Math.min(1, p - g + 1);
v[7].u = v[5].u;
v[7].v = v[6].v;
}
for (var C = 0; C <= y; ++C) v[C].x = Math.min(m * C, l) - u;
for (var w = 0; w <= g; ++w) v[w].y = Math.min(f * w, c) - _;
i.vertexCount = g * y * 4;
i.indiceCount = g * y * 6;
i.uvDirty = !1;
i.vertDirty = !1;
}
},
fillBuffers: function(t, e) {
var i = t.node, n = t._renderData, r = n._data, s = e._meshBuffer, a = s.byteOffset >> 2, o = s._vData, h = s._iData, l = s.indiceOffset, c = s.vertexOffset;
s.request(n.vertexCount, n.indiceCount);
for (var u = t.spriteFrame._rect, _ = Math.abs(i.width), m = Math.abs(i.height), f = _ / u.width, d = m / u.height, p = Math.ceil(d), g = Math.ceil(f), y = i._worldMatrix, v = y.m00, x = y.m01, A = y.m04, b = y.m05, T = y.m12, C = y.m13, w = void 0, S = void 0, E = void 0, D = void 0, M = void 0, I = void 0, P = 0, B = p; P < B; ++P) {
E = r[P].y;
D = r[P + 1].y;
for (var R = 0, L = g; R < L; ++R) {
I = P + 1 === B;
M = R + 1 === L;
w = r[R].x;
S = r[R + 1].x;
o[a++] = w * v + E * A + T;
o[a++] = w * x + E * b + C;
o[a++] = M ? r[4].u : r[0].u;
o[a++] = I ? r[4].v : r[0].v;
o[a++] = S * v + E * A + T;
o[a++] = S * x + E * b + C;
o[a++] = M ? r[5].u : r[1].u;
o[a++] = I ? r[5].v : r[1].v;
o[a++] = w * v + D * A + T;
o[a++] = w * x + D * b + C;
o[a++] = M ? r[6].u : r[2].u;
o[a++] = I ? r[6].v : r[2].v;
o[a++] = S * v + D * A + T;
o[a++] = S * x + D * b + C;
o[a++] = M ? r[7].u : r[3].u;
o[a++] = I ? r[7].v : r[3].v;
}
}
for (var O = n.indiceCount, F = 0; F < O; F += 6) {
h[l++] = c;
h[l++] = c + 1;
h[l++] = c + 2;
h[l++] = c + 1;
h[l++] = c + 3;
h[l++] = c + 2;
c += 4;
}
}
};
}), {
"../../../utils/dynamic-atlas/manager": 198
} ],
217: [ (function(t, e, i) {
var n = t("../render-engine").gfx, r = cc.Class({
name: "cc.MeshBuffer",
ctor: function(t, e) {
this.byteStart = 0;
this.byteOffset = 0;
this.indiceStart = 0;
this.indiceOffset = 0;
this.vertexOffset = 0;
this._vertexFormat = e;
this._vertexBytes = this._vertexFormat._bytes;
this._vb = new n.VertexBuffer(t._device, e, n.USAGE_DYNAMIC, new ArrayBuffer(), 0);
this._ib = new n.IndexBuffer(t._device, n.INDEX_FMT_UINT16, n.USAGE_STATIC, new ArrayBuffer(), 0);
this._vData = null;
this._iData = null;
this._uintVData = null;
this._renderer = t;
this._initVDataCount = 256 * e._bytes;
this._initIDataCount = 1536;
this._reallocBuffer();
},
uploadData: function() {
if (0 !== this.byteOffset) {
var t = new Float32Array(this._vData.buffer, 0, this.byteOffset >> 2), e = new Uint16Array(this._iData.buffer, 0, this.indiceOffset);
this._vb.update(0, t);
this._ib.update(0, e);
}
},
request: function(t, e) {
if (this._renderer._buffer !== this) {
this._renderer._flush();
this._renderer._buffer = this;
}
var i = this.byteOffset + t * this._vertexBytes, n = this.indiceOffset + e, r = this._vData.byteLength, s = this._iData.length;
if (i > r || n > s) {
for (;r < i || s < n; ) {
this._initVDataCount *= 2;
this._initIDataCount *= 2;
r = 4 * this._initVDataCount;
s = this._initIDataCount;
}
this._reallocBuffer();
}
this.vertexOffset += t;
this.indiceOffset += e;
this.byteOffset = i;
},
_reallocBuffer: function() {
var t = this._vData;
this._vData = new Float32Array(this._initVDataCount);
this._uintVData = new Uint32Array(this._vData.buffer);
this._iData = new Uint16Array(this._initIDataCount);
if (t) for (var e = this._vData, i = 0, n = t.length; i < n; i++) e[i] = t[i];
this._vb._bytes = this._vData.byteLength;
this._ib._bytes = this._iData.byteLength;
},
reset: function() {
this.byteStart = 0;
this.byteOffset = 0;
this.indiceStart = 0;
this.indiceOffset = 0;
this.vertexOffset = 0;
}
});
e.exports = r;
}), {
"../render-engine": 195
} ],
218: [ (function(t, e, i) {
var n = t("./mesh-buffer"), r = cc.Class({
name: "cc.QuadBuffer",
extends: n,
_fillQuadBuffer: function() {
for (var t = this._initIDataCount / 6, e = this._iData, i = 0, n = 0; i < t; i++) {
var r = 4 * i;
e[n++] = r;
e[n++] = r + 1;
e[n++] = r + 2;
e[n++] = r + 1;
e[n++] = r + 3;
e[n++] = r + 2;
}
var s = new Uint16Array(this._iData.buffer, 0, 6 * t);
this._ib.update(0, s);
},
uploadData: function() {
var t = new Float32Array(this._vData.buffer, 0, this.byteOffset >> 2);
this._vb.update(0, t);
},
_reallocBuffer: function() {
n.prototype._reallocBuffer.call(this);
this._fillQuadBuffer();
}
});
e.exports = r;
}), {
"./mesh-buffer": 217
} ],
219: [ (function(t, e, i) {
var n = t("../../platform/CCMacro"), r = t("../render-engine"), s = t("./vertex-format").vfmtPosUv, a = t("./stencil-manager"), o = t("../utils/dynamic-atlas/manager"), h = t("../render-flow"), l = t("./quad-buffer"), c = t("./mesh-buffer"), u = new (t("../../platform/id-generater"))("VertextFormat"), _ = r.gfx, m = r.RecyclePool, f = r.InputAssembler, d = (r.IARenderData, 
r.math.bits, s._bytes, n.BATCH_VERTEX_COUNT), p = (s._bytes, {}), g = new r.Material();
g.updateHash();
var y = function(t, e) {
this._renderScene = e;
this._device = t;
this._stencilMgr = a.sharedManager;
this.material = g;
this.cullingMask = 1;
new _.VertexFormat([]);
this._iaPool = new m(function() {
return new f();
}, 16);
this._modelPool = new m(function() {
return new r.Model();
}, 16);
this._quadBuffer = this.getBuffer("quad", s);
this._meshBuffer = this.getBuffer("mesh", s);
this._buffer = this._quadBuffer;
this._batchedModels = [];
this._dummyNode = new cc.Node();
this._sortKey = 0;
this.node = this._dummyNode;
this.parentOpacity = 1;
this.parentOpacityDirty = 0;
this.worldMatDirty = 0;
h.init(this);
};
y.prototype = {
constructor: y,
reset: function() {
this._iaPool.reset();
for (var t = this._renderScene, e = this._batchedModels, i = 0; i < e.length; ++i) {
e[i].clearInputAssemblers();
e[i].clearEffects();
t.removeModel(e[i]);
}
this._modelPool.reset();
e.length = 0;
this._sortKey = 0;
for (var n in p) p[n].reset();
this._buffer = this._quadBuffer;
this.node = this._dummyNode;
this.material = g;
this.cullingMask = 1;
this.parentOpacity = 1;
this.parentOpacityDirty = 0;
this.worldMatDirty = 0;
this._stencilMgr.reset();
},
_flush: function() {
var t = this.material, e = this._buffer, i = e.indiceStart, n = e.indiceOffset - i;
if (t && !(n <= 0)) {
var r = t.effect, s = this._iaPool.add();
s._vertexBuffer = e._vb;
s._indexBuffer = e._ib;
s._start = i;
s._count = n;
this._stencilMgr.handleEffect(r);
var a = this._modelPool.add();
this._batchedModels.push(a);
a.sortKey = this._sortKey++;
a._cullingMask = this.cullingMask;
a.setNode(this.node);
a.addEffect(r);
a.addInputAssembler(s);
this._renderScene.addModel(a);
e.byteStart = e.byteOffset;
e.indiceStart = e.indiceOffset;
}
},
_flushIA: function(t) {
var e = t.material;
if (t.ia && e) {
this.material = e;
var i = this._stencilMgr.handleEffect(e.effect), n = this._modelPool.add();
this._batchedModels.push(n);
n.sortKey = this._sortKey++;
n._cullingMask = this.cullingMask;
n.setNode(this.node);
n.addEffect(i);
n.addInputAssembler(t.ia);
this._renderScene.addModel(n);
}
},
_commitComp: function(t, e, i) {
if (this.material._hash != t._material._hash || this.cullingMask !== i) {
this._flush();
this.node = e.useModel ? t.node : this._dummyNode;
this.material = t._material;
this.cullingMask = i;
}
e.fillBuffers(t, this);
},
_commitIA: function(t, e, i) {
this._flush();
this.cullingMask = i;
this.material = t._material;
this.node = e.useModel ? t.node : this._dummyNode;
e.renderIA(t, this);
},
visit: function(t) {
this.reset();
h.render(t);
o.update();
this._flush();
for (var e in p) p[e].uploadData();
},
getBuffer: function(t, e) {
e.name || (e.name = u.getNewId());
var i = t + e.name, n = p[i];
if (!n) {
if ("mesh" === t) n = new c(this, e); else {
if ("quad" !== t) {
cc.error("Not support buffer type [" + t + "]");
return null;
}
n = new l(this, e);
}
p[i] = n;
}
return n;
}
};
e.exports = y;
}), {
"../../platform/CCMacro": 158,
"../../platform/id-generater": 169,
"../render-engine": 195,
"../render-flow": 196,
"../utils/dynamic-atlas/manager": 198,
"./mesh-buffer": 217,
"./quad-buffer": 218,
"./stencil-manager": 220,
"./vertex-format": 221
} ],
220: [ (function(t, e, i) {
t("../../platform/CCEnum");
var n = t("../render-engine"), r = n.gfx, s = (n.renderer, n.RecyclePool, cc.Enum({
DISABLED: 0,
ENTER_LEVEL: 1,
ENABLED: 2,
EXIT_LEVEL: 3
}));
function a() {
this._maxLevel = 8;
this._maskStack = [];
this.stage = s.DISABLED;
}
a.prototype = {
constructor: a,
reset: function() {
this._maskStack.length = 0;
this.stage = s.DISABLED;
},
handleEffect: function(t) {
var e = t.getTechnique("transparent").passes;
if (this.stage === s.DISABLED) {
this.stage = s.DISABLED;
for (var i = 0; i < e.length; ++i) {
var n = e[i];
n._stencilTest && n.disableStencilTest();
}
return t;
}
var a = void 0, o = void 0, h = void 0, l = void 0, c = void 0, u = r.STENCIL_OP_KEEP, _ = r.STENCIL_OP_KEEP;
if (this.stage === s.ENABLED) {
a = r.DS_FUNC_EQUAL;
if (this._maskStack[this._maskStack.length - 1].inverted) {
o = this.getInvertedRef();
h = this.getStencilRef();
} else h = o = this.getStencilRef();
c = r.STENCIL_OP_KEEP;
l = 0;
} else {
a = r.DS_FUNC_NEVER;
c = r.STENCIL_OP_REPLACE;
if (this.stage === s.ENTER_LEVEL) {
this.stage = s.ENABLED;
o = this.getStencilRef();
l = h = this.getWriteMask();
} else if (this.stage === s.EXIT_LEVEL) {
0 === this._maskStack.length ? this.stage = s.DISABLED : this.stage = s.ENABLED;
o = 0;
l = h = this.getExitWriteMask();
}
}
for (var m = 0; m < e.length; ++m) {
var f = e[m];
f.setStencilFront(a, o, h, c, u, _, l);
f.setStencilBack(a, o, h, c, u, _, l);
}
},
pushMask: function(t) {
this._maskStack.length + 1 > this._maxLevel && cc.errorID(9e3, this._maxLevel);
this._maskStack.push(t);
this.stage = s.ENTER_LEVEL;
},
popMask: function() {
0 === this._maskStack.length && cc.errorID(9001);
this._maskStack.pop();
this.stage = s.EXIT_LEVEL;
},
getWriteMask: function() {
return 1 << this._maskStack.length - 1;
},
getExitWriteMask: function() {
return 1 << this._maskStack.length;
},
getStencilRef: function() {
for (var t = 0, e = 0; e < this._maskStack.length; ++e) t += 1 << e;
return t;
},
getInvertedRef: function() {
for (var t = 0, e = 0; e < this._maskStack.length - 1; ++e) t += 1 << e;
return t;
}
};
a.sharedManager = new a();
a.Stage = s;
e.exports = a;
}), {
"../../platform/CCEnum": 155,
"../render-engine": 195
} ],
221: [ (function(t, e, i) {
var n = t("../render-engine").gfx, r = new n.VertexFormat([ {
name: n.ATTR_POSITION,
type: n.ATTR_TYPE_FLOAT32,
num: 3
}, {
name: n.ATTR_UV0,
type: n.ATTR_TYPE_FLOAT32,
num: 2
}, {
name: n.ATTR_COLOR,
type: n.ATTR_TYPE_UINT8,
num: 4,
normalize: !0
} ]);
r.name = "vfmt3D";
var s = new n.VertexFormat([ {
name: n.ATTR_POSITION,
type: n.ATTR_TYPE_FLOAT32,
num: 2
}, {
name: n.ATTR_UV0,
type: n.ATTR_TYPE_FLOAT32,
num: 2
}, {
name: n.ATTR_COLOR,
type: n.ATTR_TYPE_UINT8,
num: 4,
normalize: !0
} ]);
s.name = "vfmtPosUvColor";
var a = new n.VertexFormat([ {
name: n.ATTR_POSITION,
type: n.ATTR_TYPE_FLOAT32,
num: 2
}, {
name: n.ATTR_UV0,
type: n.ATTR_TYPE_FLOAT32,
num: 2
} ]);
a.name = "vfmtPosUv";
e.exports = {
vfmt3D: r,
vfmtPosUvColor: s,
vfmtPosUv: a
};
}), {
"../render-engine": 195
} ],
222: [ (function(t, e, i) {
t("../platform/CCSys");
var n = /(\.[^\.\/\?\\]*)(\?.*)?$/, r = /((.*)(\/|\\|\\\\))?(.*?\..*$)?/, s = /[^\.\/]+\/\.\.\//;
cc.path = {
join: function() {
for (var t = arguments.length, e = "", i = 0; i < t; i++) e = (e + ("" === e ? "" : "/") + arguments[i]).replace(/(\/|\\\\)$/, "");
return e;
},
extname: function(t) {
var e = n.exec(t);
return e ? e[1] : "";
},
mainFileName: function(t) {
if (t) {
var e = t.lastIndexOf(".");
if (-1 !== e) return t.substring(0, e);
}
return t;
},
basename: function(t, e) {
var i = t.indexOf("?");
i > 0 && (t = t.substring(0, i));
var n = /(\/|\\\\)([^(\/|\\\\)]+)$/g.exec(t.replace(/(\/|\\\\)$/, ""));
if (!n) return null;
var r = n[2];
return e && t.substring(t.length - e.length).toLowerCase() === e.toLowerCase() ? r.substring(0, r.length - e.length) : r;
},
dirname: function(t) {
var e = r.exec(t);
return e ? e[2] : "";
},
changeExtname: function(t, e) {
e = e || "";
var i = t.indexOf("?"), n = "";
if (i > 0) {
n = t.substring(i);
t = t.substring(0, i);
}
return (i = t.lastIndexOf(".")) < 0 ? t + e + n : t.substring(0, i) + e + n;
},
changeBasename: function(t, e, i) {
if (0 === e.indexOf(".")) return this.changeExtname(t, e);
var n = t.indexOf("?"), r = "", s = i ? this.extname(t) : "";
if (n > 0) {
r = t.substring(n);
t = t.substring(0, n);
}
n = (n = t.lastIndexOf("/")) <= 0 ? 0 : n + 1;
return t.substring(0, n) + e + s + r;
},
_normalize: function(t) {
var e = t = String(t);
do {
e = t;
t = t.replace(s, "");
} while (e.length !== t.length);
return t;
},
sep: cc.sys.os === cc.sys.OS_WINDOWS ? "\\" : "/",
stripSep: function(t) {
return t.replace(/[\/\\]$/, "");
}
};
e.exports = cc.path;
}), {
"../platform/CCSys": 162
} ],
223: [ (function(t, e, i) {
var n = function(t, e, i, n, r, s) {
this.a = t;
this.b = e;
this.c = i;
this.d = n;
this.tx = r;
this.ty = s;
};
n.create = function(t, e, i, n, r, s) {
return {
a: t,
b: e,
c: i,
d: n,
tx: r,
ty: s
};
};
n.identity = function() {
return {
a: 1,
b: 0,
c: 0,
d: 1,
tx: 0,
ty: 0
};
};
n.clone = function(t) {
return {
a: t.a,
b: t.b,
c: t.c,
d: t.d,
tx: t.tx,
ty: t.ty
};
};
n.concat = function(t, e, i) {
var n = e.a, r = e.b, s = e.c, a = e.d, o = e.tx, h = e.ty;
t.a = n * i.a + r * i.c;
t.b = n * i.b + r * i.d;
t.c = s * i.a + a * i.c;
t.d = s * i.b + a * i.d;
t.tx = o * i.a + h * i.c + i.tx;
t.ty = o * i.b + h * i.d + i.ty;
return t;
};
n.invert = function(t, e) {
var i = e.a, n = e.b, r = e.c, s = e.d, a = 1 / (i * s - n * r), o = e.tx, h = e.ty;
t.a = a * s;
t.b = -a * n;
t.c = -a * r;
t.d = a * i;
t.tx = a * (r * h - s * o);
t.ty = a * (n * o - i * h);
return t;
};
n.fromMat4 = function(t, e) {
t.a = e.m00;
t.b = e.m01;
t.c = e.m04;
t.d = e.m05;
t.tx = e.m12;
t.ty = e.m13;
return t;
};
n.transformVec2 = function(t, e, i, n) {
var r, s;
if (void 0 === n) {
n = i;
r = e.x;
s = e.y;
} else {
r = e;
s = i;
}
t.x = n.a * r + n.c * s + n.tx;
t.y = n.b * r + n.d * s + n.ty;
return t;
};
n.transformSize = function(t, e, i) {
t.width = i.a * e.width + i.c * e.height;
t.height = i.b * e.width + i.d * e.height;
return t;
};
n.transformRect = function(t, e, i) {
var n = e.x, r = e.y, s = n + e.width, a = r + e.height, o = i.a * n + i.c * r + i.tx, h = i.b * n + i.d * r + i.ty, l = i.a * s + i.c * r + i.tx, c = i.b * s + i.d * r + i.ty, u = i.a * n + i.c * a + i.tx, _ = i.b * n + i.d * a + i.ty, m = i.a * s + i.c * a + i.tx, f = i.b * s + i.d * a + i.ty, d = Math.min(o, l, u, m), p = Math.max(o, l, u, m), g = Math.min(h, c, _, f), y = Math.max(h, c, _, f);
t.x = d;
t.y = g;
t.width = p - d;
t.height = y - g;
return t;
};
n.transformObb = function(t, e, i, n, r, s) {
var a = r.x, o = r.y, h = r.width, l = r.height, c = s.a * a + s.c * o + s.tx, u = s.b * a + s.d * o + s.ty, _ = s.a * h, m = s.b * h, f = s.c * l, d = s.d * l;
e.x = c;
e.y = u;
i.x = _ + c;
i.y = m + u;
t.x = f + c;
t.y = d + u;
n.x = _ + f + c;
n.y = m + d + u;
};
cc.AffineTransform = e.exports = n;
}), {} ],
224: [ (function(i, n, r) {
var s = i("../platform/CCObject").Flags, a = i("./misc"), o = i("../platform/js"), h = i("../platform/id-generater"), l = i("../event-manager"), c = i("../renderer/render-flow"), u = s.Destroying, _ = s.DontDestroy, m = s.Deactivating, f = new h("Node");
function d(i) {
if (!i) {
cc.errorID(3804);
return null;
}
return "string" === ("object" === (e = typeof i) ? t(i) : e) ? o.getClassByName(i) : i;
}
function p(t, e) {
if (e._sealed) for (var i = 0; i < t._components.length; ++i) {
var n = t._components[i];
if (n.constructor === e) return n;
} else for (var r = 0; r < t._components.length; ++r) {
var s = t._components[r];
if (s instanceof e) return s;
}
return null;
}
function g(t, e, i) {
if (e._sealed) for (var n = 0; n < t._components.length; ++n) {
var r = t._components[n];
r.constructor === e && i.push(r);
} else for (var s = 0; s < t._components.length; ++s) {
var a = t._components[s];
a instanceof e && i.push(a);
}
}
var y = cc.Class({
name: "cc._BaseNode",
extends: cc.Object,
properties: {
_parent: null,
_children: [],
_active: !0,
_level: 0,
_components: [],
_prefab: null,
_persistNode: {
get: function() {
return (this._objFlags & _) > 0;
},
set: function(t) {
t ? this._objFlags |= _ : this._objFlags &= ~_;
}
},
name: {
get: function() {
return this._name;
},
set: function(t) {
0;
this._name = t;
}
},
uuid: {
get: function() {
return this._id;
}
},
children: {
get: function() {
return this._children;
}
},
childrenCount: {
get: function() {
return this._children.length;
}
},
active: {
get: function() {
return this._active;
},
set: function(t) {
t = !!t;
if (this._active !== t) {
this._active = t;
var e = this._parent;
if (e) {
e._activeInHierarchy && cc.director._nodeActivator.activateNode(this, t);
}
}
}
},
activeInHierarchy: {
get: function() {
return this._activeInHierarchy;
}
}
},
ctor: function(t) {
this._name = void 0 !== t ? t : "New Node";
this._activeInHierarchy = !1;
this._id = f.getNewId();
cc.director._scheduler && cc.director._scheduler.enableForTarget(this);
this.__eventTargets = [];
this._renderFlag = c.FLAG_TRANSFORM;
},
getParent: function() {
return this._parent;
},
setParent: function(t) {
if (this._parent !== t) {
0;
var e = this._parent;
0;
this._parent = t || null;
this._onSetParent(t);
if (t) {
0;
this._level = t._level + 1;
l._setDirtyForNode(this);
t._children.push(this);
t.emit && t.emit("child-added", this);
t._renderFlag |= c.FLAG_CHILDREN;
}
if (e) {
if (!(e._objFlags & u)) {
var i = e._children.indexOf(this);
0;
e._children.splice(i, 1);
e.emit && e.emit("child-removed", this);
this._onHierarchyChanged(e);
0 === e._children.length && (e._renderFlag &= ~c.FLAG_CHILDREN);
}
} else t && this._onHierarchyChanged(null);
}
},
attr: function(t) {
o.mixin(this, t);
},
getChildByUuid: function(t) {
if (!t) {
cc.log("Invalid uuid");
return null;
}
for (var e = this._children, i = 0, n = e.length; i < n; i++) if (e[i]._id === t) return e[i];
return null;
},
getChildByName: function(t) {
if (!t) {
cc.log("Invalid name");
return null;
}
for (var e = this._children, i = 0, n = e.length; i < n; i++) if (e[i]._name === t) return e[i];
return null;
},
addChild: function(t) {
0;
cc.assertID(t, 1606);
cc.assertID(null === t._parent, 1605);
t.setParent(this);
},
insertChild: function(t, e) {
t.parent = this;
t.setSiblingIndex(e);
},
getSiblingIndex: function() {
return this._parent ? this._parent._children.indexOf(this) : 0;
},
setSiblingIndex: function(t) {
if (this._parent) if (this._parent._objFlags & m) cc.errorID(3821); else {
var e = this._parent._children;
t = -1 !== t ? t : e.length - 1;
var i = e.indexOf(this);
if (t !== i) {
e.splice(i, 1);
t < e.length ? e.splice(t, 0, this) : e.push(this);
this._onSiblingIndexChanged && this._onSiblingIndexChanged(t);
}
}
},
walk: function(t, e) {
var i, n, r, s, a = cc._BaseNode, o = 1, h = a._stacks[a._stackId];
if (!h) {
h = [];
a._stacks.push(h);
}
a._stackId++;
h.length = 0;
h[0] = this;
var l = null;
s = !1;
for (;o; ) if (n = h[--o]) {
!s && t ? t(n) : s && e && e(n);
h[o] = null;
if (s) {
s = !1;
if (i) if (i[++r]) {
h[o] = i[r];
o++;
} else if (l) {
h[o] = l;
o++;
s = !0;
if (l._parent) {
r = (i = l._parent._children).indexOf(l);
l = l._parent;
} else {
l = null;
i = null;
}
if (r < 0) break;
}
} else if (n._children.length > 0) {
l = n;
i = n._children;
r = 0;
h[o] = i[r];
o++;
} else {
h[o] = n;
o++;
s = !0;
}
}
h.length = 0;
a._stackId--;
},
cleanup: function() {},
removeFromParent: function(t) {
if (this._parent) {
void 0 === t && (t = !0);
this._parent.removeChild(this, t);
}
},
removeChild: function(t, e) {
if (this._children.indexOf(t) > -1) {
(e || void 0 === e) && t.cleanup();
t.parent = null;
}
},
removeAllChildren: function(t) {
var e = this._children;
void 0 === t && (t = !0);
for (var i = e.length - 1; i >= 0; i--) {
var n = e[i];
if (n) {
t && n.cleanup();
n.parent = null;
}
}
this._children.length = 0;
},
isChildOf: function(t) {
var e = this;
do {
if (e === t) return !0;
e = e._parent;
} while (e);
return !1;
},
getComponent: function(t) {
var e = d(t);
return e ? p(this, e) : null;
},
getComponents: function(t) {
var e = d(t), i = [];
e && g(this, e, i);
return i;
},
getComponentInChildren: function(t) {
var e = d(t);
return e ? (function t(e, i) {
for (var n = 0; n < e.length; ++n) {
var r = e[n], s = p(r, i);
if (s) return s;
if (r._children.length > 0 && (s = t(r._children, i))) return s;
}
return null;
})(this._children, e) : null;
},
getComponentsInChildren: function(t) {
var e = d(t), i = [];
if (e) {
g(this, e, i);
(function t(e, i, n) {
for (var r = 0; r < e.length; ++r) {
var s = e[r];
g(s, i, n);
s._children.length > 0 && t(s._children, i, n);
}
})(this._children, e, i);
}
return i;
},
_checkMultipleComp: !1,
addComponent: function(i) {
0;
var n;
if ("string" === ("object" === (e = typeof i) ? t(i) : e)) {
if (!(n = o.getClassByName(i))) {
cc.errorID(3807, i);
cc._RFpeek() && cc.errorID(3808, i);
return null;
}
} else {
if (!i) {
cc.errorID(3804);
return null;
}
n = i;
}
if ("function" !== ("object" === (e = typeof n) ? t(n) : e)) {
cc.errorID(3809);
return null;
}
if (!o.isChildClassOf(n, cc.Component)) {
cc.errorID(3810);
return null;
}
0;
var r = n._requireComponent;
if (r && !this.getComponent(r)) {
if (!this.addComponent(r)) return null;
}
var s = new n();
s.node = this;
this._components.push(s);
0;
this._activeInHierarchy && cc.director._nodeActivator.activateComp(s);
return s;
},
_addComponentAt: !1,
removeComponent: function(t) {
if (t) {
t instanceof cc.Component || (t = this.getComponent(t));
t && t.destroy();
} else cc.errorID(3813);
},
_getDependComponent: !1,
_removeComponent: function(t) {
if (t) {
if (!(this._objFlags & u)) {
var e = this._components.indexOf(t);
if (-1 !== e) {
this._components.splice(e, 1);
0;
} else t.node !== this && cc.errorID(3815);
}
} else cc.errorID(3814);
},
_disableChildComps: function() {
var t, e = this._components.length;
for (t = 0; t < e; ++t) {
var i = this._components[t];
i._enabled && cc.director._compScheduler.disableComp(i);
}
for (t = 0, e = this._children.length; t < e; ++t) {
var n = this._children[t];
n._active && n._disableChildComps();
}
},
destroy: function() {
cc.Object.prototype.destroy.call(this) && this._activeInHierarchy && this._disableChildComps();
},
destroyAllChildren: function() {
for (var t = this._children, e = 0; e < t.length; ++e) t[e].destroy();
},
_onSetParent: function(t) {},
_onPostActivated: function() {},
_onBatchRestored: function() {},
_onBatchCreated: function() {},
_onHierarchyChanged: function(t) {
var e = this._parent;
if (this._persistNode && !(e instanceof cc.Scene)) {
cc.game.removePersistRootNode(this);
0;
}
var i = this._active && !(!e || !e._activeInHierarchy);
this._activeInHierarchy !== i && cc.director._nodeActivator.activateNode(this, i);
},
_instantiate: function(t) {
t || (t = cc.instantiate._clone(this, this));
var e = this._prefab;
e && this === e.root && e.sync;
t._parent = null;
t._onBatchRestored();
return t;
},
_registerIfAttached: !1,
_onPreDestroy: function() {
var t, e;
this._objFlags |= u;
var i = this._parent, n = i && i._objFlags & u;
0;
var r = this._children;
for (t = 0, e = r.length; t < e; ++t) r[t]._destroyImmediate();
for (t = 0, e = this._components.length; t < e; ++t) {
this._components[t]._destroyImmediate();
}
var s = this.__eventTargets;
for (t = 0, e = s.length; t < e; ++t) {
var a = s[t];
a && a.targetOff(this);
}
s.length = 0;
this._persistNode && cc.game.removePersistRootNode(this);
if (!n && i) {
var o = i._children.indexOf(this);
i._children.splice(o, 1);
i.emit && i.emit("child-removed", this);
}
return n;
},
onRestore: !1
});
y.idGenerater = f;
y._stacks = [ [] ];
y._stackId = 0;
y.prototype._onPreDestroyBase = y.prototype._onPreDestroy;
0;
y.prototype._onHierarchyChangedBase = y.prototype._onHierarchyChanged;
0;
a.propertyDefine(y, [ "name", "children", "childrenCount" ], {});
0;
cc._BaseNode = n.exports = y;
}), {
"../event-manager": 96,
"../platform/CCObject": 159,
"../platform/id-generater": 169,
"../platform/js": 173,
"../renderer/render-flow": 196,
"./misc": 231
} ],
225: [ (function(t, e, i) {
var n = 1e-6;
e.exports = {
binarySearchEpsilon: function(t, e) {
for (var i = 0, r = t.length - 1, s = r >>> 1; i <= r; s = i + r >>> 1) {
var a = t[s];
if (a > e + n) r = s - 1; else {
if (!(a < e - n)) return s;
i = s + 1;
}
}
return ~i;
}
};
}), {} ],
226: [ (function(t, e, i) {
var n = t("./misc").BASE64_VALUES, r = "0123456789abcdef".split(""), s = [ "", "", "", "" ], a = s.concat(s, "-", s, "-", s, "-", s, "-", s, s, s), o = a.map((function(t, e) {
return "-" === t ? NaN : e;
})).filter(isFinite);
e.exports = function(t) {
if (22 !== t.length) return t;
a[0] = t[0];
a[1] = t[1];
for (var e = 2, i = 2; e < 22; e += 2) {
var s = n[t.charCodeAt(e)], h = n[t.charCodeAt(e + 1)];
a[o[i++]] = r[s >> 2];
a[o[i++]] = r[(3 & s) << 2 | h >> 4];
a[o[i++]] = r[15 & h];
}
return a.join("");
};
0;
}), {
"./misc": 231
} ],
227: [ (function(t, e, i) {
cc.find = e.exports = function(t, e) {
if (null == t) {
cc.errorID(5600);
return null;
}
if (e) 0; else {
var i = cc.director.getScene();
if (!i) {
0;
return null;
}
0;
e = i;
}
for (var n = e, r = "/" !== t[0] ? 0 : 1, s = t.split("/"), a = r; a < s.length; a++) {
var o = s[a], h = n._children;
n = null;
for (var l = 0, c = h.length; l < c; ++l) {
var u = h[l];
if (u.name === o) {
n = u;
break;
}
}
if (!n) return null;
}
return n;
};
}), {} ],
228: [ (function(t, e, i) {
var n = /^(click)(\s)*=/, r = /(\s)*src(\s)*=|(\s)*height(\s)*=|(\s)*width(\s)*=|(\s)*click(\s)*=/, s = function() {
this._parsedObject = {};
this._specialSymbolArray = [];
this._specialSymbolArray.push([ /&lt;/g, "<" ]);
this._specialSymbolArray.push([ /&gt;/g, ">" ]);
this._specialSymbolArray.push([ /&amp;/g, "&" ]);
this._specialSymbolArray.push([ /&quot;/g, '"' ]);
this._specialSymbolArray.push([ /&apos;/g, "'" ]);
};
s.prototype = {
constructor: s,
parse: function(t) {
this._resultObjectArray = [];
this._stack = [];
for (var e = 0, i = t.length; e < i; ) {
var n = t.indexOf("<", e);
if (n < 0) {
this._stack.pop();
this._processResult(t.substring(e));
e = i;
} else {
this._processResult(t.substring(e, n));
var r = t.indexOf(">", e);
-1 === r ? r = n : "/" === t.charAt(n + 1) ? this._stack.pop() : this._addToStack(t.substring(n + 1, r));
e = r + 1;
}
}
return this._resultObjectArray;
},
_attributeToObject: function(t) {
var e, i, n, s, a = {}, o = (t = t.trim()).match(/^(color|size)(\s)*=/);
if (o) {
e = o[0];
if ("" === (t = t.substring(e.length).trim())) return a;
i = t.indexOf(" ");
switch (e[0]) {
case "c":
a.color = i > -1 ? t.substring(0, i).trim() : t;
break;

case "s":
a.size = parseInt(t);
}
if (i > -1) {
s = t.substring(i + 1).trim();
n = this._processEventHandler(s);
a.event = n;
}
return a;
}
if ((o = t.match(/^(br(\s)*\/)/)) && o[0].length > 0 && (e = o[0].trim()).startsWith("br") && "/" === e[e.length - 1]) {
a.isNewLine = !0;
this._resultObjectArray.push({
text: "",
style: {
newline: !0
}
});
return a;
}
if ((o = t.match(/^(img(\s)*src(\s)*=[^>]+\/)/)) && o[0].length > 0 && (e = o[0].trim()).startsWith("img") && "/" === e[e.length - 1]) {
o = t.match(r);
for (var h, l = !1; o; ) {
e = (t = t.substring(t.indexOf(o[0]))).substr(0, o[0].length);
u = (i = (h = t.substring(e.length).trim()).indexOf(" ")) > -1 ? h.substr(0, i) : h;
e = (e = e.replace(/[^a-zA-Z]/g, "").trim()).toLocaleLowerCase();
t = h.substring(i).trim();
if ("src" === e) {
a.isImage = !0;
u.endsWith("/") && (u = u.substring(0, u.length - 1));
if (0 === u.indexOf("'")) {
l = !0;
u = u.substring(1, u.length - 1);
} else if (0 === u.indexOf('"')) {
l = !0;
u = u.substring(1, u.length - 1);
}
a.src = u;
} else "height" === e ? a.imageHeight = parseInt(u) : "width" === e ? a.imageWidth = parseInt(u) : "click" === e && (a.event = this._processEventHandler(e + "=" + u));
o = t.match(r);
}
l && a.isImage && this._resultObjectArray.push({
text: "",
style: a
});
return {};
}
if (o = t.match(/^(outline(\s)*[^>]*)/)) {
var c = {
color: "#ffffff",
width: 1
};
if (t = o[0].substring("outline".length).trim()) {
var u, _ = /(\s)*color(\s)*=|(\s)*width(\s)*=|(\s)*click(\s)*=/;
o = t.match(_);
for (;o; ) {
e = (t = t.substring(t.indexOf(o[0]))).substr(0, o[0].length);
u = (i = (h = t.substring(e.length).trim()).indexOf(" ")) > -1 ? h.substr(0, i) : h;
e = (e = e.replace(/[^a-zA-Z]/g, "").trim()).toLocaleLowerCase();
t = h.substring(i).trim();
"click" === e ? a.event = this._processEventHandler(e + "=" + u) : "color" === e ? c.color = u : "width" === e && (c.width = parseInt(u));
o = t.match(_);
}
}
a.outline = c;
}
if ((o = t.match(/^(on|u|b|i)(\s)*/)) && o[0].length > 0) {
e = o[0];
t = t.substring(e.length).trim();
switch (e[0]) {
case "u":
a.underline = !0;
break;

case "i":
a.italic = !0;
break;

case "b":
a.bold = !0;
}
if ("" === t) return a;
n = this._processEventHandler(t);
a.event = n;
}
return a;
},
_processEventHandler: function(t) {
for (var e = 0, i = {}, r = t.match(n), s = !1; r; ) {
var a = r[0], o = "";
s = !1;
if ('"' === (t = t.substring(a.length).trim()).charAt(0)) {
if ((e = t.indexOf('"', 1)) > -1) {
o = t.substring(1, e).trim();
s = !0;
}
e++;
} else if ("'" === t.charAt(0)) {
if ((e = t.indexOf("'", 1)) > -1) {
o = t.substring(1, e).trim();
s = !0;
}
e++;
} else {
var h = t.match(/(\S)+/);
e = (o = h ? h[0] : "").length;
}
s && (i[a = a.substring(0, a.length - 1).trim()] = o);
r = (t = t.substring(e).trim()).match(n);
}
return i;
},
_addToStack: function(t) {
var e = this._attributeToObject(t);
if (0 === this._stack.length) this._stack.push(e); else {
if (e.isNewLine || e.isImage) return;
var i = this._stack[this._stack.length - 1];
for (var n in i) e[n] || (e[n] = i[n]);
this._stack.push(e);
}
},
_processResult: function(t) {
if ("" !== t) {
t = this._escapeSpecialSymbol(t);
this._stack.length > 0 ? this._resultObjectArray.push({
text: t,
style: this._stack[this._stack.length - 1]
}) : this._resultObjectArray.push({
text: t
});
}
},
_escapeSpecialSymbol: function(t) {
for (var e = 0; e < this._specialSymbolArray.length; ++e) {
var i = this._specialSymbolArray[e][0], n = this._specialSymbolArray[e][1];
t = t.replace(i, n);
}
return t;
}
};
0;
e.exports = s;
}), {} ],
229: [ (function(t, e, i) {
t("./CCPath");
t("./profiler/CCProfiler");
t("./find");
t("./mutable-forward-iterator");
}), {
"./CCPath": 222,
"./find": 227,
"./mutable-forward-iterator": 232,
"./profiler/CCProfiler": 235
} ],
230: [ (function(t, e, i) {
var n = t("../platform/js"), r = t("../renderer/render-engine"), s = (t("../value-types/quat"), 
r.math), a = new n.Pool(128);
a.get = function() {
var t = this._get();
t ? s.mat4.identity(t) : t = s.mat4.create();
return t;
};
var o = new n.Pool(64);
o.get = function() {
var t = this._get();
if (t) {
t.x = t.y = t.z = 0;
t.w = 1;
} else t = s.quat.create();
return t;
};
e.exports = {
mat4: a,
quat: o
};
}), {
"../platform/js": 173,
"../renderer/render-engine": 195,
"../value-types/quat": 242
} ],
231: [ (function(t, e, i) {
var n = t("../platform/js"), r = (t("../platform/CCSys"), {
propertyDefine: function(t, e, i) {
function r(t, e, i, r) {
var s = Object.getOwnPropertyDescriptor(t, e);
if (s) {
s.get && (t[i] = s.get);
s.set && r && (t[r] = s.set);
} else {
var a = t[i];
n.getset(t, e, a, t[r]);
}
}
for (var s, a = t.prototype, o = 0; o < e.length; o++) {
var h = (s = e[o])[0].toUpperCase() + s.slice(1);
r(a, s, "get" + h, "set" + h);
}
for (s in i) {
var l = i[s];
r(a, s, l[0], l[1]);
}
},
NextPOT: function(t) {
t -= 1;
t |= t >> 1;
t |= t >> 2;
t |= t >> 4;
t |= t >> 8;
return (t |= t >> 16) + 1;
}
});
0;
r.BUILTIN_CLASSID_RE = /^(?:cc|dragonBones|sp|ccsg)\..+/;
for (var s = new Array(123), a = 0; a < 123; ++a) s[a] = 64;
for (var o = 0; o < 64; ++o) s["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charCodeAt(o)] = o;
r.BASE64_VALUES = s;
r.pushToMap = function(t, e, i, n) {
var r = t[e];
if (r) if (Array.isArray(r)) if (n) {
r.push(r[0]);
r[0] = i;
} else r.push(i); else t[e] = n ? [ i, r ] : [ r, i ]; else t[e] = i;
};
r.clampf = function(t, e, i) {
if (e > i) {
var n = e;
e = i;
i = n;
}
return t < e ? e : t < i ? t : i;
};
r.clamp01 = function(t) {
return t < 0 ? 0 : t < 1 ? t : 1;
};
r.lerp = function(t, e, i) {
return t + (e - t) * i;
};
r.degreesToRadians = function(t) {
return t * cc.macro.RAD;
};
r.radiansToDegrees = function(t) {
return t * cc.macro.DEG;
};
cc.misc = e.exports = r;
}), {
"../platform/CCSys": 162,
"../platform/js": 173
} ],
232: [ (function(t, e, i) {
function n(t) {
this.i = 0;
this.array = t;
}
var r = n.prototype;
r.remove = function(t) {
var e = this.array.indexOf(t);
e >= 0 && this.removeAt(e);
};
r.removeAt = function(t) {
this.array.splice(t, 1);
t <= this.i && --this.i;
};
r.fastRemove = function(t) {
var e = this.array.indexOf(t);
e >= 0 && this.fastRemoveAt(e);
};
r.fastRemoveAt = function(t) {
var e = this.array;
e[t] = e[e.length - 1];
--e.length;
t <= this.i && --this.i;
};
r.push = function(t) {
this.array.push(t);
};
e.exports = n;
}), {} ],
233: [ (function(i, n, r) {
var s = i("../CCNode"), a = s.EventType, o = s._LocalDirtyFlag, h = i("../renderer/render-engine"), l = i("../renderer/render-flow"), c = h.math, u = Math.PI / 180, _ = 1, m = 2, f = null, d = null;
function p() {
if (this._localMatDirty) {
var t = this._matrix;
c.mat4.fromRTS(t, this._quat, this._position, this._scale);
if (this._skewX || this._skewY) {
var e = t.m00, i = t.m01, n = t.m04, r = t.m05, s = Math.tan(this._skewX * u), a = Math.tan(this._skewY * u);
Infinity === s && (s = 99999999);
Infinity === a && (a = 99999999);
t.m00 = e + n * a;
t.m01 = i + r * a;
t.m04 = n + e * s;
t.m05 = r + i * s;
}
this._localMatDirty = 0;
this._worldMatDirty = !0;
}
}
function g() {
this._localMatDirty && this._updateLocalMatrix();
if (this._parent) {
var t = this._parent._worldMatrix;
c.mat4.mul(this._worldMatrix, t, this._matrix);
} else c.mat4.copy(this._worldMatrix, this._matrix);
this._worldMatDirty = !1;
}
function y() {
return new cc.Vec3(this._position);
}
function v(t, e, i) {
var n = void 0;
if (void 0 === e) {
n = t.x;
e = t.y;
i = t.z || 0;
} else {
n = t;
i = i || 0;
}
var r = this._position;
if (r.x !== n || r.y !== e || r.z !== i) {
r.x = n;
r.y = e;
r.z = i;
this.setLocalDirty(o.POSITION);
this._renderFlag |= l.FLAG_WORLD_TRANSFORM;
this._eventMask & _ && this.emit(a.POSITION_CHANGED);
}
}
function x() {
return cc.v3(this._scale);
}
function A(i, n, r) {
if (i && "number" !== ("object" === (e = typeof i) ? t(i) : e)) {
n = i.y;
r = i.z || 1;
i = i.x;
} else if (void 0 !== i && void 0 === n) {
n = i;
r = i;
} else void 0 === r && (r = 1);
if (this._scale.x !== i || this._scale.y !== n || this._scale.z !== r) {
this._scale.x = i;
this._scale.y = n;
this._scale.z = r;
this.setLocalDirty(o.SCALE);
this._renderFlag |= l.FLAG_TRANSFORM;
this._eventMask & m && this.emit(a.SCALE_CHANGED);
}
}
cc._polyfill3D = n.exports = {
enabled: !1,
enable: function() {
var t = cc.Node.prototype;
if (!f) {
f = t._updateLocalMatrix;
d = t._calculWorldMatrix;
}
if (!this.enabled) {
t._updateLocalMatrix = p;
t._calculWorldMatrix = g;
t.getPosition = y;
t.setPosition = v;
t.getScale = x;
t.setScale = A;
this.enabled = !0;
}
},
disable: function() {
if (this.enabled) {
cc.Node.prototype._updateLocalMatrix = f;
cc.Node.prototype._calculWorldMatrix = d;
this.enabled = !1;
}
}
};
}), {
"../CCNode": 28,
"../renderer/render-engine": 195,
"../renderer/render-flow": 196
} ],
234: [ (function(t, e, i) {
var n = t("../renderer").renderEngine.math;
cc._PrefabInfo = cc.Class({
name: "cc.PrefabInfo",
properties: {
root: null,
asset: null,
fileId: "",
sync: !1,
_synced: {
default: !1,
serializable: !1
}
}
});
e.exports = {
syncWithPrefab: function(t) {
var e = t._prefab;
e._synced = !0;
if (e.asset) {
var i = t._objFlags, r = t._parent, s = t._id, a = t._name, o = t._active, h = t._position.x, l = t._position.y, c = t._quat, u = t._localZOrder, _ = t._globalZOrder;
cc.game._isCloning = !0;
var m = e.asset.data;
m._prefab._synced = !0;
m._iN$t = t;
cc.instantiate._clone(m, m);
cc.game._isCloning = !1;
t._objFlags = i;
t._parent = r;
t._id = s;
t._prefab = e;
t._name = a;
t._active = o;
t._position.x = h;
t._position.y = l;
n.quat.copy(t._quat, c);
t._localZOrder = u;
t._globalZOrder = _;
} else {
cc.errorID(3701, t.name);
t._prefab = null;
}
}
};
}), {
"../renderer": 194
} ],
235: [ (function(t, e, i) {
var n = t("../../platform/CCMacro"), r = t("./perf-counter"), s = !1, a = 15, o = null, h = null, l = null, c = null;
function u() {
(function() {
if (!l || !l.isValid) {
(l = new cc.Node("PROFILER-NODE")).x = l.y = 10;
l.groupIndex = cc.Node.BuiltinGroupIndex.DEBUG;
cc.Camera._setupDebugCamera();
l.zIndex = n.MAX_ZINDEX;
cc.game.addPersistRootNode(l);
var t = new cc.Node("LEFT-PANEL");
t.anchorX = t.anchorY = 0;
t.parent = l;
var e = t.addComponent(cc.Label);
e.font = o;
e.fontSize = a;
e.lineHeight = a;
var i = new cc.Node("RIGHT-PANEL");
i.anchorX = 1;
i.anchorY = 0;
i.x = 200;
i.parent = l;
var r = i.addComponent(cc.Label);
r.horizontalAlign = cc.Label.HorizontalAlign.RIGHT;
r.font = o;
r.fontSize = a;
r.lineHeight = a;
c = {
left: e,
right: r
};
}
})();
var t = cc.director._lastUpdate;
h.frame._counter.start(t);
h.logic._counter.start(t);
}
function _() {
var t = performance.now();
cc.director.isPaused() ? h.frame._counter.start(t) : h.logic._counter.end(t);
h.render._counter.start(t);
}
function m() {
var t = performance.now();
h.render._counter.end(t);
h.draws._counter.value = cc.renderer.drawCalls;
h.frame._counter.end(t);
h.fps._counter.frame(t);
var e = "", i = "";
for (var n in h) {
var r = h[n];
r._counter.sample(t);
e += r.desc + "\n";
i += r._counter.human() + "\n";
}
c.left.string = e;
c.right.string = i;
}
cc.profiler = e.exports = {
isShowingStats: function() {
return s;
},
hideStats: function() {
if (s) {
l && (l.active = !1);
cc.director.off(cc.Director.EVENT_BEFORE_UPDATE, u);
cc.director.off(cc.Director.EVENT_AFTER_UPDATE, _);
cc.director.off(cc.Director.EVENT_AFTER_DRAW, m);
s = !1;
}
},
showStats: function() {
if (!s) {
(function() {
if (!o) {
var t = document.createElement("canvas");
t.style.width = t.width = 256;
t.style.height = t.height = 256;
var e = t.getContext("2d");
e.font = a + "px Arial";
e.textBaseline = "top";
e.textAlign = "left";
e.fillStyle = "#fff";
var i = 2, n = 2, r = a;
(o = new cc.LabelAtlas())._fntConfig = {
atlasName: "profiler-arial",
commonHeight: r,
fontSize: a,
kerningDict: {},
fontDefDictionary: {}
};
o._name = "profiler-arial";
o.fontSize = a;
for (var s = o._fntConfig.fontDefDictionary, h = 32; h <= 126; h++) {
var l = String.fromCharCode(h), c = e.measureText(l).width;
if (i + c >= 256) {
i = 2;
n += r + 2;
}
e.fillText(l, i, n);
s[h] = {
xAdvance: c,
xOffset: 0,
yOffset: 0,
rect: {
x: i,
y: n,
width: c,
height: r
}
};
i += c + 2;
}
var u = new cc.Texture2D();
u.initWithElement(t);
var _ = new cc.SpriteFrame();
_.setTexture(u);
o.spriteFrame = _;
}
})();
(function() {
if (!h) {
h = {
frame: {
desc: "Frame time (ms)",
min: 0,
max: 50,
average: 500
},
fps: {
desc: "Framerate (FPS)",
below: 30,
average: 500
},
draws: {
desc: "Draw call"
},
logic: {
desc: "Game Logic (ms)",
min: 0,
max: 50,
average: 500,
color: "#080"
},
render: {
desc: "Renderer (ms)",
min: 0,
max: 50,
average: 500,
color: "#f90"
},
mode: {
desc: cc.game.renderType === cc.game.RENDER_TYPE_WEBGL ? "WebGL" : "Canvas",
min: 1
}
};
var t = performance.now();
for (var e in h) h[e]._counter = new r(e, h[e], t);
}
})();
l && (l.active = !0);
cc.director.on(cc.Director.EVENT_BEFORE_UPDATE, u);
cc.director.on(cc.Director.EVENT_AFTER_UPDATE, _);
cc.director.on(cc.Director.EVENT_AFTER_DRAW, m);
s = !0;
}
}
};
}), {
"../../platform/CCMacro": 158,
"./perf-counter": 237
} ],
236: [ (function(t, e, i) {
var n = cc.Class({
name: "cc.Counter",
ctor: function(t, e, i) {
this._id = t;
this._opts = e || {};
this._value = 0;
this._total = 0;
this._averageValue = 0;
this._accumValue = 0;
this._accumSamples = 0;
this._accumStart = i;
},
properties: {
value: {
get: function() {
return this._value;
},
set: function(t) {
this._value = t;
}
}
},
_average: function(t, e) {
if (this._opts.average) {
this._accumValue += t;
++this._accumSamples;
var i = e;
if (i - this._accumStart >= this._opts.average) {
this._averageValue = this._accumValue / this._accumSamples;
this._accumValue = 0;
this._accumStart = i;
this._accumSamples = 0;
}
}
},
sample: function(t) {
this._average(this._value, t);
},
human: function() {
var t = this._opts.average ? this._averageValue : this._value;
return Math.round(100 * t) / 100;
},
alarm: function() {
return this._opts.below && this._value < this._opts.below || this._opts.over && this._value > this._opts.over;
}
});
e.exports = n;
}), {} ],
237: [ (function(t, e, i) {
var n = t("./counter"), r = cc.Class({
name: "cc.PerfCounter",
extends: n,
ctor: function(t, e, i) {
this._time = i;
},
start: function(t) {
this._time = t;
},
end: function(t) {
this._value = t - this._time;
this._average(this._value);
},
tick: function() {
this.end();
this.start();
},
frame: function(t) {
var e = t, i = e - this._time;
this._total++;
if (i > (this._opts.average || 1e3)) {
this._value = 1e3 * this._total / i;
this._total = 0;
this._time = e;
this._average(this._value);
}
}
});
e.exports = r;
}), {
"./counter": 236
} ],
238: [ (function(t, e, i) {
var n = t("./html-text-parser"), r = function() {
this._status = "unloaded";
this._observers = [];
this._isLoadWithCSS = !1;
};
r.prototype.onLoaded = function() {
this._status = "loaded";
this._observers.forEach((function(t) {
t && t();
}));
};
r.prototype.isLoaded = function() {
return "loaded" === this._status;
};
r.prototype.addHandler = function(t) {
-1 === this._observers.indexOf(t) && this._observers.push(t);
};
var s = {
_fontCache: {},
_fontWidthCache: {},
_canvasContext: null,
_testString: "BESbswy",
_allFontsLoaded: !1,
_intervalId: 0,
loadTTF: function(t, e) {
var i = this._getFontFamily(t), n = cc.loader.md5Pipe;
n && (t = n.transformURL(t));
var r = cc.sys.browserType !== cc.sys.BROWSER_TYPE_BAIDU && cc.sys.browserType !== cc.sys.BROWSER_TYPE_BAIDU_APP && cc.sys.browserType !== cc.sys.BROWSER_TYPE_MOBILE_QQ;
window.FontFace && r ? this._loadWithFontFace(i, t, e) : this._loadWithCSS(i, t, e);
0 === this._intervalId && (this._intervalId = setInterval(this._checkFontLoaded.bind(this), 100));
},
_checkFontLoaded: function() {
this._allFontsLoaded = !0;
for (var t in this._fontCache) {
var e = this._fontCache[t];
if (!e.isLoaded() && e._isLoadWithCSS) {
var i = this._fontWidthCache[t];
this._canvasContext.font = "40px " + t;
i !== this._canvasContext.measureText(this._testString).width ? e.onLoaded() : this._allFontsLoaded = !1;
}
}
if (this._allFontsLoaded) {
clearInterval(this._intervalId);
this._intervalId = 0;
}
},
_loadWithFontFace: function(t, e, i) {
var n = this._fontCache[t];
if (n) n.isLoaded() || n.addHandler(i); else {
var s = new FontFace(t, "url('" + e + "')");
document.fonts.add(s);
(n = new r()).addHandler(i);
this._fontCache[t] = n;
s.load();
s.loaded.then((function() {
n.onLoaded();
}));
}
},
_loadWithCSS: function(t, e, i) {
var n = this._fontCache[t];
if (n) n.isLoaded() || n.addHandler(i); else {
var s = document, a = document.createElement("style");
a.type = "text/css";
s.body.appendChild(a);
var o = "";
isNaN(t - 0) ? o += "@font-face { font-family:" + t + "; src:" : o += "@font-face { font-family:'" + t + "'; src:";
o += "url('" + e + "');";
a.textContent = o + "}";
var h = document.createElement("div"), l = h.style;
l.fontFamily = t;
h.innerHTML = ".";
l.position = "absolute";
l.left = "-100px";
l.top = "-100px";
s.body.appendChild(h);
(n = new r()).addHandler(i);
this._fontCache[t] = n;
n._isLoadWithCSS = !0;
if (!this._canvasContext) {
var c = document.createElement("canvas");
c.width = 100;
c.height = 100;
this._canvasContext = c.getContext("2d");
}
var u = "40px " + t;
this._canvasContext.font = u;
var _ = this._canvasContext.measureText(this._testString).width;
this._fontWidthCache[t] = _;
var m = this;
a.onload = function() {
setTimeout((function() {
if (!m._allFontsLoaded) {
cc.logID(4004);
n.onLoaded();
cc.director.getScheduler().unschedule(this._checkFontLoaded, this);
}
}), 2e4);
};
}
},
_getFontFamily: function(t) {
var e = t.lastIndexOf(".ttf");
if (-1 === e) return t;
var i = t.lastIndexOf("/");
return -1 === i ? t.substring(0, e) + "_LABEL" : t.substring(i + 1, e) + "_LABEL";
}
};
e.exports = {
HtmlTextParser: n,
TextUtils: {
label_wordRex: /([a-zA-Z0-9ÄÖÜäöüßéèçàùêâîôûа-яА-ЯЁё]+|\S)/,
label_symbolRex: /^[!,.:;'}\]%\?>、‘“》？。，！]/,
label_lastWordRex: /([a-zA-Z0-9ÄÖÜäöüßéèçàùêâîôûаíìÍÌïÁÀáàÉÈÒÓòóŐőÙÚŰúűñÑæÆœŒÃÂãÔõěščřžýáíéóúůťďňĚŠČŘŽÁÍÉÓÚŤżźśóńłęćąŻŹŚÓŃŁĘĆĄ-яА-ЯЁё]+|\S)$/,
label_lastEnglish: /[a-zA-Z0-9ÄÖÜäöüßéèçàùêâîôûаíìÍÌïÁÀáàÉÈÒÓòóŐőÙÚŰúűñÑæÆœŒÃÂãÔõěščřžýáíéóúůťďňĚŠČŘŽÁÍÉÓÚŤżźśóńłęćąŻŹŚÓŃŁĘĆĄ-яА-ЯЁё]+$/,
label_firstEnglish: /^[a-zA-Z0-9ÄÖÜäöüßéèçàùêâîôûаíìÍÌïÁÀáàÉÈÒÓòóŐőÙÚŰúűñÑæÆœŒÃÂãÔõěščřžýáíéóúůťďňĚŠČŘŽÁÍÉÓÚŤżźśóńłęćąŻŹŚÓŃŁĘĆĄ-яА-ЯЁё]/,
label_wrapinspection: !0,
isUnicodeCJK: function(t) {
return /^[\u4E00-\u9FFF\u3400-\u4DFF]+$/.test(t) || /[\u3000-\u303F]|[\u3040-\u309F]|[\u30A0-\u30FF]|[\uFF00-\uFFEF]|[\u4E00-\u9FAF]|[\u2605-\u2606]|[\u2190-\u2195]|\u203B/g.test(t) || /^[\u1100-\u11FF]|[\u3130-\u318F]|[\uA960-\uA97F]|[\uAC00-\uD7AF]|[\uD7B0-\uD7FF]+$/.test(t);
},
isUnicodeSpace: function(t) {
return (t = t.charCodeAt(0)) >= 9 && t <= 13 || 32 === t || 133 === t || 160 === t || 5760 === t || t >= 8192 && t <= 8202 || 8232 === t || 8233 === t || 8239 === t || 8287 === t || 12288 === t;
},
fragmentText: function(t, e, i, n) {
var r = [];
if (0 === t.length || i < 0) {
r.push("");
return r;
}
for (var s = t; e > i && s.length > 1; ) {
for (var a = s.length * (i / e) | 0, o = s.substr(a), h = e - n(o), l = o, c = 0, u = 0; h > i && u++ < 10; ) {
a *= i / h;
a |= 0;
h = e - n(o = s.substr(a));
}
u = 0;
for (;h <= i && u++ < 10; ) {
if (o) {
var _ = this.label_wordRex.exec(o);
c = _ ? _[0].length : 1;
l = o;
}
a += c;
h = e - n(o = s.substr(a));
}
if (0 == (a -= c)) {
a = 1;
l = l.substr(1);
}
var m, f = s.substr(0, a);
if (this.label_wrapinspection && this.label_symbolRex.test(l || o)) {
0 == (a -= (m = this.label_lastWordRex.exec(f)) ? m[0].length : 0) && (a = 1);
l = s.substr(a);
f = s.substr(0, a);
}
if (this.label_firstEnglish.test(l) && (m = this.label_lastEnglish.exec(f)) && f !== m[0]) {
a -= m[0].length;
l = s.substr(a);
f = s.substr(0, a);
}
0 === r.length ? r.push(f) : (f = f.trim()).length > 0 && r.push(f);
e = n(s = l || o);
}
0 === r.length ? r.push(s) : (s = s.trim()).length > 0 && r.push(s);
return r;
}
},
CustomFontLoader: s
};
}), {
"./html-text-parser": 228
} ],
239: [ (function(t, e, i) {
var n = t("../assets/CCTexture2D"), r = {
loadImage: function(t, e, i) {
cc.assertID(t, 3103);
var r = cc.loader.getRes(t);
if (r) {
if (r.loaded) {
e && e.call(i, r);
return r;
}
r.once("load", (function() {
e && e.call(i, r);
}), i);
return r;
}
(r = new n()).url = t;
cc.loader.load({
url: t,
texture: r
}, (function(t, n) {
if (t) return e && e.call(i, t || new Error("Unknown error"));
n.handleLoadedTexture();
e && e.call(i, n);
}));
return r;
},
cacheImage: function(t, e) {
if (t && e) {
var i = new n();
i.initWithElement(e);
var r = {
id: t,
url: t,
error: null,
content: i,
complete: !1
};
cc.loader.flowOut(r);
return i;
}
},
postLoadTexture: function(t, e) {
t.loaded ? e && e() : t.url ? cc.loader.load({
url: t.url,
skips: [ "Loader" ]
}, (function(i, n) {
if (n) {
0;
t.loaded || (t._nativeAsset = n);
}
e && e(i);
})) : e && e();
}
};
cc.textureUtil = e.exports = r;
}), {
"../assets/CCTexture2D": 47
} ],
240: [ (function(i, n, r) {
var s = i("./value-type"), a = i("../platform/js"), o = (function() {
function n(i, n, r, s) {
if ("object" === ("object" === (e = typeof i) ? t(i) : e)) {
n = i.g;
r = i.b;
s = i.a;
i = i.r;
}
i = i || 0;
n = n || 0;
r = r || 0;
s = "number" === ("object" === (e = typeof s) ? t(s) : e) ? s : 255;
this._val = (s << 24 >>> 0) + (r << 16) + (n << 8) + i;
}
a.extend(n, s);
i("../platform/CCClass").fastDefine("cc.Color", n, {
r: 0,
g: 0,
b: 0,
a: 255
});
var r = {
WHITE: [ 255, 255, 255, 255 ],
BLACK: [ 0, 0, 0, 255 ],
TRANSPARENT: [ 0, 0, 0, 0 ],
GRAY: [ 127.5, 127.5, 127.5 ],
RED: [ 255, 0, 0 ],
GREEN: [ 0, 255, 0 ],
BLUE: [ 0, 0, 255 ],
YELLOW: [ 255, 235, 4 ],
ORANGE: [ 255, 127, 0 ],
CYAN: [ 0, 255, 255 ],
MAGENTA: [ 255, 0, 255 ]
};
for (var o in r) a.get(n, o, (function(t) {
return function() {
return new n(t[0], t[1], t[2], t[3]);
};
})(r[o]));
var h = n.prototype;
h.clone = function() {
var t = new n();
t._val = this._val;
return t;
};
h.equals = function(t) {
return t && this._val === t._val;
};
h.lerp = function(t, e, i) {
i = i || new n();
var r = this.r, s = this.g, a = this.b, o = this.a;
i.r = r + (t.r - r) * e;
i.g = s + (t.g - s) * e;
i.b = a + (t.b - a) * e;
i.a = o + (t.a - o) * e;
return i;
};
h.toString = function() {
return "rgba(" + this.r.toFixed() + ", " + this.g.toFixed() + ", " + this.b.toFixed() + ", " + this.a.toFixed() + ")";
};
h.getR = function() {
return 255 & this._val;
};
h.setR = function(t) {
this._val = (4294967040 & this._val | ~~t) >>> 0;
return this;
};
h.getG = function() {
return (65280 & this._val) >> 8;
};
h.setG = function(t) {
this._val = (4294902015 & this._val | ~~t << 8) >>> 0;
return this;
};
h.getB = function() {
return (16711680 & this._val) >> 16;
};
h.setB = function(t) {
this._val = (4278255615 & this._val | ~~t << 16) >>> 0;
return this;
};
h.getA = function() {
return (4278190080 & this._val) >>> 24;
};
h.setA = function(t) {
this._val = (16777215 & this._val | ~~t << 24 >>> 0) >>> 0;
return this;
};
a.getset(h, "r", h.getR, h.setR, !0);
a.getset(h, "g", h.getG, h.setG, !0);
a.getset(h, "b", h.getB, h.setB, !0);
a.getset(h, "a", h.getA, h.setA, !0);
h.toCSS = function(t) {
return "rgba" === t ? "rgba(" + (0 | this.r) + "," + (0 | this.g) + "," + (0 | this.b) + "," + (this.a / 255).toFixed(2) + ")" : "rgb" === t ? "rgb(" + (0 | this.r) + "," + (0 | this.g) + "," + (0 | this.b) + ")" : "#" + this.toHEX(t);
};
h.fromHEX = function(t) {
t = 0 === t.indexOf("#") ? t.substring(1) : t;
var e = parseInt(t.substr(0, 2), 16) || 0, i = parseInt(t.substr(2, 2), 16) || 0, n = parseInt(t.substr(4, 2), 16) || 0, r = parseInt(t.substr(6, 2), 16) || 255;
this._val = (r << 24 >>> 0) + (n << 16) + (i << 8) + e;
return this;
};
h.toHEX = function(t) {
var e = [ (0 | this.r).toString(16), (0 | this.g).toString(16), (0 | this.b).toString(16) ], i = -1;
if ("#rgb" === t) for (i = 0; i < e.length; ++i) e[i].length > 1 && (e[i] = e[i][0]); else if ("#rrggbb" === t) for (i = 0; i < e.length; ++i) 1 === e[i].length && (e[i] = "0" + e[i]);
return e.join("");
};
h.toRGBValue = function() {
return 16777215 & this._val;
};
h.fromHSV = function(t, e, i) {
var n, r, s;
if (0 === e) n = r = s = i; else if (0 === i) n = r = s = 0; else {
1 === t && (t = 0);
t *= 6;
e = e;
i = i;
var a = Math.floor(t), o = t - a, h = i * (1 - e), l = i * (1 - e * o), c = i * (1 - e * (1 - o));
switch (a) {
case 0:
n = i;
r = c;
s = h;
break;

case 1:
n = l;
r = i;
s = h;
break;

case 2:
n = h;
r = i;
s = c;
break;

case 3:
n = h;
r = l;
s = i;
break;

case 4:
n = c;
r = h;
s = i;
break;

case 5:
n = i;
r = h;
s = l;
}
}
n *= 255;
r *= 255;
s *= 255;
this._val = (n << 24 >>> 0) + (r << 16) + (s << 8) + this.a;
return this;
};
h.toHSV = function() {
var t = this.r / 255, e = this.g / 255, i = this.b / 255, n = {
h: 0,
s: 0,
v: 0
}, r = Math.max(t, e, i), s = Math.min(t, e, i), a = 0;
n.v = r;
n.s = r ? (r - s) / r : 0;
if (n.s) {
a = r - s;
n.h = t === r ? (e - i) / a : e === r ? 2 + (i - t) / a : 4 + (t - e) / a;
n.h /= 6;
n.h < 0 && (n.h += 1);
} else n.h = 0;
return n;
};
h.fromColor = function(t) {
if (t._val) this._val = t._val; else {
this.r = t.r;
this.g = t.g;
this.b = t.b;
this.a = t.a;
}
};
return n;
})();
cc.Color = o;
cc.color = function(i, n, r, s) {
if ("string" === ("object" === (e = typeof i) ? t(i) : e)) {
return new cc.Color().fromHEX(i);
}
return "object" === ("object" === (e = typeof i) ? t(i) : e) ? new cc.Color(i.r, i.g, i.b, i.a) : new cc.Color(i, n, r, s);
};
n.exports = cc.Color;
}), {
"../platform/CCClass": 153,
"../platform/js": 173,
"./value-type": 245
} ],
241: [ (function(t, e, i) {
t("./value-type");
t("./vec2");
t("./vec3");
t("./quat");
t("./size");
t("./rect");
t("./color");
cc.vmath = t("../renderer/render-engine").math;
}), {
"../renderer/render-engine": 195,
"./color": 240,
"./quat": 242,
"./rect": 243,
"./size": 244,
"./value-type": 245,
"./vec2": 246,
"./vec3": 247
} ],
242: [ (function(i, n, r) {
var s = i("./value-type"), a = i("../platform/js"), o = i("../platform/CCClass");
function h(i, n, r, s) {
if (i && "object" === ("object" === (e = typeof i) ? t(i) : e)) {
r = i.z;
n = i.y;
s = (i = i.x).w;
}
this.x = i || 0;
this.y = n || 0;
this.z = r || 0;
this.w = s || 1;
}
a.extend(h, s);
o.fastDefine("cc.Quat", h, {
x: 0,
y: 0,
z: 0,
w: 1
});
var l = h.prototype;
l.clone = function() {
return new h(this.x, this.y, this.z, this.w);
};
l.set = function(t) {
this.x = t.x;
this.y = t.y;
this.z = t.z;
this.w = t.w;
return this;
};
l.equals = function(t) {
return t && this.x === t.x && this.y === t.y && this.z === t.z && this.w === t.w;
};
l.getRoll = function() {
var t = 2 * (this.w * this.x + this.y * this.z), e = 1 - 2 * (this.x * this.x + this.y * this.y);
return 180 * Math.atan2(t, e) / Math.PI;
};
l.getPitch = function() {
var t = 2 * (this.w * this.y - this.z * this.x), e = t > 1 ? 1 : t;
e = t < -1 ? -1 : t;
return e = 180 * Math.asin(e) / Math.PI;
};
l.getYaw = function() {
var t = 2 * (this.w * this.z + this.x * this.y), e = 1 - 2 * (this.y * this.y + this.z * this.z);
return 180 * Math.atan2(t, e) / Math.PI;
};
cc.quat = function(t, e, i, n) {
return new h(t, e, i, n);
};
n.exports = cc.Quat = h;
}), {
"../platform/CCClass": 153,
"../platform/js": 173,
"./value-type": 245
} ],
243: [ (function(i, n, r) {
var s = i("./value-type"), a = i("../platform/js");
function o(i, n, r, s) {
if (i && "object" === ("object" === (e = typeof i) ? t(i) : e)) {
n = i.y;
r = i.width;
s = i.height;
i = i.x;
}
this.x = i || 0;
this.y = n || 0;
this.width = r || 0;
this.height = s || 0;
}
a.extend(o, s);
i("../platform/CCClass").fastDefine("cc.Rect", o, {
x: 0,
y: 0,
width: 0,
height: 0
});
o.fromMinMax = function(t, e) {
var i = Math.min(t.x, e.x), n = Math.min(t.y, e.y);
return new o(i, n, Math.max(t.x, e.x) - i, Math.max(t.y, e.y) - n);
};
var h = o.prototype;
h.clone = function() {
return new o(this.x, this.y, this.width, this.height);
};
h.equals = function(t) {
return t && this.x === t.x && this.y === t.y && this.width === t.width && this.height === t.height;
};
h.lerp = function(t, e, i) {
i = i || new o();
var n = this.x, r = this.y, s = this.width, a = this.height;
i.x = n + (t.x - n) * e;
i.y = r + (t.y - r) * e;
i.width = s + (t.width - s) * e;
i.height = a + (t.height - a) * e;
return i;
};
h.intersects = function(t) {
var e = this.x + this.width, i = this.y + this.height, n = t.x + t.width, r = t.y + t.height;
return !(e < t.x || n < this.x || i < t.y || r < this.y);
};
h.intersection = function(t, e) {
var i = this.x, n = this.y, r = this.x + this.width, s = this.y + this.height, a = e.x, o = e.y, h = e.x + e.width, l = e.y + e.height;
t.x = Math.max(i, a);
t.y = Math.max(n, o);
t.width = Math.min(r, h) - t.x;
t.height = Math.min(s, l) - t.y;
return t;
};
h.contains = function(t) {
return this.x <= t.x && this.x + this.width >= t.x && this.y <= t.y && this.y + this.height >= t.y;
};
h.containsRect = function(t) {
return this.x <= t.x && this.x + this.width >= t.x + t.width && this.y <= t.y && this.y + this.height >= t.y + t.height;
};
h.union = function(t, e) {
var i = this.x, n = this.y, r = this.width, s = this.height, a = e.x, o = e.y, h = e.width, l = e.height;
t.x = Math.min(i, a);
t.y = Math.min(n, o);
t.width = Math.max(i + r, a + h) - t.x;
t.height = Math.max(n + s, o + l) - t.y;
return t;
};
h.transformMat4 = function(t, e) {
var i = this.x, n = this.y, r = i + this.width, s = n + this.height, a = e.m00 * i + e.m04 * n + e.m12, o = e.m01 * i + e.m05 * n + e.m13, h = e.m00 * r + e.m04 * n + e.m12, l = e.m01 * r + e.m05 * n + e.m13, c = e.m00 * i + e.m04 * s + e.m12, u = e.m01 * i + e.m05 * s + e.m13, _ = e.m00 * r + e.m04 * s + e.m12, m = e.m01 * r + e.m05 * s + e.m13, f = Math.min(a, h, c, _), d = Math.max(a, h, c, _), p = Math.min(o, l, u, m), g = Math.max(o, l, u, m);
t.x = f;
t.y = p;
t.width = d - f;
t.height = g - p;
return t;
};
h.toString = function() {
return "(" + this.x.toFixed(2) + ", " + this.y.toFixed(2) + ", " + this.width.toFixed(2) + ", " + this.height.toFixed(2) + ")";
};
a.getset(h, "xMin", (function() {
return this.x;
}), (function(t) {
this.width += this.x - t;
this.x = t;
}));
a.getset(h, "yMin", (function() {
return this.y;
}), (function(t) {
this.height += this.y - t;
this.y = t;
}));
a.getset(h, "xMax", (function() {
return this.x + this.width;
}), (function(t) {
this.width = t - this.x;
}));
a.getset(h, "yMax", (function() {
return this.y + this.height;
}), (function(t) {
this.height = t - this.y;
}));
a.getset(h, "center", (function() {
return new cc.Vec2(this.x + .5 * this.width, this.y + .5 * this.height);
}), (function(t) {
this.x = t.x - .5 * this.width;
this.y = t.y - .5 * this.height;
}));
a.getset(h, "origin", (function() {
return new cc.Vec2(this.x, this.y);
}), (function(t) {
this.x = t.x;
this.y = t.y;
}));
a.getset(h, "size", (function() {
return new cc.Size(this.width, this.height);
}), (function(t) {
this.width = t.width;
this.height = t.height;
}));
cc.Rect = o;
cc.rect = function(t, e, i, n) {
return new o(t, e, i, n);
};
n.exports = cc.Rect;
}), {
"../platform/CCClass": 153,
"../platform/js": 173,
"./value-type": 245
} ],
244: [ (function(i, n, r) {
var s = i("./value-type"), a = i("../platform/js");
function o(i, n) {
if (i && "object" === ("object" === (e = typeof i) ? t(i) : e)) {
n = i.height;
i = i.width;
}
this.width = i || 0;
this.height = n || 0;
}
a.extend(o, s);
i("../platform/CCClass").fastDefine("cc.Size", o, {
width: 0,
height: 0
});
a.get(o, "ZERO", (function() {
return new o(0, 0);
}));
var h = o.prototype;
h.clone = function() {
return new o(this.width, this.height);
};
h.equals = function(t) {
return t && this.width === t.width && this.height === t.height;
};
h.lerp = function(t, e, i) {
i = i || new o();
var n = this.width, r = this.height;
i.width = n + (t.width - n) * e;
i.height = r + (t.height - r) * e;
return i;
};
h.toString = function() {
return "(" + this.width.toFixed(2) + ", " + this.height.toFixed(2) + ")";
};
cc.size = function(t, e) {
return new o(t, e);
};
cc.Size = n.exports = o;
}), {
"../platform/CCClass": 153,
"../platform/js": 173,
"./value-type": 245
} ],
245: [ (function(t, e, i) {
var n = t("../platform/js");
function r() {}
n.setClassName("cc.ValueType", r);
var s = r.prototype;
0;
s.toString = function() {
return "" + {};
};
cc.ValueType = e.exports = r;
}), {
"../platform/js": 173
} ],
246: [ (function(i, n, r) {
var s = i("./value-type"), a = i("../platform/js"), o = i("../platform/CCClass"), h = i("../utils/misc");
function l(i, n) {
if (i && "object" === ("object" === (e = typeof i) ? t(i) : e)) {
n = i.y;
i = i.x;
}
this.x = i || 0;
this.y = n || 0;
}
a.extend(l, s);
o.fastDefine("cc.Vec2", l, {
x: 0,
y: 0
});
var c = l.prototype;
c.clone = function() {
return new l(this.x, this.y);
};
c.set = function(t) {
this.x = t.x;
this.y = t.y;
return this;
};
c.equals = function(t) {
return t && this.x === t.x && this.y === t.y;
};
c.fuzzyEquals = function(t, e) {
return this.x - e <= t.x && t.x <= this.x + e && this.y - e <= t.y && t.y <= this.y + e;
};
c.toString = function() {
return "(" + this.x.toFixed(2) + ", " + this.y.toFixed(2) + ")";
};
c.lerp = function(t, e, i) {
i = i || new l();
var n = this.x, r = this.y;
i.x = n + (t.x - n) * e;
i.y = r + (t.y - r) * e;
return i;
};
c.clampf = function(t, e) {
this.x = h.clampf(this.x, t.x, e.x);
this.y = h.clampf(this.y, t.y, e.y);
return this;
};
c.addSelf = function(t) {
this.x += t.x;
this.y += t.y;
return this;
};
c.add = function(t, e) {
(e = e || new l()).x = this.x + t.x;
e.y = this.y + t.y;
return e;
};
c.subSelf = function(t) {
this.x -= t.x;
this.y -= t.y;
return this;
};
c.sub = function(t, e) {
(e = e || new l()).x = this.x - t.x;
e.y = this.y - t.y;
return e;
};
c.mulSelf = function(t) {
this.x *= t;
this.y *= t;
return this;
};
c.mul = function(t, e) {
(e = e || new l()).x = this.x * t;
e.y = this.y * t;
return e;
};
c.scaleSelf = function(t) {
this.x *= t.x;
this.y *= t.y;
return this;
};
c.scale = function(t, e) {
(e = e || new l()).x = this.x * t.x;
e.y = this.y * t.y;
return e;
};
c.divSelf = function(t) {
this.x /= t;
this.y /= t;
return this;
};
c.div = function(t, e) {
(e = e || new l()).x = this.x / t;
e.y = this.y / t;
return e;
};
c.negSelf = function() {
this.x = -this.x;
this.y = -this.y;
return this;
};
c.neg = function(t) {
(t = t || new l()).x = -this.x;
t.y = -this.y;
return t;
};
c.dot = function(t) {
return this.x * t.x + this.y * t.y;
};
c.cross = function(t) {
return this.x * t.y - this.y * t.x;
};
c.mag = function() {
return Math.sqrt(this.x * this.x + this.y * this.y);
};
c.magSqr = function() {
return this.x * this.x + this.y * this.y;
};
c.normalizeSelf = function() {
var t = this.x * this.x + this.y * this.y;
if (1 === t) return this;
if (0 === t) {
console.warn("Can't normalize zero vector");
return this;
}
var e = 1 / Math.sqrt(t);
this.x *= e;
this.y *= e;
return this;
};
c.normalize = function(t) {
(t = t || new l()).x = this.x;
t.y = this.y;
t.normalizeSelf();
return t;
};
c.angle = function(t) {
var e = this.magSqr(), i = t.magSqr();
if (0 === e || 0 === i) {
console.warn("Can't get angle between zero vector");
return 0;
}
var n = this.dot(t) / Math.sqrt(e * i);
n = h.clampf(n, -1, 1);
return Math.acos(n);
};
c.signAngle = function(t) {
return Math.atan2(this.y, this.x) - Math.atan2(t.y, t.x);
};
c.rotate = function(t, e) {
(e = e || new l()).x = this.x;
e.y = this.y;
return e.rotateSelf(t);
};
c.rotateSelf = function(t) {
var e = Math.sin(t), i = Math.cos(t), n = this.x;
this.x = i * n - e * this.y;
this.y = e * n + i * this.y;
return this;
};
c.project = function(t) {
return t.mul(this.dot(t) / t.dot(t));
};
a.get(l, "ONE", (function() {
return new l(1, 1);
}));
a.get(l, "ZERO", (function() {
return new l(0, 0);
}));
a.get(l, "UP", (function() {
return new l(0, 1);
}));
a.get(l, "RIGHT", (function() {
return new l(1, 0);
}));
cc.Vec2 = l;
cc.v2 = function(t, e) {
return new l(t, e);
};
cc.p = cc.v2;
n.exports = cc.Vec2;
}), {
"../platform/CCClass": 153,
"../platform/js": 173,
"../utils/misc": 231,
"./value-type": 245
} ],
247: [ (function(i, n, r) {
var s = i("./value-type"), a = i("../platform/js"), o = i("../platform/CCClass"), h = i("../renderer/render-engine").math, l = i("../utils/misc");
function c(i, n, r) {
if (i && "object" === ("object" === (e = typeof i) ? t(i) : e)) {
r = i.z;
n = i.y;
i = i.x;
}
this.x = i || 0;
this.y = n || 0;
this.z = r || 0;
}
a.extend(c, s);
o.fastDefine("cc.Vec3", c, {
x: 0,
y: 0,
z: 0
});
var u = c.prototype;
u.clone = function() {
return new c(this.x, this.y, this.z);
};
u.set = function(t) {
this.x = t.x;
this.y = t.y;
this.z = t.z;
return this;
};
u.equals = function(t) {
return t && this.x === t.x && this.y === t.y && this.z === t.z;
};
u.fuzzyEquals = function(t, e) {
return this.x - e <= t.x && t.x <= this.x + e && this.y - e <= t.y && t.y <= this.y + e && this.z - e <= t.z && t.z <= this.z + e;
};
u.toString = function() {
return "(" + this.x.toFixed(2) + ", " + this.y.toFixed(2) + ", " + this.z.toFixed(2) + ")";
};
u.lerp = function(t, e, i) {
i = i || new c();
h.vec3.lerp(i, this, t, e);
return i;
};
u.clampf = function(t, e) {
this.x = l.clampf(this.x, t.x, e.x);
this.y = l.clampf(this.y, t.y, e.y);
this.z = l.clampf(this.z, t.z, e.z);
return this;
};
u.addSelf = function(t) {
this.x += t.x;
this.y += t.y;
this.z += t.z;
return this;
};
u.add = function(t, e) {
(e = e || new c()).x = this.x + t.x;
e.y = this.y + t.y;
e.z = this.z + t.z;
return e;
};
u.subSelf = function(t) {
this.x -= t.x;
this.y -= t.y;
this.z -= t.z;
return this;
};
u.sub = function(t, e) {
(e = e || new c()).x = this.x - t.x;
e.y = this.y - t.y;
e.z = this.z - t.z;
return e;
};
u.mulSelf = function(t) {
this.x *= t;
this.y *= t;
this.z *= t;
return this;
};
u.mul = function(t, e) {
(e = e || new c()).x = this.x * t;
e.y = this.y * t;
e.z = this.z * t;
return e;
};
u.scaleSelf = function(t) {
this.x *= t.x;
this.y *= t.y;
this.z *= t.z;
return this;
};
u.scale = function(t, e) {
(e = e || new c()).x = this.x * t.x;
e.y = this.y * t.y;
e.z = this.z * t.z;
return e;
};
u.divSelf = function(t) {
this.x /= t;
this.y /= t;
this.z /= t;
return this;
};
u.div = function(t, e) {
(e = e || new c()).x = this.x / t;
e.y = this.y / t;
e.z = this.z / t;
return e;
};
u.negSelf = function() {
this.x = -this.x;
this.y = -this.y;
this.z = -this.z;
return this;
};
u.neg = function(t) {
(t = t || new c()).x = -this.x;
t.y = -this.y;
t.z = -this.z;
return t;
};
u.dot = function(t) {
return this.x * t.x + this.y * t.y + this.z * t.z;
};
u.cross = function(t, e) {
e = e || new c();
h.vec3.cross(e, this, t);
return e;
};
u.mag = function() {
return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
};
u.magSqr = function() {
return this.x * this.x + this.y * this.y + this.z * this.z;
};
u.normalizeSelf = function() {
h.vec3.normalize(this, this);
return this;
};
u.normalize = function(t) {
t = t || new c();
h.vec3.normalize(t, this);
return t;
};
cc.v3 = function(t, e, i) {
return new c(t, e, i);
};
n.exports = cc.Vec3 = c;
}), {
"../platform/CCClass": 153,
"../platform/js": 173,
"../renderer/render-engine": 195,
"../utils/misc": 231,
"./value-type": 245
} ],
248: [ (function(t, e, i) {
cc.js;
}), {} ],
249: [ (function(t, e, i) {
t("./core/CCGame");
t("./actions");
}), {
"./actions": 8,
"./core/CCGame": 27
} ],
250: [ (function(t, e, i) {
var n = t("../compression/zlib.min"), r = t("../core/CCDebug"), s = function(t) {
var e, i, n, s, a, o, h, l, c, u, _, m, f;
this.data = t;
this.pos = 8;
this.palette = [];
this.imgData = [];
this.transparency = {};
this.animation = null;
this.text = {};
a = null;
for (;;) {
e = this.readUInt32();
switch (l = function() {
var t, e;
e = [];
for (t = 0; t < 4; ++t) e.push(String.fromCharCode(this.data[this.pos++]));
return e;
}.call(this).join("")) {
case "IHDR":
this.width = this.readUInt32();
this.height = this.readUInt32();
this.bits = this.data[this.pos++];
this.colorType = this.data[this.pos++];
this.compressionMethod = this.data[this.pos++];
this.filterMethod = this.data[this.pos++];
this.interlaceMethod = this.data[this.pos++];
break;

case "acTL":
this.animation = {
numFrames: this.readUInt32(),
numPlays: this.readUInt32() || Infinity,
frames: []
};
break;

case "PLTE":
this.palette = this.read(e);
break;

case "fcTL":
a && this.animation.frames.push(a);
this.pos += 4;
a = {
width: this.readUInt32(),
height: this.readUInt32(),
xOffset: this.readUInt32(),
yOffset: this.readUInt32()
};
s = this.readUInt16();
n = this.readUInt16() || 100;
a.delay = 1e3 * s / n;
a.disposeOp = this.data[this.pos++];
a.blendOp = this.data[this.pos++];
a.data = [];
break;

case "IDAT":
case "fdAT":
if ("fdAT" === l) {
this.pos += 4;
e -= 4;
}
t = (null != a ? a.data : void 0) || this.imgData;
for (_ = 0; 0 <= e ? _ < e : _ > e; 0 <= e ? ++_ : --_) t.push(this.data[this.pos++]);
break;

case "tRNS":
this.transparency = {};
switch (this.colorType) {
case 3:
this.transparency.indexed = this.read(e);
if ((c = 255 - this.transparency.indexed.length) > 0) for (m = 0; 0 <= c ? m < c : m > c; 0 <= c ? ++m : --m) this.transparency.indexed.push(255);
break;

case 0:
this.transparency.grayscale = this.read(e)[0];
break;

case 2:
this.transparency.rgb = this.read(e);
}
break;

case "tEXt":
o = (u = this.read(e)).indexOf(0);
h = String.fromCharCode.apply(String, u.slice(0, o));
this.text[h] = String.fromCharCode.apply(String, u.slice(o + 1));
break;

case "IEND":
a && this.animation.frames.push(a);
this.colors = function() {
switch (this.colorType) {
case 0:
case 3:
case 4:
return 1;

case 2:
case 6:
return 3;
}
}.call(this);
this.hasAlphaChannel = 4 === (f = this.colorType) || 6 === f;
i = this.colors + (this.hasAlphaChannel ? 1 : 0);
this.pixelBitlength = this.bits * i;
this.colorSpace = function() {
switch (this.colors) {
case 1:
return "DeviceGray";

case 3:
return "DeviceRGB";
}
}.call(this);
Uint8Array != Array && (this.imgData = new Uint8Array(this.imgData));
return;

default:
this.pos += e;
}
this.pos += 4;
if (this.pos > this.data.length) throw new Error(r.getError(6017));
}
};
s.prototype = {
constructor: s,
read: function(t) {
var e, i;
i = [];
for (e = 0; 0 <= t ? e < t : e > t; 0 <= t ? ++e : --e) i.push(this.data[this.pos++]);
return i;
},
readUInt32: function() {
return this.data[this.pos++] << 24 | this.data[this.pos++] << 16 | this.data[this.pos++] << 8 | this.data[this.pos++];
},
readUInt16: function() {
return this.data[this.pos++] << 8 | this.data[this.pos++];
},
decodePixels: function(t) {
var e, i, s, a, o, h, l, c, u, _, m, f, d, p, g, y, v, x, A, b, T, C, w;
null == t && (t = this.imgData);
if (0 === t.length) return new Uint8Array(0);
t = new n.Inflate(t, {
index: 0,
verify: !1
}).decompress();
y = (f = this.pixelBitlength / 8) * this.width;
d = new Uint8Array(y * this.height);
h = t.length;
g = 0;
p = 0;
i = 0;
for (;p < h; ) {
switch (t[p++]) {
case 0:
for (a = A = 0; A < y; a = A += 1) d[i++] = t[p++];
break;

case 1:
for (a = b = 0; b < y; a = b += 1) {
e = t[p++];
o = a < f ? 0 : d[i - f];
d[i++] = (e + o) % 256;
}
break;

case 2:
for (a = T = 0; T < y; a = T += 1) {
e = t[p++];
s = (a - a % f) / f;
v = g && d[(g - 1) * y + s * f + a % f];
d[i++] = (v + e) % 256;
}
break;

case 3:
for (a = C = 0; C < y; a = C += 1) {
e = t[p++];
s = (a - a % f) / f;
o = a < f ? 0 : d[i - f];
v = g && d[(g - 1) * y + s * f + a % f];
d[i++] = (e + Math.floor((o + v) / 2)) % 256;
}
break;

case 4:
for (a = w = 0; w < y; a = w += 1) {
e = t[p++];
s = (a - a % f) / f;
o = a < f ? 0 : d[i - f];
if (0 === g) v = x = 0; else {
v = d[(g - 1) * y + s * f + a % f];
x = s && d[(g - 1) * y + (s - 1) * f + a % f];
}
l = o + v - x;
c = Math.abs(l - o);
_ = Math.abs(l - v);
m = Math.abs(l - x);
u = c <= _ && c <= m ? o : _ <= m ? v : x;
d[i++] = (e + u) % 256;
}
break;

default:
throw new Error(r.getError(6018, t[p - 1]));
}
g++;
}
return d;
},
copyToImageData: function(t, e) {
var i, n, r, s, a, o, h, l, c, u, _;
n = this.colors;
c = null;
i = this.hasAlphaChannel;
if (this.palette.length) {
c = null != (_ = this._decodedPalette) ? _ : this._decodedPalette = this.decodePalette();
n = 4;
i = !0;
}
l = (r = t.data || t).length;
a = c || e;
s = o = 0;
if (1 === n) for (;s < l; ) {
h = c ? 4 * e[s / 4] : o;
u = a[h++];
r[s++] = u;
r[s++] = u;
r[s++] = u;
r[s++] = i ? a[h++] : 255;
o = h;
} else for (;s < l; ) {
h = c ? 4 * e[s / 4] : o;
r[s++] = a[h++];
r[s++] = a[h++];
r[s++] = a[h++];
r[s++] = i ? a[h++] : 255;
o = h;
}
},
decodePalette: function() {
var t, e, i, n, r, s, a, o, h;
i = this.palette;
s = this.transparency.indexed || [];
r = new Uint8Array((s.length || 0) + i.length);
n = 0;
t = 0;
for (e = a = 0, o = i.length; a < o; e = a += 3) {
r[n++] = i[e];
r[n++] = i[e + 1];
r[n++] = i[e + 2];
r[n++] = null != (h = s[t++]) ? h : 255;
}
return r;
},
render: function(t) {
var e, i;
t.width = this.width;
t.height = this.height;
i = (e = t.getContext("2d")).createImageData(this.width, this.height);
this.copyToImageData(i, this.decodePixels());
return e.putImageData(i, 0, 0);
}
};
e.exports = s;
}), {
"../compression/zlib.min": 24,
"../core/CCDebug": 25
} ],
251: [ (function(t, e, i) {
var n = t("../core/assets/CCAsset"), r = t("../core/assets/CCTexture2D"), s = cc.Class({
name: "cc.ParticleAsset",
extends: n,
properties: {
texture: {
default: null,
type: r
}
}
});
cc.ParticleAsset = e.exports = s;
}), {
"../core/assets/CCAsset": 32,
"../core/assets/CCTexture2D": 47
} ],
252: [ (function(t, e, i) {
var n = t("../core/platform/CCMacro"), r = t("./CCParticleAsset"), s = t("../core/components/CCRenderComponent"), a = t("../compression/ZipUtils"), o = t("./CCPNGReader"), h = t("./CCTIFFReader"), l = t("../core/utils/texture-util"), c = t("../core/renderer/render-engine"), u = t("../core/renderer/render-flow"), _ = t("./particle-simulator");
c.gfx, c.ParticleMaterial, c.Particles, n.BlendFactor;
var m = cc.Enum({
GRAVITY: 0,
RADIUS: 1
}), f = cc.Enum({
FREE: 0,
RELATIVE: 1,
GROUPED: 2
}), d = {
preview: {
default: !0,
editorOnly: !0,
notify: !1,
animatable: !1,
tooltip: !1
},
_custom: !1,
custom: {
get: function() {
return this._custom;
},
set: function(t) {
0;
if (this._custom !== t) {
this._custom = t;
t || this._applyFile();
0;
}
},
animatable: !1,
tooltip: !1
},
_file: {
default: null,
type: r
},
file: {
get: function() {
return this._file;
},
set: function(t, e) {
if (this._file !== t) {
this._file = t;
if (t) {
this._applyFile();
0;
} else this.custom = !0;
}
},
animatable: !1,
type: r,
tooltip: !1
},
_spriteFrame: {
default: null,
type: cc.SpriteFrame
},
spriteFrame: {
get: function() {
return this._spriteFrame;
},
set: function(t, e) {
var i = this._spriteFrame;
if (i !== t) {
this._spriteFrame = t;
if ((i && i.getTexture()) !== (t && t.getTexture())) {
this._texture = null;
this._applySpriteFrame(i);
}
0;
}
},
type: cc.SpriteFrame,
tooltip: !1
},
texture: {
get: function() {
return this._texture ? this._texture.url : "";
},
set: function(t) {
cc.warnID(6017);
},
type: cc.Texture2D,
tooltip: !1,
readonly: !0,
visible: !1,
animatable: !1
},
particleCount: {
visible: !1,
get: function() {
return this._simulator.particles.length;
},
readonly: !0
},
_stopped: !0,
stopped: {
get: function() {
return this._stopped;
},
animatable: !1,
visible: !1
},
playOnLoad: !0,
autoRemoveOnFinish: {
default: !1,
animatable: !1,
tooltip: !1
},
active: {
get: function() {
return this._simulator.active;
},
visible: !1
},
totalParticles: 150,
duration: -1,
emissionRate: 10,
life: 1,
lifeVar: 0,
_startColor: null,
startColor: {
get: function() {
return this._startColor;
},
set: function(t) {
this._startColor.r = t.r;
this._startColor.g = t.g;
this._startColor.b = t.b;
this._startColor.a = t.a;
}
},
_startColorVar: null,
startColorVar: {
get: function() {
return this._startColorVar;
},
set: function(t) {
this._startColorVar.r = t.r;
this._startColorVar.g = t.g;
this._startColorVar.b = t.b;
this._startColorVar.a = t.a;
}
},
_endColor: null,
endColor: {
get: function() {
return this._endColor;
},
set: function(t) {
this._endColor.r = t.r;
this._endColor.g = t.g;
this._endColor.b = t.b;
this._endColor.a = t.a;
}
},
_endColorVar: null,
endColorVar: {
get: function() {
return this._endColorVar;
},
set: function(t) {
this._endColorVar.r = t.r;
this._endColorVar.g = t.g;
this._endColorVar.b = t.b;
this._endColorVar.a = t.a;
}
},
angle: 90,
angleVar: 20,
startSize: 50,
startSizeVar: 0,
endSize: 0,
endSizeVar: 0,
startSpin: 0,
startSpinVar: 0,
endSpin: 0,
endSpinVar: 0,
sourcePos: cc.v2(0, 0),
posVar: cc.v2(0, 0),
positionType: {
default: f.FREE,
type: f
},
emitterMode: {
default: m.GRAVITY,
type: m
},
gravity: cc.v2(0, 0),
speed: 180,
speedVar: 50,
tangentialAccel: 80,
tangentialAccelVar: 0,
radialAccel: 0,
radialAccelVar: 0,
rotationIsDir: !1,
startRadius: 0,
startRadiusVar: 0,
endRadius: 0,
endRadiusVar: 0,
rotatePerS: 0,
rotatePerSVar: 0
}, p = cc.Class({
name: "cc.ParticleSystem",
extends: s,
editor: !1,
ctor: function() {
this._previewTimer = null;
this._focused = !1;
this._willStart = !1;
this._texture = null;
this._simulator = new _(this);
this._startColor = {
r: 255,
g: 255,
b: 255,
a: 255
};
this._startColorVar = {
r: 0,
g: 0,
b: 0,
a: 0
};
this._endColor = {
r: 255,
g: 255,
b: 255,
a: 0
};
this._endColorVar = {
r: 0,
g: 0,
b: 0,
a: 0
};
},
properties: d,
statics: {
DURATION_INFINITY: -1,
START_SIZE_EQUAL_TO_END_SIZE: -1,
START_RADIUS_EQUAL_TO_END_RADIUS: -1,
EmitterMode: m,
PositionType: f
},
onFocusInEditor: !1,
onLostFocusInEditor: !1,
__preload: function() {
if (this._file) if (this._custom) {
!this._texture && this._applyFile();
} else this._applyFile();
this.playOnLoad && this.resetSystem();
},
onLoad: function() {
p._assembler.createIA(this);
},
onEnable: function() {
this._super();
this.node._renderFlag &= ~u.FLAG_RENDER;
this._activateMaterial();
},
onDestroy: function() {
this.autoRemoveOnFinish && (this.autoRemoveOnFinish = !1);
this._super();
},
update: function(t) {
!this._simulator.finished && this._material && this._simulator.step(t);
},
addParticle: function() {},
stopSystem: function() {
this._stopped = !0;
this._simulator.stop();
},
resetSystem: function() {
this._stopped = !1;
this._simulator.reset();
this._material ? this.markForCustomIARender(!0) : this._activateMaterial();
},
isFull: function() {
return this.particleCount >= this.totalParticles;
},
setTextureWithRect: function(t, e) {
t instanceof cc.Texture2D && (this.spriteFrame = new cc.SpriteFrame(t, e));
},
_applyFile: function() {
var t = this._file;
if (t) {
var e = this;
cc.loader.load(t.nativeUrl, (function(i, n) {
if (!i && n) {
if (e.isValid) {
e._plistFile = t.nativeUrl;
e._custom ? e._initTextureWithDictionary(n) : e._initWithDictionary(n);
t.texture && (e.spriteFrame = new cc.SpriteFrame(t.texture));
}
} else cc.errorID(6029);
}));
}
},
_initTextureWithDictionary: function(t) {
var e = cc.path.changeBasename(this._plistFile, t.textureFileName);
if (t.textureFileName) {
var i = l.loadImage(e);
this.spriteFrame = new cc.SpriteFrame(i);
} else if (t.textureImageData) {
var r = t.textureImageData;
if (!(r && r.length > 0)) return !1;
var s = a.unzipBase64AsArray(r, 1);
if (!s) {
cc.logID(6010);
return !1;
}
var c = (function(t) {
return t.length > 8 && 137 === t[0] && 80 === t[1] && 78 === t[2] && 71 === t[3] && 13 === t[4] && 10 === t[5] && 26 === t[6] && 10 === t[7] ? n.ImageFormat.PNG : t.length > 2 && (73 === t[0] && 73 === t[1] || 77 === t[0] && 77 === t[1] || 255 === t[0] && 216 === t[1]) ? n.ImageFormat.TIFF : n.ImageFormat.UNKNOWN;
})(s);
if (c !== n.ImageFormat.TIFF && c !== n.ImageFormat.PNG) {
cc.logID(6011);
return !1;
}
var u = document.createElement("canvas");
if (c === n.ImageFormat.PNG) {
new o(s).render(u);
} else h.parseTIFF(s, u);
(i = l.cacheImage(e, u)) || cc.logID(6012);
this.spriteFrame = new cc.SpriteFrame(i);
}
return !0;
},
_initWithDictionary: function(t) {
this.totalParticles = parseInt(t.maxParticles || 0);
this.life = parseFloat(t.particleLifespan || 0);
this.lifeVar = parseFloat(t.particleLifespanVariance || 0);
this.emissionRate = this.totalParticles / this.life;
this.duration = parseFloat(t.duration || 0);
this.srcBlendFactor = parseInt(t.blendFuncSource || n.SRC_ALPHA);
this.dstBlendFactor = parseInt(t.blendFuncDestination || n.ONE_MINUS_SRC_ALPHA);
var e = this.startColor;
e.r = 255 * parseFloat(t.startColorRed || 1);
e.g = 255 * parseFloat(t.startColorGreen || 1);
e.b = 255 * parseFloat(t.startColorBlue || 1);
e.a = 255 * parseFloat(t.startColorAlpha || 1);
var i = this.startColorVar;
i.r = 255 * parseFloat(t.startColorVarianceRed || 1);
i.g = 255 * parseFloat(t.startColorVarianceGreen || 1);
i.b = 255 * parseFloat(t.startColorVarianceBlue || 1);
i.a = 255 * parseFloat(t.startColorVarianceAlpha || 1);
var r = this.endColor;
r.r = 255 * parseFloat(t.finishColorRed || 1);
r.g = 255 * parseFloat(t.finishColorGreen || 1);
r.b = 255 * parseFloat(t.finishColorBlue || 1);
r.a = 255 * parseFloat(t.finishColorAlpha || 1);
var s = this.endColorVar;
s.r = 255 * parseFloat(t.finishColorVarianceRed || 1);
s.g = 255 * parseFloat(t.finishColorVarianceGreen || 1);
s.b = 255 * parseFloat(t.finishColorVarianceBlue || 1);
s.a = 255 * parseFloat(t.finishColorVarianceAlpha || 1);
this.startSize = parseFloat(t.startParticleSize || 0);
this.startSizeVar = parseFloat(t.startParticleSizeVariance || 0);
this.endSize = parseFloat(t.finishParticleSize || 0);
this.endSizeVar = parseFloat(t.finishParticleSizeVariance || 0);
this.sourcePos.x = 0;
this.sourcePos.y = 0;
this.posVar.x = parseFloat(t.sourcePositionVariancex || 0);
this.posVar.y = parseFloat(t.sourcePositionVariancey || 0);
this.angle = parseFloat(t.angle || 0);
this.angleVar = parseFloat(t.angleVariance || 0);
this.startSpin = parseFloat(t.rotationStart || 0);
this.startSpinVar = parseFloat(t.rotationStartVariance || 0);
this.endSpin = parseFloat(t.rotationEnd || 0);
this.endSpinVar = parseFloat(t.rotationEndVariance || 0);
this.emitterMode = parseInt(t.emitterType || m.GRAVITY);
if (this.emitterMode === m.GRAVITY) {
this.gravity.x = parseFloat(t.gravityx || 0);
this.gravity.y = parseFloat(t.gravityy || 0);
this.speed = parseFloat(t.speed || 0);
this.speedVar = parseFloat(t.speedVariance || 0);
this.radialAccel = parseFloat(t.radialAcceleration || 0);
this.radialAccelVar = parseFloat(t.radialAccelVariance || 0);
this.tangentialAccel = parseFloat(t.tangentialAcceleration || 0);
this.tangentialAccelVar = parseFloat(t.tangentialAccelVariance || 0);
var a = t.rotationIsDir || "";
if (null !== a) {
a = a.toString().toLowerCase();
this.rotationIsDir = "true" === a || "1" === a;
} else this.rotationIsDir = !1;
} else {
if (this.emitterMode !== m.RADIUS) {
cc.warnID(6009);
return !1;
}
this.startRadius = parseFloat(t.maxRadius || 0);
this.startRadiusVar = parseFloat(t.maxRadiusVariance || 0);
this.endRadius = parseFloat(t.minRadius || 0);
this.endRadiusVar = parseFloat(t.minRadiusVariance || 0);
this.rotatePerS = parseFloat(t.rotatePerSecond || 0);
this.rotatePerSVar = parseFloat(t.rotatePerSecondVariance || 0);
}
this._initTextureWithDictionary(t);
return !0;
},
_onTextureLoaded: function(t) {
this._texture = this._spriteFrame.getTexture();
this._renderData && (this._renderData.uvDirty = !0);
this._activateMaterial();
},
_applySpriteFrame: function(t) {
t && t.off && t.off("load", this._onTextureLoaded, this);
var e = this._spriteFrame;
if (e) if (e.textureLoaded()) this._onTextureLoaded(null); else {
e.once("load", this._onTextureLoaded, this);
e.ensureLoadTexture();
}
},
_activateMaterial: function() {
if (!this._material) {
this._material = new c.SpriteMaterial();
this._material.useTexture = !0;
this._material.useModel = !0;
this._material.useColor = !1;
}
if (this._texture && this._texture.loaded) {
this.markForUpdateRenderData(!0);
this.markForCustomIARender(!0);
this._material.texture = this._texture;
this._updateMaterial(this._material);
} else {
this.markForCustomIARender(!1);
this._spriteFrame && this._applySpriteFrame();
}
},
_finishedSimulation: function() {
0;
this.disableRender();
this.autoRemoveOnFinish && this._stopped && this.node.destroy();
}
});
cc.ParticleSystem = e.exports = p;
}), {
"../compression/ZipUtils": 21,
"../core/components/CCRenderComponent": 75,
"../core/platform/CCMacro": 158,
"../core/renderer/render-engine": 195,
"../core/renderer/render-flow": 196,
"../core/utils/texture-util": 239,
"./CCPNGReader": 250,
"./CCParticleAsset": 251,
"./CCTIFFReader": 253,
"./particle-simulator": 255
} ],
253: [ (function(t, e, i) {
var n = t("../core/CCDebug"), r = {
_littleEndian: !1,
_tiffData: null,
_fileDirectories: [],
getUint8: function(t) {
return this._tiffData[t];
},
getUint16: function(t) {
return this._littleEndian ? this._tiffData[t + 1] << 8 | this._tiffData[t] : this._tiffData[t] << 8 | this._tiffData[t + 1];
},
getUint32: function(t) {
var e = this._tiffData;
return this._littleEndian ? e[t + 3] << 24 | e[t + 2] << 16 | e[t + 1] << 8 | e[t] : e[t] << 24 | e[t + 1] << 16 | e[t + 2] << 8 | e[t + 3];
},
checkLittleEndian: function() {
var t = this.getUint16(0);
if (18761 === t) this.littleEndian = !0; else {
if (19789 !== t) {
console.log(t);
throw TypeError(n.getError(6019));
}
this.littleEndian = !1;
}
return this.littleEndian;
},
hasTowel: function() {
if (42 !== this.getUint16(2)) throw RangeError(n.getError(6020));
return !0;
},
getFieldTypeName: function(t) {
var e = this.fieldTypeNames;
return t in e ? e[t] : null;
},
getFieldTagName: function(t) {
var e = this.fieldTagNames;
if (t in e) return e[t];
cc.logID(6021, t);
return "Tag" + t;
},
getFieldTypeLength: function(t) {
return -1 !== [ "BYTE", "ASCII", "SBYTE", "UNDEFINED" ].indexOf(t) ? 1 : -1 !== [ "SHORT", "SSHORT" ].indexOf(t) ? 2 : -1 !== [ "LONG", "SLONG", "FLOAT" ].indexOf(t) ? 4 : -1 !== [ "RATIONAL", "SRATIONAL", "DOUBLE" ].indexOf(t) ? 8 : null;
},
getFieldValues: function(t, e, i, n) {
var r = [], s = this.getFieldTypeLength(e);
if (s * i <= 4) !1 === this.littleEndian ? r.push(n >>> 8 * (4 - s)) : r.push(n); else for (var a = 0; a < i; a++) {
var o = s * a;
if (s >= 8) if (-1 !== [ "RATIONAL", "SRATIONAL" ].indexOf(e)) {
r.push(this.getUint32(n + o));
r.push(this.getUint32(n + o + 4));
} else cc.logID(8e3); else r.push(this.getBytes(s, n + o));
}
"ASCII" === e && r.forEach((function(t, e, i) {
i[e] = String.fromCharCode(t);
}));
return r;
},
getBytes: function(t, e) {
if (t <= 0) cc.logID(8001); else {
if (t <= 1) return this.getUint8(e);
if (t <= 2) return this.getUint16(e);
if (t <= 3) return this.getUint32(e) >>> 8;
if (t <= 4) return this.getUint32(e);
cc.logID(8002);
}
},
getBits: function(t, e, i) {
i = i || 0;
var n, r, s = e + Math.floor(i / 8), a = i + t, o = 32 - t;
if (a <= 0) cc.logID(6023); else if (a <= 8) {
n = 24 + i;
r = this.getUint8(s);
} else if (a <= 16) {
n = 16 + i;
r = this.getUint16(s);
} else if (a <= 32) {
n = i;
r = this.getUint32(s);
} else cc.logID(6022);
return {
bits: r << n >>> o,
byteOffset: s + Math.floor(a / 8),
bitOffset: a % 8
};
},
parseFileDirectory: function(t) {
for (var e = this.getUint16(t), i = [], n = t + 2, r = 0; r < e; n += 12, r++) {
var s = this.getUint16(n), a = this.getUint16(n + 2), o = this.getUint32(n + 4), h = this.getUint32(n + 8), l = this.getFieldTagName(s), c = this.getFieldTypeName(a), u = this.getFieldValues(l, c, o, h);
i[l] = {
type: c,
values: u
};
}
this._fileDirectories.push(i);
var _ = this.getUint32(n);
0 !== _ && this.parseFileDirectory(_);
},
clampColorSample: function(t, e) {
var i = Math.pow(2, 8 - e);
return Math.floor(t * i + (i - 1));
},
parseTIFF: function(t, e) {
e = e || document.createElement("canvas");
this._tiffData = t;
this.canvas = e;
this.checkLittleEndian();
if (this.hasTowel()) {
var i = this.getUint32(4);
this._fileDirectories.length = 0;
this.parseFileDirectory(i);
var r = this._fileDirectories[0], s = r.ImageWidth.values[0], a = r.ImageLength.values[0];
this.canvas.width = s;
this.canvas.height = a;
var o = [], h = r.Compression ? r.Compression.values[0] : 1, l = r.SamplesPerPixel.values[0], c = [], u = 0, _ = !1;
r.BitsPerSample.values.forEach((function(t, e, i) {
c[e] = {
bitsPerSample: t,
hasBytesPerSample: !1,
bytesPerSample: void 0
};
if (t % 8 == 0) {
c[e].hasBytesPerSample = !0;
c[e].bytesPerSample = t / 8;
}
u += t;
}), this);
if (u % 8 == 0) {
_ = !0;
var m = u / 8;
}
var f = r.StripOffsets.values, d = f.length;
if (r.StripByteCounts) var p = r.StripByteCounts.values; else {
cc.logID(8003);
if (1 !== d) throw Error(n.getError(6024));
p = [ Math.ceil(s * a * u / 8) ];
}
for (var g = 0; g < d; g++) {
var y = f[g];
o[g] = [];
for (var v = p[g], x = 0, A = 0, b = 1, T = !0, C = [], w = 0, S = 0, E = 0; x < v; x += b) switch (h) {
case 1:
var D = 0;
for (C = []; D < l; D++) {
if (!c[D].hasBytesPerSample) {
var M = this.getBits(c[D].bitsPerSample, y + x, A);
C.push(M.bits);
x = M.byteOffset - y;
A = M.bitOffset;
throw RangeError(n.getError(6025));
}
var I = c[D].bytesPerSample * D;
C.push(this.getBytes(c[D].bytesPerSample, y + x + I));
}
o[g].push(C);
if (!_) {
b = 0;
throw RangeError(n.getError(6026));
}
b = m;
break;

case 2:
case 3:
case 4:
case 5:
case 6:
case 7:
break;

case 32773:
if (T) {
T = !1;
var P = 1, B = 1, R = this.getInt8(y + x);
R >= 0 && R <= 127 ? P = R + 1 : R >= -127 && R <= -1 ? B = 1 - R : T = !0;
} else {
var L = this.getUint8(y + x);
for (D = 0; D < B; D++) {
if (!c[S].hasBytesPerSample) throw RangeError(n.getError(6025));
E = E << 8 * w | L;
if (++w === c[S].bytesPerSample) {
C.push(E);
E = w = 0;
S++;
}
if (S === l) {
o[g].push(C);
C = [];
S = 0;
}
}
0 === --P && (T = !0);
}
b = 1;
}
}
if (e.getContext) {
var O = this.canvas.getContext("2d");
O.fillStyle = "rgba(255, 255, 255, 0)";
var F = r.RowsPerStrip ? r.RowsPerStrip.values[0] : a, N = o.length, k = a % F, z = 0 === k ? F : k, G = F, U = 0, V = r.PhotometricInterpretation.values[0], j = [], W = 0;
r.ExtraSamples && (W = (j = r.ExtraSamples.values).length);
if (r.ColorMap) var H = r.ColorMap.values, q = Math.pow(2, c[0].bitsPerSample);
for (g = 0; g < N; g++) {
g + 1 === N && (G = z);
for (var X = o[g].length, Y = U * g, J = 0, Z = 0; Z < X; J++) for (var K = 0; K < s; K++, 
Z++) {
var Q = o[g][Z], $ = 0, tt = 0, et = 0, it = 1;
if (W > 0) for (var nt = 0; nt < W; nt++) if (1 === j[nt] || 2 === j[nt]) {
it = Q[3 + nt] / 256;
break;
}
switch (V) {
case 0:
if (c[0].hasBytesPerSample) var rt = Math.pow(16, 2 * c[0].bytesPerSample);
Q.forEach((function(t, e, i) {
i[e] = rt - t;
}));

case 1:
$ = tt = et = this.clampColorSample(Q[0], c[0].bitsPerSample);
break;

case 2:
$ = this.clampColorSample(Q[0], c[0].bitsPerSample);
tt = this.clampColorSample(Q[1], c[1].bitsPerSample);
et = this.clampColorSample(Q[2], c[2].bitsPerSample);
break;

case 3:
if (void 0 === H) throw Error(n.getError(6027));
var st = Q[0];
$ = this.clampColorSample(H[st], 16);
tt = this.clampColorSample(H[q + st], 16);
et = this.clampColorSample(H[2 * q + st], 16);
break;

default:
throw RangeError(n.getError(6028, V));
}
O.fillStyle = "rgba(" + $ + ", " + tt + ", " + et + ", " + it + ")";
O.fillRect(K, Y + J, 1, 1);
}
U = G;
}
}
return this.canvas;
}
},
fieldTagNames: {
315: "Artist",
258: "BitsPerSample",
265: "CellLength",
264: "CellWidth",
320: "ColorMap",
259: "Compression",
33432: "Copyright",
306: "DateTime",
338: "ExtraSamples",
266: "FillOrder",
289: "FreeByteCounts",
288: "FreeOffsets",
291: "GrayResponseCurve",
290: "GrayResponseUnit",
316: "HostComputer",
270: "ImageDescription",
257: "ImageLength",
256: "ImageWidth",
271: "Make",
281: "MaxSampleValue",
280: "MinSampleValue",
272: "Model",
254: "NewSubfileType",
274: "Orientation",
262: "PhotometricInterpretation",
284: "PlanarConfiguration",
296: "ResolutionUnit",
278: "RowsPerStrip",
277: "SamplesPerPixel",
305: "Software",
279: "StripByteCounts",
273: "StripOffsets",
255: "SubfileType",
263: "Threshholding",
282: "XResolution",
283: "YResolution",
326: "BadFaxLines",
327: "CleanFaxData",
343: "ClipPath",
328: "ConsecutiveBadFaxLines",
433: "Decode",
434: "DefaultImageColor",
269: "DocumentName",
336: "DotRange",
321: "HalftoneHints",
346: "Indexed",
347: "JPEGTables",
285: "PageName",
297: "PageNumber",
317: "Predictor",
319: "PrimaryChromaticities",
532: "ReferenceBlackWhite",
339: "SampleFormat",
559: "StripRowCounts",
330: "SubIFDs",
292: "T4Options",
293: "T6Options",
325: "TileByteCounts",
323: "TileLength",
324: "TileOffsets",
322: "TileWidth",
301: "TransferFunction",
318: "WhitePoint",
344: "XClipPathUnits",
286: "XPosition",
529: "YCbCrCoefficients",
531: "YCbCrPositioning",
530: "YCbCrSubSampling",
345: "YClipPathUnits",
287: "YPosition",
37378: "ApertureValue",
40961: "ColorSpace",
36868: "DateTimeDigitized",
36867: "DateTimeOriginal",
34665: "Exif IFD",
36864: "ExifVersion",
33434: "ExposureTime",
41728: "FileSource",
37385: "Flash",
40960: "FlashpixVersion",
33437: "FNumber",
42016: "ImageUniqueID",
37384: "LightSource",
37500: "MakerNote",
37377: "ShutterSpeedValue",
37510: "UserComment",
33723: "IPTC",
34675: "ICC Profile",
700: "XMP",
42112: "GDAL_METADATA",
42113: "GDAL_NODATA",
34377: "Photoshop"
},
fieldTypeNames: {
1: "BYTE",
2: "ASCII",
3: "SHORT",
4: "LONG",
5: "RATIONAL",
6: "SBYTE",
7: "UNDEFINED",
8: "SSHORT",
9: "SLONG",
10: "SRATIONAL",
11: "FLOAT",
12: "DOUBLE"
}
};
e.exports = r;
}), {
"../core/CCDebug": 25
} ],
254: [ (function(t, e, i) {
t("./CCParticleAsset");
t("./CCParticleSystem");
t("./particle-simulator");
t("./particle-system-assembler");
}), {
"./CCParticleAsset": 251,
"./CCParticleSystem": 252,
"./particle-simulator": 255,
"./particle-system-assembler": 256
} ],
255: [ (function(t, e, i) {
var n = t("../core/utils/affine-transform"), r = t("../core/platform/js"), s = t("../core/utils/misc"), a = cc.v2(0, 0), o = n.create(), h = cc.v2(), l = cc.v2(), c = cc.v2(), u = cc.v2(), _ = new r.Pool(function(t) {
t.pos.set(a);
t.startPos.set(a);
t.color._val = 4278190080;
t.deltaColor.r = t.deltaColor.g = t.deltaColor.b = 0;
t.deltaColor.a = 255;
t.size = 0;
t.deltaSize = 0;
t.rotation = 0;
t.deltaRotation = 0;
t.timeToLive = 0;
t.drawPos.set(a);
t.dir.set(a);
t.radialAccel = 0;
t.tangentialAccel = 0;
t.angle = 0;
t.degreesPerSecond = 0;
t.radius = 0;
t.deltaRadius = 0;
}, 1024);
_.get = function() {
return this._get() || new function() {
this.pos = cc.v2(0, 0);
this.startPos = cc.v2(0, 0);
this.color = cc.color(0, 0, 0, 255);
this.deltaColor = {
r: 0,
g: 0,
b: 0,
a: 255
};
this.size = 0;
this.deltaSize = 0;
this.rotation = 0;
this.deltaRotation = 0;
this.timeToLive = 0;
this.drawPos = cc.v2(0, 0);
this.dir = cc.v2(0, 0);
this.radialAccel = 0;
this.tangentialAccel = 0;
this.angle = 0;
this.degreesPerSecond = 0;
this.radius = 0;
this.deltaRadius = 0;
}();
};
var m = function(t) {
this.sys = t;
this.particles = [];
this.active = !1;
this.finished = !1;
this.elapsed = 0;
this.emitCounter = 0;
this._uvFilled = 0;
};
m.prototype.stop = function() {
this.active = !1;
this.elapsed = this.sys.duration;
this.emitCounter = 0;
};
m.prototype.reset = function() {
this.active = !0;
this.elapsed = 0;
this.emitCounter = 0;
this.finished = !1;
for (var t = this.particles, e = 0; e < t.length; ++e) _.put(t[e]);
t.length = 0;
};
m.prototype.emitParticle = function(t) {
var e = this.sys, i = s.clampf, n = _.get();
this.particles.push(n);
n.timeToLive = e.life + e.lifeVar * (Math.random() - .5) * 2;
var r = n.timeToLive = Math.max(0, n.timeToLive);
n.pos.x = e.sourcePos.x + e.posVar.x * (Math.random() - .5) * 2;
n.pos.y = e.sourcePos.y + e.posVar.y * (Math.random() - .5) * 2;
var a, o, h, l, c = e._startColor, u = e._startColorVar, m = e._endColor, f = e._endColorVar;
n.color.r = a = i(c.r + u.r * (Math.random() - .5) * 2, 0, 255);
n.color.g = o = i(c.g + u.g * (Math.random() - .5) * 2, 0, 255);
n.color.b = h = i(c.b + u.b * (Math.random() - .5) * 2, 0, 255);
n.color.a = l = i(c.a + u.a * (Math.random() - .5) * 2, 0, 255);
n.deltaColor.r = (i(m.r + f.r * (Math.random() - .5) * 2, 0, 255) - a) / r;
n.deltaColor.g = (i(m.g + f.g * (Math.random() - .5) * 2, 0, 255) - o) / r;
n.deltaColor.b = (i(m.b + f.b * (Math.random() - .5) * 2, 0, 255) - h) / r;
n.deltaColor.a = (i(m.a + f.a * (Math.random() - .5) * 2, 0, 255) - l) / r;
var d = e.startSize + e.startSizeVar * (Math.random() - .5) * 2;
d = Math.max(0, d);
n.size = d;
if (e.endSize === cc.ParticleSystem.START_SIZE_EQUAL_TO_END_SIZE) n.deltaSize = 0; else {
var p = e.endSize + e.endSizeVar * (Math.random() - .5) * 2;
p = Math.max(0, p);
n.deltaSize = (p - d) / r;
}
var g = e.startSpin + e.startSpinVar * (Math.random() - .5) * 2, y = e.endSpin + e.endSpinVar * (Math.random() - .5) * 2;
n.rotation = g;
n.deltaRotation = (y - g) / r;
n.startPos.x = t.x;
n.startPos.y = t.y;
var v = s.degreesToRadians(e.angle + e.angleVar * (Math.random() - .5) * 2);
if (e.emitterMode === cc.ParticleSystem.EmitterMode.GRAVITY) {
var x = e.speed + e.speedVar * (Math.random() - .5) * 2;
n.dir.x = Math.cos(v);
n.dir.y = Math.sin(v);
n.dir.mulSelf(x);
n.radialAccel = e.radialAccel + e.radialAccelVar * (Math.random() - .5) * 2;
n.tangentialAccel = e.tangentialAccel + e.tangentialAccelVar * (Math.random() - .5) * 2;
e.rotationIsDir && (n.rotation = -s.radiansToDegrees(Math.atan2(n.dir.y, n.dir.x)));
} else {
var A = e.startRadius + e.startRadiusVar * (Math.random() - .5) * 2, b = e.endRadius + e.endRadiusVar * (Math.random() - .5) * 2;
n.radius = A;
n.deltaRadius = e.endRadius === cc.ParticleSystem.START_RADIUS_EQUAL_TO_END_RADIUS ? 0 : (b - A) / r;
n.angle = v;
n.degreesPerSecond = s.degreesToRadians(e.rotatePerS + e.rotatePerSVar * (Math.random() - .5) * 2);
}
};
m.prototype.updateUVs = function(t) {
if (this.sys._buffer && this.sys._spriteFrame) {
for (var e = 4 * this.sys._vertexFormat._bytes / 4, i = this.sys._buffer._vData, n = this.sys._spriteFrame.uv, r = this._uvFilled; r < t; r++) {
var s = r * e;
i[s + 2] = n[0];
i[s + 3] = n[1];
i[s + 7] = n[2];
i[s + 8] = n[3];
i[s + 12] = n[4];
i[s + 13] = n[5];
i[s + 17] = n[6];
i[s + 18] = n[7];
}
this._uvFilled = t;
}
};
m.prototype.updateParticleBuffer = function(t, e, i, n) {
var r = i._vData, a = i._uintVData, o = e.x, h = e.y, l = t.size / 2;
if (t.rotation) {
var c = -l, u = -l, _ = l, m = l, f = -s.degreesToRadians(t.rotation), d = Math.cos(f), p = Math.sin(f);
r[n] = c * d - u * p + o;
r[n + 1] = c * p + u * d + h;
r[n + 5] = _ * d - u * p + o;
r[n + 6] = _ * p + u * d + h;
r[n + 10] = c * d - m * p + o;
r[n + 11] = c * p + m * d + h;
r[n + 15] = _ * d - m * p + o;
r[n + 16] = _ * p + m * d + h;
} else {
r[n] = o - l;
r[n + 1] = h - l;
r[n + 5] = o + l;
r[n + 6] = h - l;
r[n + 10] = o - l;
r[n + 11] = h + l;
r[n + 15] = o + l;
r[n + 16] = h + l;
}
a[n + 4] = t.color._val;
a[n + 9] = t.color._val;
a[n + 14] = t.color._val;
a[n + 19] = t.color._val;
};
m.prototype.step = function(t) {
var e = this.sys, i = e.node, r = this.particles, s = 4 * e._vertexFormat._bytes / 4;
i._updateWorldMatrix();
n.fromMat4(o, i._worldMatrix);
if (e.positionType === cc.ParticleSystem.PositionType.FREE) n.transformVec2(h, a, o); else if (e.positionType === cc.ParticleSystem.PositionType.RELATIVE) {
h.x = i._position.x;
h.y = i._position.y;
}
n.invert(o, o);
var m = o;
if (this.active && e.emissionRate) {
var f = 1 / e.emissionRate;
r.length < e.totalParticles && (this.emitCounter += t);
for (;r.length < e.totalParticles && this.emitCounter > f; ) {
this.emitParticle(h);
this.emitCounter -= f;
}
this.elapsed += t;
-1 !== e.duration && e.duration < this.elapsed && e.stopSystem();
}
var d = e._buffer, p = r.length;
d.reset();
d.request(4 * p, 6 * r.length);
p > this._uvFilled && this.updateUVs(p);
for (var g = 0; g < r.length; ) {
l.x = l.y = c.x = c.y = u.x = u.y = 0;
var y = r[g];
y.timeToLive -= t;
if (y.timeToLive > 0) {
if (e.emitterMode === cc.ParticleSystem.EmitterMode.GRAVITY) {
var v = u, x = l, A = c;
if (y.pos.x || y.pos.y) {
x.set(y.pos);
x.normalizeSelf();
}
A.set(x);
x.mulSelf(y.radialAccel);
var b = A.x;
A.x = -A.y;
A.y = b;
A.mulSelf(y.tangentialAccel);
v.set(x);
v.addSelf(A);
v.addSelf(e.gravity);
v.mulSelf(t);
y.dir.addSelf(v);
v.set(y.dir);
v.mulSelf(t);
y.pos.addSelf(v);
} else {
y.angle += y.degreesPerSecond * t;
y.radius += y.deltaRadius * t;
y.pos.x = -Math.cos(y.angle) * y.radius;
y.pos.y = -Math.sin(y.angle) * y.radius;
}
y.color.r += y.deltaColor.r * t;
y.color.g += y.deltaColor.g * t;
y.color.b += y.deltaColor.b * t;
y.color.a += y.deltaColor.a * t;
y.size += y.deltaSize * t;
y.size < 0 && (y.size = 0);
y.rotation += y.deltaRotation * t;
var T = l;
if (e.positionType === cc.ParticleSystem.PositionType.FREE || e.positionType === cc.ParticleSystem.PositionType.RELATIVE) {
var C = c, w = u;
n.transformVec2(C, h, m);
n.transformVec2(w, y.startPos, m);
C.subSelf(w);
T.set(y.pos);
T.subSelf(C);
} else T.set(y.pos);
var S = s * g;
this.updateParticleBuffer(y, T, d, S);
++g;
} else {
var E = r[g];
g !== r.length - 1 && (r[g] = r[r.length - 1]);
_.put(E);
r.length--;
if (0 === r.length) {
this.finished = !0;
e._finishedSimulation();
}
}
}
if (r.length > 0) {
d.uploadData();
e._ia._count = 6 * r.length;
}
};
e.exports = m;
}), {
"../core/platform/js": 173,
"../core/utils/affine-transform": 223,
"../core/utils/misc": 231
} ],
256: [ (function(t, e, i) {
t("../core/platform/js");
var n = t("./CCParticleSystem"), r = t("../core/renderer/"), s = t("../core/renderer/render-engine"), a = t("../core/renderer/webgl/vertex-format").vfmtPosUvColor, o = t("../core/renderer/webgl/quad-buffer"), h = (t("../core/renderer/render-flow"), 
{
useModel: !0,
createIA: function(t) {
r.device;
t._vertexFormat = a;
t._buffer = new o(r._walker, a);
t._ia = new s.InputAssembler();
t._ia._vertexBuffer = t._buffer._vb;
t._ia._indexBuffer = t._buffer._ib;
t._ia._start = 0;
t._ia._count = 0;
},
updateRenderData: function(t) {
if (!t._renderData) {
t._renderData = new s.IARenderData();
t._renderData.ia = t._ia;
}
t._renderData.material = t._material;
},
renderIA: function(t, e) {
e._flushIA(t._renderData);
}
});
n._assembler = h;
e.exports = h;
}), {
"../core/platform/js": 173,
"../core/renderer/": 194,
"../core/renderer/render-engine": 195,
"../core/renderer/render-flow": 196,
"../core/renderer/webgl/quad-buffer": 218,
"../core/renderer/webgl/vertex-format": 221,
"./CCParticleSystem": 252
} ],
257: [ (function(t, e, i) {
var n = t("../compression/ZipUtils"), r = t("../compression/zlib.min"), s = t("../core/platform/js");
t("../core/platform/CCSAXParser");
cc.TMXLayerInfo = function() {
this.properties = {};
this.name = "";
this._layerSize = null;
this._tiles = [];
this.visible = !0;
this._opacity = 0;
this.ownTiles = !0;
this._minGID = 1e5;
this._maxGID = 0;
this.offset = cc.v2(0, 0);
};
cc.TMXLayerInfo.prototype = {
constructor: cc.TMXLayerInfo,
getProperties: function() {
return this.properties;
},
setProperties: function(t) {
this.properties = t;
}
};
cc.TMXObjectGroupInfo = function() {
this.properties = {};
this.name = "";
this._objects = [];
this.visible = !0;
this._opacity = 0;
this._color = new cc.Color(255, 255, 255, 255);
this.offset = cc.v2(0, 0);
this._draworder = "topdown";
};
cc.TMXObjectGroupInfo.prototype = {
constructor: cc.TMXObjectGroupInfo,
getProperties: function() {
return this.properties;
},
setProperties: function(t) {
this.properties = t;
}
};
cc.TMXTilesetInfo = function() {
this.name = "";
this.firstGid = 0;
this.spacing = 0;
this.margin = 0;
this.sourceImage = null;
this.imageSize = cc.size(0, 0);
this.tileOffset = cc.v2(0, 0);
this._tileSize = cc.size(0, 0);
};
cc.TMXTilesetInfo.prototype = {
constructor: cc.TMXTilesetInfo,
rectForGID: function(t, e) {
var i = e || cc.rect(0, 0, 0, 0);
i.width = this._tileSize.width;
i.height = this._tileSize.height;
t &= cc.TiledMap.TileFlag.FLIPPED_MASK;
t -= parseInt(this.firstGid, 10);
var n = parseInt((this.imageSize.width - 2 * this.margin + this.spacing) / (this._tileSize.width + this.spacing), 10);
i.x = parseInt(t % n * (this._tileSize.width + this.spacing) + this.margin, 10);
i.y = parseInt(parseInt(t / n, 10) * (this._tileSize.height + this.spacing) + this.margin, 10);
return i;
}
};
function a(t) {
for (var e = [], i = t.getElementsByTagName("properties"), n = 0; n < i.length; ++n) for (var r = i[n].getElementsByTagName("property"), s = 0; s < r.length; ++s) e.push(r[s]);
return e.length ? e : null;
}
cc.TMXMapInfo = function(t, e, i) {
this.properties = [];
this.orientation = null;
this.parentElement = null;
this.parentGID = null;
this.layerAttrs = 0;
this.storingCharacters = !1;
this.currentString = null;
this._parser = new cc.SAXParser();
this._objectGroups = [];
this._allChildren = [];
this._mapSize = cc.size(0, 0);
this._tileSize = cc.size(0, 0);
this._layers = [];
this._tilesets = [];
this._tileProperties = {};
this._tsxMap = null;
this._textures = null;
this._staggerAxis = null;
this._staggerIndex = null;
this._hexSideLength = 0;
this.initWithXML(t, e, i);
};
cc.TMXMapInfo.prototype = {
constructor: cc.TMXMapInfo,
getOrientation: function() {
return this.orientation;
},
setOrientation: function(t) {
this.orientation = t;
},
getStaggerAxis: function() {
return this._staggerAxis;
},
setStaggerAxis: function(t) {
this._staggerAxis = t;
},
getStaggerIndex: function() {
return this._staggerIndex;
},
setStaggerIndex: function(t) {
this._staggerIndex = t;
},
getHexSideLength: function() {
return this._hexSideLength;
},
setHexSideLength: function(t) {
this._hexSideLength = t;
},
getMapSize: function() {
return cc.size(this._mapSize.width, this._mapSize.height);
},
setMapSize: function(t) {
this._mapSize.width = t.width;
this._mapSize.height = t.height;
},
_getMapWidth: function() {
return this._mapSize.width;
},
_setMapWidth: function(t) {
this._mapSize.width = t;
},
_getMapHeight: function() {
return this._mapSize.height;
},
_setMapHeight: function(t) {
this._mapSize.height = t;
},
getTileSize: function() {
return cc.size(this._tileSize.width, this._tileSize.height);
},
setTileSize: function(t) {
this._tileSize.width = t.width;
this._tileSize.height = t.height;
},
_getTileWidth: function() {
return this._tileSize.width;
},
_setTileWidth: function(t) {
this._tileSize.width = t;
},
_getTileHeight: function() {
return this._tileSize.height;
},
_setTileHeight: function(t) {
this._tileSize.height = t;
},
getLayers: function() {
return this._layers;
},
setLayers: function(t) {
this._allChildren.push(t);
this._layers.push(t);
},
getTilesets: function() {
return this._tilesets;
},
setTilesets: function(t) {
this._tilesets.push(t);
},
getObjectGroups: function() {
return this._objectGroups;
},
setObjectGroups: function(t) {
this._allChildren.push(t);
this._objectGroups.push(t);
},
getAllChildren: function() {
return this._allChildren;
},
getParentElement: function() {
return this.parentElement;
},
setParentElement: function(t) {
this.parentElement = t;
},
getParentGID: function() {
return this.parentGID;
},
setParentGID: function(t) {
this.parentGID = t;
},
getLayerAttribs: function() {
return this.layerAttrs;
},
setLayerAttribs: function(t) {
this.layerAttrs = t;
},
getStoringCharacters: function() {
return this.storingCharacters;
},
setStoringCharacters: function(t) {
this.storingCharacters = t;
},
getProperties: function() {
return this.properties;
},
setProperties: function(t) {
this.properties = t;
},
initWithXML: function(t, e, i) {
this._tilesets.length = 0;
this._layers.length = 0;
this._tsxMap = e;
this._textures = i;
this._objectGroups.length = 0;
this._allChildren.length = 0;
this.properties.length = 0;
this._tileProperties.length = 0;
this.currentString = "";
this.storingCharacters = !1;
this.layerAttrs = cc.TMXLayerInfo.ATTRIB_NONE;
this.parentElement = cc.TiledMap.NONE;
return this.parseXMLString(t);
},
parseXMLString: function(t, e) {
var i, n, r = this._parser._parseXML(t).documentElement, s = r.getAttribute("version"), o = r.getAttribute("orientation"), h = r.getAttribute("staggeraxis"), l = r.getAttribute("staggerindex"), c = r.getAttribute("hexsidelength");
if ("map" === r.nodeName) {
"1.0" !== s && null !== s && cc.logID(7216, s);
"orthogonal" === o ? this.orientation = cc.TiledMap.Orientation.ORTHO : "isometric" === o ? this.orientation = cc.TiledMap.Orientation.ISO : "hexagonal" === o ? this.orientation = cc.TiledMap.Orientation.HEX : null !== o && cc.logID(7217, o);
"x" === h ? this.setStaggerAxis(cc.TiledMap.StaggerAxis.STAGGERAXIS_X) : "y" === h && this.setStaggerAxis(cc.TiledMap.StaggerAxis.STAGGERAXIS_Y);
"odd" === l ? this.setStaggerIndex(cc.TiledMap.StaggerIndex.STAGGERINDEX_ODD) : "even" === l && this.setStaggerIndex(cc.TiledMap.StaggerIndex.STAGGERINDEX_EVEN);
c && this.setHexSideLength(parseFloat(c));
var u = cc.size(0, 0);
u.width = parseFloat(r.getAttribute("width"));
u.height = parseFloat(r.getAttribute("height"));
this.setMapSize(u);
(u = cc.size(0, 0)).width = parseFloat(r.getAttribute("tilewidth"));
u.height = parseFloat(r.getAttribute("tileheight"));
this.setTileSize(u);
var _ = a(r);
if (_) {
var m = {};
for (i = 0; i < _.length; i++) m[_[i].getAttribute("name")] = _[i].getAttribute("value");
this.properties = m;
}
}
var f = r.getElementsByTagName("tileset");
"map" !== r.nodeName && (f = []).push(r);
for (i = 0; i < f.length; i++) {
var d = f[i], p = d.getAttribute("source");
if (p) {
var g = parseInt(d.getAttribute("firstgid")), y = this._tsxMap[p];
y && this.parseXMLString(y, g);
} else {
var v = new cc.TMXTilesetInfo();
v.name = d.getAttribute("name") || "";
v.firstGid = e || (parseInt(d.getAttribute("firstgid")) || 0);
v.spacing = parseInt(d.getAttribute("spacing")) || 0;
v.margin = parseInt(d.getAttribute("margin")) || 0;
var x = cc.size(0, 0);
x.width = parseFloat(d.getAttribute("tilewidth"));
x.height = parseFloat(d.getAttribute("tileheight"));
v._tileSize = x;
var A = d.getElementsByTagName("image")[0].getAttribute("source");
A.replace(/\\/g, "/");
v.sourceImage = this._textures[A];
v.sourceImage || cc.errorID(7221, A);
this.setTilesets(v);
var b = d.getElementsByTagName("tileoffset")[0];
if (b) {
var T = parseFloat(b.getAttribute("x")), C = parseFloat(b.getAttribute("y"));
v.tileOffset = cc.v2(T, C);
}
var w = d.getElementsByTagName("tile");
if (w) for (var S = 0; S < w.length; S++) {
var E = w[S];
this.parentGID = parseInt(v.firstGid) + parseInt(E.getAttribute("id") || 0);
var D = a(E);
if (D) {
var M = {};
for (n = 0; n < D.length; n++) {
M[D[n].getAttribute("name")] = D[n].getAttribute("value");
}
this._tileProperties[this.parentGID] = M;
}
}
}
}
var I = r.childNodes;
for (i = 0; i < I.length; i++) {
var P = I[i];
if (!this._shouldIgnoreNode(P)) {
if ("layer" === P.nodeName) {
var B = this._parseLayer(P);
this.setLayers(B);
}
if ("objectgroup" === P.nodeName) {
var R = this._parseObjectGroup(P);
this.setObjectGroups(R);
}
}
}
return r;
},
_shouldIgnoreNode: function(t) {
return 3 === t.nodeType || 8 === t.nodeType || 4 === t.nodeType;
},
_parseLayer: function(t) {
var e = t.getElementsByTagName("data")[0], i = new cc.TMXLayerInfo();
i.name = t.getAttribute("name");
var s = cc.size(0, 0);
s.width = parseFloat(t.getAttribute("width"));
s.height = parseFloat(t.getAttribute("height"));
i._layerSize = s;
var o = t.getAttribute("visible");
i.visible = !("0" == o);
var h = t.getAttribute("opacity") || 1;
i._opacity = h ? parseInt(255 * parseFloat(h)) : 255;
i.offset = cc.v2(parseFloat(t.getAttribute("x")) || 0, parseFloat(t.getAttribute("y")) || 0);
for (var l = "", c = 0; c < e.childNodes.length; c++) l += e.childNodes[c].nodeValue;
l = l.trim();
var u = e.getAttribute("compression"), _ = e.getAttribute("encoding");
if (u && "gzip" !== u && "zlib" !== u) {
cc.logID(7218);
return null;
}
var m = void 0;
switch (u) {
case "gzip":
m = n.unzipBase64AsArray(l, 4);
break;

case "zlib":
m = (function(t) {
if (t.length % 4 != 0) return null;
for (var e = t.length / 4, i = window.Uint32Array ? new Uint32Array(e) : [], n = 0; n < e; n++) {
var r = 4 * n;
i[n] = t[r] + 256 * t[r + 1] + 65536 * t[r + 2] + t[r + 3] * (1 << 24);
}
return i;
})(new r.Inflate(n.Base64.decodeAsArray(l, 1)).decompress());
break;

case null:
case "":
if ("base64" === _) m = n.Base64.decodeAsArray(l, 4); else if ("csv" === _) {
m = [];
for (var f = l.split(","), d = 0; d < f.length; d++) m.push(parseInt(f[d]));
} else {
var p = e.getElementsByTagName("tile");
m = [];
for (var g = 0; g < p.length; g++) m.push(parseInt(p[g].getAttribute("gid")));
}
break;

default:
this.layerAttrs === cc.TMXLayerInfo.ATTRIB_NONE && cc.logID(7219);
}
m && (i._tiles = new Uint32Array(m));
var y = a(t);
if (y) {
for (var v = {}, x = 0; x < y.length; x++) v[y[x].getAttribute("name")] = y[x].getAttribute("value");
i.properties = v;
}
return i;
},
_parseObjectGroup: function(t) {
var e = new cc.TMXObjectGroupInfo();
e.name = t.getAttribute("name") || "";
e.offset = cc.v2(parseFloat(t.getAttribute("offsetx")), parseFloat(t.getAttribute("offsety")));
var i = t.getAttribute("opacity") || 1;
e._opacity = i ? parseInt(255 * parseFloat(i)) : 255;
var n = t.getAttribute("visible");
n && 0 === parseInt(n) && (e.visible = !1);
var r = t.getAttribute("color");
r && (e._color = cc.hexToColor(r));
var s = t.getAttribute("draworder");
s && (e._draworder = s);
var o = a(t);
if (o) {
for (var h = {}, l = 0; l < o.length; l++) h[o[l].getAttribute("name")] = o[l].getAttribute("value");
e.setProperties(h);
}
var c = t.getElementsByTagName("object");
if (c) for (var u = 0; u < c.length; u++) {
var _ = c[u], m = {};
m.id = _.getAttribute("id") || 0;
m.name = _.getAttribute("name") || "";
m.width = parseFloat(_.getAttribute("width")) || 0;
m.height = parseFloat(_.getAttribute("height")) || 0;
m.x = _.getAttribute("x") || 0;
m.y = _.getAttribute("y") || 0;
m.rotation = parseFloat(_.getAttribute("rotation")) || 0;
var f = a(_);
if (f) for (var d = 0; d < f.length; d++) m[f[d].getAttribute("name")] = f[d].getAttribute("value");
var p = _.getAttribute("visible");
m.visible = !(p && 0 === parseInt(p));
var g = _.getAttribute("gid");
if (g) {
m.gid = parseInt(g);
m.type = cc.TiledMap.TMXObjectType.IMAGE;
}
var y = _.getElementsByTagName("ellipse");
y && y.length > 0 && (m.type = cc.TiledMap.TMXObjectType.ELLIPSE);
var v = _.getElementsByTagName("polygon");
if (v && v.length > 0) {
m.type = cc.TiledMap.TMXObjectType.POLYGON;
var x = v[0].getAttribute("points");
x && (m.points = this._parsePointsString(x));
}
var A = _.getElementsByTagName("polyline");
if (A && A.length > 0) {
m.type = cc.TiledMap.TMXObjectType.POLYLINE;
var b = A[0].getAttribute("points");
b && (m.polylinePoints = this._parsePointsString(b));
}
m.type || (m.type = cc.TiledMap.TMXObjectType.RECT);
e._objects.push(m);
}
return e;
},
_parsePointsString: function(t) {
if (!t) return null;
for (var e = [], i = t.split(" "), n = 0; n < i.length; n++) {
var r = i[n].split(",");
e.push({
x: parseFloat(r[0]),
y: parseFloat(r[1])
});
}
return e;
},
getTileProperties: function() {
return this._tileProperties;
},
setTileProperties: function(t) {
this._tileProperties.push(t);
},
getCurrentString: function() {
return this.currentString;
},
setCurrentString: function(t) {
this.currentString = t;
}
};
var o = cc.TMXMapInfo.prototype;
s.getset(o, "mapWidth", o._getMapWidth, o._setMapWidth);
s.getset(o, "mapHeight", o._getMapHeight, o._setMapHeight);
s.getset(o, "tileWidth", o._getTileWidth, o._setTileWidth);
s.getset(o, "tileHeight", o._getTileHeight, o._setTileHeight);
cc.TMXLayerInfo.ATTRIB_NONE = 1;
cc.TMXLayerInfo.ATTRIB_BASE64 = 2;
cc.TMXLayerInfo.ATTRIB_GZIP = 4;
cc.TMXLayerInfo.ATTRIB_ZLIB = 8;
}), {
"../compression/ZipUtils": 21,
"../compression/zlib.min": 24,
"../core/platform/CCSAXParser": 160,
"../core/platform/js": 173
} ],
258: [ (function(t, e, i) {
var n = t("../core/components/CCRenderComponent"), r = (t("../core/renderer"), t("../core/renderer/render-engine").SpriteMaterial), s = cc.Class({
name: "cc.TiledLayer",
extends: n,
ctor: function() {
this._tiles = [];
this._texGrids = [];
this._textures = [];
this._spriteTiles = {};
this._tiledTiles = [];
this._layerName = "";
this._layerOrientation = null;
},
getLayerName: function() {
return this._layerName;
},
setLayerName: function(t) {
this._layerName = t;
},
getProperty: function(t) {
return this._properties[t];
},
getPositionAt: function(t, e) {
var i = void 0;
if (void 0 !== e) {
i = Math.floor(t);
e = Math.floor(e);
} else {
i = Math.floor(t.x);
e = Math.floor(t.y);
}
var n = void 0;
switch (this._layerOrientation) {
case cc.TiledMap.Orientation.ORTHO:
n = this._positionForOrthoAt(i, e);
break;

case cc.TiledMap.Orientation.ISO:
n = this._positionForIsoAt(i, e);
break;

case cc.TiledMap.Orientation.HEX:
n = this._positionForHexAt(i, e);
}
return n;
},
_positionForIsoAt: function(t, e) {
return cc.v2(this._mapTileSize.width / 2 * (this._layerSize.width + t - e - 1), this._mapTileSize.height / 2 * (2 * this._layerSize.height - t - e - 2));
},
_positionForOrthoAt: function(t, e) {
return cc.v2(t * this._mapTileSize.width, (this._layerSize.height - e - 1) * this._mapTileSize.height);
},
_positionForHexAt: function(t, e) {
var i = void 0, n = this._tileset.tileOffset, r = this._staggerIndex === cc.TiledMap.StaggerIndex.STAGGERINDEX_ODD ? 1 : -1;
switch (this._staggerAxis) {
case cc.TiledMap.StaggerAxis.STAGGERAXIS_Y:
var s = 0;
e % 2 == 1 && (s = this._mapTileSize.width / 2 * r);
i = cc.v2(t * this._mapTileSize.width + s + n.x, (this._layerSize.height - e - 1) * (this._mapTileSize.height - (this._mapTileSize.height - this._hexSideLength) / 2) - n.y);
break;

case cc.TiledMap.StaggerAxis.STAGGERAXIS_X:
var a = 0;
t % 2 == 1 && (a = this._mapTileSize.height / 2 * -r);
i = cc.v2(t * (this._mapTileSize.width - (this._mapTileSize.width - this._hexSideLength) / 2) + n.x, (this._layerSize.height - e - 1) * this._mapTileSize.height + a - n.y);
break;

default:
i = cc.v2(0, 0);
}
return i;
},
setTileGIDAt: function(t, e, i, n) {
if (void 0 === e) throw new Error("_ccsg.TMXLayer.setTileGID(): pos should be non-null");
var r = void 0;
if (void 0 === n && e instanceof cc.Vec2) {
r = e;
n = i;
} else r = cc.v2(e, i);
r.x = Math.floor(r.x);
r.y = Math.floor(r.y);
if (r.x >= this._layerSize.width || r.y >= this._layerSize.height || r.x < 0 || r.y < 0) throw new Error("CCTiledLayer.setTileGID(): invalid position");
if (this._tiles) if (0 !== t && t < this._tileset.firstGid) cc.logID(7207, t); else {
n = n || 0;
var s = this.getTileFlagsAt(r);
if (this.getTileGIDAt(r) !== t || s !== n) {
var a = (t | n) >>> 0;
this._updateTileForGID(a, r);
}
} else cc.logID(7206);
},
_updateTileForGID: function(t, e) {
if (this._texGrids[t]) {
var i = 0 | e.x + e.y * this._layerSize.width;
i < this._tiles.length && (this._tiles[i] = t);
}
},
getTileGIDAt: function(t, e) {
if (void 0 === t) throw new Error("_ccsg.TMXLayer.getTileGIDAt(): pos should be non-null");
var i = t;
if (void 0 === e) {
i = t.x;
e = t.y;
}
if (i >= this._layerSize.width || e >= this._layerSize.height || i < 0 || e < 0) throw new Error("_ccsg.TMXLayer.getTileGIDAt(): invalid position");
if (!this._tiles) {
cc.logID(7205);
return null;
}
var n = Math.floor(i) + Math.floor(e) * this._layerSize.width;
return (this._tiles[n] & cc.TiledMap.TileFlag.FLIPPED_MASK) >>> 0;
},
getTileFlagsAt: function(t, e) {
if (!t) throw new Error("_ccsg.TMXLayer.getTileFlagsAt(): pos should be non-null");
void 0 !== e && (t = cc.v2(t, e));
if (t.x >= this._layerSize.width || t.y >= this._layerSize.height || t.x < 0 || t.y < 0) throw new Error("_ccsg.TMXLayer.getTileFlagsAt(): invalid position");
if (!this._tiles) {
cc.logID(7208);
return null;
}
var i = Math.floor(t.x) + Math.floor(t.y) * this._layerSize.width;
return (this._tiles[i] & cc.TiledMap.TileFlag.FLIPPED_ALL) >>> 0;
},
getTiledTileAt: function(t, e) {
if (void 0 === t) throw new Error("_ccsg.TMXLayer.getTileAt(): pos should be non-null");
var i = t;
if (void 0 === e) {
i = t.x;
e = t.y;
}
if (i >= this._layerSize.width || e >= this._layerSize.height || i < 0 || e < 0) throw new Error("_ccsg.TMXLayer.getTileAt(): invalid position");
if (!this._tiles) {
cc.logID(7204);
return null;
}
var n = Math.floor(i) + Math.floor(e) * this._layerSize.width;
return this._tiledTiles[n];
},
setTiledTileAt: function(t, e, i) {
if (void 0 === t) throw new Error("_ccsg.TMXLayer.getTileAt(): pos should be non-null");
var n = t;
if (void 0 === e) {
n = t.x;
e = t.y;
}
if (n >= this._layerSize.width || e >= this._layerSize.height || n < 0 || e < 0) throw new Error("_ccsg.TMXLayer.getTileAt(): invalid position");
if (!this._tiles) {
cc.logID(7204);
return null;
}
var r = Math.floor(n) + Math.floor(e) * this._layerSize.width;
return this._tiledTiles[r] = i;
},
getTexture: function() {
return this._texture;
},
setTexture: function(t) {
this._texture = t;
this._activateMaterial();
},
getLayerSize: function() {
return this._layerSize;
},
getMapTileSize: function() {
return this._mapTileSize;
},
getTileSet: function() {
return this._tileset;
},
setTileSet: function(t) {
this._tileset = t;
},
getLayerOrientation: function() {
return this._layerOrientation;
},
getProperties: function() {
return this._properties;
},
_init: function(t, e, i) {
var n = e._layerSize;
this._layerName = e.name;
this._tiles = e._tiles;
this._properties = e.properties;
this._layerSize = n;
this._minGID = e._minGID;
this._maxGID = e._maxGID;
this._opacity = e._opacity;
this._staggerAxis = i.getStaggerAxis();
this._staggerIndex = i.getStaggerIndex();
this._hexSideLength = i.getHexSideLength();
this._tileset = t;
this._layerOrientation = i.orientation;
this._mapTileSize = i.getTileSize();
var r = i._tilesets;
if (r) {
this._textures.length = r.length;
this._texGrids.length = 0;
for (var s = 0, a = r.length; s < a; ++s) {
var o = r[s], h = o.sourceImage;
this._textures[s] = h;
this._fillTextureGrids(o, s);
t === o && (this._texture = h);
}
}
this._offset = this._calculateLayerOffset(e.offset);
if (this.layerOrientation === cc.TiledMap.Orientation.HEX) {
var l = 0, c = 0;
if (this._staggerAxis === cc.TiledMap.StaggerAxis.STAGGERAXIS_X) {
c = i._tileSize.height * (this._layerSize.height + .5);
l = (i._tileSize.width + this._hexSideLength) * Math.floor(this._layerSize.width / 2) + i._tileSize.width * (this._layerSize.width % 2);
} else {
l = i._tileSize.width * (this._layerSize.width + .5);
c = (i._tileSize.height + this._hexSideLength) * Math.floor(this._layerSize.height / 2) + i._tileSize.height * (this._layerSize.height % 2);
}
this.node.setContentSize(l, c);
} else this.node.setContentSize(this._layerSize.width * this._mapTileSize.width, this._layerSize.height * this._mapTileSize.height);
this._useAutomaticVertexZ = !1;
this._vertexZvalue = 0;
this._activateMaterial();
},
_calculateLayerOffset: function(t) {
var e = cc.v2(0, 0);
switch (this.layerOrientation) {
case cc.TiledMap.Orientation.ORTHO:
e = cc.v2(t.x * this._mapTileSize.width, -t.y * this._mapTileSize.height);
break;

case cc.TiledMap.Orientation.ISO:
e = cc.v2(this._mapTileSize.width / 2 * (t.x - t.y), this._mapTileSize.height / 2 * (-t.x - t.y));
break;

case cc.TiledMap.Orientation.HEX:
if (this._staggerAxis === cc.TiledMap.StaggerAxis.STAGGERAXIS_Y) {
var i = this._staggerIndex === cc.TiledMap.StaggerIndex.STAGGERINDEX_EVEN ? this._mapTileSize.width / 2 : 0;
e = cc.v2(t.x * this._mapTileSize.width + i, -t.y * (this._mapTileSize.height - (this._mapTileSize.width - this._hexSideLength) / 2));
} else if (this._staggerAxis === cc.TiledMap.StaggerAxis.STAGGERAXIS_X) {
var n = this._staggerIndex === cc.TiledMap.StaggerIndex.STAGGERINDEX_ODD ? this._mapTileSize.height / 2 : 0;
e = cc.v2(t.x * (this._mapTileSize.width - (this._mapTileSize.width - this._hexSideLength) / 2), -t.y * this._mapTileSize.height + n);
}
}
return e;
},
_fillTextureGrids: function(t, e) {
var i = this._textures[e];
if (i.loaded) {
if (!t.imageSize.width || !t.imageSize.height) {
t.imageSize.width = i.width;
t.imageSize.height = i.height;
}
for (var n = t._tileSize.width, r = t._tileSize.height, s = i.width, a = i.height, o = t.spacing, h = t.margin, l = Math.floor((s - 2 * h + o) / (n + o)), c = Math.floor((a - 2 * h + o) / (r + o)) * l, u = t.firstGid, _ = t.firstGid + c, m = this._texGrids, f = null, d = !!m[u], p = cc.macro.FIX_ARTIFACTS_BY_STRECHING_TEXEL_TMX ? .5 : 0; u < _; ++u) {
d && !m[u] && (d = !1);
if (!d && m[u]) break;
f = {
texId: e,
x: 0,
y: 0,
width: n,
height: r,
t: 0,
l: 0,
r: 0,
b: 0
};
t.rectForGID(u, f);
f.x += p;
f.y += p;
f.width -= 2 * p;
f.height -= 2 * p;
f.t = f.y / a;
f.l = f.x / s;
f.r = (f.x + f.width) / s;
f.b = (f.y + f.height) / a;
m[u] = f;
}
} else i.once("load", (function() {
this._fillTextureGrids(t, e);
}), this);
},
_activateMaterial: function() {
var t = this._material;
t || ((t = this._material = new r()).useColor = !1);
if (this._texture) {
t.texture = this._texture;
this.markForUpdateRenderData(!0);
this.markForRender(!0);
} else this.disableRender();
this._updateMaterial(t);
}
});
cc.TiledLayer = e.exports = s;
}), {
"../core/components/CCRenderComponent": 75,
"../core/renderer": 194,
"../core/renderer/render-engine": 195
} ],
259: [ (function(t, e, i) {
t("./CCTMXXMLParser");
t("./CCTiledMapAsset");
t("./CCTiledLayer");
t("./CCTiledTile");
t("./CCTiledObjectGroup");
var n = cc.Enum({
ORTHO: 0,
HEX: 1,
ISO: 2
}), r = cc.Enum({
NONE: 0,
MAP: 1,
LAYER: 2,
OBJECTGROUP: 3,
OBJECT: 4,
TILE: 5
}), s = cc.Enum({
HORIZONTAL: 2147483648,
VERTICAL: 1073741824,
DIAGONAL: 536870912,
FLIPPED_ALL: 3758096384,
FLIPPED_MASK: 536870911
}), a = cc.Enum({
STAGGERAXIS_X: 0,
STAGGERAXIS_Y: 1
}), o = cc.Enum({
STAGGERINDEX_ODD: 0,
STAGGERINDEX_EVEN: 1
}), h = cc.Enum({
RECT: 0,
ELLIPSE: 1,
POLYGON: 2,
POLYLINE: 3,
IMAGE: 4
}), l = cc.Class({
name: "cc.TiledMap",
extends: cc.Component,
editor: !1,
ctor: function() {
this._layers = [];
this._groups = [];
this._properties = [];
this._tileProperties = [];
this._mapSize = cc.size(0, 0);
this._tileSize = cc.size(0, 0);
},
statics: {
Orientation: n,
Property: r,
TileFlag: s,
StaggerAxis: a,
StaggerIndex: o,
TMXObjectType: h
},
properties: {
_tmxFile: {
default: null,
type: cc.TiledMapAsset
},
tmxAsset: {
get: function() {
return this._tmxFile;
},
set: function(t, e) {
if (this._tmxFile !== t) {
this._tmxFile = t;
this._applyFile();
}
},
type: cc.TiledMapAsset
}
},
getMapSize: function() {
return this._mapSize;
},
getTileSize: function() {
return this._tileSize;
},
getMapOrientation: function() {
return this._mapOrientation;
},
getObjectGroups: function() {
return this._groups;
},
getObjectGroup: function(t) {
for (var e = this._groups, i = 0, n = e.length; i < n; i++) {
var r = e[i];
if (r && r.getGroupName() === t) return r;
}
return null;
},
getProperties: function() {
return this._properties;
},
getLayers: function() {
return this._layers;
},
getLayer: function(t) {
for (var e = this._layers, i = 0, n = e.length; i < n; i++) {
var r = e[i];
if (r && r.getLayerName() === t) return r;
}
return null;
},
getProperty: function(t) {
return this._properties[t.toString()];
},
getPropertiesForGID: function(t) {
return this._tileProperties[t];
},
onEnable: function() {
this._tmxFile && this._applyFile();
this.node.on(cc.Node.EventType.ANCHOR_CHANGED, this._syncAnchorPoint, this);
},
onDisable: function() {
this.node.off(cc.Node.EventType.ANCHOR_CHANGED, this._syncAnchorPoint, this);
},
_applyFile: function() {
var t = this._tmxFile;
if (t) {
for (var e = t.textures, i = t.textureNames, n = {}, r = 0; r < e.length; ++r) n[i[r]] = e[r];
for (var s = t.tsxFileNames, a = t.tsxFiles, o = {}, h = 0; h < s.length; ++h) s[h].length > 0 && (o[s[h]] = a[h].text);
var l = new cc.TMXMapInfo(t.tmxXmlStr, o, n), c = l.getTilesets();
c && 0 !== c.length || cc.logID(7213);
this._buildWithMapInfo(l);
}
},
_syncAnchorPoint: function() {
for (var t = this.node.getAnchorPoint(), e = 0, i = this._layers.length; e < i; e++) this._layers[e].node.setAnchorPoint(t);
},
_buildWithMapInfo: function(t) {
this._mapSize = t.getMapSize();
this._tileSize = t.getTileSize();
this._mapOrientation = t.orientation;
this._properties = t.properties;
this._tileProperties = t.getTileProperties();
for (var e = this._layers, i = 0, n = e.length; i < n; i++) e[i].node.removeFromParent();
e.length = 0;
for (var r = this._groups, s = 0, a = r.length; s < a; s++) r[s].node.removeFromParent();
r.length = 0;
var o = this.node, h = t.getAllChildren();
if (h && h.length > 0) for (var l = 0, c = h.length; l < c; l++) {
var u = h[l], _ = u.name, m = this.node.getChildByName(_);
if (!m) {
(m = new cc.Node()).name = _;
o.addChild(m);
}
if (u instanceof cc.TMXLayerInfo && u.visible) {
var f = m.getComponent(cc.TiledLayer);
f || (f = m.addComponent(cc.TiledLayer));
var d = this._tilesetForLayer(u, t);
f._init(d, u, t);
u.ownTiles = !1;
this.node.width = Math.max(this.node.width, m.width);
this.node.height = Math.max(this.node.height, m.height);
e.push(f);
} else if (u instanceof cc.TMXObjectGroupInfo) {
var p = m.getComponent(cc.TiledObjectGroup);
p || (p = m.addComponent(cc.TiledObjectGroup));
p._init(u, t);
r.push(p);
}
}
this._syncAnchorPoint();
},
_tilesetForLayer: function(t, e) {
var i = t._layerSize, n = e.getTilesets();
if (n) for (var r = n.length - 1; r >= 0; r--) {
var s = n[r];
if (s) for (var a = 0; a < i.height; a++) for (var o = 0; o < i.width; o++) {
var h = o + i.width * a, l = t._tiles[h];
if (0 !== l && (l & cc.TiledMap.TileFlag.FLIPPED_MASK) >>> 0 >= s.firstGid) return s;
}
}
cc.logID(7215, t.name);
return null;
}
});
cc.TiledMap = e.exports = l;
cc.js.obsolete(cc.TiledMap.prototype, "cc.TiledMap.tmxFile", "tmxAsset", !0);
cc.js.get(cc.TiledMap.prototype, "mapLoaded", (function() {
cc.errorID(7203);
return [];
}), !1);
}), {
"./CCTMXXMLParser": 257,
"./CCTiledLayer": 258,
"./CCTiledMapAsset": 260,
"./CCTiledObjectGroup": 261,
"./CCTiledTile": 262
} ],
260: [ (function(t, e, i) {
var n = cc.Class({
name: "cc.TiledMapAsset",
extends: cc.Asset,
properties: {
tmxXmlStr: "",
textures: {
default: [],
type: [ cc.Texture2D ]
},
textureNames: [ cc.String ],
tsxFiles: [ cc.TextAsset ],
tsxFileNames: [ cc.String ]
},
statics: {
preventDeferredLoadDependents: !0
},
createNode: !1
});
cc.TiledMapAsset = n;
e.exports = n;
}), {} ],
261: [ (function(t, e, i) {
var n = cc.Class({
name: "cc.TiledObjectGroup",
extends: cc.Component,
getPositionOffset: function() {
return this._positionOffset;
},
getProperties: function() {
this._properties;
},
getGroupName: function() {
return this._groupName;
},
getProperty: function(t) {
return this._properties[t.toString()];
},
getObject: function(t) {
for (var e = 0, i = this._objects.length; e < i; e++) {
var n = this._objects[e];
if (n && n.name === t) return n;
}
return null;
},
getObjects: function() {
return this._objects;
},
_init: function(t, e) {
this._groupName = t.name;
this._positionOffset = t.offset;
this._mapInfo = e;
this._properties = t.getProperties();
var i = e._mapSize, n = e._tileSize, r = 0, s = 0;
if (e.orientation === cc.TiledMap.Orientation.HEX) if (e.getStaggerAxis() === cc.TiledMap.StaggerAxis.STAGGERAXIS_X) {
s = n.height * (i.height + .5);
r = (n.width + e.getHexSideLength()) * Math.floor(i.width / 2) + n.width * (i.width % 2);
} else {
r = n.width * (i.width + .5);
s = (n.height + e.getHexSideLength()) * Math.floor(i.height / 2) + n.height * (i.height % 2);
} else {
r = i.width * n.width;
s = i.height * n.height;
}
this.node.setContentSize(r, s);
for (var a = t._objects, o = 0, h = a.length; o < h; o++) {
var l = a[o];
if (cc.TiledMap.Orientation.ISO !== this._mapOrientation) l.y = s - l.y; else {
var c = e.getMapSize(), u = e.getTileSize(), _ = (this._container.offset.x + offset.x) / u.width * 2, m = (this._container.offset.y + offset.y) / u.height;
l.x = u.width / 2 * (c.width + _ - m);
l.y = u.height / 2 * (2 * c.height - _ - m);
}
}
this._objects = a;
}
});
cc.TiledObjectGroup = e.exports = n;
}), {} ],
262: [ (function(t, e, i) {
cc.Class({
name: "cc.TiledTile",
extends: cc.Component,
editor: !1,
properties: {
_x: 0,
_y: 0,
_gid: 0,
_layer: null,
x: {
get: function() {
return this._x;
},
set: function(t) {
if (t !== this._x) {
this._resetTile();
this._x = t;
this._updateInfo();
}
}
},
y: {
get: function() {
return this._y;
},
set: function(t) {
if (t !== this._y) {
this._resetTile();
this._y = t;
this._updateInfo();
}
}
},
gid: {
get: function() {
return this._gid;
},
set: function(t) {
this._gid = t;
}
},
layer: {
type: cc.TiledLayer,
get: function() {
return this._layer;
},
set: function(t) {
if (t !== this._layer) {
this._resetTile();
this._layer = t;
this._updateInfo();
}
}
}
},
onEnable: function() {
this._layer && this._layer.setTiledTileAt(this._x, this._y, this);
},
onDisable: function() {
this._resetTile();
},
_resetTile: function() {
this._layer && this._layer.getTiledTileAt(this._x, this._y) === this && this._layer.setTiledTileAt(this._x, this._y, null);
},
_updateInfo: function() {
if (this._layer) {
var t = this._x, e = this._y;
if (this._layer.getTiledTileAt(t, e)) cc.warn("There is already a TiledTile at [%s, %s]", t, e); else {
this.node.setPosition(this._layer.getPositionAt(t, e));
this._gid = this._layer.getTileGIDAt(t, e);
this._layer.setTiledTileAt(t, e, this);
}
}
}
});
}), {} ],
263: [ (function(t, e, i) {
t("./CCTiledMap");
t("./tmx-layer-assembler");
}), {
"./CCTiledMap": 259,
"./tmx-layer-assembler": 264
} ],
264: [ (function(t, e, i) {
var n = t("./CCTiledLayer"), r = t("./CCTiledMap"), s = (t("../core/platform/js"), 
t("../core/renderer/render-engine")), a = t("../core/renderer/render-flow"), o = t("../../cocos2d/core/renderer/webgl/vertex-format").vfmtPosUvColor, h = r.Orientation, l = r.TileFlag, c = l.FLIPPED_MASK, u = r.StaggerAxis, _ = r.StaggerIndex, m = s.math, f = m.mat4, d = m.vec3, p = f.create(), g = f.create(), y = d.create(), v = {
updateRenderData: function(t) {
var e = t._renderData;
e || (e = t._renderData = t.requestRenderData());
var i = t.node._contentSize, n = t.node._anchorPoint;
e.updateSizeNPivot(i.width, i.height, n.x, n.y);
e.material = t.getMaterial();
this.updateVertices(t);
},
fillBuffers: function(t, e) {
var i = t._renderData, n = i._data, r = e.getBuffer("mesh", o), s = r.byteOffset >> 2, h = r._vData, l = r._uintVData, c = i.vertexCount, u = r._iData, _ = r.indiceOffset, m = r.vertexOffset;
r.request(c, i.indiceCount);
for (var f = 0, d = i.vertexCount; f < d; f++) {
var p = n[f];
h[s++] = p.x;
h[s++] = p.y;
h[s++] = p.u;
h[s++] = p.v;
l[s++] = p.color;
}
for (var g = 0, y = i.indiceCount; g < y; g += 6) {
u[_++] = m;
u[_++] = m + 1;
u[_++] = m + 2;
u[_++] = m + 1;
u[_++] = m + 3;
u[_++] = m + 2;
m += 4;
}
t.node._renderFlag |= a.FLAG_UPDATE_RENDER_DATA;
},
updateVertices: function(t) {
var e = t.node, i = t._renderData, n = i._data, r = e._color._val;
i.dataLength = i.vertexCount = i.indiceCount = 0;
var s = t._layerOrientation;
if (t._tiles && t._tileset) {
var a = e._anchorPoint.x * e._contentSize.width, o = e._anchorPoint.y * e._contentSize.height;
f.copy(p, e._worldMatrix);
d.set(y, -a, -o, 0);
f.translate(p, p, y);
var m = p.m00, v = p.m01, x = p.m04, A = p.m05, b = p.m12, T = p.m13, C = t._mapTileSize.width, w = t._mapTileSize.height, S = t._tileset._tileSize.width, E = t._tileset._tileSize.height, D = S - C, M = E - w, I = cc.winSize.width, P = cc.winSize.height, B = t._layerSize.height, R = t._layerSize.width, L = t._texGrids, O = t._tiledTiles, F = e._position.x + t._offset.x, N = e._position.y + t._offset.y, k = 0, z = 0, G = R, U = B, V = m, j = A, W = F * m + N * x + b, H = F * v + N * A + T, q = S * m, X = E * A, Y = cc.macro.ENABLE_TILEDMAP_CULLING;
if (Y) {
var J = cc.Camera.findCamera(t.node);
if (J) {
J.getWorldToCameraMatrix(g);
f.mul(p, p, g);
V = p.m00;
j = p.m05;
W = F * V + N * p.m04 + p.m12;
H = F * p.m01 + N * j + p.m13;
q = S * V;
X = E * j;
}
if (s === h.ORTHO) {
f.invert(p, p);
var Z = cc.visibleRect, K = p.m00, Q = p.m01, $ = p.m04, tt = p.m05, et = p.m12, it = p.m13, nt = Z.topLeft.x * K + Z.topLeft.y * $ + et, rt = Z.topLeft.x * Q + Z.topLeft.y * tt + it, st = Z.bottomLeft.x * K + Z.bottomLeft.y * $ + et, at = Z.bottomLeft.x * Q + Z.bottomLeft.y * tt + it, ot = Z.topRight.x * K + Z.topRight.y * $ + et, ht = Z.topRight.x * Q + Z.topRight.y * tt + it, lt = Z.bottomRight.x * K + Z.bottomRight.y * $ + et, ct = Z.bottomRight.x * Q + Z.bottomRight.y * tt + it, ut = Math.min(nt, st, ot, lt), _t = Math.max(nt, st, ot, lt), mt = Math.min(rt, at, ht, ct), ft = Math.max(rt, at, ht, ct);
k = Math.floor(ut / C);
z = B - Math.ceil(ft / w);
G = Math.ceil((_t + D) / C);
U = B - Math.floor((mt - M) / w);
k < 0 && (k = 0);
z < 0 && (z = 0);
G > R && (G = R);
U > B && (U = B);
}
}
var dt = z * R, pt = void 0, gt = void 0, yt = void 0, vt = void 0, xt = void 0, At = void 0, bt = void 0, Tt = void 0, Ct = void 0, wt = void 0, St = void 0, Et = void 0, Dt = void 0;
if (s === h.HEX) {
var Mt = t._hexSideLength;
Ct = t._staggerAxis;
wt = t._tileset.tileOffset;
Dt = t._staggerIndex === _.STAGGERINDEX_ODD ? 1 : -1;
St = Ct === u.STAGGERAXIS_X ? (C - Mt) / 2 : 0;
Et = Ct === u.STAGGERAXIS_Y ? (w - Mt) / 2 : 0;
}
for (var It = 0, Pt = void 0, Bt = void 0, Rt = void 0, Lt = void 0, Ot = void 0, Ft = void 0, Nt = void 0, kt = z; kt < U; ++kt) {
for (var zt = k; zt < G; ++zt) {
var Gt = dt + zt, Ut = !1, Vt = !1, jt = O[Gt];
if (gt = L[((pt = jt ? jt.gid : t._tiles[Gt]) & c) >>> 0]) {
switch (s) {
case h.ORTHO:
vt = zt * C;
xt = (B - kt - 1) * w;
break;

case h.ISO:
vt = C / 2 * (R + zt - kt - 1);
xt = w / 2 * (2 * B - zt - kt - 2);
break;

case h.HEX:
vt = zt * (C - St) + (Ct === u.STAGGERAXIS_Y && kt % 2 == 1 ? C / 2 * Dt : 0) + wt.x;
xt = (B - kt - 1) * (w - Et) + (Ct === u.STAGGERAXIS_X && zt % 2 == 1 ? w / 2 * -Dt : 0) - wt.y;
}
if (jt) {
var Wt = jt.node;
Nt = r;
r = Wt.color._val;
Pt = m;
Bt = v;
Rt = x;
Lt = A;
Ot = b;
Ft = T;
Wt._updateLocalMatrix();
f.copy(p, Wt._mat4_temp);
d.set(y, -vt, -xt, 0);
f.translate(p, p, y);
f.multiply(p, e._worldMatrix, p);
m = p.m00;
v = p.m01;
x = p.m04;
A = p.m05;
b = p.m12;
T = p.m13;
}
At = vt + S;
yt = xt + E;
if (Y && s === h.ISO) {
if ((bt = H + xt * j) > P + X) {
zt += Math.floor(2 * (bt - P) / X) - 1;
continue;
}
if ((Tt = W + At * V) < -q) {
zt += Math.floor(2 * -Tt / q) - 1;
continue;
}
if (W + vt * V > I || H + yt * j < 0) {
zt = G;
continue;
}
}
if (pt > l.DIAGONAL) {
Ut = (pt & l.HORIZONTAL) >>> 0;
Vt = (pt & l.VERTICAL) >>> 0;
}
i.vertexCount += 4;
i.indiceCount += 6;
i.dataLength = i.vertexCount;
n[It].x = vt * m + yt * x + b;
n[It].y = vt * v + yt * A + T;
n[It].u = Ut ? gt.r : gt.l;
n[It].v = Vt ? gt.b : gt.t;
n[It].color = r;
n[++It].x = vt * m + xt * x + b;
n[It].y = vt * v + xt * A + T;
n[It].u = Ut ? gt.r : gt.l;
n[It].v = Vt ? gt.t : gt.b;
n[It].color = r;
n[++It].x = At * m + yt * x + b;
n[It].y = At * v + yt * A + T;
n[It].u = Ut ? gt.l : gt.r;
n[It].v = Vt ? gt.b : gt.t;
n[It].color = r;
n[++It].x = At * m + xt * x + b;
n[It].y = At * v + xt * A + T;
n[It].u = Ut ? gt.l : gt.r;
n[It].v = Vt ? gt.t : gt.b;
n[It].color = r;
It++;
if (jt) {
r = Nt;
m = Pt;
v = Bt;
x = Rt;
A = Lt;
b = Ot;
T = Ft;
}
}
}
dt += R;
}
}
}
};
e.exports = n._assembler = v;
}), {
"../../cocos2d/core/renderer/webgl/vertex-format": 221,
"../core/platform/js": 173,
"../core/renderer/render-engine": 195,
"../core/renderer/render-flow": 196,
"./CCTiledLayer": 258,
"./CCTiledMap": 259
} ],
265: [ (function(t, e, i) {
var n = t("./video-player-impl"), r = n.EventType, s = cc.Enum({
REMOTE: 0,
LOCAL: 1
}), a = cc.Class({
name: "cc.VideoPlayer",
extends: cc.Component,
editor: !1,
properties: {
_resourceType: s.REMOTE,
resourceType: {
tooltip: !1,
type: s,
set: function(t) {
this._resourceType = t;
this._updateVideoSource();
},
get: function() {
return this._resourceType;
}
},
_remoteURL: "",
remoteURL: {
tooltip: !1,
type: cc.String,
set: function(t) {
this._remoteURL = t;
this._updateVideoSource();
},
get: function() {
return this._remoteURL;
}
},
_clip: {
default: null,
type: cc.Asset
},
clip: {
tooltip: !1,
get: function() {
return this._clip;
},
set: function(t) {
this._clip = t;
this._updateVideoSource();
},
type: cc.Asset
},
currentTime: {
tooltip: !1,
type: cc.Float,
set: function(t) {
this._impl && this._impl.seekTo(t);
},
get: function() {
return this._impl ? this._impl.currentTime() : -1;
}
},
_volume: 1,
volume: {
get: function() {
return this._volume;
},
set: function(t) {
this._volume = t;
this.isPlaying() && !this._mute && this._syncVolume();
},
range: [ 0, 1 ],
type: cc.Float,
tooltip: !1
},
_mute: !1,
mute: {
get: function() {
return this._mute;
},
set: function(t) {
this._mute = t;
this._syncVolume();
},
tooltip: !1
},
keepAspectRatio: {
tooltip: !1,
default: !0,
type: cc.Boolean,
notify: function() {
this._impl.setKeepAspectRatioEnabled(this.keepAspectRatio);
}
},
isFullscreen: {
tooltip: !1,
default: !1,
type: cc.Boolean,
notify: function() {
this._impl.setFullScreenEnabled(this.isFullscreen);
}
},
videoPlayerEvent: {
default: [],
type: cc.Component.EventHandler
}
},
statics: {
EventType: r,
ResourceType: s
},
ctor: function() {
this._impl = new n();
},
_syncVolume: function() {
var t = this._impl;
if (t) {
var e = this._mute ? 0 : this._volume;
t.setVolume(e);
}
},
_updateVideoSource: function() {
var t = "";
this.resourceType === s.REMOTE ? t = this.remoteURL : this._clip && (t = this._clip.nativeUrl || "");
t && cc.loader.md5Pipe && (t = cc.loader.md5Pipe.transformURL(t));
this._impl.setURL(t);
},
onLoad: function() {
var t = this._impl;
if (t) {
t.createDomElementIfNeeded();
this._updateVideoSource();
t.seekTo(this.currentTime);
t.setKeepAspectRatioEnabled(this.keepAspectRatio);
t.setFullScreenEnabled(this.isFullscreen);
this.pause();
t.setEventListener(r.PLAYING, this.onPlaying.bind(this));
t.setEventListener(r.PAUSED, this.onPasued.bind(this));
t.setEventListener(r.STOPPED, this.onStopped.bind(this));
t.setEventListener(r.COMPLETED, this.onCompleted.bind(this));
t.setEventListener(r.META_LOADED, this.onMetaLoaded.bind(this));
t.setEventListener(r.CLICKED, this.onClicked.bind(this));
t.setEventListener(r.READY_TO_PLAY, this.onReadyToPlay.bind(this));
}
},
onRestore: function() {
this._impl || (this._impl = new WebViewImpl());
},
onEnable: function() {
this._impl && this._impl.enable();
},
onDisable: function() {
this._impl && this._impl.disable();
},
onDestroy: function() {
if (this._impl) {
this._impl.destroy();
this._impl = null;
}
},
update: function(t) {
this._impl && this._impl.updateMatrix(this.node);
},
onReadyToPlay: function() {
cc.Component.EventHandler.emitEvents(this.videoPlayerEvent, this, r.READY_TO_PLAY);
this.node.emit("ready-to-play", this);
},
onMetaLoaded: function() {
cc.Component.EventHandler.emitEvents(this.videoPlayerEvent, this, r.META_LOADED);
this.node.emit("meta-loaded", this);
},
onClicked: function() {
cc.Component.EventHandler.emitEvents(this.videoPlayerEvent, this, r.CLICKED);
this.node.emit("clicked", this);
},
onPlaying: function() {
cc.Component.EventHandler.emitEvents(this.videoPlayerEvent, this, r.PLAYING);
this.node.emit("playing", this);
},
onPasued: function() {
cc.Component.EventHandler.emitEvents(this.videoPlayerEvent, this, r.PAUSED);
this.node.emit("paused", this);
},
onStopped: function() {
cc.Component.EventHandler.emitEvents(this.videoPlayerEvent, this, r.STOPPED);
this.node.emit("stopped", this);
},
onCompleted: function() {
cc.Component.EventHandler.emitEvents(this.videoPlayerEvent, this, r.COMPLETED);
this.node.emit("completed", this);
},
play: function() {
if (this._impl) {
this._syncVolume();
this._impl.play();
}
},
resume: function() {
if (this._impl) {
this._syncVolume();
this._impl.resume();
}
},
pause: function() {
this._impl && this._impl.pause();
},
stop: function() {
this._impl && this._impl.stop();
},
getDuration: function() {
return this._impl ? this._impl.duration() : -1;
},
isPlaying: function() {
return !!this._impl && this._impl.isPlaying();
}
});
cc.VideoPlayer = e.exports = a;
}), {
"./video-player-impl": 266
} ],
266: [ (function(t, e, i) {
var n = t("../core/platform/utils"), r = t("../core/platform/CCSys"), s = t("../core/renderer/render-engine").math.mat4.create(), a = cc.Class({
name: "VideoPlayerImpl",
ctor: function() {
this._EventList = {};
this._video = null;
this._url = "";
this._loaded = !1;
this._visible = !1;
this._played = !1;
this._playing = !1;
this._ignorePause = !1;
this._forceUpdate = !0;
this._m00 = 0;
this._m01 = 0;
this._m04 = 0;
this._m05 = 0;
this._m12 = 0;
this._m13 = 0;
this._w = 0;
this._h = 0;
this.__eventListeners = {};
},
_bindEvent: function() {
var t = this._video, e = this, i = this.__eventListeners;
i.loadedmetadata = function() {
e._dispatchEvent(a.EventType.META_LOADED);
};
i.ended = function() {
if (this._video === t) {
e._playing = !1;
e._dispatchEvent(a.EventType.COMPLETED);
}
};
i.play = function() {
if (e._video === t) {
e._playing = !0;
e._dispatchEvent(a.EventType.PLAYING);
}
};
i.pause = function() {
if (!e._ignorePause && e._video === t) {
e._playing = !1;
e._dispatchEvent(a.EventType.PAUSED);
}
};
i.click = function() {
e._dispatchEvent(a.EventType.CLICKED);
};
t.addEventListener("loadedmetadata", i.loadedmetadata);
t.addEventListener("ended", i.ended);
t.addEventListener("play", i.play);
t.addEventListener("pause", i.pause);
t.addEventListener("click", i.click);
i.onCanPlay = function() {
if (!this._loaded) {
var t = this._video;
if (4 === t.readyState) {
this._loaded = !0;
t.currentTime = 0;
this._dispatchEvent(a.EventType.READY_TO_PLAY);
this._updateVisibility();
}
}
}.bind(this);
t.addEventListener("canplay", i.onCanPlay);
t.addEventListener("canplaythrough", i.onCanPlay);
t.addEventListener("suspend", i.onCanPlay);
},
_updateVisibility: function() {
if (this._video) {
var t = this._video;
if (this._visible) t.style.visibility = "visible"; else {
t.style.visibility = "hidden";
t.pause();
this._playing = !1;
}
this._forceUpdate = !0;
}
},
_updateSize: function(t, e) {
var i = this._video;
if (i) {
i.style.width = t + "px";
i.style.height = e + "px";
}
},
_createDom: function() {
var t = document.createElement("video");
t.style.position = "absolute";
t.style.bottom = "0px";
t.style.left = "0px";
t.className = "cocosVideo";
t.setAttribute("preload", "auto");
t.setAttribute("webkit-playsinline", "");
t.setAttribute("playsinline", "");
var e = cc.winSize.width > cc.winSize.height ? "landscape" : "portrait";
t.setAttribute("x5-playsinline", "");
t.setAttribute("x5-video-player-type", "h5");
t.setAttribute("x5-video-orientation", e);
this._video = t;
cc.game.container.appendChild(t);
},
createDomElementIfNeeded: function() {
this._video || this._createDom();
},
removeDom: function() {
var t = this._video;
if (t) {
n.contains(cc.game.container, t) && cc.game.container.removeChild(t);
var e = this.__eventListeners;
t.removeEventListener("loadedmetadata", e.loadedmetadata);
t.removeEventListener("ended", e.ended);
t.removeEventListener("play", e.play);
t.removeEventListener("pause", e.pause);
t.removeEventListener("click", e.click);
t.removeEventListener("canplay", e.onCanPlay);
t.removeEventListener("canplaythrough", e.onCanPlay);
t.removeEventListener("suspend", e.onCanPlay);
e.loadedmetadata = null;
e.ended = null;
e.play = null;
e.pause = null;
e.click = null;
e.onCanPlay = null;
}
this._video = null;
this._url = "";
},
setURL: function(t) {
var e, i = void 0;
if (this._url !== t) {
this._url = t;
cc.loader.resPath && !/^http/.test(t) && (t = cc.path.join(cc.loader.resPath, t));
this.removeDom();
this.createDomElementIfNeeded();
this._bindEvent();
var n = this._video;
n.style.visibility = "hidden";
this._loaded = !1;
this._played = !1;
this._playing = !1;
(i = document.createElement("source")).src = t;
n.appendChild(i);
e = cc.path.extname(t);
for (var r = a._polyfill, s = 0; s < r.canPlayType.length; s++) if (e !== r.canPlayType[s]) {
(i = document.createElement("source")).src = t.replace(e, r.canPlayType[s]);
n.appendChild(i);
}
}
},
getURL: function() {
return this._url;
},
play: function() {
var t = this, e = this._video;
if (e && this._visible) {
this._played = !0;
if (!this._playing) if (a._polyfill.autoplayAfterOperation) (function() {
var i = t;
setTimeout((function() {
e.play();
i._playing = !e.paused;
}), 20);
})(); else {
e.play();
this._playing = !e.paused;
}
}
},
pause: function() {
var t = this._video;
if (this._playing) {
this._playing = !1;
t && t.pause();
}
},
_resume: function() {
this.play();
},
stop: function() {
var t = this._video;
if (t && this._visible) {
this._ignorePause = !0;
t.pause();
var e = this;
setTimeout((function() {
e._dispatchEvent(a.EventType.STOPPED);
e._ignorePause = !1;
}), 0);
t.currentTime = 0;
this._playing = !1;
}
},
setVolume: function(t) {
var e = this._video;
e && (e.volume = t);
},
seekTo: function(t) {
var e = this._video;
if (e) {
this._loaded ? e.currentTime = t : (function() {
var i = function() {
e.currentTime = t;
e.removeEventListener(a._polyfill.event, i);
};
e.addEventListener(a._polyfill.event, i);
})();
a._polyfill.autoplayAfterOperation && this.isPlaying() && setTimeout((function() {
e.play();
}), 20);
}
},
isPlaying: function() {
var t = this._video;
a._polyfill.autoplayAfterOperation && this._playing && setTimeout((function() {
t.play();
}), 20);
return this._playing;
},
duration: function() {
var t = this._video, e = -1;
if (!t) return e;
(e = t.duration) <= 0 && cc.logID(7702);
return e;
},
currentTime: function() {
var t = this._video;
return t ? t.currentTime : -1;
},
setKeepAspectRatioEnabled: function() {
cc.logID(7700);
},
isKeepAspectRatioEnabled: function() {
return !0;
},
setFullScreenEnabled: function(t) {
var e = this._video;
e && (t ? cc.screen.requestFullScreen(e) : cc.screen.exitFullScreen(e));
},
isFullScreenEnabled: function() {
cc.logID(7701);
},
setEventListener: function(t, e) {
this._EventList[t] = e;
},
removeEventListener: function(t) {
this._EventList[t] = null;
},
_dispatchEvent: function(t) {
var e = this._EventList[t];
e && e.call(this, this, this._video.src);
},
onPlayEvent: function() {
this._EventList[a.EventType.PLAYING].call(this, this, this._video.src);
},
enable: function() {
var t = a.elements;
-1 === t.indexOf(this) && t.push(this);
this.setVisible(!0);
},
disable: function() {
var t = a.elements, e = t.indexOf(this);
-1 !== e && t.splice(e, 1);
this.setVisible(!1);
},
destroy: function() {
this.disable();
this.removeDom();
},
setVisible: function(t) {
if (this._visible !== t) {
this._visible = !!t;
this._updateVisibility();
}
},
updateMatrix: function(t) {
if (this._video && this._visible) {
t.getWorldMatrix(s);
if (this._forceUpdate || this._m00 !== s.m00 || this._m01 !== s.m01 || this._m04 !== s.m04 || this._m05 !== s.m05 || this._m12 !== s.m12 || this._m13 !== s.m13 || this._w !== t._contentSize.width || this._h !== t._contentSize.height) {
this._m00 = s.m00;
this._m01 = s.m01;
this._m04 = s.m04;
this._m05 = s.m05;
this._m12 = s.m12;
this._m13 = s.m13;
this._w = t._contentSize.width;
this._h = t._contentSize.height;
var e = cc.view._scaleX, i = cc.view._scaleY, n = cc.view._devicePixelRatio;
e /= n;
i /= n;
var r = cc.game.container, o = s.m00 * e, h = s.m01, l = s.m04, c = s.m05 * i, u = r && r.style.paddingLeft ? parseInt(r.style.paddingLeft) : 0, _ = r && r.style.paddingBottom ? parseInt(r.style.paddingBottom) : 0, m = void 0, f = void 0;
if (a._polyfill.zoomInvalid) {
this._updateSize(this._w * o, this._h * c);
o = 1;
c = 1;
m = this._w * e;
f = this._h * i;
} else {
this._updateSize(this._w, this._h);
m = this._w * e;
f = this._h * i;
}
var d = m * s.m00 * t._anchorPoint.x, p = f * s.m05 * t._anchorPoint.y, g = "matrix(" + o + "," + -h + "," + -l + "," + c + "," + (s.m12 * e - d + u) + "," + -(s.m13 * i - p + _) + ")";
this._video.style.transform = g;
this._video.style["-webkit-transform"] = g;
this._video.style["transform-origin"] = "0px 100% 0px";
this._video.style["-webkit-transform-origin"] = "0px 100% 0px";
}
}
}
});
a.EventType = {
PLAYING: 0,
PAUSED: 1,
STOPPED: 2,
COMPLETED: 3,
META_LOADED: 4,
CLICKED: 5,
READY_TO_PLAY: 6
};
a.elements = [];
a.pauseElements = [];
cc.game.on(cc.game.EVENT_HIDE, (function() {
for (var t, e = a.elements, i = 0; i < e.length; i++) if ((t = e[i]).isPlaying()) {
t.pause();
a.pauseElements.push(t);
}
}));
cc.game.on(cc.game.EVENT_SHOW, (function() {
for (var t = a.pauseElements, e = t.pop(); e; ) {
e.play();
e = t.pop();
}
}));
a._polyfill = {
devicePixelRatio: !1,
event: "canplay",
canPlayType: []
};
var o = document.createElement("video");
if (r.platform !== r.WECHAT_GAME) {
if (o.canPlayType("video/ogg")) {
a._polyfill.canPlayType.push(".ogg");
a._polyfill.canPlayType.push(".ogv");
}
o.canPlayType("video/mp4") && a._polyfill.canPlayType.push(".mp4");
o.canPlayType("video/webm") && a._polyfill.canPlayType.push(".webm");
}
r.browserType === r.BROWSER_TYPE_FIREFOX && (a._polyfill.autoplayAfterOperation = !0);
r.OS_ANDROID !== r.os || r.browserType !== r.BROWSER_TYPE_SOUGOU && r.browserType !== r.BROWSER_TYPE_360 || (a._polyfill.zoomInvalid = !0);
var h = document.createElement("style");
h.innerHTML = ".cocosVideo:-moz-full-screen{transform:matrix(1,0,0,1,0,0) !important;}.cocosVideo:full-screen{transform:matrix(1,0,0,1,0,0) !important;}.cocosVideo:-webkit-full-screen{transform:matrix(1,0,0,1,0,0) !important;}";
document.head.appendChild(h);
e.exports = a;
}), {
"../core/platform/CCSys": 162,
"../core/platform/utils": 177,
"../core/renderer/render-engine": 195
} ],
267: [ (function(t, e, i) {
var n = t("./webview-impl"), r = n.EventType;
function s() {}
var a = cc.Class({
name: "cc.WebView",
extends: cc.Component,
editor: !1,
properties: {
_useOriginalSize: !0,
_url: "",
url: {
type: String,
tooltip: !1,
get: function() {
return this._url;
},
set: function(t) {
this._url = t;
var e = this._impl;
e && e.loadURL(t);
}
},
webviewEvents: {
default: [],
type: cc.Component.EventHandler
}
},
statics: {
EventType: r
},
ctor: function() {
this._impl = new n();
},
onRestore: function() {
this._impl || (this._impl = new n());
},
onEnable: function() {
var t = this._impl;
t.createDomElementIfNeeded(this.node.width, this.node.height);
t.loadURL(this._url);
t.setVisible(!0);
t.setEventListener(r.LOADED, this._onWebViewLoaded.bind(this));
t.setEventListener(r.LOADING, this._onWebViewLoading.bind(this));
t.setEventListener(r.ERROR, this._onWebViewLoadError.bind(this));
},
onDisable: function() {
var t = this._impl;
t.setVisible(!1);
t.setEventListener(r.LOADED, s);
t.setEventListener(r.LOADING, s);
t.setEventListener(r.ERROR, s);
},
onDestroy: function() {
if (this._impl) {
this._impl.destroy();
this._impl = null;
}
},
update: function(t) {
this._impl && this._impl.updateMatrix(this.node);
},
_onWebViewLoaded: function() {
cc.Component.EventHandler.emitEvents(this.webviewEvents, this, r.LOADED);
this.node.emit("loaded", this);
},
_onWebViewLoading: function() {
cc.Component.EventHandler.emitEvents(this.webviewEvents, this, r.LOADING);
this.node.emit("loading", this);
return !0;
},
_onWebViewLoadError: function() {
cc.Component.EventHandler.emitEvents(this.webviewEvents, this, r.ERROR);
this.node.emit("error", this);
},
setJavascriptInterfaceScheme: function(t) {
this._impl && this._impl.setJavascriptInterfaceScheme(t);
},
setOnJSCallback: function(t) {
this._impl && this._impl.setOnJSCallback(t);
},
evaluateJS: function(t) {
this._impl && this._impl.evaluateJS(t);
}
});
cc.WebView = e.exports = a;
}), {
"./webview-impl": 268
} ],
268: [ (function(t, e, i) {
var n = t("../core/platform/utils"), r = (t("../core/event-manager"), t("../core/platform/CCSys")), s = t("../core/renderer/render-engine").math.mat4.create(), a = cc.Class({
name: "WebViewImpl",
ctor: function() {
this._EventList = {};
this._visible = !1;
this._parent = null;
this._div = null;
this._iframe = null;
this._listener = null;
this._forceUpdate = !0;
this._m00 = 0;
this._m01 = 0;
this._m04 = 0;
this._m05 = 0;
this._m12 = 0;
this._m13 = 0;
this._w = 0;
this._h = 0;
this.__eventListeners = {};
},
_updateVisibility: function() {
if (this._div) {
var t = this._div;
this._visible ? t.style.visibility = "visible" : t.style.visibility = "hidden";
this._forceUpdate = !0;
}
},
_updateSize: function(t, e) {
var i = this._div;
if (i) {
i.style.width = t + "px";
i.style.height = e + "px";
}
},
_initEvent: function() {
var t = this, e = this._iframe;
e && (function() {
var i = t.__eventListeners, n = t;
i.load = function() {
n._dispatchEvent(a.EventType.LOADED);
};
i.error = function() {
n._dispatchEvent(a.EventType.ERROR);
};
e.addEventListener("load", i.load);
e.addEventListener("error", i.error);
})();
},
_initStyle: function() {
if (this._div) {
var t = this._div;
t.style.position = "absolute";
t.style.bottom = "0px";
t.style.left = "0px";
}
},
_createDom: function(t, e) {
if (a._polyfill.enableDiv) {
this._div = document.createElement("div");
this._div.style["-webkit-overflow"] = "auto";
this._div.style["-webkit-overflow-scrolling"] = "touch";
this._iframe = document.createElement("iframe");
this._div.appendChild(this._iframe);
this._iframe.style.width = "100%";
this._iframe.style.height = "100%";
} else this._div = this._iframe = document.createElement("iframe");
a._polyfill.enableBG && (this._div.style.background = "#FFF");
this._div.style.background = "#FFF";
this._div.style.height = e + "px";
this._div.style.width = t + "px";
this._div.style.overflow = "scroll";
this._iframe.style.border = "none";
cc.game.container.appendChild(this._div);
this._updateVisibility();
},
_createNativeControl: function(t, e) {
this._createDom(t, e);
this._initStyle();
this._initEvent();
},
createDomElementIfNeeded: function(t, e) {
this._div ? this._updateSize(t, e) : this._createNativeControl(t, e);
},
removeDom: function() {
var t = this._div;
if (t) {
n.contains(cc.game.container, t) && cc.game.container.removeChild(t);
this._div = null;
}
var e = this._iframe;
if (e) {
var i = this.__eventListeners;
e.removeEventListener("load", i.load);
e.removeEventListener("error", i.error);
i.load = null;
i.error = null;
this._iframe = null;
}
},
setOnJSCallback: function(t) {},
setJavascriptInterfaceScheme: function(t) {},
loadData: function(t, e, i, n) {},
loadHTMLString: function(t, e) {},
loadURL: function(t) {
var e = this, i = this._iframe;
i && (function() {
i.src = t;
var n = e, r = function() {
n._loaded = !0;
n._updateVisibility();
i.removeEventListener("load", r);
};
i.addEventListener("load", r);
e._dispatchEvent(a.EventType.LOADING);
})();
},
stopLoading: function() {
cc.logID(7800);
},
reload: function() {
var t = this._iframe;
if (t) {
var e = t.contentWindow;
e && e.location && e.location.reload();
}
},
canGoBack: function() {
cc.logID(7801);
return !0;
},
canGoForward: function() {
cc.logID(7802);
return !0;
},
goBack: function() {
try {
if (a._polyfill.closeHistory) return cc.logID(7803);
var t = this._iframe;
if (t) {
var e = t.contentWindow;
e && e.location && e.history.back.call(e);
}
} catch (t) {
cc.log(t);
}
},
goForward: function() {
try {
if (a._polyfill.closeHistory) return cc.logID(7804);
var t = this._iframe;
if (t) {
var e = t.contentWindow;
e && e.location && e.history.forward.call(e);
}
} catch (t) {
cc.log(t);
}
},
evaluateJS: function(t) {
var e = this._iframe;
if (e) {
var i = e.contentWindow;
try {
i.eval(t);
this._dispatchEvent(a.EventType.JS_EVALUATED);
} catch (t) {
console.error(t);
}
}
},
setScalesPageToFit: function() {
cc.logID(7805);
},
setEventListener: function(t, e) {
this._EventList[t] = e;
},
removeEventListener: function(t) {
this._EventList[t] = null;
},
_dispatchEvent: function(t) {
var e = this._EventList[t];
e && e.call(this, this, this._iframe.src);
},
_createRenderCmd: function() {
return new a.RenderCmd(this);
},
destroy: function() {
this.removeDom();
},
setVisible: function(t) {
if (this._visible !== t) {
this._visible = !!t;
this._updateVisibility();
}
},
updateMatrix: function(t) {
if (this._div && this._visible) {
t.getWorldMatrix(s);
if (this._forceUpdate || this._m00 !== s.m00 || this._m01 !== s.m01 || this._m04 !== s.m04 || this._m05 !== s.m05 || this._m12 !== s.m12 || this._m13 !== s.m13 || this._w !== t._contentSize.width || this._h !== t._contentSize.height) {
this._m00 = s.m00;
this._m01 = s.m01;
this._m04 = s.m04;
this._m05 = s.m05;
this._m12 = s.m12;
this._m13 = s.m13;
this._w = t._contentSize.width;
this._h = t._contentSize.height;
var e = cc.view._scaleX, i = cc.view._scaleY, n = cc.view._devicePixelRatio;
e /= n;
i /= n;
var r = cc.game.container, a = s.m00 * e, o = s.m01, h = s.m04, l = s.m05 * i, c = r && r.style.paddingLeft ? parseInt(r.style.paddingLeft) : 0, u = r && r.style.paddingBottom ? parseInt(r.style.paddingBottom) : 0;
this._updateSize(this._w, this._h);
var _ = this._div.clientWidth * e, m = this._div.clientHeight * i, f = _ * s.m00 * t._anchorPoint.x, d = m * s.m05 * t._anchorPoint.y, p = "matrix(" + a + "," + -o + "," + -h + "," + l + "," + (s.m12 * e - f + c) + "," + -(s.m13 * i - d + u) + ")";
this._div.style.transform = p;
this._div.style["-webkit-transform"] = p;
this._div.style["transform-origin"] = "0px 100% 0px";
this._div.style["-webkit-transform-origin"] = "0px 100% 0px";
}
}
}
});
a.EventType = {
LOADING: 0,
LOADED: 1,
ERROR: 2,
JS_EVALUATED: 3
};
var o = a._polyfill = {
devicePixelRatio: !1,
enableDiv: !1
};
r.os === r.OS_IOS && (o.enableDiv = !0);
r.isMobile ? r.browserType === r.BROWSER_TYPE_FIREFOX && (o.enableBG = !0) : r.browserType === r.BROWSER_TYPE_IE && (o.closeHistory = !0);
e.exports = a;
}), {
"../core/event-manager": 96,
"../core/platform/CCSys": 162,
"../core/platform/utils": 177,
"../core/renderer/render-engine": 195
} ],
269: [ (function(t, e, i) {
t("./cocos2d/core");
t("./cocos2d/animation");
t("./cocos2d/particle");
t("./cocos2d/tilemap");
t("./cocos2d/videoplayer/CCVideoPlayer");
t("./cocos2d/webview/CCWebView");
t("./cocos2d/core/components/CCStudioComponent");
t("./extensions/ccpool/CCNodePool");
t("./cocos2d/actions");
t("./extensions/spine");
t("./extensions/dragonbones");
t("./cocos2d/deprecated");
}), {
"./cocos2d/actions": 8,
"./cocos2d/animation": 16,
"./cocos2d/core": 106,
"./cocos2d/core/components/CCStudioComponent": 81,
"./cocos2d/deprecated": 248,
"./cocos2d/particle": 254,
"./cocos2d/particle/CCParticleAsset": 251,
"./cocos2d/tilemap": 263,
"./cocos2d/tilemap/CCTiledMapAsset": 260,
"./cocos2d/videoplayer/CCVideoPlayer": 265,
"./cocos2d/webview/CCWebView": 267,
"./extensions/ccpool/CCNodePool": 270,
"./extensions/dragonbones": 278,
"./extensions/spine": 282
} ],
270: [ (function(t, e, i) {
cc.NodePool = function(t) {
this.poolHandlerComp = t;
this._pool = [];
};
cc.NodePool.prototype = {
constructor: cc.NodePool,
size: function() {
return this._pool.length;
},
clear: function() {
for (var t = this._pool.length, e = 0; e < t; ++e) this._pool[e].destroy();
this._pool.length = 0;
},
put: function(t) {
if (t && -1 === this._pool.indexOf(t)) {
t.removeFromParent(!1);
var e = this.poolHandlerComp ? t.getComponent(this.poolHandlerComp) : null;
e && e.unuse && e.unuse();
this._pool.push(t);
}
},
get: function() {
var t = this._pool.length - 1;
if (t < 0) return null;
var e = this._pool[t];
this._pool.length = t;
var i = this.poolHandlerComp ? e.getComponent(this.poolHandlerComp) : null;
i && i.reuse && i.reuse.apply(i, arguments);
return e;
}
};
e.exports = cc.NodePool;
}), {} ],
271: [ (function(t, e, i) {
var n = t("../../cocos2d/core/components/CCRenderComponent"), r = (t("../../cocos2d/core/renderer"), 
t("../../cocos2d/core/renderer/render-engine").SpriteMaterial), s = t("../../cocos2d/core/event/event-target"), a = t("../../cocos2d/core/CCNode"), o = t("../../cocos2d/core/graphics/graphics"), h = cc.Enum({
default: -1
}), l = cc.Enum({
"<None>": 0
});
var c = cc.Class({
name: "dragonBones.ArmatureDisplay",
extends: n,
mixins: [ s ],
editor: !1,
properties: {
_factory: {
default: null,
type: dragonBones.CCFactory,
serializable: !1
},
dragonAsset: {
default: null,
type: dragonBones.DragonBonesAsset,
notify: function() {
this._parseDragonAsset();
this._refresh();
0;
},
tooltip: !1
},
dragonAtlasAsset: {
default: null,
type: dragonBones.DragonBonesAtlasAsset,
notify: function() {
this._parseDragonAtlasAsset();
this._buildArmature();
this._activateMaterial();
},
tooltip: !1
},
_armatureName: "",
armatureName: {
get: function() {
return this._armatureName;
},
set: function(t) {
this._armatureName = t;
var e = this.getAnimationNames(this._armatureName);
(!this.animationName || e.indexOf(this.animationName) < 0) && (this.animationName = "");
this._refresh();
},
visible: !1
},
_animationName: "",
animationName: {
get: function() {
return this._animationName;
},
set: function(t) {
this._animationName = t;
},
visible: !1
},
_defaultArmatureIndex: {
default: 0,
notify: function() {
var t = "";
if (this.dragonAsset) {
var e = void 0;
this.dragonAsset && (e = this.dragonAsset.getArmatureEnum());
if (!e) return cc.errorID(7400, this.name);
t = e[this._defaultArmatureIndex];
}
void 0 !== t ? this.armatureName = t : cc.errorID(7401, this.name);
},
type: h,
visible: !0,
editorOnly: !0,
displayName: "Armature",
tooltip: !1
},
_animationIndex: {
default: 0,
notify: function() {
if (0 !== this._animationIndex) {
var t = void 0;
this.dragonAsset && (t = this.dragonAsset.getAnimsEnum(this.armatureName));
if (t) {
var e = t[this._animationIndex];
void 0 !== e ? this.animationName = e : cc.errorID(7402, this.name);
}
} else this.animationName = "";
},
type: l,
visible: !0,
editorOnly: !0,
displayName: "Animation",
tooltip: !1
},
timeScale: {
default: 1,
notify: function() {
this._armature.animation.timeScale = this.timeScale;
},
tooltip: !1
},
playTimes: {
default: -1,
tooltip: !1
},
debugBones: {
default: !1,
notify: function() {
this._initDebugDraw();
},
tooltip: !1
}
},
ctor: function() {
this._inited = !1;
this._factory = dragonBones.CCFactory.getInstance();
},
__preload: function() {
this._init();
},
_init: function() {
if (!this._inited) {
this._inited = !0;
this._parseDragonAsset();
this._parseDragonAtlasAsset();
this._refresh();
this._activateMaterial();
}
},
onEnable: function() {
this._super();
this._armature && dragonBones.CCFactory.getInstance()._dragonBones.clock.add(this._armature);
},
onDisable: function() {
this._super();
this._armature && dragonBones.CCFactory.getInstance()._dragonBones.clock.remove(this._armature);
},
onDestroy: function() {
this._super();
this._inited = !1;
if (this._armature) {
this._armature.dispose();
this._armature = null;
}
},
_initDebugDraw: function() {
if (this.debugBones) {
if (!this._debugDraw) {
var t = new a();
t.name = "DEBUG_DRAW_NODE";
var e = t.addComponent(o);
e.lineWidth = 1;
e.strokeColor = cc.color(255, 0, 0, 255);
this._debugDraw = e;
}
this._debugDraw.node.parent = this.node;
} else this._debugDraw && (this._debugDraw.node.parent = null);
},
_activateMaterial: function() {
var t = this.dragonAtlasAsset && this.dragonAtlasAsset.texture, e = this._material || new r();
e.useColor = !1;
if (t) {
e.texture = t;
this.markForUpdateRenderData(!0);
this.markForRender(!0);
} else this.disableRender();
this._updateMaterial(e);
},
_buildArmature: function() {
if (this.dragonAsset && this.dragonAtlasAsset && this.armatureName) {
var t = dragonBones.CCFactory.getInstance();
this._armature = t.buildArmatureDisplay(this.armatureName, this.dragonAsset._dragonBonesData.name, this);
this._armature.animation.timeScale = this.timeScale;
this.animationName && this.playAnimation(this.animationName, this.playTimes);
}
},
_parseDragonAsset: function() {
this.dragonAsset && this.dragonAsset.init(this._factory);
},
_parseDragonAtlasAsset: function() {
this.dragonAtlasAsset && this.dragonAtlasAsset.init(this._factory);
},
_refresh: function() {
this._buildArmature();
0;
},
_updateAnimEnum: !1,
_updateArmatureEnum: !1,
playAnimation: function(t, e) {
if (this._armature) {
this.playTimes = void 0 === e ? -1 : e;
this.animationName = t;
return this._armature.animation.play(t, this.playTimes);
}
return null;
},
getArmatureNames: function() {
var t = this.dragonAsset && this.dragonAsset._dragonBonesData;
return t && t.armatureNames || [];
},
getAnimationNames: function(t) {
var e = [];
if (this.dragonAsset && this.dragonAsset._dragonBonesData) {
var i = this.dragonAsset._dragonBonesData.getArmature(t);
if (i) for (var n in i.animations) i.animations.hasOwnProperty(n) && e.push(n);
}
return e;
},
addEventListener: function(t, e, i) {
this.addDBEventListener(t, e, i);
},
removeEventListener: function(t, e, i) {
this.removeDBEventListener(t, e, i);
},
buildArmature: function(t, e) {
return dragonBones.CCFactory.getInstance().createArmatureNode(this, t, e);
},
armature: function() {
return this._armature;
},
dbInit: function(t) {
this._armature = t;
},
dbClear: function() {
this._armature = null;
},
dbUpdate: function() {},
advanceTimeBySelf: function(t) {
this.shouldAdvanced = !!t;
},
hasDBEventListener: function(t) {
return this.hasEventListener(t);
},
addDBEventListener: function(t, e, i) {
this.on(t, e, i);
},
removeDBEventListener: function(t, e, i) {
this.off(t, e, i);
},
dispatchDBEvent: function(t, e) {
this.emit(t, e);
}
});
e.exports = dragonBones.ArmatureDisplay = c;
}), {
"../../cocos2d/core/CCNode": 28,
"../../cocos2d/core/components/CCRenderComponent": 75,
"../../cocos2d/core/event/event-target": 98,
"../../cocos2d/core/graphics/graphics": 102,
"../../cocos2d/core/renderer": 194,
"../../cocos2d/core/renderer/render-engine": 195
} ],
272: [ (function(t, e, i) {
var n = dragonBones.BaseObject, r = dragonBones.CCFactory = cc.Class({
name: "dragonBones.CCFactory",
extends: dragonBones.BaseFactory,
statics: {
_factory: null,
getInstance: function() {
r._factory || (r._factory = new r());
return r._factory;
}
},
ctor: function() {
this._dragonBones = new dragonBones.DragonBones();
if (cc.director._scheduler) {
cc.director._scheduler.enableForTarget(this);
cc.director._scheduler.scheduleUpdate(this, cc.Scheduler.PRIORITY_SYSTEM, !1);
}
},
update: function(t) {
this._dragonBones.advanceTime(t);
},
buildArmatureDisplay: function(t, e, i) {
this._display = i;
var n = this.buildArmature(t, e, i);
this._display = null;
return n;
},
parseTextureAtlasData: function(t, e) {
var i = JSON.parse(t);
return this._super(i, e);
},
createArmatureNode: function(t, e, i) {
var n = (i = i || new cc.Node()).getComponent(dragonBones.ArmatureDisplay);
n || (n = i.addComponent(dragonBones.ArmatureDisplay));
i.name = e;
n._armatureName = e;
n._N$dragonAsset = t.dragonAsset;
n._N$dragonAtlasAsset = t.dragonAtlasAsset;
n._init();
return n;
},
_buildChildArmature: function(t, e, i) {
var n = this._display, r = "CHILD_ARMATURE-" + i.path, s = this._display.node.getChildByName(r);
s || (s = new cc.Node());
var a = this.createArmatureNode(n, i.path, s);
s.name = r;
this._display = n;
return a._armature;
},
_buildTextureAtlasData: function(t, e) {
t ? t.renderTexture = e : t = n.borrowObject(dragonBones.CCTextureAtlasData);
return t;
},
_sortSlots: function() {
for (var t = this._slots, e = [], i = 0, n = t.length; i < n; i++) {
for (var r = t[i], s = r._zOrder, a = !1, o = e.length - 1; o >= 0; o--) if (s >= e[o]._zOrder) {
e.splice(o + 1, 0, r);
a = !0;
break;
}
a || e.splice(0, 0, r);
}
this._slots = e;
},
_buildArmature: function(t) {
var e = n.borrowObject(dragonBones.Armature);
e._skinData = t.skin;
e._animation = n.borrowObject(dragonBones.Animation);
e._animation._armature = e;
e._animation.animations = t.armature.animations;
e._isChildArmature = !1;
e.init(t.armature, this._display, this._display, this._dragonBones);
return e;
},
_buildSlot: function(t, e, i) {
var r = n.borrowObject(dragonBones.CCSlot);
r.name = e.name;
r.reset();
var s = r;
r.init(e, i, s, s);
return r;
}
});
}), {} ],
273: [ (function(t, e, i) {
var n = t("../../cocos2d/core/renderer/render-engine").math, r = (t("../../cocos2d/core/platform/CCMacro"), 
dragonBones.BinaryOffset), s = dragonBones.BoneType;
dragonBones.CCSlot = cc.Class({
name: "dragonBones.CCSlot",
extends: dragonBones.Slot,
ctor: function() {
this._vertices = [];
this._localVertices = [];
this._indices = [];
this._matrix = n.mat4.create();
this._visible = !1;
this._color = cc.color();
},
reset: function() {
this._vertices.length = 0;
this._localVertices.length = 0;
this._indices.length = 0;
n.mat4.identity(this._matrix);
this._visible = !1;
},
statics: {
toString: function() {
return "[class dragonBones.CCSlot]";
}
},
_onUpdateDisplay: function() {
this._childArmature && (this._childArmature.display._isChildArmature = !0);
},
_initDisplay: function(t) {},
_addDisplay: function() {
this._visible = !0;
this._rawDisplay.parent = this._armature.display.node;
},
_replaceDisplay: function(t) {
t instanceof dragonBones.ArmatureDisplay && (t.node.parent = null);
this._display instanceof dragonBones.ArmatureDisplay && (this._display.node.parent = this._armature.display.node);
},
_removeDisplay: function() {
this._visible = !1;
this._rawDisplay.parent = null;
},
_disposeDisplay: function(t) {},
_updateVisible: function() {},
_updateZOrder: function() {},
_updateBlendMode: function() {},
_updateColor: function() {
var t = this._color;
t.r = 255 * this._colorTransform.redMultiplier;
t.g = 255 * this._colorTransform.greenMultiplier;
t.b = 255 * this._colorTransform.blueMultiplier;
t.a = 255 * this._colorTransform.alphaMultiplier;
},
_updateFrame: function() {
this._vertices.length = 0;
this._indices.length = 0;
var t = this._vertices, e = this._indices, i = this._localVertices;
t.length = 0;
e.length = 0;
i.length = 0;
var n = this._textureData;
if (this._display && !(this._displayIndex < 0) && n) {
var s = this._displayIndex < this.rawDisplayDatas.length ? this.rawDisplayDatas[this._displayIndex] : null, a = this._armature._replacedTexture || n.parent.renderTexture;
if (a && (!n.spriteFrame || n.spriteFrame.getTexture() !== a)) {
var o = cc.rect(n.region.x, n.region.y, n.region.width, n.region.height), h = cc.v2(0, 0), l = cc.size(n.region.width, n.region.height);
n.spriteFrame = new cc.SpriteFrame();
n.spriteFrame.setTexture(a, o, !1, h, l);
}
var c = a.width, u = a.height, _ = n.region, m = this._meshData;
if (m) {
this._armature._armatureData.scale;
var f = m.parent.parent.parent, d = f.intArray, p = f.floatArray, g = d[m.offset + r.MeshVertexCount], y = d[m.offset + r.MeshTriangleCount], v = d[m.offset + r.MeshFloatOffset];
v < 0 && (v += 65536);
for (var x = v + 2 * g, A = 0, b = g; A < b; A++) {
var T = p[v + 2 * A], C = -p[v + 2 * A + 1], w = (_.x + p[x + 2 * A] * _.width) / c, S = (_.y + p[x + 2 * A + 1] * _.height) / u;
t.push({
x: T,
y: C,
u: w,
v: S
});
i.push({
x: T,
y: C
});
}
for (var E = 0; E < 3 * y; ++E) e.push(d[m.offset + r.MeshVertexIndices + E]);
this._pivotX = 0;
this._pivotY = 0;
} else {
var D = this._armature.armatureData.scale;
this._pivotX = s.pivot.x;
this._pivotY = s.pivot.y;
var M = n.frame || n.region, I = M.width * D, P = M.height * D;
if (!n.frame && n.rotated) {
I = M.height;
P = M.width;
}
this._pivotX *= I;
this._pivotY *= P;
if (n.frame) {
this._pivotX += n.frame.x * D;
this._pivotY += n.frame.y * D;
}
this._pivotY -= _.height * D;
for (var B = 0; B < 4; B++) {
t.push({});
i.push({});
}
var R = _.x / c, L = (_.y + _.height) / u, O = (_.x + _.width) / c, F = _.y / u;
t[0].u = R;
t[0].v = L;
t[1].u = O;
t[1].v = L;
t[2].u = R;
t[2].v = F;
t[3].u = O;
t[3].v = F;
i[0].x = i[2].x = t[0].x = t[2].x = 0;
i[1].x = i[3].x = t[1].x = t[3].x = _.width;
i[0].y = i[1].y = t[0].y = t[1].y = 0;
i[2].y = i[3].y = t[2].y = t[3].y = _.height;
e[0] = 0;
e[1] = 1;
e[2] = 2;
e[3] = 1;
e[4] = 3;
e[5] = 2;
this._blendModeDirty = !0;
}
}
},
_updateMesh: function() {
var t = this._armature._armatureData.scale, e = this._meshData, i = this._deformVertices.length > 0 && e.inheritDeform, n = e.weight, a = this._localVertices;
if (null !== n) {
var o = e.parent.parent.parent, h = o.intArray, l = o.floatArray, c = h[e.offset + r.MeshVertexCount], u = h[n.offset + r.WeigthFloatOffset];
u < 0 && (u += 65536);
for (var _ = 0, m = n.offset + r.WeigthBoneIndices + n.bones.length, f = u, d = 0; _ < c; ++_) {
for (var p = h[m++], g = 0, y = 0, v = 0; v < p; ++v) {
var x = h[m++], A = this._meshBones[x];
if (null !== A) {
var b = A.globalTransformMatrix, T = l[f++], C = l[f++] * t, w = l[f++] * t;
if (i) {
C += this._deformVertices[d++];
w += this._deformVertices[d++];
}
g += (b.a * C + b.c * w + b.tx) * T;
y += (b.b * C + b.d * w + b.ty) * T;
}
}
a[_].x = g;
a[_].y = -y;
}
} else if (i) {
var S = this._parent._boneData.type !== s.Bone, E = e.parent.parent.parent, D = E.intArray, M = E.floatArray, I = D[e.offset + r.MeshVertexCount], P = D[e.offset + r.MeshFloatOffset];
P < 0 && (P += 65536);
for (var B = 0, R = I; B < R; B++) {
var L = M[P + 2 * B] * t + this._deformVertices[2 * B], O = M[P + 2 * B + 1] * t + this._deformVertices[2 * B + 1];
if (S) {
var F = this._parent._getGlobalTransformMatrix(L, O);
a[B].x = F.a * L + F.c * O + F.tx;
a[B].y = -F.b * L + F.d * O + F.ty;
} else {
a[B].x = L;
a[B].y = -O;
}
}
}
this._updateVertices();
},
_updateTransform: function() {
var t = this._matrix;
t.m00 = this.globalTransformMatrix.a;
t.m01 = -this.globalTransformMatrix.b;
t.m04 = -this.globalTransformMatrix.c;
t.m05 = this.globalTransformMatrix.d;
t.m12 = this.globalTransformMatrix.tx - (this.globalTransformMatrix.a * this._pivotX + this.globalTransformMatrix.c * this._pivotY);
t.m13 = -(this.globalTransformMatrix.ty - (this.globalTransformMatrix.b * this._pivotX + this.globalTransformMatrix.d * this._pivotY));
if (this._display instanceof dragonBones.ArmatureDisplay) {
var e = this._display.node;
n.mat4.copy(e._matrix, t);
e._localMatDirty = !1;
e.setWorldDirty();
}
this._updateVertices();
},
_updateVertices: function() {
for (var t = this._matrix, e = t.m00, i = t.m01, n = t.m04, r = t.m05, s = t.m12, a = t.m13, o = this._vertices, h = this._localVertices, l = 0, c = o.length; l < c; l++) {
var u = h[l].x, _ = h[l].y;
o[l].x = e * u + n * _ + s;
o[l].y = i * u + r * _ + a;
}
}
});
}), {
"../../cocos2d/core/platform/CCMacro": 158,
"../../cocos2d/core/renderer/render-engine": 195
} ],
274: [ (function(t, e, i) {
dragonBones.CCTextureAtlasData = cc.Class({
extends: dragonBones.TextureAtlasData,
properties: {
texture: {
default: null,
serializable: !1
}
},
statics: {
toString: function() {
return "[class dragonBones.CCTextureAtlasData]";
}
},
_onClear: function() {
dragonBones.TextureAtlasData.prototype._onClear.call(this);
this.texture = null;
},
createTexture: function() {
return dragonBones.BaseObject.borrowObject(dragonBones.CCTextureData);
}
});
dragonBones.CCTextureData = cc.Class({
extends: dragonBones.TextureData,
properties: {
texture: {
default: null,
serializable: !1
}
},
statics: {
toString: function() {
return "[class dragonBones.CCTextureData]";
}
},
_onClear: function() {
dragonBones.TextureData.prototype._onClear.call(this);
this.texture = null;
}
});
}), {} ],
275: [ (function(t, e, i) {
var n = cc.Class({
name: "dragonBones.DragonBonesAsset",
extends: cc.Asset,
ctor: function() {
this.reset();
},
properties: {
_dragonBonesJson: "",
dragonBonesJson: {
get: function() {
return this._dragonBonesJson;
},
set: function(t) {
this._dragonBonesJson = t;
this.reset();
}
}
},
statics: {
preventDeferredLoadDependents: !0
},
createNode: !1,
reset: function() {
this._dragonBonesData = null;
0;
},
init: function(t) {
0;
if (this._dragonBonesData) {
var e = t.getDragonBonesData(this._dragonBonesData.name);
if (e) {
for (var i = 0; i < this._dragonBonesData.armatureNames.length; i++) {
var n = this._dragonBonesData.armatureNames[i];
e.armatures[n] || e.addArmature(this._dragonBonesData.armatures[n]);
}
this._dragonBonesData = e;
} else t.addDragonBonesData(this._dragonBonesData);
} else {
this._dragonBonesData = t.parseDragonBonesData(this._dragonBonesJson);
}
},
getArmatureEnum: !1,
getAnimsEnum: !1,
destroy: function() {
this._super();
}
});
dragonBones.DragonBonesAsset = e.exports = n;
}), {} ],
276: [ (function(t, e, i) {
var n = cc.Class({
name: "dragonBones.DragonBonesAtlasAsset",
extends: cc.Asset,
ctor: function() {
this.reset();
},
properties: {
_atlasJson: "",
atlasJson: {
get: function() {
return this._atlasJson;
},
set: function(t) {
this._atlasJson = t;
this.reset();
}
},
_texture: {
default: null,
type: cc.Texture2D,
formerlySerializedAs: "texture"
},
texture: {
get: function() {
return this._texture;
},
set: function(t) {
this._texture = t;
this.reset();
}
}
},
statics: {
preventDeferredLoadDependents: !0
},
reset: function() {
this._textureAtlasData = null;
},
createNode: !1,
init: function(t) {
this._textureAtlasData ? t.addTextureAtlasData(this._textureAtlasData) : this._textureAtlasData = t.parseTextureAtlasData(this.atlasJson, this.texture);
},
destroy: function() {
this._super();
}
});
dragonBones.DragonBonesAtlasAsset = e.exports = n;
}), {} ],
277: [ (function(t, e, i) {
var n = t("./ArmatureDisplay"), r = t("../../cocos2d/core/renderer/render-engine").math, s = t("../../cocos2d/core/renderer/canvas/renderers/utils"), a = cc.color(), o = r.mat4.create(), h = r.mat4.create(), l = {
draw: function(t, e) {
var i = e._armature;
if (!i || e._isChildArmature) return 0;
t.save();
var n = e.node._worldMatrix, r = e.dragonAtlasAsset.texture;
this.drawArmature(t, i, r, n);
t.restore();
return 1;
},
drawArmature: function(t, e, i, n) {
for (var l = e._slots, c = 0, u = l.length; c < u; c++) {
var _ = l[c];
if (_._visible && _._displayData) if (_.childArmature) {
r.mat4.mul(o, n, _._matrix);
this.drawArmature(t, _.childArmature, i, o);
} else {
var m = _._localVertices;
if (4 === m.length) {
t.save();
r.mat4.mul(h, n, _._matrix);
var f = h;
t.transform(f.m00, -f.m01, -f.m04, f.m05, f.m12, -f.m13);
var d = _._vertices, p = d[0].u * i.width, g = d[3].v * i.height, y = d[3].u * i.width - p, v = d[0].v * i.height - g, x = m[0].x, A = m[0].y, b = m[3].x - x, T = m[3].y - A;
A = -A - T;
a._val = _._color;
var C = s.getFrameCache(i, a, p, g, y, v);
t.drawImage(C, x, A, b, T);
t.restore();
}
}
}
}
};
e.exports = n._assembler = l;
}), {
"../../cocos2d/core/renderer/canvas/renderers/utils": 193,
"../../cocos2d/core/renderer/render-engine": 195,
"./ArmatureDisplay": 271
} ],
278: [ (function(i, n, r) {
("undefined" === ("object" === (e = typeof window) ? t(window) : e) ? global : window).dragonBones = i("./lib/dragonBones");
dragonBones.DisplayType = {
Image: 0,
Armature: 1,
Mesh: 2
};
dragonBones.ArmatureType = {
Armature: 0,
MovieClip: 1,
Stage: 2
};
dragonBones.ExtensionType = {
FFD: 0,
AdjustColor: 10,
BevelFilter: 11,
BlurFilter: 12,
DropShadowFilter: 13,
GlowFilter: 14,
GradientBevelFilter: 15,
GradientGlowFilter: 16
};
dragonBones.EventType = {
Frame: 0,
Sound: 1
};
dragonBones.ActionType = {
Play: 0,
Stop: 1,
GotoAndPlay: 2,
GotoAndStop: 3,
FadeIn: 4,
FadeOut: 5
};
dragonBones.AnimationFadeOutMode = {
None: 0,
SameLayer: 1,
SameGroup: 2,
SameLayerAndGroup: 3,
All: 4
};
dragonBones.BinaryOffset = {
WeigthBoneCount: 0,
WeigthFloatOffset: 1,
WeigthBoneIndices: 2,
MeshVertexCount: 0,
MeshTriangleCount: 1,
MeshFloatOffset: 2,
MeshWeightOffset: 3,
MeshVertexIndices: 4,
TimelineScale: 0,
TimelineOffset: 1,
TimelineKeyFrameCount: 2,
TimelineFrameValueCount: 3,
TimelineFrameValueOffset: 4,
TimelineFrameOffset: 5,
FramePosition: 0,
FrameTweenType: 1,
FrameTweenEasingOrCurveSampleCount: 2,
FrameCurveSamples: 3,
DeformMeshOffset: 0,
DeformCount: 1,
DeformValueCount: 2,
DeformValueOffset: 3,
DeformFloatOffset: 4
};
dragonBones.BoneType = {
Bone: 0,
Surface: 1
};
i("./CCFactory");
i("./CCSlot");
i("./CCTextureData");
i("./DragonBonesAsset");
i("./DragonBonesAtlasAsset");
i("./ArmatureDisplay");
cc.game.once(cc.game.EVENT_RENDERER_INITED, (function() {
cc.game.renderType === cc.game.RENDER_TYPE_CANVAS ? i("./canvas-assembler") : i("./webgl-assembler");
}));
}), {
"./ArmatureDisplay": 271,
"./CCFactory": 272,
"./CCSlot": 273,
"./CCTextureData": 274,
"./DragonBonesAsset": 275,
"./DragonBonesAtlasAsset": 276,
"./canvas-assembler": 277,
"./lib/dragonBones": 279,
"./webgl-assembler": 280
} ],
279: [ (function(i, n, r) {
"use strict";
var s, a = this && this.__extends || (function() {
var t = Object.setPrototypeOf || {
__proto__: []
} instanceof Array && function(t, e) {
t.__proto__ = e;
} || function(t, e) {
for (var i in e) e.hasOwnProperty(i) && (t[i] = e[i]);
};
return function(e, i) {
t(e, i);
function n() {
this.constructor = e;
}
e.prototype = null === i ? Object.create(i) : (n.prototype = i.prototype, new n());
};
})();
s || (s = {});
(function(t) {
var e = (function() {
function e(i) {
this._clock = new t.WorldClock();
this._events = [];
this._objects = [];
this._eventManager = null;
this._eventManager = i;
console.info("DragonBones: " + e.VERSION + "\nWebsite: http://dragonbones.com/\nSource and Demos: https://github.com/DragonBones/");
}
e.prototype.advanceTime = function(e) {
if (this._objects.length > 0) {
for (var i = 0, n = this._objects; i < n.length; i++) {
n[i].returnToPool();
}
this._objects.length = 0;
}
this._clock.advanceTime(e);
if (this._events.length > 0) {
for (var r = 0; r < this._events.length; ++r) {
var s = this._events[r], a = s.armature;
if (null !== a._armatureData) {
a.eventDispatcher.dispatchDBEvent(s.type, s);
s.type === t.EventObject.SOUND_EVENT && this._eventManager.dispatchDBEvent(s.type, s);
}
this.bufferObject(s);
}
this._events.length = 0;
}
};
e.prototype.bufferEvent = function(t) {
this._events.indexOf(t) < 0 && this._events.push(t);
};
e.prototype.bufferObject = function(t) {
this._objects.indexOf(t) < 0 && this._objects.push(t);
};
Object.defineProperty(e.prototype, "clock", {
get: function() {
return this._clock;
},
enumerable: !0,
configurable: !0
});
Object.defineProperty(e.prototype, "eventManager", {
get: function() {
return this._eventManager;
},
enumerable: !0,
configurable: !0
});
e.VERSION = "5.6.2";
e.yDown = !0;
e.debug = !1;
e.debugDraw = !1;
e.webAssembly = !1;
return e;
})();
t.DragonBones = e;
console.warn || (console.warn = function() {});
console.assert || (console.assert = function() {});
})(s || (s = {}));
(function(t) {
var e = (function() {
function t() {
this.hashCode = t._hashCode++;
this._isInPool = !1;
}
t._returnObject = function(e) {
var i = String(e.constructor), n = i in t._maxCountMap ? t._maxCountMap[i] : t._defaultMaxCount, r = t._poolsMap[i] = t._poolsMap[i] || [];
if (r.length < n) if (e._isInPool) console.warn("The object is already in the pool."); else {
e._isInPool = !0;
r.push(e);
}
};
t.toString = function() {
throw new Error();
};
t.setMaxCount = function(e, i) {
(i < 0 || i != i) && (i = 0);
if (null !== e) {
null !== (r = (n = String(e)) in t._poolsMap ? t._poolsMap[n] : null) && r.length > i && (r.length = i);
t._maxCountMap[n] = i;
} else {
t._defaultMaxCount = i;
for (var n in t._poolsMap) {
var r;
(r = t._poolsMap[n]).length > i && (r.length = i);
n in t._maxCountMap && (t._maxCountMap[n] = i);
}
}
};
t.clearPool = function(e) {
void 0 === e && (e = null);
if (null !== e) {
var i = String(e);
null !== (r = i in t._poolsMap ? t._poolsMap[i] : null) && r.length > 0 && (r.length = 0);
} else for (var n in t._poolsMap) {
var r;
(r = t._poolsMap[n]).length = 0;
}
};
t.borrowObject = function(e) {
var i = String(e), n = i in t._poolsMap ? t._poolsMap[i] : null;
if (null !== n && n.length > 0) {
var r = n.pop();
r._isInPool = !1;
return r;
}
var s = new e();
s._onClear();
return s;
};
t.prototype.returnToPool = function() {
this._onClear();
t._returnObject(this);
};
t._hashCode = 0;
t._defaultMaxCount = 3e3;
t._maxCountMap = {};
t._poolsMap = {};
return t;
})();
t.BaseObject = e;
})(s || (s = {}));
(function(t) {
var e = (function() {
function t(t, e, i, n, r, s) {
void 0 === t && (t = 1);
void 0 === e && (e = 0);
void 0 === i && (i = 0);
void 0 === n && (n = 1);
void 0 === r && (r = 0);
void 0 === s && (s = 0);
this.a = t;
this.b = e;
this.c = i;
this.d = n;
this.tx = r;
this.ty = s;
}
t.prototype.toString = function() {
return "[object dragonBones.Matrix] a:" + this.a + " b:" + this.b + " c:" + this.c + " d:" + this.d + " tx:" + this.tx + " ty:" + this.ty;
};
t.prototype.copyFrom = function(t) {
this.a = t.a;
this.b = t.b;
this.c = t.c;
this.d = t.d;
this.tx = t.tx;
this.ty = t.ty;
return this;
};
t.prototype.copyFromArray = function(t, e) {
void 0 === e && (e = 0);
this.a = t[e];
this.b = t[e + 1];
this.c = t[e + 2];
this.d = t[e + 3];
this.tx = t[e + 4];
this.ty = t[e + 5];
return this;
};
t.prototype.identity = function() {
this.a = this.d = 1;
this.b = this.c = 0;
this.tx = this.ty = 0;
return this;
};
t.prototype.concat = function(t) {
var e = this.a * t.a, i = 0, n = 0, r = this.d * t.d, s = this.tx * t.a + t.tx, a = this.ty * t.d + t.ty;
if (0 !== this.b || 0 !== this.c) {
e += this.b * t.c;
i += this.b * t.d;
n += this.c * t.a;
r += this.c * t.b;
}
if (0 !== t.b || 0 !== t.c) {
i += this.a * t.b;
n += this.d * t.c;
s += this.ty * t.c;
a += this.tx * t.b;
}
this.a = e;
this.b = i;
this.c = n;
this.d = r;
this.tx = s;
this.ty = a;
return this;
};
t.prototype.invert = function() {
var t = this.a, e = this.b, i = this.c, n = this.d, r = this.tx, s = this.ty;
if (0 === e && 0 === i) {
this.b = this.c = 0;
if (0 === t || 0 === n) this.a = this.b = this.tx = this.ty = 0; else {
t = this.a = 1 / t;
n = this.d = 1 / n;
this.tx = -t * r;
this.ty = -n * s;
}
return this;
}
var a = t * n - e * i;
if (0 === a) {
this.a = this.d = 1;
this.b = this.c = 0;
this.tx = this.ty = 0;
return this;
}
a = 1 / a;
var o = this.a = n * a;
e = this.b = -e * a;
i = this.c = -i * a;
n = this.d = t * a;
this.tx = -(o * r + i * s);
this.ty = -(e * r + n * s);
return this;
};
t.prototype.transformPoint = function(t, e, i, n) {
void 0 === n && (n = !1);
i.x = this.a * t + this.c * e;
i.y = this.b * t + this.d * e;
if (!n) {
i.x += this.tx;
i.y += this.ty;
}
};
t.prototype.transformRectangle = function(t, e) {
void 0 === e && (e = !1);
var i = this.a, n = this.b, r = this.c, s = this.d, a = e ? 0 : this.tx, o = e ? 0 : this.ty, h = t.x, l = t.y, c = h + t.width, u = l + t.height, _ = i * h + r * l + a, m = n * h + s * l + o, f = i * c + r * l + a, d = n * c + s * l + o, p = i * c + r * u + a, g = n * c + s * u + o, y = i * h + r * u + a, v = n * h + s * u + o, x = 0;
if (_ > f) {
x = _;
_ = f;
f = x;
}
if (p > y) {
x = p;
p = y;
y = x;
}
t.x = Math.floor(_ < p ? _ : p);
t.width = Math.ceil((f > y ? f : y) - t.x);
if (m > d) {
x = m;
m = d;
d = x;
}
if (g > v) {
x = g;
g = v;
v = x;
}
t.y = Math.floor(m < g ? m : g);
t.height = Math.ceil((d > v ? d : v) - t.y);
};
return t;
})();
t.Matrix = e;
})(s || (s = {}));
(function(t) {
var e = (function() {
function t(t, e, i, n, r, s) {
void 0 === t && (t = 0);
void 0 === e && (e = 0);
void 0 === i && (i = 0);
void 0 === n && (n = 0);
void 0 === r && (r = 1);
void 0 === s && (s = 1);
this.x = t;
this.y = e;
this.skew = i;
this.rotation = n;
this.scaleX = r;
this.scaleY = s;
}
t.normalizeRadian = function(t) {
t = (t + Math.PI) % (2 * Math.PI);
return t += t > 0 ? -Math.PI : Math.PI;
};
t.prototype.toString = function() {
return "[object dragonBones.Transform] x:" + this.x + " y:" + this.y + " skewX:" + 180 * this.skew / Math.PI + " skewY:" + 180 * this.rotation / Math.PI + " scaleX:" + this.scaleX + " scaleY:" + this.scaleY;
};
t.prototype.copyFrom = function(t) {
this.x = t.x;
this.y = t.y;
this.skew = t.skew;
this.rotation = t.rotation;
this.scaleX = t.scaleX;
this.scaleY = t.scaleY;
return this;
};
t.prototype.identity = function() {
this.x = this.y = 0;
this.skew = this.rotation = 0;
this.scaleX = this.scaleY = 1;
return this;
};
t.prototype.add = function(t) {
this.x += t.x;
this.y += t.y;
this.skew += t.skew;
this.rotation += t.rotation;
this.scaleX *= t.scaleX;
this.scaleY *= t.scaleY;
return this;
};
t.prototype.minus = function(t) {
this.x -= t.x;
this.y -= t.y;
this.skew -= t.skew;
this.rotation -= t.rotation;
this.scaleX /= t.scaleX;
this.scaleY /= t.scaleY;
return this;
};
t.prototype.fromMatrix = function(e) {
var i = this.scaleX, n = this.scaleY, r = t.PI_Q;
this.x = e.tx;
this.y = e.ty;
this.rotation = Math.atan(e.b / e.a);
var s = Math.atan(-e.c / e.d);
this.scaleX = this.rotation > -r && this.rotation < r ? e.a / Math.cos(this.rotation) : e.b / Math.sin(this.rotation);
this.scaleY = s > -r && s < r ? e.d / Math.cos(s) : -e.c / Math.sin(s);
if (i >= 0 && this.scaleX < 0) {
this.scaleX = -this.scaleX;
this.rotation = this.rotation - Math.PI;
}
if (n >= 0 && this.scaleY < 0) {
this.scaleY = -this.scaleY;
s -= Math.PI;
}
this.skew = s - this.rotation;
return this;
};
t.prototype.toMatrix = function(t) {
if (0 === this.rotation) {
t.a = 1;
t.b = 0;
} else {
t.a = Math.cos(this.rotation);
t.b = Math.sin(this.rotation);
}
if (0 === this.skew) {
t.c = -t.b;
t.d = t.a;
} else {
t.c = -Math.sin(this.skew + this.rotation);
t.d = Math.cos(this.skew + this.rotation);
}
if (1 !== this.scaleX) {
t.a *= this.scaleX;
t.b *= this.scaleX;
}
if (1 !== this.scaleY) {
t.c *= this.scaleY;
t.d *= this.scaleY;
}
t.tx = this.x;
t.ty = this.y;
return this;
};
t.PI = Math.PI;
t.PI_D = 2 * Math.PI;
t.PI_H = Math.PI / 2;
t.PI_Q = Math.PI / 4;
t.RAD_DEG = 180 / Math.PI;
t.DEG_RAD = Math.PI / 180;
return t;
})();
t.Transform = e;
})(s || (s = {}));
(function(t) {
var e = (function() {
function t(t, e, i, n, r, s, a, o) {
void 0 === t && (t = 1);
void 0 === e && (e = 1);
void 0 === i && (i = 1);
void 0 === n && (n = 1);
void 0 === r && (r = 0);
void 0 === s && (s = 0);
void 0 === a && (a = 0);
void 0 === o && (o = 0);
this.alphaMultiplier = t;
this.redMultiplier = e;
this.greenMultiplier = i;
this.blueMultiplier = n;
this.alphaOffset = r;
this.redOffset = s;
this.greenOffset = a;
this.blueOffset = o;
}
t.prototype.copyFrom = function(t) {
this.alphaMultiplier = t.alphaMultiplier;
this.redMultiplier = t.redMultiplier;
this.greenMultiplier = t.greenMultiplier;
this.blueMultiplier = t.blueMultiplier;
this.alphaOffset = t.alphaOffset;
this.redOffset = t.redOffset;
this.greenOffset = t.greenOffset;
this.blueOffset = t.blueOffset;
};
t.prototype.identity = function() {
this.alphaMultiplier = this.redMultiplier = this.greenMultiplier = this.blueMultiplier = 1;
this.alphaOffset = this.redOffset = this.greenOffset = this.blueOffset = 0;
};
return t;
})();
t.ColorTransform = e;
})(s || (s = {}));
(function(t) {
var e = (function() {
function t(t, e) {
void 0 === t && (t = 0);
void 0 === e && (e = 0);
this.x = t;
this.y = e;
}
t.prototype.copyFrom = function(t) {
this.x = t.x;
this.y = t.y;
};
t.prototype.clear = function() {
this.x = this.y = 0;
};
return t;
})();
t.Point = e;
})(s || (s = {}));
(function(t) {
var e = (function() {
function t(t, e, i, n) {
void 0 === t && (t = 0);
void 0 === e && (e = 0);
void 0 === i && (i = 0);
void 0 === n && (n = 0);
this.x = t;
this.y = e;
this.width = i;
this.height = n;
}
t.prototype.copyFrom = function(t) {
this.x = t.x;
this.y = t.y;
this.width = t.width;
this.height = t.height;
};
t.prototype.clear = function() {
this.x = this.y = 0;
this.width = this.height = 0;
};
return t;
})();
t.Rectangle = e;
})(s || (s = {}));
(function(t) {
var e = (function(t) {
a(e, t);
function e() {
var e = null !== t && t.apply(this, arguments) || this;
e.ints = [];
e.floats = [];
e.strings = [];
return e;
}
e.toString = function() {
return "[class dragonBones.UserData]";
};
e.prototype._onClear = function() {
this.ints.length = 0;
this.floats.length = 0;
this.strings.length = 0;
};
e.prototype.addInt = function(t) {
this.ints.push(t);
};
e.prototype.addFloat = function(t) {
this.floats.push(t);
};
e.prototype.addString = function(t) {
this.strings.push(t);
};
e.prototype.getInt = function(t) {
void 0 === t && (t = 0);
return t >= 0 && t < this.ints.length ? this.ints[t] : 0;
};
e.prototype.getFloat = function(t) {
void 0 === t && (t = 0);
return t >= 0 && t < this.floats.length ? this.floats[t] : 0;
};
e.prototype.getString = function(t) {
void 0 === t && (t = 0);
return t >= 0 && t < this.strings.length ? this.strings[t] : "";
};
return e;
})(t.BaseObject);
t.UserData = e;
var i = (function(t) {
a(e, t);
function e() {
var e = null !== t && t.apply(this, arguments) || this;
e.data = null;
return e;
}
e.toString = function() {
return "[class dragonBones.ActionData]";
};
e.prototype._onClear = function() {
null !== this.data && this.data.returnToPool();
this.type = 0;
this.name = "";
this.bone = null;
this.slot = null;
this.data = null;
};
return e;
})(t.BaseObject);
t.ActionData = i;
})(s || (s = {}));
(function(t) {
var e = (function(t) {
a(e, t);
function e() {
var e = null !== t && t.apply(this, arguments) || this;
e.frameIndices = [];
e.cachedFrames = [];
e.armatureNames = [];
e.armatures = {};
e.userData = null;
return e;
}
e.toString = function() {
return "[class dragonBones.DragonBonesData]";
};
e.prototype._onClear = function() {
for (var t in this.armatures) {
this.armatures[t].returnToPool();
delete this.armatures[t];
}
null !== this.userData && this.userData.returnToPool();
this.autoSearch = !1;
this.frameRate = 0;
this.version = "";
this.name = "";
this.stage = null;
this.frameIndices.length = 0;
this.cachedFrames.length = 0;
this.armatureNames.length = 0;
this.binary = null;
this.intArray = null;
this.floatArray = null;
this.frameIntArray = null;
this.frameFloatArray = null;
this.frameArray = null;
this.timelineArray = null;
this.userData = null;
};
e.prototype.addArmature = function(t) {
if (t.name in this.armatures) console.warn("Same armature: " + t.name); else {
t.parent = this;
this.armatures[t.name] = t;
this.armatureNames.push(t.name);
}
};
e.prototype.getArmature = function(t) {
return t in this.armatures ? this.armatures[t] : null;
};
e.prototype.dispose = function() {
console.warn("已废弃");
this.returnToPool();
};
return e;
})(t.BaseObject);
t.DragonBonesData = e;
})(s || (s = {}));
(function(t) {
var e = (function(e) {
a(i, e);
function i() {
var i = null !== e && e.apply(this, arguments) || this;
i.aabb = new t.Rectangle();
i.animationNames = [];
i.sortedBones = [];
i.sortedSlots = [];
i.defaultActions = [];
i.actions = [];
i.bones = {};
i.slots = {};
i.constraints = {};
i.skins = {};
i.animations = {};
i.canvas = null;
i.userData = null;
return i;
}
i.toString = function() {
return "[class dragonBones.ArmatureData]";
};
i.prototype._onClear = function() {
for (var t = 0, e = this.defaultActions; t < e.length; t++) {
e[t].returnToPool();
}
for (var i = 0, n = this.actions; i < n.length; i++) {
n[i].returnToPool();
}
for (var r in this.bones) {
this.bones[r].returnToPool();
delete this.bones[r];
}
for (var r in this.slots) {
this.slots[r].returnToPool();
delete this.slots[r];
}
for (var r in this.constraints) {
this.constraints[r].returnToPool();
delete this.constraints[r];
}
for (var r in this.skins) {
this.skins[r].returnToPool();
delete this.skins[r];
}
for (var r in this.animations) {
this.animations[r].returnToPool();
delete this.animations[r];
}
null !== this.canvas && this.canvas.returnToPool();
null !== this.userData && this.userData.returnToPool();
this.type = 0;
this.frameRate = 0;
this.cacheFrameRate = 0;
this.scale = 1;
this.name = "";
this.aabb.clear();
this.animationNames.length = 0;
this.sortedBones.length = 0;
this.sortedSlots.length = 0;
this.defaultActions.length = 0;
this.actions.length = 0;
this.defaultSkin = null;
this.defaultAnimation = null;
this.canvas = null;
this.userData = null;
this.parent = null;
};
i.prototype.sortBones = function() {
var t = this.sortedBones.length;
if (!(t <= 0)) {
var e = this.sortedBones.concat(), i = 0, n = 0;
this.sortedBones.length = 0;
for (;n < t; ) {
var r = e[i++];
i >= t && (i = 0);
if (!(this.sortedBones.indexOf(r) >= 0)) {
var s = !1;
for (var a in this.constraints) {
var o = this.constraints[a];
if (o.root === r && this.sortedBones.indexOf(o.target) < 0) {
s = !0;
break;
}
}
if (!(s || null !== r.parent && this.sortedBones.indexOf(r.parent) < 0)) {
this.sortedBones.push(r);
n++;
}
}
}
}
};
i.prototype.cacheFrames = function(t) {
if (!(this.cacheFrameRate > 0)) {
this.cacheFrameRate = t;
for (var e in this.animations) this.animations[e].cacheFrames(this.cacheFrameRate);
}
};
i.prototype.setCacheFrame = function(t, e) {
var i = this.parent.cachedFrames, n = i.length;
i.length += 10;
i[n] = t.a;
i[n + 1] = t.b;
i[n + 2] = t.c;
i[n + 3] = t.d;
i[n + 4] = t.tx;
i[n + 5] = t.ty;
i[n + 6] = e.rotation;
i[n + 7] = e.skew;
i[n + 8] = e.scaleX;
i[n + 9] = e.scaleY;
return n;
};
i.prototype.getCacheFrame = function(t, e, i) {
var n = this.parent.cachedFrames;
t.a = n[i];
t.b = n[i + 1];
t.c = n[i + 2];
t.d = n[i + 3];
t.tx = n[i + 4];
t.ty = n[i + 5];
e.rotation = n[i + 6];
e.skew = n[i + 7];
e.scaleX = n[i + 8];
e.scaleY = n[i + 9];
e.x = t.tx;
e.y = t.ty;
};
i.prototype.addBone = function(t) {
if (t.name in this.bones) console.warn("Same bone: " + t.name); else {
this.bones[t.name] = t;
this.sortedBones.push(t);
}
};
i.prototype.addSlot = function(t) {
if (t.name in this.slots) console.warn("Same slot: " + t.name); else {
this.slots[t.name] = t;
this.sortedSlots.push(t);
}
};
i.prototype.addConstraint = function(t) {
t.name in this.constraints ? console.warn("Same constraint: " + t.name) : this.constraints[t.name] = t;
};
i.prototype.addSkin = function(t) {
if (t.name in this.skins) console.warn("Same skin: " + t.name); else {
t.parent = this;
this.skins[t.name] = t;
null === this.defaultSkin && (this.defaultSkin = t);
"default" === t.name && (this.defaultSkin = t);
}
};
i.prototype.addAnimation = function(t) {
if (t.name in this.animations) console.warn("Same animation: " + t.name); else {
t.parent = this;
this.animations[t.name] = t;
this.animationNames.push(t.name);
null === this.defaultAnimation && (this.defaultAnimation = t);
}
};
i.prototype.addAction = function(t, e) {
e ? this.defaultActions.push(t) : this.actions.push(t);
};
i.prototype.getBone = function(t) {
return t in this.bones ? this.bones[t] : null;
};
i.prototype.getSlot = function(t) {
return t in this.slots ? this.slots[t] : null;
};
i.prototype.getConstraint = function(t) {
return t in this.constraints ? this.constraints[t] : null;
};
i.prototype.getSkin = function(t) {
return t in this.skins ? this.skins[t] : null;
};
i.prototype.getMesh = function(t, e, i) {
var n = this.getSkin(t);
return null === n ? null : n.getDisplay(e, i);
};
i.prototype.getAnimation = function(t) {
return t in this.animations ? this.animations[t] : null;
};
return i;
})(t.BaseObject);
t.ArmatureData = e;
var i = (function(e) {
a(i, e);
function i() {
var i = null !== e && e.apply(this, arguments) || this;
i.transform = new t.Transform();
i.userData = null;
return i;
}
i.toString = function() {
return "[class dragonBones.BoneData]";
};
i.prototype._onClear = function() {
null !== this.userData && this.userData.returnToPool();
this.inheritTranslation = !1;
this.inheritRotation = !1;
this.inheritScale = !1;
this.inheritReflection = !1;
this.type = 0;
this.length = 0;
this.name = "";
this.transform.identity();
this.userData = null;
this.parent = null;
};
return i;
})(t.BaseObject);
t.BoneData = i;
var n = (function(t) {
a(e, t);
function e() {
var e = null !== t && t.apply(this, arguments) || this;
e.vertices = [];
return e;
}
e.toString = function() {
return "[class dragonBones.SurfaceData]";
};
e.prototype._onClear = function() {
t.prototype._onClear.call(this);
this.type = 1;
this.segmentX = 0;
this.segmentY = 0;
this.vertices.length = 0;
};
return e;
})(i);
t.SurfaceData = n;
var r = (function(e) {
a(i, e);
function i() {
var t = null !== e && e.apply(this, arguments) || this;
t.color = null;
t.userData = null;
return t;
}
i.createColor = function() {
return new t.ColorTransform();
};
i.toString = function() {
return "[class dragonBones.SlotData]";
};
i.prototype._onClear = function() {
null !== this.userData && this.userData.returnToPool();
this.blendMode = 0;
this.displayIndex = 0;
this.zOrder = 0;
this.name = "";
this.color = null;
this.userData = null;
this.parent = null;
};
i.DEFAULT_COLOR = new t.ColorTransform();
return i;
})(t.BaseObject);
t.SlotData = r;
})(s || (s = {}));
(function(t) {
var e = (function(t) {
a(e, t);
function e() {
return null !== t && t.apply(this, arguments) || this;
}
e.prototype._onClear = function() {
this.order = 0;
this.name = "";
this.target = null;
this.root = null;
this.bone = null;
};
return e;
})(t.BaseObject);
t.ConstraintData = e;
var i = (function(t) {
a(e, t);
function e() {
return null !== t && t.apply(this, arguments) || this;
}
e.toString = function() {
return "[class dragonBones.IKConstraintData]";
};
e.prototype._onClear = function() {
t.prototype._onClear.call(this);
this.scaleEnabled = !1;
this.bendPositive = !1;
this.weight = 1;
};
return e;
})(e);
t.IKConstraintData = i;
})(s || (s = {}));
(function(t) {
var e = (function(t) {
a(e, t);
function e() {
return null !== t && t.apply(this, arguments) || this;
}
e.toString = function() {
return "[class dragonBones.CanvasData]";
};
e.prototype._onClear = function() {
this.hasBackground = !1;
this.color = 0;
this.x = 0;
this.y = 0;
this.width = 0;
this.height = 0;
};
return e;
})(t.BaseObject);
t.CanvasData = e;
})(s || (s = {}));
(function(t) {
var e = (function(t) {
a(e, t);
function e() {
var e = null !== t && t.apply(this, arguments) || this;
e.displays = {};
return e;
}
e.toString = function() {
return "[class dragonBones.SkinData]";
};
e.prototype._onClear = function() {
for (var t in this.displays) {
for (var e = 0, i = this.displays[t]; e < i.length; e++) {
var n = i[e];
null !== n && n.returnToPool();
}
delete this.displays[t];
}
this.name = "";
this.parent = null;
};
e.prototype.addDisplay = function(t, e) {
t in this.displays || (this.displays[t] = []);
null !== e && (e.parent = this);
this.displays[t].push(e);
};
e.prototype.getDisplay = function(t, e) {
var i = this.getDisplays(t);
if (null !== i) for (var n = 0, r = i; n < r.length; n++) {
var s = r[n];
if (null !== s && s.name === e) return s;
}
return null;
};
e.prototype.getDisplays = function(t) {
return t in this.displays ? this.displays[t] : null;
};
return e;
})(t.BaseObject);
t.SkinData = e;
})(s || (s = {}));
(function(t) {
var e = (function(e) {
a(i, e);
function i() {
var i = null !== e && e.apply(this, arguments) || this;
i.transform = new t.Transform();
return i;
}
i.prototype._onClear = function() {
this.name = "";
this.path = "";
this.transform.identity();
this.parent = null;
};
return i;
})(t.BaseObject);
t.DisplayData = e;
var i = (function(e) {
a(i, e);
function i() {
var i = null !== e && e.apply(this, arguments) || this;
i.pivot = new t.Point();
return i;
}
i.toString = function() {
return "[class dragonBones.ImageDisplayData]";
};
i.prototype._onClear = function() {
e.prototype._onClear.call(this);
this.type = 0;
this.pivot.clear();
this.texture = null;
};
return i;
})(e);
t.ImageDisplayData = i;
var n = (function(t) {
a(e, t);
function e() {
var e = null !== t && t.apply(this, arguments) || this;
e.actions = [];
return e;
}
e.toString = function() {
return "[class dragonBones.ArmatureDisplayData]";
};
e.prototype._onClear = function() {
t.prototype._onClear.call(this);
for (var e = 0, i = this.actions; e < i.length; e++) {
i[e].returnToPool();
}
this.type = 1;
this.inheritAnimation = !1;
this.actions.length = 0;
this.armature = null;
};
e.prototype.addAction = function(t) {
this.actions.push(t);
};
return e;
})(e);
t.ArmatureDisplayData = n;
var r = (function(t) {
a(e, t);
function e() {
var e = null !== t && t.apply(this, arguments) || this;
e.weight = null;
e.glue = null;
return e;
}
e.toString = function() {
return "[class dragonBones.MeshDisplayData]";
};
e.prototype._onClear = function() {
t.prototype._onClear.call(this);
null !== this.weight && this.weight.returnToPool();
null !== this.glue && this.glue.returnToPool();
this.type = 2;
this.inheritDeform = !1;
this.offset = 0;
this.weight = null;
this.glue = null;
this.texture = null;
};
return e;
})(e);
t.MeshDisplayData = r;
var s = (function(t) {
a(e, t);
function e() {
var e = null !== t && t.apply(this, arguments) || this;
e.boundingBox = null;
return e;
}
e.toString = function() {
return "[class dragonBones.BoundingBoxDisplayData]";
};
e.prototype._onClear = function() {
t.prototype._onClear.call(this);
null !== this.boundingBox && this.boundingBox.returnToPool();
this.type = 3;
this.boundingBox = null;
};
return e;
})(e);
t.BoundingBoxDisplayData = s;
var o = (function(t) {
a(e, t);
function e() {
var e = null !== t && t.apply(this, arguments) || this;
e.bones = [];
return e;
}
e.toString = function() {
return "[class dragonBones.WeightData]";
};
e.prototype._onClear = function() {
this.count = 0;
this.offset = 0;
this.bones.length = 0;
};
e.prototype.addBone = function(t) {
this.bones.push(t);
};
return e;
})(t.BaseObject);
t.WeightData = o;
var h = (function(t) {
a(e, t);
function e() {
var e = null !== t && t.apply(this, arguments) || this;
e.meshes = [];
return e;
}
e.toString = function() {
return "[class dragonBones.GlueData]";
};
e.prototype._onClear = function() {
this.weights.length = 0;
this.meshes.length = 0;
};
e.prototype.addMesh = function(t) {
this.meshes.push(t);
};
return e;
})(t.BaseObject);
t.GlueData = h;
})(s || (s = {}));
(function(t) {
var e = (function(t) {
a(e, t);
function e() {
return null !== t && t.apply(this, arguments) || this;
}
e.prototype._onClear = function() {
this.color = 0;
this.width = 0;
this.height = 0;
};
return e;
})(t.BaseObject);
t.BoundingBoxData = e;
var i = (function(t) {
a(e, t);
function e() {
return null !== t && t.apply(this, arguments) || this;
}
e.toString = function() {
return "[class dragonBones.RectangleBoundingBoxData]";
};
e._computeOutCode = function(t, e, i, n, r, s) {
var a = 0;
t < i ? a |= 1 : t > r && (a |= 2);
e < n ? a |= 4 : e > s && (a |= 8);
return a;
};
e.rectangleIntersectsSegment = function(t, i, n, r, s, a, o, h, l, c, u) {
void 0 === l && (l = null);
void 0 === c && (c = null);
void 0 === u && (u = null);
var _ = t > s && t < o && i > a && i < h, m = n > s && n < o && r > a && r < h;
if (_ && m) return -1;
for (var f = 0, d = e._computeOutCode(t, i, s, a, o, h), p = e._computeOutCode(n, r, s, a, o, h); ;) {
if (0 == (d | p)) {
f = 2;
break;
}
if (0 != (d & p)) break;
var g = 0, y = 0, v = 0, x = 0 !== d ? d : p;
if (0 != (4 & x)) {
g = t + (n - t) * (a - i) / (r - i);
y = a;
null !== u && (v = .5 * -Math.PI);
} else if (0 != (8 & x)) {
g = t + (n - t) * (h - i) / (r - i);
y = h;
null !== u && (v = .5 * Math.PI);
} else if (0 != (2 & x)) {
y = i + (r - i) * (o - t) / (n - t);
g = o;
null !== u && (v = 0);
} else if (0 != (1 & x)) {
y = i + (r - i) * (s - t) / (n - t);
g = s;
null !== u && (v = Math.PI);
}
if (x === d) {
t = g;
i = y;
d = e._computeOutCode(t, i, s, a, o, h);
null !== u && (u.x = v);
} else {
n = g;
r = y;
p = e._computeOutCode(n, r, s, a, o, h);
null !== u && (u.y = v);
}
}
if (f) if (_) {
f = 2;
if (null !== l) {
l.x = n;
l.y = r;
}
if (null !== c) {
c.x = n;
c.y = n;
}
null !== u && (u.x = u.y + Math.PI);
} else if (m) {
f = 1;
if (null !== l) {
l.x = t;
l.y = i;
}
if (null !== c) {
c.x = t;
c.y = i;
}
null !== u && (u.y = u.x + Math.PI);
} else {
f = 3;
if (null !== l) {
l.x = t;
l.y = i;
}
if (null !== c) {
c.x = n;
c.y = r;
}
}
return f;
};
e.prototype._onClear = function() {
t.prototype._onClear.call(this);
this.type = 0;
};
e.prototype.containsPoint = function(t, e) {
var i = .5 * this.width;
if (t >= -i && t <= i) {
var n = .5 * this.height;
if (e >= -n && e <= n) return !0;
}
return !1;
};
e.prototype.intersectsSegment = function(t, i, n, r, s, a, o) {
void 0 === s && (s = null);
void 0 === a && (a = null);
void 0 === o && (o = null);
var h = .5 * this.width, l = .5 * this.height;
return e.rectangleIntersectsSegment(t, i, n, r, -h, -l, h, l, s, a, o);
};
return e;
})(e);
t.RectangleBoundingBoxData = i;
var n = (function(t) {
a(e, t);
function e() {
return null !== t && t.apply(this, arguments) || this;
}
e.toString = function() {
return "[class dragonBones.EllipseData]";
};
e.ellipseIntersectsSegment = function(t, e, i, n, r, s, a, o, h, l, c) {
void 0 === h && (h = null);
void 0 === l && (l = null);
void 0 === c && (c = null);
var u = a / o, _ = u * u, m = i - t, f = (n *= u) - (e *= u), d = Math.sqrt(m * m + f * f), p = m / d, g = f / d, y = (r - t) * p + (s - e) * g, v = a * a, x = v - (t * t + e * e) + y * y, A = 0;
if (x >= 0) {
var b = Math.sqrt(x), T = y - b, C = y + b, w = T < 0 ? -1 : T <= d ? 0 : 1, S = C < 0 ? -1 : C <= d ? 0 : 1, E = w * S;
if (E < 0) return -1;
if (0 === E) if (-1 === w) {
A = 2;
i = t + C * p;
n = (e + C * g) / u;
if (null !== h) {
h.x = i;
h.y = n;
}
if (null !== l) {
l.x = i;
l.y = n;
}
if (null !== c) {
c.x = Math.atan2(n / v * _, i / v);
c.y = c.x + Math.PI;
}
} else if (1 === S) {
A = 1;
t += T * p;
e = (e + T * g) / u;
if (null !== h) {
h.x = t;
h.y = e;
}
if (null !== l) {
l.x = t;
l.y = e;
}
if (null !== c) {
c.x = Math.atan2(e / v * _, t / v);
c.y = c.x + Math.PI;
}
} else {
A = 3;
if (null !== h) {
h.x = t + T * p;
h.y = (e + T * g) / u;
null !== c && (c.x = Math.atan2(h.y / v * _, h.x / v));
}
if (null !== l) {
l.x = t + C * p;
l.y = (e + C * g) / u;
null !== c && (c.y = Math.atan2(l.y / v * _, l.x / v));
}
}
}
return A;
};
e.prototype._onClear = function() {
t.prototype._onClear.call(this);
this.type = 1;
};
e.prototype.containsPoint = function(t, e) {
var i = .5 * this.width;
if (t >= -i && t <= i) {
var n = .5 * this.height;
if (e >= -n && e <= n) {
e *= i / n;
return Math.sqrt(t * t + e * e) <= i;
}
}
return !1;
};
e.prototype.intersectsSegment = function(t, i, n, r, s, a, o) {
void 0 === s && (s = null);
void 0 === a && (a = null);
void 0 === o && (o = null);
return e.ellipseIntersectsSegment(t, i, n, r, 0, 0, .5 * this.width, .5 * this.height, s, a, o);
};
return e;
})(e);
t.EllipseBoundingBoxData = n;
var r = (function(t) {
a(e, t);
function e() {
var e = null !== t && t.apply(this, arguments) || this;
e.vertices = [];
e.weight = null;
return e;
}
e.toString = function() {
return "[class dragonBones.PolygonBoundingBoxData]";
};
e.polygonIntersectsSegment = function(t, e, i, n, r, s, a, o) {
void 0 === s && (s = null);
void 0 === a && (a = null);
void 0 === o && (o = null);
t === i && (t = i + 1e-6);
e === n && (e = n + 1e-6);
for (var h = r.length, l = t - i, c = e - n, u = t * n - e * i, _ = 0, m = r[h - 2], f = r[h - 1], d = 0, p = 0, g = 0, y = 0, v = 0, x = 0, A = 0; A < h; A += 2) {
var b = r[A], T = r[A + 1];
m === b && (m = b + 1e-4);
f === T && (f = T + 1e-4);
var C = m - b, w = f - T, S = m * T - f * b, E = l * w - c * C, D = (u * C - l * S) / E;
if ((D >= m && D <= b || D >= b && D <= m) && (0 === l || D >= t && D <= i || D >= i && D <= t)) {
var M = (u * w - c * S) / E;
if ((M >= f && M <= T || M >= T && M <= f) && (0 === c || M >= e && M <= n || M >= n && M <= e)) {
if (null === a) {
g = D;
y = M;
v = D;
x = M;
_++;
if (null !== o) {
o.x = Math.atan2(T - f, b - m) - .5 * Math.PI;
o.y = o.x;
}
break;
}
var I = D - t;
I < 0 && (I = -I);
if (0 === _) {
d = I;
p = I;
g = D;
y = M;
v = D;
x = M;
if (null !== o) {
o.x = Math.atan2(T - f, b - m) - .5 * Math.PI;
o.y = o.x;
}
} else {
if (I < d) {
d = I;
g = D;
y = M;
null !== o && (o.x = Math.atan2(T - f, b - m) - .5 * Math.PI);
}
if (I > p) {
p = I;
v = D;
x = M;
null !== o && (o.y = Math.atan2(T - f, b - m) - .5 * Math.PI);
}
}
_++;
}
}
m = b;
f = T;
}
if (1 === _) {
if (null !== s) {
s.x = g;
s.y = y;
}
if (null !== a) {
a.x = g;
a.y = y;
}
null !== o && (o.y = o.x + Math.PI);
} else if (_ > 1) {
_++;
if (null !== s) {
s.x = g;
s.y = y;
}
if (null !== a) {
a.x = v;
a.y = x;
}
}
return _;
};
e.prototype._onClear = function() {
t.prototype._onClear.call(this);
null !== this.weight && this.weight.returnToPool();
this.type = 2;
this.x = 0;
this.y = 0;
this.vertices.length = 0;
this.weight = null;
};
e.prototype.containsPoint = function(t, e) {
var i = !1;
if (t >= this.x && t <= this.width && e >= this.y && e <= this.height) for (var n = 0, r = this.vertices.length, s = r - 2; n < r; n += 2) {
var a = this.vertices[s + 1], o = this.vertices[n + 1];
if (o < e && a >= e || a < e && o >= e) {
var h = this.vertices[s], l = this.vertices[n];
(e - o) * (h - l) / (a - o) + l < t && (i = !i);
}
s = n;
}
return i;
};
e.prototype.intersectsSegment = function(t, n, r, s, a, o, h) {
void 0 === a && (a = null);
void 0 === o && (o = null);
void 0 === h && (h = null);
var l = 0;
0 !== i.rectangleIntersectsSegment(t, n, r, s, this.x, this.y, this.x + this.width, this.y + this.height, null, null, null) && (l = e.polygonIntersectsSegment(t, n, r, s, this.vertices, a, o, h));
return l;
};
return e;
})(e);
t.PolygonBoundingBoxData = r;
})(s || (s = {}));
(function(t) {
var e = (function(t) {
a(e, t);
function e() {
var e = null !== t && t.apply(this, arguments) || this;
e.cachedFrames = [];
e.boneTimelines = {};
e.surfaceTimelines = {};
e.slotTimelines = {};
e.constraintTimelines = {};
e.animationTimelines = {};
e.boneCachedFrameIndices = {};
e.slotCachedFrameIndices = {};
e.actionTimeline = null;
e.zOrderTimeline = null;
return e;
}
e.toString = function() {
return "[class dragonBones.AnimationData]";
};
e.prototype._onClear = function() {
for (var t in this.boneTimelines) {
for (var e = 0, i = this.boneTimelines[t]; e < i.length; e++) {
i[e].returnToPool();
}
delete this.boneTimelines[t];
}
for (var t in this.surfaceTimelines) {
for (var n = 0, r = this.surfaceTimelines[t]; n < r.length; n++) {
r[n].returnToPool();
}
delete this.surfaceTimelines[t];
}
for (var t in this.slotTimelines) {
for (var s = 0, a = this.slotTimelines[t]; s < a.length; s++) {
a[s].returnToPool();
}
delete this.slotTimelines[t];
}
for (var t in this.constraintTimelines) {
for (var o = 0, h = this.constraintTimelines[t]; o < h.length; o++) {
h[o].returnToPool();
}
delete this.constraintTimelines[t];
}
for (var t in this.animationTimelines) {
for (var l = 0, c = this.animationTimelines[t]; l < c.length; l++) {
c[l].returnToPool();
}
delete this.animationTimelines[t];
}
for (var t in this.boneCachedFrameIndices) delete this.boneCachedFrameIndices[t];
for (var t in this.slotCachedFrameIndices) delete this.slotCachedFrameIndices[t];
null !== this.actionTimeline && this.actionTimeline.returnToPool();
null !== this.zOrderTimeline && this.zOrderTimeline.returnToPool();
this.frameIntOffset = 0;
this.frameFloatOffset = 0;
this.frameOffset = 0;
this.frameCount = 0;
this.playTimes = 0;
this.duration = 0;
this.scale = 1;
this.fadeInTime = 0;
this.cacheFrameRate = 0;
this.name = "";
this.cachedFrames.length = 0;
this.actionTimeline = null;
this.zOrderTimeline = null;
this.parent = null;
};
e.prototype.cacheFrames = function(t) {
if (!(this.cacheFrameRate > 0)) {
this.cacheFrameRate = Math.max(Math.ceil(t * this.scale), 1);
var e = Math.ceil(this.cacheFrameRate * this.duration) + 1;
this.cachedFrames.length = e;
for (var i = 0, n = this.cacheFrames.length; i < n; ++i) this.cachedFrames[i] = !1;
for (var r = 0, s = this.parent.sortedBones; r < s.length; r++) {
var a = s[r];
for (i = 0, n = (l = new Array(e)).length; i < n; ++i) l[i] = -1;
this.boneCachedFrameIndices[a.name] = l;
}
for (var o = 0, h = this.parent.sortedSlots; o < h.length; o++) {
var l, c = h[o];
for (i = 0, n = (l = new Array(e)).length; i < n; ++i) l[i] = -1;
this.slotCachedFrameIndices[c.name] = l;
}
}
};
e.prototype.addBoneTimeline = function(t, e) {
var i = t.name in this.boneTimelines ? this.boneTimelines[t.name] : this.boneTimelines[t.name] = [];
i.indexOf(e) < 0 && i.push(e);
};
e.prototype.addSurfaceTimeline = function(t, e) {
var i = t.name in this.surfaceTimelines ? this.surfaceTimelines[t.name] : this.surfaceTimelines[t.name] = [];
i.indexOf(e) < 0 && i.push(e);
};
e.prototype.addSlotTimeline = function(t, e) {
var i = t.name in this.slotTimelines ? this.slotTimelines[t.name] : this.slotTimelines[t.name] = [];
i.indexOf(e) < 0 && i.push(e);
};
e.prototype.addConstraintTimeline = function(t, e) {
var i = t.name in this.constraintTimelines ? this.constraintTimelines[t.name] : this.constraintTimelines[t.name] = [];
i.indexOf(e) < 0 && i.push(e);
};
e.prototype.addAnimationTimeline = function(t, e) {
var i = t in this.animationTimelines ? this.animationTimelines[t] : this.animationTimelines[t] = [];
i.indexOf(e) < 0 && i.push(e);
};
e.prototype.getBoneTimelines = function(t) {
return t in this.boneTimelines ? this.boneTimelines[t] : null;
};
e.prototype.getSurfaceTimelines = function(t) {
return t in this.surfaceTimelines ? this.surfaceTimelines[t] : null;
};
e.prototype.getSlotTimelines = function(t) {
return t in this.slotTimelines ? this.slotTimelines[t] : null;
};
e.prototype.getConstraintTimelines = function(t) {
return t in this.constraintTimelines ? this.constraintTimelines[t] : null;
};
e.prototype.getAnimationTimelines = function(t) {
return t in this.animationTimelines ? this.animationTimelines[t] : null;
};
e.prototype.getBoneCachedFrameIndices = function(t) {
return t in this.boneCachedFrameIndices ? this.boneCachedFrameIndices[t] : null;
};
e.prototype.getSlotCachedFrameIndices = function(t) {
return t in this.slotCachedFrameIndices ? this.slotCachedFrameIndices[t] : null;
};
return e;
})(t.BaseObject);
t.AnimationData = e;
var i = (function(t) {
a(e, t);
function e() {
return null !== t && t.apply(this, arguments) || this;
}
e.toString = function() {
return "[class dragonBones.TimelineData]";
};
e.prototype._onClear = function() {
this.type = 10;
this.offset = 0;
this.frameIndicesOffset = -1;
};
return e;
})(t.BaseObject);
t.TimelineData = i;
})(s || (s = {}));
(function(t) {
var e = (function(t) {
a(e, t);
function e() {
var e = null !== t && t.apply(this, arguments) || this;
e.boneMask = [];
return e;
}
e.toString = function() {
return "[class dragonBones.AnimationConfig]";
};
e.prototype._onClear = function() {
this.pauseFadeOut = !0;
this.fadeOutMode = 4;
this.fadeOutTweenType = 1;
this.fadeOutTime = -1;
this.actionEnabled = !0;
this.additiveBlending = !1;
this.displayControl = !0;
this.pauseFadeIn = !0;
this.resetToPose = !0;
this.fadeInTweenType = 1;
this.playTimes = -1;
this.layer = 0;
this.position = 0;
this.duration = -1;
this.timeScale = -100;
this.weight = 1;
this.fadeInTime = -1;
this.autoFadeOutTime = -1;
this.name = "";
this.animation = "";
this.group = "";
this.boneMask.length = 0;
};
e.prototype.clear = function() {
this._onClear();
};
e.prototype.copyFrom = function(t) {
this.pauseFadeOut = t.pauseFadeOut;
this.fadeOutMode = t.fadeOutMode;
this.autoFadeOutTime = t.autoFadeOutTime;
this.fadeOutTweenType = t.fadeOutTweenType;
this.actionEnabled = t.actionEnabled;
this.additiveBlending = t.additiveBlending;
this.displayControl = t.displayControl;
this.pauseFadeIn = t.pauseFadeIn;
this.resetToPose = t.resetToPose;
this.playTimes = t.playTimes;
this.layer = t.layer;
this.position = t.position;
this.duration = t.duration;
this.timeScale = t.timeScale;
this.fadeInTime = t.fadeInTime;
this.fadeOutTime = t.fadeOutTime;
this.fadeInTweenType = t.fadeInTweenType;
this.weight = t.weight;
this.name = t.name;
this.animation = t.animation;
this.group = t.group;
this.boneMask.length = t.boneMask.length;
for (var e = 0, i = this.boneMask.length; e < i; ++e) this.boneMask[e] = t.boneMask[e];
};
e.prototype.containsBoneMask = function(t) {
return 0 === this.boneMask.length || this.boneMask.indexOf(t) >= 0;
};
e.prototype.addBoneMask = function(t, e, i) {
void 0 === i && (i = !0);
var n = t.getBone(e);
if (null !== n) {
this.boneMask.indexOf(e) < 0 && this.boneMask.push(e);
if (i) for (var r = 0, s = t.getBones(); r < s.length; r++) {
var a = s[r];
this.boneMask.indexOf(a.name) < 0 && n.contains(a) && this.boneMask.push(a.name);
}
}
};
e.prototype.removeBoneMask = function(t, e, i) {
void 0 === i && (i = !0);
var n = this.boneMask.indexOf(e);
n >= 0 && this.boneMask.splice(n, 1);
if (i) {
var r = t.getBone(e);
if (null !== r) if (this.boneMask.length > 0) for (var s = 0, a = t.getBones(); s < a.length; s++) {
var o = a[s], h = this.boneMask.indexOf(o.name);
h >= 0 && r.contains(o) && this.boneMask.splice(h, 1);
} else for (var l = 0, c = t.getBones(); l < c.length; l++) {
(o = c[l]) !== r && (r.contains(o) || this.boneMask.push(o.name));
}
}
};
return e;
})(t.BaseObject);
t.AnimationConfig = e;
})(s || (s = {}));
(function(t) {
var e = (function(t) {
a(e, t);
function e() {
var e = null !== t && t.apply(this, arguments) || this;
e.textures = {};
return e;
}
e.prototype._onClear = function() {
for (var t in this.textures) {
this.textures[t].returnToPool();
delete this.textures[t];
}
this.autoSearch = !1;
this.width = 0;
this.height = 0;
this.scale = 1;
this.name = "";
this.imagePath = "";
};
e.prototype.copyFrom = function(t) {
this.autoSearch = t.autoSearch;
this.scale = t.scale;
this.width = t.width;
this.height = t.height;
this.name = t.name;
this.imagePath = t.imagePath;
for (var e in this.textures) {
this.textures[e].returnToPool();
delete this.textures[e];
}
for (var e in t.textures) {
var i = this.createTexture();
i.copyFrom(t.textures[e]);
this.textures[e] = i;
}
};
e.prototype.addTexture = function(t) {
if (t.name in this.textures) console.warn("Same texture: " + t.name); else {
t.parent = this;
this.textures[t.name] = t;
}
};
e.prototype.getTexture = function(t) {
return t in this.textures ? this.textures[t] : null;
};
return e;
})(t.BaseObject);
t.TextureAtlasData = e;
var i = (function(e) {
a(i, e);
function i() {
var i = null !== e && e.apply(this, arguments) || this;
i.region = new t.Rectangle();
i.frame = null;
return i;
}
i.createRectangle = function() {
return new t.Rectangle();
};
i.prototype._onClear = function() {
this.rotated = !1;
this.name = "";
this.region.clear();
this.parent = null;
this.frame = null;
};
i.prototype.copyFrom = function(t) {
this.rotated = t.rotated;
this.name = t.name;
this.region.copyFrom(t.region);
this.parent = t.parent;
null === this.frame && null !== t.frame ? this.frame = i.createRectangle() : null !== this.frame && null === t.frame && (this.frame = null);
null !== this.frame && null !== t.frame && this.frame.copyFrom(t.frame);
};
return i;
})(t.BaseObject);
t.TextureData = i;
})(s || (s = {}));
(function(t) {
var e = (function(e) {
a(i, e);
function i() {
var t = null !== e && e.apply(this, arguments) || this;
t._bones = [];
t._slots = [];
t._glueSlots = [];
t._constraints = [];
t._actions = [];
t._animation = null;
t._proxy = null;
t._replaceTextureAtlasData = null;
t._clock = null;
return t;
}
i.toString = function() {
return "[class dragonBones.Armature]";
};
i._onSortSlots = function(t, e) {
return t._zOrder > e._zOrder ? 1 : -1;
};
i.prototype._onClear = function() {
null !== this._clock && this._clock.remove(this);
for (var t = 0, e = this._bones; t < e.length; t++) {
e[t].returnToPool();
}
for (var i = 0, n = this._slots; i < n.length; i++) {
n[i].returnToPool();
}
for (var r = 0, s = this._constraints; r < s.length; r++) {
s[r].returnToPool();
}
null !== this._animation && this._animation.returnToPool();
null !== this._proxy && this._proxy.dbClear();
null !== this._replaceTextureAtlasData && this._replaceTextureAtlasData.returnToPool();
this.inheritAnimation = !0;
this.userData = null;
this._lockUpdate = !1;
this._bonesDirty = !1;
this._slotsDirty = !1;
this._zOrderDirty = !1;
this._flipX = !1;
this._flipY = !1;
this._cacheFrameIndex = -1;
this._bones.length = 0;
this._slots.length = 0;
this._glueSlots.length = 0;
this._constraints.length = 0;
this._actions.length = 0;
this._armatureData = null;
this._animation = null;
this._proxy = null;
this._display = null;
this._replaceTextureAtlasData = null;
this._replacedTexture = null;
this._dragonBones = null;
this._clock = null;
this._parent = null;
};
i.prototype._sortBones = function() {
var t = this._bones.length;
if (!(t <= 0)) {
var e = this._bones.concat(), i = 0, n = 0;
this._bones.length = 0;
for (;n < t; ) {
var r = e[i++];
i >= t && (i = 0);
if (!(this._bones.indexOf(r) >= 0)) {
if (r._hasConstraint) {
for (var s = !1, a = 0, o = this._constraints; a < o.length; a++) {
var h = o[a];
if (h._root === r && this._bones.indexOf(h._target) < 0) {
s = !0;
break;
}
}
if (s) continue;
}
if (!(null !== r.parent && this._bones.indexOf(r.parent) < 0)) {
this._bones.push(r);
n++;
}
}
}
}
};
i.prototype._sortSlots = function() {
this._slots.sort(i._onSortSlots);
};
i.prototype._sortZOrder = function(t, e) {
var i = this._armatureData.sortedSlots, n = null === t;
if (this._zOrderDirty || !n) {
for (var r = 0, s = i.length; r < s; ++r) {
var a = n ? r : t[e + r];
if (!(a < 0 || a >= s)) {
var o = i[a], h = this.getSlot(o.name);
null !== h && h._setZorder(r);
}
}
this._slotsDirty = !0;
this._zOrderDirty = !n;
}
};
i.prototype._addBoneToBoneList = function(t) {
if (this._bones.indexOf(t) < 0) {
this._bonesDirty = !0;
this._bones.push(t);
}
};
i.prototype._removeBoneFromBoneList = function(t) {
var e = this._bones.indexOf(t);
e >= 0 && this._bones.splice(e, 1);
};
i.prototype._addSlotToSlotList = function(t) {
if (this._slots.indexOf(t) < 0) {
this._slotsDirty = !0;
this._slots.push(t);
}
};
i.prototype._removeSlotFromSlotList = function(t) {
var e = this._slots.indexOf(t);
e >= 0 && this._slots.splice(e, 1);
};
i.prototype._bufferAction = function(t, e) {
this._actions.indexOf(t) < 0 && (e ? this._actions.push(t) : this._actions.unshift(t));
};
i.prototype.dispose = function() {
if (null !== this._armatureData) {
this._lockUpdate = !0;
this._dragonBones.bufferObject(this);
}
};
i.prototype.init = function(e, i, n, r) {
if (null === this._armatureData) {
this._armatureData = e;
this._animation = t.BaseObject.borrowObject(t.Animation);
this._proxy = i;
this._display = n;
this._dragonBones = r;
this._proxy.dbInit(this);
this._animation.init(this);
this._animation.animations = this._armatureData.animations;
}
};
i.prototype.advanceTime = function(t) {
if (!this._lockUpdate) if (null !== this._armatureData) if (null !== this._armatureData.parent) {
var e = this._cacheFrameIndex;
this._animation.advanceTime(t);
if (this._bonesDirty) {
this._bonesDirty = !1;
this._sortBones();
}
if (this._slotsDirty) {
this._slotsDirty = !1;
this._sortSlots();
}
if (this._cacheFrameIndex < 0 || this._cacheFrameIndex !== e) {
var i = 0, n = 0;
for (i = 0, n = this._bones.length; i < n; ++i) this._bones[i].update(this._cacheFrameIndex);
for (i = 0, n = this._slots.length; i < n; ++i) this._slots[i].update(this._cacheFrameIndex);
for (i = 0, n = this._glueSlots.length; i < n; ++i) this._glueSlots[i]._updateGlueMesh();
}
if (this._actions.length > 0) {
this._lockUpdate = !0;
for (var r = 0, s = this._actions; r < s.length; r++) {
var a = s[r];
0 === a.type && this._animation.fadeIn(a.name);
}
this._actions.length = 0;
this._lockUpdate = !1;
}
this._proxy.dbUpdate();
} else console.warn("The armature data has been disposed.\nPlease make sure dispose armature before call factory.clear()."); else console.warn("The armature has been disposed.");
};
i.prototype.invalidUpdate = function(t, e) {
void 0 === t && (t = null);
void 0 === e && (e = !1);
if (null !== t && t.length > 0) {
if (null !== (a = this.getBone(t))) {
a.invalidUpdate();
if (e) for (var i = 0, n = this._slots; i < n.length; i++) {
(l = n[i]).parent === a && l.invalidUpdate();
}
}
} else {
for (var r = 0, s = this._bones; r < s.length; r++) {
var a;
(a = s[r]).invalidUpdate();
}
if (e) for (var o = 0, h = this._slots; o < h.length; o++) {
var l;
(l = h[o]).invalidUpdate();
}
}
};
i.prototype.containsPoint = function(t, e) {
for (var i = 0, n = this._slots; i < n.length; i++) {
var r = n[i];
if (r.containsPoint(t, e)) return r;
}
return null;
};
i.prototype.intersectsSegment = function(t, e, i, n, r, s, a) {
void 0 === r && (r = null);
void 0 === s && (s = null);
void 0 === a && (a = null);
for (var o = t === i, h = 0, l = 0, c = 0, u = 0, _ = 0, m = 0, f = 0, d = 0, p = null, g = null, y = 0, v = this._slots; y < v.length; y++) {
var x = v[y];
if (x.intersectsSegment(t, e, i, n, r, s, a) > 0) {
if (null === r && null === s) {
p = x;
break;
}
if (null !== r) {
(A = o ? r.y - e : r.x - t) < 0 && (A = -A);
if (null === p || A < h) {
h = A;
c = r.x;
u = r.y;
p = x;
a && (f = a.x);
}
}
if (null !== s) {
var A;
(A = s.x - t) < 0 && (A = -A);
if (null === g || A > l) {
l = A;
_ = s.x;
m = s.y;
g = x;
null !== a && (d = a.y);
}
}
}
}
if (null !== p && null !== r) {
r.x = c;
r.y = u;
null !== a && (a.x = f);
}
if (null !== g && null !== s) {
s.x = _;
s.y = m;
null !== a && (a.y = d);
}
return p;
};
i.prototype.getBone = function(t) {
for (var e = 0, i = this._bones; e < i.length; e++) {
var n = i[e];
if (n.name === t) return n;
}
return null;
};
i.prototype.getBoneByDisplay = function(t) {
var e = this.getSlotByDisplay(t);
return null !== e ? e.parent : null;
};
i.prototype.getSlot = function(t) {
for (var e = 0, i = this._slots; e < i.length; e++) {
var n = i[e];
if (n.name === t) return n;
}
return null;
};
i.prototype.getSlotByDisplay = function(t) {
if (null !== t) for (var e = 0, i = this._slots; e < i.length; e++) {
var n = i[e];
if (n.display === t) return n;
}
return null;
};
i.prototype.addBone = function(t, e) {
console.assert(null !== t);
t._setArmature(this);
t._setParent(e.length > 0 ? this.getBone(e) : null);
};
i.prototype.addSlot = function(t, e) {
var i = this.getBone(e);
console.assert(null !== t && null !== i);
t._setArmature(this);
t._setParent(i);
};
i.prototype.addConstraint = function(t) {
this._constraints.indexOf(t) < 0 && this._constraints.push(t);
};
i.prototype.removeBone = function(t) {
console.assert(null !== t && t.armature === this);
t._setParent(null);
t._setArmature(null);
};
i.prototype.removeSlot = function(t) {
console.assert(null !== t && t.armature === this);
t._setParent(null);
t._setArmature(null);
};
i.prototype.getBones = function() {
return this._bones;
};
i.prototype.getSlots = function() {
return this._slots;
};
Object.defineProperty(i.prototype, "flipX", {
get: function() {
return this._flipX;
},
set: function(t) {
if (this._flipX !== t) {
this._flipX = t;
this.invalidUpdate();
}
},
enumerable: !0,
configurable: !0
});
Object.defineProperty(i.prototype, "flipY", {
get: function() {
return this._flipY;
},
set: function(t) {
if (this._flipY !== t) {
this._flipY = t;
this.invalidUpdate();
}
},
enumerable: !0,
configurable: !0
});
Object.defineProperty(i.prototype, "cacheFrameRate", {
get: function() {
return this._armatureData.cacheFrameRate;
},
set: function(t) {
if (this._armatureData.cacheFrameRate !== t) {
this._armatureData.cacheFrames(t);
for (var e = 0, i = this._slots; e < i.length; e++) {
var n = i[e].childArmature;
null !== n && (n.cacheFrameRate = t);
}
}
},
enumerable: !0,
configurable: !0
});
Object.defineProperty(i.prototype, "name", {
get: function() {
return this._armatureData.name;
},
enumerable: !0,
configurable: !0
});
Object.defineProperty(i.prototype, "armatureData", {
get: function() {
return this._armatureData;
},
enumerable: !0,
configurable: !0
});
Object.defineProperty(i.prototype, "animation", {
get: function() {
return this._animation;
},
enumerable: !0,
configurable: !0
});
Object.defineProperty(i.prototype, "proxy", {
get: function() {
return this._proxy;
},
enumerable: !0,
configurable: !0
});
Object.defineProperty(i.prototype, "eventDispatcher", {
get: function() {
return this._proxy;
},
enumerable: !0,
configurable: !0
});
Object.defineProperty(i.prototype, "display", {
get: function() {
return this._display;
},
enumerable: !0,
configurable: !0
});
Object.defineProperty(i.prototype, "replacedTexture", {
get: function() {
return this._replacedTexture;
},
set: function(t) {
if (this._replacedTexture !== t) {
if (null !== this._replaceTextureAtlasData) {
this._replaceTextureAtlasData.returnToPool();
this._replaceTextureAtlasData = null;
}
this._replacedTexture = t;
for (var e = 0, i = this._slots; e < i.length; e++) {
var n = i[e];
n.invalidUpdate();
n.update(-1);
}
}
},
enumerable: !0,
configurable: !0
});
Object.defineProperty(i.prototype, "clock", {
get: function() {
return this._clock;
},
set: function(t) {
if (this._clock !== t) {
null !== this._clock && this._clock.remove(this);
this._clock = t;
this._clock && this._clock.add(this);
for (var e = 0, i = this._slots; e < i.length; e++) {
var n = i[e].childArmature;
null !== n && (n.clock = this._clock);
}
}
},
enumerable: !0,
configurable: !0
});
Object.defineProperty(i.prototype, "parent", {
get: function() {
return this._parent;
},
enumerable: !0,
configurable: !0
});
i.prototype.replaceTexture = function(t) {
this.replacedTexture = t;
};
i.prototype.hasEventListener = function(t) {
return this._proxy.hasDBEventListener(t);
};
i.prototype.addEventListener = function(t, e, i) {
this._proxy.addDBEventListener(t, e, i);
};
i.prototype.removeEventListener = function(t, e, i) {
this._proxy.removeDBEventListener(t, e, i);
};
i.prototype.enableAnimationCache = function(t) {
this.cacheFrameRate = t;
};
i.prototype.getDisplay = function() {
return this._display;
};
return i;
})(t.BaseObject);
t.Armature = e;
})(s || (s = {}));
(function(t) {
var e = (function(e) {
a(i, e);
function i() {
var i = null !== e && e.apply(this, arguments) || this;
i.globalTransformMatrix = new t.Matrix();
i.global = new t.Transform();
i.offset = new t.Transform();
return i;
}
i.prototype._onClear = function() {
this.globalTransformMatrix.identity();
this.global.identity();
this.offset.identity();
this.origin = null;
this.userData = null;
this._globalDirty = !1;
this._armature = null;
this._parent = null;
};
i.prototype._setArmature = function(t) {
this._armature = t;
};
i.prototype._setParent = function(t) {
this._parent = t;
};
i.prototype.updateGlobalTransform = function() {
if (this._globalDirty) {
this._globalDirty = !1;
this.global.fromMatrix(this.globalTransformMatrix);
}
};
Object.defineProperty(i.prototype, "armature", {
get: function() {
return this._armature;
},
enumerable: !0,
configurable: !0
});
Object.defineProperty(i.prototype, "parent", {
get: function() {
return this._parent;
},
enumerable: !0,
configurable: !0
});
i._helpMatrix = new t.Matrix();
i._helpTransform = new t.Transform();
i._helpPoint = new t.Point();
return i;
})(t.BaseObject);
t.TransformObject = e;
})(s || (s = {}));
(function(t) {
var e = (function(e) {
a(i, e);
function i() {
var i = null !== e && e.apply(this, arguments) || this;
i.animationPose = new t.Transform();
i._blendState = new t.BlendState();
return i;
}
i.toString = function() {
return "[class dragonBones.Bone]";
};
i.prototype._onClear = function() {
e.prototype._onClear.call(this);
this.offsetMode = 1;
this.animationPose.identity();
this._transformDirty = !1;
this._childrenTransformDirty = !1;
this._localDirty = !0;
this._hasConstraint = !1;
this._visible = !0;
this._cachedFrameIndex = -1;
this._blendState.clear();
this._boneData = null;
this._cachedFrameIndices = null;
};
i.prototype._updateGlobalTransformMatrix = function(e) {
var i = this._boneData, n = this._parent, r = this._armature.flipX, s = this._armature.flipY === t.DragonBones.yDown, a = null !== n, o = 0, h = this.global, l = this.globalTransformMatrix;
if (1 === this.offsetMode) if (null !== this.origin) {
h.x = this.origin.x + this.offset.x + this.animationPose.x;
h.y = this.origin.y + this.offset.y + this.animationPose.y;
h.skew = this.origin.skew + this.offset.skew + this.animationPose.skew;
h.rotation = this.origin.rotation + this.offset.rotation + this.animationPose.rotation;
h.scaleX = this.origin.scaleX * this.offset.scaleX * this.animationPose.scaleX;
h.scaleY = this.origin.scaleY * this.offset.scaleY * this.animationPose.scaleY;
} else h.copyFrom(this.offset).add(this.animationPose); else if (0 === this.offsetMode) null !== this.origin ? h.copyFrom(this.origin).add(this.animationPose) : h.copyFrom(this.animationPose); else {
a = !1;
h.copyFrom(this.offset);
}
if (a) {
var c = 0 === n._boneData.type ? n.globalTransformMatrix : n._getGlobalTransformMatrix(h.x, h.y);
if (i.inheritScale) {
if (!i.inheritRotation) {
n.updateGlobalTransform();
o = r && s ? h.rotation - (n.global.rotation + Math.PI) : r ? h.rotation + n.global.rotation + Math.PI : s ? h.rotation + n.global.rotation : h.rotation - n.global.rotation;
h.rotation = o;
}
h.toMatrix(l);
l.concat(c);
if (i.inheritTranslation) {
h.x = l.tx;
h.y = l.ty;
} else {
l.tx = h.x;
l.ty = h.y;
}
e ? h.fromMatrix(l) : this._globalDirty = !0;
} else {
if (i.inheritTranslation) {
var u = h.x, _ = h.y;
h.x = c.a * u + c.c * _ + c.tx;
h.y = c.b * u + c.d * _ + c.ty;
} else {
r && (h.x = -h.x);
s && (h.y = -h.y);
}
if (i.inheritRotation) {
n.updateGlobalTransform();
o = n.global.scaleX < 0 ? h.rotation + n.global.rotation + Math.PI : h.rotation + n.global.rotation;
if (c.a * c.d - c.b * c.c < 0) {
o -= 2 * h.rotation;
(r !== s || i.inheritReflection) && (h.skew += Math.PI);
}
h.rotation = o;
} else if (r || s) {
if (r && s) o = h.rotation + Math.PI; else {
o = r ? Math.PI - h.rotation : -h.rotation;
h.skew += Math.PI;
}
h.rotation = o;
}
h.toMatrix(l);
}
} else {
if (r || s) {
r && (h.x = -h.x);
s && (h.y = -h.y);
if (r && s) o = h.rotation + Math.PI; else {
o = r ? Math.PI - h.rotation : -h.rotation;
h.skew += Math.PI;
}
h.rotation = o;
}
h.toMatrix(l);
}
};
i.prototype._setArmature = function(t) {
if (this._armature !== t) {
var e = null, i = null;
if (null !== this._armature) {
e = this.getSlots();
i = this.getBones();
this._armature._removeBoneFromBoneList(this);
}
this._armature = t;
null !== this._armature && this._armature._addBoneToBoneList(this);
if (null !== e) for (var n = 0, r = e; n < r.length; n++) {
var s = r[n];
s.parent === this && s._setArmature(this._armature);
}
if (null !== i) for (var a = 0, o = i; a < o.length; a++) {
var h = o[a];
h.parent === this && h._setArmature(this._armature);
}
}
};
i.prototype.init = function(t) {
if (null === this._boneData) {
this._boneData = t;
this.origin = this._boneData.transform;
}
};
i.prototype.update = function(t) {
this._blendState.dirty = !1;
if (t >= 0 && null !== this._cachedFrameIndices) {
var e = this._cachedFrameIndices[t];
if (e >= 0 && this._cachedFrameIndex === e) this._transformDirty = !1; else if (e >= 0) {
this._transformDirty = !0;
this._cachedFrameIndex = e;
} else {
if (this._hasConstraint) for (var i = 0, n = this._armature._constraints; i < n.length; i++) {
(a = n[i])._root === this && a.update();
}
if (this._transformDirty || null !== this._parent && this._parent._childrenTransformDirty) {
this._transformDirty = !0;
this._cachedFrameIndex = -1;
} else if (this._cachedFrameIndex >= 0) {
this._transformDirty = !1;
this._cachedFrameIndices[t] = this._cachedFrameIndex;
} else {
this._transformDirty = !0;
this._cachedFrameIndex = -1;
}
}
} else {
if (this._hasConstraint) for (var r = 0, s = this._armature._constraints; r < s.length; r++) {
var a;
(a = s[r])._root === this && a.update();
}
if (this._transformDirty || null !== this._parent && this._parent._childrenTransformDirty) {
t = -1;
this._transformDirty = !0;
this._cachedFrameIndex = -1;
}
}
if (this._transformDirty) {
this._transformDirty = !1;
this._childrenTransformDirty = !0;
if (this._cachedFrameIndex < 0) {
var o = t >= 0;
this._localDirty && this._updateGlobalTransformMatrix(o);
o && null !== this._cachedFrameIndices && (this._cachedFrameIndex = this._cachedFrameIndices[t] = this._armature._armatureData.setCacheFrame(this.globalTransformMatrix, this.global));
} else this._armature._armatureData.getCacheFrame(this.globalTransformMatrix, this.global, this._cachedFrameIndex);
} else this._childrenTransformDirty && (this._childrenTransformDirty = !1);
this._localDirty = !0;
};
i.prototype.updateByConstraint = function() {
if (this._localDirty) {
this._localDirty = !1;
(this._transformDirty || null !== this._parent && this._parent._childrenTransformDirty) && this._updateGlobalTransformMatrix(!0);
this._transformDirty = !0;
}
};
i.prototype.invalidUpdate = function() {
this._transformDirty = !0;
};
i.prototype.contains = function(t) {
if (t === this) return !1;
for (var e = t; e !== this && null !== e; ) e = e.parent;
return e === this;
};
Object.defineProperty(i.prototype, "boneData", {
get: function() {
return this._boneData;
},
enumerable: !0,
configurable: !0
});
Object.defineProperty(i.prototype, "visible", {
get: function() {
return this._visible;
},
set: function(t) {
if (this._visible !== t) {
this._visible = t;
for (var e = 0, i = this._armature.getSlots(); e < i.length; e++) {
var n = i[e];
n._parent === this && n._updateVisible();
}
}
},
enumerable: !0,
configurable: !0
});
Object.defineProperty(i.prototype, "name", {
get: function() {
return this._boneData.name;
},
enumerable: !0,
configurable: !0
});
i.prototype.getBones = function() {
for (var t = new Array(), e = 0, i = this._armature.getBones(); e < i.length; e++) {
var n = i[e];
n.parent === this && t.push(n);
}
return t;
};
i.prototype.getSlots = function() {
for (var t = new Array(), e = 0, i = this._armature.getSlots(); e < i.length; e++) {
var n = i[e];
n.parent === this && t.push(n);
}
return t;
};
Object.defineProperty(i.prototype, "slot", {
get: function() {
for (var t = 0, e = this._armature.getSlots(); t < e.length; t++) {
var i = e[t];
if (i.parent === this) return i;
}
return null;
},
enumerable: !0,
configurable: !0
});
return i;
})(t.TransformObject);
t.Bone = e;
})(s || (s = {}));
(function(t) {
var e = (function(t) {
a(e, t);
function e() {
var e = null !== t && t.apply(this, arguments) || this;
e._vertices = [];
e._deformVertices = [];
e._hullCache = [];
e._matrixCahce = [];
return e;
}
e.toString = function() {
return "[class dragonBones.Surface]";
};
e.prototype._onClear = function() {
t.prototype._onClear.call(this);
this._dX = 0;
this._dY = 0;
this._k = 0;
this._kX = 0;
this._kY = 0;
this._vertices.length = 0;
this._deformVertices.length = 0;
this._matrixCahce.length = 0;
this._hullCache.length = 0;
};
e.prototype._getAffineTransform = function(t, e, i, n, r, s, a, o, h, l, c, u, _) {
var m = a - r, f = o - s, d = h - r, p = l - s;
c.rotation = Math.atan2(f, m);
c.skew = Math.atan2(p, d) - .5 * Math.PI - c.rotation;
_ && (c.rotation += Math.PI);
c.scaleX = Math.sqrt(m * m + f * f) / i;
c.scaleY = Math.sqrt(d * d + p * p) / n;
c.toMatrix(u);
c.x = u.tx = r - (u.a * t + u.c * e);
c.y = u.ty = s - (u.b * t + u.d * e);
};
e.prototype._updateVertices = function() {
var t = this._boneData.vertices, e = this._vertices, i = this._deformVertices;
if (null !== this._parent) if (1 === this._parent._boneData.type) for (var n = 0, r = t.length; n < r; n += 2) {
var s = t[n] + i[n], a = t[n + 1] + i[n], o = this._parent._getGlobalTransformMatrix(s, a);
e[n] = o.a * s + o.c * a + o.tx;
e[n + 1] = o.b * s + o.d * a + o.ty;
} else {
var h = this._parent.globalTransformMatrix;
for (n = 0, r = t.length; n < r; n += 2) {
s = t[n] + i[n], a = t[n + 1] + i[n + 1];
e[n] = h.a * s + h.c * a + h.tx;
e[n + 1] = h.b * s + h.d * a + h.ty;
}
} else for (n = 0, r = t.length; n < r; n += 2) {
e[n] = t[n] + i[n];
e[n + 1] = t[n + 1] + i[n + 1];
}
};
e.prototype._updateGlobalTransformMatrix = function(t) {
var e = 2 * this._boneData.segmentX, i = this._vertices.length - 2, n = this._vertices[0], r = this._vertices[1], s = this._vertices[e], a = this._vertices[e + 1], o = this._vertices[i], h = this._vertices[i + 1], l = this._vertices[i - e], c = this._vertices[i - e + 1], u = n + .5 * (o - n), _ = r + .5 * (h - r), m = u + .5 * (s + .5 * (l - s) - u), f = _ + .5 * (a + .5 * (c - a) - _), d = s + .5 * (o - s), p = a + .5 * (h - a), g = l + .5 * (o - l), y = c + .5 * (h - c);
this._globalDirty = !1;
this._getAffineTransform(0, 0, 200, 200, m, f, d, p, g, y, this.global, this.globalTransformMatrix, !1);
};
e.prototype._getGlobalTransformMatrix = function(t, i) {
if (t < -1e3 || 1e3 < t || i < -1e3 || 1e3 < i) return this.globalTransformMatrix;
var n = !1, r = this._boneData, s = r.segmentX, a = r.segmentY, o = 2 * r.segmentX, h = this._dX, l = this._dY, c = Math.floor((t + 200) / h), u = Math.floor((i + 200) / l), _ = 0, m = c * h - 200, f = u * l - 200, d = this._matrixCahce, p = e._helpMatrix;
if (t < -200) {
if (i < -200 || i > 200) return this.globalTransformMatrix;
_ = 7 * (2 * (s * (a + 1) + 2 * s + a + u) + ((n = i > this._kX * (t + 200) + f) ? 1 : 0));
if (this._matrixCahce[_] > 0) p.copyFromArray(d, _ + 1); else {
var g = u * (o + 2), y = this._hullCache[4], v = this._hullCache[5], x = this._hullCache[2] - (a - u) * y, A = this._hullCache[3] - (a - u) * v, b = this._vertices;
n ? this._getAffineTransform(-200, f + l, 800, l, b[g + o + 2], b[g + o + 3], x + y, A + v, b[g], b[g + 1], e._helpTransform, p, !0) : this._getAffineTransform(-1e3, f, 800, l, x, A, b[g], b[g + 1], x + y, A + v, e._helpTransform, p, !1);
d[_] = 1;
d[_ + 1] = p.a;
d[_ + 2] = p.b;
d[_ + 3] = p.c;
d[_ + 4] = p.d;
d[_ + 5] = p.tx;
d[_ + 6] = p.ty;
}
} else if (t > 200) {
if (i < -200 || i > 200) return this.globalTransformMatrix;
_ = 7 * (2 * (s * (a + 1) + s + u) + ((n = i > this._kX * (t - 1e3) + f) ? 1 : 0));
if (this._matrixCahce[_] > 0) p.copyFromArray(d, _ + 1); else {
g = (u + 1) * (o + 2) - 2, y = this._hullCache[4], v = this._hullCache[5], x = this._hullCache[0] + u * y, 
A = this._hullCache[1] + u * v, b = this._vertices;
n ? this._getAffineTransform(1e3, f + l, 800, l, x + y, A + v, b[g + o + 2], b[g + o + 3], x, A, e._helpTransform, p, !0) : this._getAffineTransform(200, f, 800, l, b[g], b[g + 1], x, A, b[g + o + 2], b[g + o + 3], e._helpTransform, p, !1);
d[_] = 1;
d[_ + 1] = p.a;
d[_ + 2] = p.b;
d[_ + 3] = p.c;
d[_ + 4] = p.d;
d[_ + 5] = p.tx;
d[_ + 6] = p.ty;
}
} else if (i < -200) {
if (t < -200 || t > 200) return this.globalTransformMatrix;
_ = 7 * (s * (a + 1) + 2 * c + ((n = i > this._kY * (t - m - h) - 1e3) ? 1 : 0));
if (this._matrixCahce[_] > 0) p.copyFromArray(d, _ + 1); else {
g = 2 * c, y = this._hullCache[10], v = this._hullCache[11], x = this._hullCache[8] + c * y, 
A = this._hullCache[9] + c * v, b = this._vertices;
n ? this._getAffineTransform(m + h, -200, h, 800, b[g + 2], b[g + 3], b[g], b[g + 1], x + y, A + v, e._helpTransform, p, !0) : this._getAffineTransform(m, -1e3, h, 800, x, A, x + y, A + v, b[g], b[g + 1], e._helpTransform, p, !1);
d[_] = 1;
d[_ + 1] = p.a;
d[_ + 2] = p.b;
d[_ + 3] = p.c;
d[_ + 4] = p.d;
d[_ + 5] = p.tx;
d[_ + 6] = p.ty;
}
} else if (i > 200) {
if (t < -200 || t > 200) return this.globalTransformMatrix;
_ = 7 * (2 * (s * (a + 1) + s + a + u) + ((n = i > this._kY * (t - m - h) + 200) ? 1 : 0));
if (this._matrixCahce[_] > 0) p.copyFromArray(d, _ + 1); else {
g = a * (o + 2) + 2 * c, y = this._hullCache[10], v = this._hullCache[11], x = this._hullCache[6] - (s - c) * y, 
A = this._hullCache[7] - (s - c) * v, b = this._vertices;
n ? this._getAffineTransform(m + h, 1e3, h, 800, x + y, A + v, x, A, b[g + 2], b[g + 3], e._helpTransform, p, !0) : this._getAffineTransform(m, 200, h, 800, b[g], b[g + 1], b[g + 2], b[g + 3], x, A, e._helpTransform, p, !1);
d[_] = 1;
d[_ + 1] = p.a;
d[_ + 2] = p.b;
d[_ + 3] = p.c;
d[_ + 4] = p.d;
d[_ + 5] = p.tx;
d[_ + 6] = p.ty;
}
} else {
_ = 7 * (2 * (s * u + c) + ((n = i > this._k * (t - m - h) + f) ? 1 : 0));
if (this._matrixCahce[_] > 0) p.copyFromArray(d, _ + 1); else {
g = 2 * c + u * (o + 2), b = this._vertices;
n ? this._getAffineTransform(m + h, f + l, h, l, b[g + o + 4], b[g + o + 5], b[g + o + 2], b[g + o + 3], b[g + 2], b[g + 3], e._helpTransform, p, !0) : this._getAffineTransform(m, f, h, l, b[g], b[g + 1], b[g + 2], b[g + 3], b[g + o + 2], b[g + o + 3], e._helpTransform, p, !1);
d[_] = 1;
d[_ + 1] = p.a;
d[_ + 2] = p.b;
d[_ + 3] = p.c;
d[_ + 4] = p.d;
d[_ + 5] = p.tx;
d[_ + 6] = p.ty;
}
}
return p;
};
e.prototype.init = function(e) {
if (null === this._boneData) {
t.prototype.init.call(this, e);
var i = e.segmentX, n = e.segmentY, r = e.vertices.length;
this._dX = 400 / i;
this._dY = 400 / n;
this._k = -this._dY / this._dX;
this._kX = -this._dY / 800;
this._kY = -800 / this._dX;
this._vertices.length = r;
this._deformVertices.length = r;
this._matrixCahce.length = 2 * (i * n + 2 * i + 2 * n) * 7;
this._hullCache.length = 10;
for (var s = 0; s < r; ++s) this._deformVertices[s] = 0;
}
};
e.prototype.update = function(t) {
this._blendState.dirty = !1;
if (t >= 0 && null !== this._cachedFrameIndices) {
var i = this._cachedFrameIndices[t];
if (i >= 0 && this._cachedFrameIndex === i) this._transformDirty = !1; else if (i >= 0) {
this._transformDirty = !0;
this._cachedFrameIndex = i;
} else {
if (this._hasConstraint) for (var n = 0, r = this._armature._constraints; n < r.length; n++) {
(o = r[n])._root === this && o.update();
}
if (this._transformDirty || null !== this._parent && this._parent._childrenTransformDirty) {
this._transformDirty = !0;
this._cachedFrameIndex = -1;
} else if (this._cachedFrameIndex >= 0) {
this._transformDirty = !1;
this._cachedFrameIndices[t] = this._cachedFrameIndex;
} else {
this._transformDirty = !0;
this._cachedFrameIndex = -1;
}
}
} else {
if (this._hasConstraint) for (var s = 0, a = this._armature._constraints; s < a.length; s++) {
var o;
(o = a[s])._root === this && o.update();
}
if (this._transformDirty || null !== this._parent && this._parent._childrenTransformDirty) {
t = -1;
this._transformDirty = !0;
this._cachedFrameIndex = -1;
}
}
if (this._transformDirty) {
this._transformDirty = !1;
this._childrenTransformDirty = !0;
for (var h = 0, l = this._matrixCahce.length; h < l; h += 7) this._matrixCahce[h] = -1;
this._updateVertices();
if (this._cachedFrameIndex < 0) {
var c = t >= 0;
this._localDirty && this._updateGlobalTransformMatrix(c);
c && null !== this._cachedFrameIndices && (this._cachedFrameIndex = this._cachedFrameIndices[t] = this._armature._armatureData.setCacheFrame(this.globalTransformMatrix, this.global));
} else this._armature._armatureData.getCacheFrame(this.globalTransformMatrix, this.global, this._cachedFrameIndex);
var u = 2 * this.global.x, _ = 2 * this.global.y, m = e._helpPoint;
this.globalTransformMatrix.transformPoint(1e3, -200, m);
this._hullCache[0] = m.x;
this._hullCache[1] = m.y;
this._hullCache[2] = u - m.x;
this._hullCache[3] = _ - m.y;
this.globalTransformMatrix.transformPoint(0, this._dY, m, !0);
this._hullCache[4] = m.x;
this._hullCache[5] = m.y;
this.globalTransformMatrix.transformPoint(200, 1e3, m);
this._hullCache[6] = m.x;
this._hullCache[7] = m.y;
this._hullCache[8] = u - m.x;
this._hullCache[9] = _ - m.y;
this.globalTransformMatrix.transformPoint(this._dX, 0, m, !0);
this._hullCache[10] = m.x;
this._hullCache[11] = m.y;
} else this._childrenTransformDirty && (this._childrenTransformDirty = !1);
this._localDirty = !0;
};
return e;
})(t.Bone);
t.Surface = e;
})(s || (s = {}));
(function(t) {
var e = (function(e) {
a(i, e);
function i() {
var i = null !== e && e.apply(this, arguments) || this;
i._localMatrix = new t.Matrix();
i._colorTransform = new t.ColorTransform();
i._deformVertices = [];
i._displayDatas = [];
i._displayList = [];
i._meshBones = [];
i._meshSlots = [];
i._rawDisplay = null;
i._meshDisplay = null;
return i;
}
i.prototype._onClear = function() {
e.prototype._onClear.call(this);
for (var i = [], n = 0, r = this._displayList; n < r.length; n++) {
null !== (o = r[n]) && o !== this._rawDisplay && o !== this._meshDisplay && i.indexOf(o) < 0 && i.push(o);
}
for (var s = 0, a = i; s < a.length; s++) {
var o;
(o = a[s]) instanceof t.Armature ? o.dispose() : this._disposeDisplay(o, !1);
}
null !== this._meshDisplay && this._meshDisplay !== this._rawDisplay && this._disposeDisplay(this._meshDisplay, !1);
null !== this._rawDisplay && this._disposeDisplay(this._rawDisplay, !1);
this.displayController = null;
this._displayDirty = !1;
this._zOrderDirty = !1;
this._blendModeDirty = !1;
this._colorDirty = !1;
this._meshDirty = !1;
this._transformDirty = !1;
this._visible = !0;
this._blendMode = 0;
this._displayIndex = -1;
this._animationDisplayIndex = -1;
this._zOrder = 0;
this._cachedFrameIndex = -1;
this._pivotX = 0;
this._pivotY = 0;
this._localMatrix.identity();
this._colorTransform.identity();
this._deformVertices.length = 0;
this._displayList.length = 0;
this._displayDatas.length = 0;
this._meshBones.length = 0;
this._meshSlots.length = 0;
this._slotData = null;
this._rawDisplayDatas = null;
this._displayData = null;
this._textureData = null;
this._meshData = null;
this._boundingBoxData = null;
this._rawDisplay = null;
this._meshDisplay = null;
this._display = null;
this._childArmature = null;
this._cachedFrameIndices = null;
};
i.prototype._getDefaultRawDisplayData = function() {
var t = this._armature.armatureData.defaultSkin;
if (null !== t) {
var e = t.getDisplays(this._slotData.name);
if (null !== e) return this._displayIndex < e.length ? e[this._displayIndex] : null;
}
return null;
};
i.prototype._updateDisplayData = function() {
var t = this._displayData, e = this._textureData, n = this._meshData, r = null;
if (this._displayIndex >= 0) {
null !== this._rawDisplayDatas && null === (r = this._displayIndex < this._rawDisplayDatas.length ? this._rawDisplayDatas[this._displayIndex] : null) && (r = this._getDefaultRawDisplayData());
this._displayIndex < this._displayDatas.length && (this._displayData = this._displayDatas[this._displayIndex]);
} else {
r = null;
this._displayData = null;
}
if (null !== this._displayData) if (0 === this._displayData.type || 2 === this._displayData.type) if (2 === this._displayData.type) {
this._textureData = this._displayData.texture;
this._meshData = this._displayData;
} else if (null !== r && 2 === r.type) {
this._textureData = this._displayData.texture;
this._meshData = r;
} else {
this._textureData = this._displayData.texture;
this._meshData = null;
} else {
this._textureData = null;
this._meshData = null;
} else {
this._textureData = null;
this._meshData = null;
}
null !== this._displayData && 3 === this._displayData.type ? this._boundingBoxData = this._displayData.boundingBox : null !== r && 3 === r.type ? this._boundingBoxData = r.boundingBox : this._boundingBoxData = null;
if (this._displayData !== t || this._textureData !== e || this._meshData !== n) {
if (null !== this._meshData) {
this._pivotX = 0;
this._pivotY = 0;
} else if (null !== this._textureData) {
var s = this._displayData, a = this._textureData.parent.scale * this._armature._armatureData.scale, o = this._textureData.frame;
this._pivotX = s.pivot.x;
this._pivotY = s.pivot.y;
var h = null !== o ? o : this._textureData.region, l = h.width, c = h.height;
if (this._textureData.rotated && null === o) {
l = h.height;
c = h.width;
}
this._pivotX *= l * a;
this._pivotY *= c * a;
if (null !== o) {
this._pivotX += o.x * a;
this._pivotY += o.y * a;
}
} else {
this._pivotX = 0;
this._pivotY = 0;
}
if (null !== this._displayData && null !== r && this._displayData !== r && null === this._meshData) {
r.transform.toMatrix(i._helpMatrix);
i._helpMatrix.invert();
i._helpMatrix.transformPoint(0, 0, i._helpPoint);
this._pivotX -= i._helpPoint.x;
this._pivotY -= i._helpPoint.y;
this._displayData.transform.toMatrix(i._helpMatrix);
i._helpMatrix.invert();
i._helpMatrix.transformPoint(0, 0, i._helpPoint);
this._pivotX += i._helpPoint.x;
this._pivotY += i._helpPoint.y;
}
null !== r ? this.origin = r.transform : null !== this._displayData ? this.origin = this._displayData.transform : this.origin = null;
if (this._meshData !== n) if (null !== this._meshData) {
if (null !== this._meshData.weight) {
this._deformVertices.length = 2 * this._meshData.weight.count;
this._meshBones.length = this._meshData.weight.bones.length;
for (var u = 0, _ = this._meshBones.length; u < _; ++u) this._meshBones[u] = this._armature.getBone(this._meshData.weight.bones[u].name);
} else {
var m = this._meshData.parent.parent.parent.intArray[this._meshData.offset + 0];
this._deformVertices.length = 2 * m;
this._meshBones.length = 0;
}
var f = this._armature._glueSlots;
if (null !== this._meshData.glue) {
this._meshSlots.length = this._meshData.glue.meshes.length;
for (u = 0, _ = this._meshSlots.length; u < _; ++u) {
var d = this._meshData.glue.meshes[u];
if (null !== d) {
for (var p = !1, g = 0, y = this._armature.getSlots(); g < y.length; g++) {
for (var v = y[g], x = 0, A = v._displayDatas; x < A.length; x++) {
var b = A[x];
if (null !== b && 2 === b.type && b.offset === d.offset) {
p = !0;
this._meshSlots[u] = v;
break;
}
}
if (p) break;
}
p || (this._meshSlots[u] = null);
} else this._meshSlots[u] = null;
}
f.indexOf(this) < 0 && f.push(this);
} else {
var T = f.indexOf(this);
T >= 0 && f.slice(T, 1);
}
for (u = 0, _ = this._deformVertices.length; u < _; ++u) this._deformVertices[u] = 0;
this._meshDirty = !0;
} else {
this._deformVertices.length = 0;
this._meshBones.length = 0;
this._meshSlots.length = 0;
} else null !== this._meshData && this._textureData !== e && (this._meshDirty = !0);
this._displayDirty = !0;
this._transformDirty = !0;
}
};
i.prototype._updateDisplay = function() {
var e = null !== this._display ? this._display : this._rawDisplay, i = this._childArmature;
if (this._displayIndex >= 0 && this._displayIndex < this._displayList.length) {
this._display = this._displayList[this._displayIndex];
if (null !== this._display && this._display instanceof t.Armature) {
this._childArmature = this._display;
this._display = this._childArmature.display;
} else this._childArmature = null;
} else {
this._display = null;
this._childArmature = null;
}
var n = null !== this._display ? this._display : this._rawDisplay;
if (n !== e) {
this._onUpdateDisplay();
this._replaceDisplay(e);
this._visibleDirty = !0;
this._blendModeDirty = !0;
this._colorDirty = !0;
}
n !== this._rawDisplay && n !== this._meshDisplay || this._updateFrame();
if (this._childArmature !== i) {
if (null !== i) {
i._parent = null;
i.clock = null;
i.inheritAnimation && i.animation.reset();
}
if (null !== this._childArmature) {
this._childArmature._parent = this;
this._childArmature.clock = this._armature.clock;
if (this._childArmature.inheritAnimation) {
if (0 === this._childArmature.cacheFrameRate) {
var r = this._armature.cacheFrameRate;
0 !== r && (this._childArmature.cacheFrameRate = r);
}
var s = null;
if (null !== this._displayData && 1 === this._displayData.type) s = this._displayData.actions; else if (this._displayIndex >= 0 && null !== this._rawDisplayDatas) {
var a = this._displayIndex < this._rawDisplayDatas.length ? this._rawDisplayDatas[this._displayIndex] : null;
null === a && (a = this._getDefaultRawDisplayData());
null !== a && 1 === a.type && (s = a.actions);
}
if (null !== s && s.length > 0) for (var o = 0, h = s; o < h.length; o++) {
var l = h[o];
this._childArmature._bufferAction(l, !1);
} else this._childArmature.animation.play();
}
}
}
};
i.prototype._updateGlobalTransformMatrix = function(t) {
var e = 0 === this._parent._boneData.type ? this._parent.globalTransformMatrix : this._parent._getGlobalTransformMatrix(this.global.x, this.global.y);
this.globalTransformMatrix.copyFrom(this._localMatrix);
this.globalTransformMatrix.concat(e);
t ? this.global.fromMatrix(this.globalTransformMatrix) : this._globalDirty = !0;
};
i.prototype._isMeshBonesUpdate = function() {
for (var t = 0, e = this._meshBones; t < e.length; t++) {
var i = e[t];
if (null !== i && i._childrenTransformDirty) return !0;
}
return !1;
};
i.prototype._setArmature = function(t) {
if (this._armature !== t) {
null !== this._armature && this._armature._removeSlotFromSlotList(this);
this._armature = t;
this._onUpdateDisplay();
if (null !== this._armature) {
this._armature._addSlotToSlotList(this);
this._addDisplay();
} else this._removeDisplay();
}
};
i.prototype._setDisplayIndex = function(t, e) {
void 0 === e && (e = !1);
if (e) {
if (this._animationDisplayIndex === t) return !1;
this._animationDisplayIndex = t;
}
if (this._displayIndex === t) return !1;
this._displayIndex = t;
this._displayDirty = !0;
this._updateDisplayData();
return this._displayDirty;
};
i.prototype._setZorder = function(t) {
this._zOrder;
this._zOrder = t;
this._zOrderDirty = !0;
return this._zOrderDirty;
};
i.prototype._setColor = function(t) {
this._colorTransform.copyFrom(t);
this._colorDirty = !0;
return this._colorDirty;
};
i.prototype._setDisplayList = function(e) {
if (null !== e && e.length > 0) {
this._displayList.length !== e.length && (this._displayList.length = e.length);
for (var i = 0, n = e.length; i < n; ++i) {
var r = e[i];
null !== r && r !== this._rawDisplay && r !== this._meshDisplay && !(r instanceof t.Armature) && this._displayList.indexOf(r) < 0 && this._initDisplay(r, !0);
this._displayList[i] = r;
}
} else this._displayList.length > 0 && (this._displayList.length = 0);
this._displayIndex >= 0 && this._displayIndex < this._displayList.length ? this._displayDirty = this._display !== this._displayList[this._displayIndex] : this._displayDirty = null !== this._display;
this._updateDisplayData();
return this._displayDirty;
};
i.prototype.init = function(t, e, i, n) {
if (null === this._slotData) {
this._slotData = t;
this._visibleDirty = !0;
this._blendModeDirty = !0;
this._colorDirty = !0;
this._blendMode = this._slotData.blendMode;
this._zOrder = this._slotData.zOrder;
this._colorTransform.copyFrom(this._slotData.color);
this._rawDisplay = i;
this._meshDisplay = n;
this.rawDisplayDatas = e;
this._initDisplay(this._rawDisplay, !1);
this._rawDisplay !== this._meshDisplay && this._initDisplay(this._meshDisplay, !1);
}
};
i.prototype.update = function(t) {
if (this._displayDirty) {
this._displayDirty = !1;
this._updateDisplay();
this._transformDirty && (null !== this.origin ? this.global.copyFrom(this.origin).add(this.offset).toMatrix(this._localMatrix) : this.global.copyFrom(this.offset).toMatrix(this._localMatrix));
}
if (this._zOrderDirty) {
this._zOrderDirty = !1;
this._updateZOrder();
}
if (t >= 0 && null !== this._cachedFrameIndices) {
var e = this._cachedFrameIndices[t];
if (e >= 0 && this._cachedFrameIndex === e) this._transformDirty = !1; else if (e >= 0) {
this._transformDirty = !0;
this._cachedFrameIndex = e;
} else if (this._transformDirty || this._parent._childrenTransformDirty) {
this._transformDirty = !0;
this._cachedFrameIndex = -1;
} else if (this._cachedFrameIndex >= 0) {
this._transformDirty = !1;
this._cachedFrameIndices[t] = this._cachedFrameIndex;
} else {
this._transformDirty = !0;
this._cachedFrameIndex = -1;
}
} else if (this._transformDirty || this._parent._childrenTransformDirty) {
t = -1;
this._transformDirty = !0;
this._cachedFrameIndex = -1;
}
if (null !== this._display) {
if (this._visibleDirty) {
this._visibleDirty = !1;
this._updateVisible();
}
if (this._blendModeDirty) {
this._blendModeDirty = !1;
this._updateBlendMode();
}
if (this._colorDirty) {
this._colorDirty = !1;
this._updateColor();
}
if (null !== this._meshData && this._display === this._meshDisplay) {
var i = null !== this._meshData.weight, n = 0 !== this._parent._boneData.type, r = null !== this._meshData.glue;
if (this._meshDirty || i && this._isMeshBonesUpdate() || n && this._parent._childrenTransformDirty || r && this._parent._childrenTransformDirty) {
this._meshDirty = !1;
this._updateMesh();
}
if (i || n || r) return;
}
if (this._transformDirty) {
this._transformDirty = !1;
if (this._cachedFrameIndex < 0) {
var s = t >= 0;
this._updateGlobalTransformMatrix(s);
s && null !== this._cachedFrameIndices && (this._cachedFrameIndex = this._cachedFrameIndices[t] = this._armature._armatureData.setCacheFrame(this.globalTransformMatrix, this.global));
} else this._armature._armatureData.getCacheFrame(this.globalTransformMatrix, this.global, this._cachedFrameIndex);
this._updateTransform();
}
}
};
i.prototype.updateTransformAndMatrix = function() {
if (this._transformDirty) {
this._transformDirty = !1;
this._updateGlobalTransformMatrix(!1);
}
};
i.prototype.replaceDisplayData = function(t, e) {
void 0 === e && (e = -1);
e < 0 && (e = this._displayIndex < 0 ? 0 : this._displayIndex);
if (this._displayDatas.length <= e) {
this._displayDatas.length = e + 1;
for (var i = 0, n = this._displayDatas.length; i < n; ++i) this._displayDatas[i] || (this._displayDatas[i] = null);
}
this._displayDatas[e] = t;
};
i.prototype.containsPoint = function(t, e) {
if (null === this._boundingBoxData) return !1;
this.updateTransformAndMatrix();
i._helpMatrix.copyFrom(this.globalTransformMatrix);
i._helpMatrix.invert();
i._helpMatrix.transformPoint(t, e, i._helpPoint);
return this._boundingBoxData.containsPoint(i._helpPoint.x, i._helpPoint.y);
};
i.prototype.intersectsSegment = function(t, e, n, r, s, a, o) {
void 0 === s && (s = null);
void 0 === a && (a = null);
void 0 === o && (o = null);
if (null === this._boundingBoxData) return 0;
this.updateTransformAndMatrix();
i._helpMatrix.copyFrom(this.globalTransformMatrix);
i._helpMatrix.invert();
i._helpMatrix.transformPoint(t, e, i._helpPoint);
t = i._helpPoint.x;
e = i._helpPoint.y;
i._helpMatrix.transformPoint(n, r, i._helpPoint);
n = i._helpPoint.x;
r = i._helpPoint.y;
var h = this._boundingBoxData.intersectsSegment(t, e, n, r, s, a, o);
if (h > 0) {
if (1 === h || 2 === h) if (null !== s) {
this.globalTransformMatrix.transformPoint(s.x, s.y, s);
if (null !== a) {
a.x = s.x;
a.y = s.y;
}
} else null !== a && this.globalTransformMatrix.transformPoint(a.x, a.y, a); else {
null !== s && this.globalTransformMatrix.transformPoint(s.x, s.y, s);
null !== a && this.globalTransformMatrix.transformPoint(a.x, a.y, a);
}
if (null !== o) {
this.globalTransformMatrix.transformPoint(Math.cos(o.x), Math.sin(o.x), i._helpPoint, !0);
o.x = Math.atan2(i._helpPoint.y, i._helpPoint.x);
this.globalTransformMatrix.transformPoint(Math.cos(o.y), Math.sin(o.y), i._helpPoint, !0);
o.y = Math.atan2(i._helpPoint.y, i._helpPoint.x);
}
}
return h;
};
i.prototype.invalidUpdate = function() {
this._displayDirty = !0;
this._transformDirty = !0;
};
Object.defineProperty(i.prototype, "visible", {
get: function() {
return this._visible;
},
set: function(t) {
if (this._visible !== t) {
this._visible = t;
this._updateVisible();
}
},
enumerable: !0,
configurable: !0
});
Object.defineProperty(i.prototype, "displayIndex", {
get: function() {
return this._displayIndex;
},
set: function(t) {
this._setDisplayIndex(t) && this.update(-1);
},
enumerable: !0,
configurable: !0
});
Object.defineProperty(i.prototype, "name", {
get: function() {
return this._slotData.name;
},
enumerable: !0,
configurable: !0
});
Object.defineProperty(i.prototype, "displayList", {
get: function() {
return this._displayList.concat();
},
set: function(e) {
var i = this._displayList.concat(), n = new Array();
this._setDisplayList(e) && this.update(-1);
for (var r = 0, s = i; r < s.length; r++) {
null !== (h = s[r]) && h !== this._rawDisplay && h !== this._meshDisplay && this._displayList.indexOf(h) < 0 && n.indexOf(h) < 0 && n.push(h);
}
for (var a = 0, o = n; a < o.length; a++) {
var h;
(h = o[a]) instanceof t.Armature ? h.dispose() : this._disposeDisplay(h, !0);
}
},
enumerable: !0,
configurable: !0
});
Object.defineProperty(i.prototype, "slotData", {
get: function() {
return this._slotData;
},
enumerable: !0,
configurable: !0
});
Object.defineProperty(i.prototype, "rawDisplayDatas", {
get: function() {
return this._rawDisplayDatas;
},
set: function(t) {
if (this._rawDisplayDatas !== t) {
this._displayDirty = !0;
this._rawDisplayDatas = t;
if (null !== this._rawDisplayDatas) {
this._displayDatas.length = this._rawDisplayDatas.length;
for (var e = 0, i = this._displayDatas.length; e < i; ++e) {
var n = this._rawDisplayDatas[e];
null === n && (n = this._getDefaultRawDisplayData());
this._displayDatas[e] = n;
}
} else this._displayDatas.length = 0;
}
},
enumerable: !0,
configurable: !0
});
Object.defineProperty(i.prototype, "boundingBoxData", {
get: function() {
return this._boundingBoxData;
},
enumerable: !0,
configurable: !0
});
Object.defineProperty(i.prototype, "rawDisplay", {
get: function() {
return this._rawDisplay;
},
enumerable: !0,
configurable: !0
});
Object.defineProperty(i.prototype, "meshDisplay", {
get: function() {
return this._meshDisplay;
},
enumerable: !0,
configurable: !0
});
Object.defineProperty(i.prototype, "display", {
get: function() {
return this._display;
},
set: function(t) {
if (this._display !== t) {
var e = this._displayList.length;
this._displayIndex < 0 && 0 === e && (this._displayIndex = 0);
if (!(this._displayIndex < 0)) {
var i = this.displayList;
e <= this._displayIndex && (i.length = this._displayIndex + 1);
i[this._displayIndex] = t;
this.displayList = i;
}
}
},
enumerable: !0,
configurable: !0
});
Object.defineProperty(i.prototype, "childArmature", {
get: function() {
return this._childArmature;
},
set: function(t) {
this._childArmature !== t && (this.display = t);
},
enumerable: !0,
configurable: !0
});
i.prototype.getDisplay = function() {
return this.display;
};
i.prototype.setDisplay = function(t) {
this.display = t;
};
return i;
})(t.TransformObject);
t.Slot = e;
})(s || (s = {}));
(function(t) {
var e = (function(e) {
a(i, e);
function i() {
return null !== e && e.apply(this, arguments) || this;
}
i.prototype._onClear = function() {
this._armature = null;
this._target = null;
this._root = null;
this._bone = null;
};
Object.defineProperty(i.prototype, "name", {
get: function() {
return this._constraintData.name;
},
enumerable: !0,
configurable: !0
});
i._helpMatrix = new t.Matrix();
i._helpTransform = new t.Transform();
i._helpPoint = new t.Point();
return i;
})(t.BaseObject);
t.Constraint = e;
var i = (function(e) {
a(i, e);
function i() {
return null !== e && e.apply(this, arguments) || this;
}
i.toString = function() {
return "[class dragonBones.IKConstraint]";
};
i.prototype._onClear = function() {
e.prototype._onClear.call(this);
this._scaleEnabled = !1;
this._bendPositive = !1;
this._weight = 1;
this._constraintData = null;
};
i.prototype._computeA = function() {
var t = this._target.global, e = this._root.global, i = this._root.globalTransformMatrix, n = Math.atan2(t.y - e.y, t.x - e.x);
e.scaleX < 0 && (n += Math.PI);
e.rotation += (n - e.rotation) * this._weight;
e.toMatrix(i);
};
i.prototype._computeB = function() {
var e = this._bone._boneData.length, i = this._root, n = this._target.global, r = i.global, s = this._bone.global, a = this._bone.globalTransformMatrix, o = a.a * e, h = a.b * e, l = o * o + h * h, c = Math.sqrt(l), u = s.x - r.x, _ = s.y - r.y, m = u * u + _ * _, f = Math.sqrt(m), d = s.rotation, p = r.rotation, g = Math.atan2(_, u), y = (u = n.x - r.x) * u + (_ = n.y - r.y) * _, v = Math.sqrt(y), x = 0;
if (c + f <= v || v + c <= f || v + f <= c) {
x = Math.atan2(n.y - r.y, n.x - r.x);
c + f <= v || f < c && (x += Math.PI);
} else {
var A = (m - l + y) / (2 * y), b = Math.sqrt(m - A * A * y) / v, T = r.x + u * A, C = r.y + _ * A, w = -_ * b, S = u * b, E = !1;
if (null !== i._parent) {
var D = i._parent.globalTransformMatrix;
E = D.a * D.d - D.b * D.c < 0;
}
if (E !== this._bendPositive) {
s.x = T - w;
s.y = C - S;
} else {
s.x = T + w;
s.y = C + S;
}
x = Math.atan2(s.y - r.y, s.x - r.x);
}
var M = t.Transform.normalizeRadian(x - g);
r.rotation = p + M * this._weight;
r.toMatrix(i.globalTransformMatrix);
var I = g + M * this._weight;
s.x = r.x + Math.cos(I) * f;
s.y = r.y + Math.sin(I) * f;
var P = Math.atan2(n.y - s.y, n.x - s.x);
s.scaleX < 0 && (P += Math.PI);
s.rotation = r.rotation + d - p + t.Transform.normalizeRadian(P - M - d) * this._weight;
s.toMatrix(a);
};
i.prototype.init = function(t, e) {
if (null === this._constraintData) {
this._constraintData = t;
this._armature = e;
this._target = this._armature.getBone(this._constraintData.target.name);
this._root = this._armature.getBone(this._constraintData.root.name);
this._bone = null !== this._constraintData.bone ? this._armature.getBone(this._constraintData.bone.name) : null;
var i = this._constraintData;
this._scaleEnabled = i.scaleEnabled;
this._scaleEnabled = this._scaleEnabled;
this._bendPositive = i.bendPositive;
this._weight = i.weight;
this._root._hasConstraint = !0;
}
};
i.prototype.update = function() {
this._root.updateByConstraint();
if (null !== this._bone) {
this._bone.updateByConstraint();
this._computeB();
} else this._computeA();
};
i.prototype.invalidUpdate = function() {
this._root.invalidUpdate();
null !== this._bone && this._bone.invalidUpdate();
};
return i;
})(e);
t.IKConstraint = i;
})(s || (s = {}));
(function(t) {
var e = (function() {
function t(t) {
void 0 === t && (t = -1);
this.time = 0;
this.timeScale = 1;
this._animatebles = [];
this._clock = null;
this.time = t < 0 ? .001 * new Date().getTime() : t;
}
t.prototype.advanceTime = function(t) {
t != t && (t = 0);
t < 0 && (t = .001 * new Date().getTime() - this.time);
1 !== this.timeScale && (t *= this.timeScale);
t < 0 ? this.time -= t : this.time += t;
if (0 !== t) {
for (var e = 0, i = 0, n = this._animatebles.length; e < n; ++e) {
var r = this._animatebles[e];
if (null !== r) {
if (i > 0) {
this._animatebles[e - i] = r;
this._animatebles[e] = null;
}
r.advanceTime(t);
} else i++;
}
if (i > 0) {
n = this._animatebles.length;
for (;e < n; ++e) {
var s = this._animatebles[e];
null !== s ? this._animatebles[e - i] = s : i++;
}
this._animatebles.length -= i;
}
}
};
t.prototype.contains = function(t) {
if (t === this) return !1;
for (var e = t; e !== this && null !== e; ) e = e.clock;
return e === this;
};
t.prototype.add = function(t) {
if (this._animatebles.indexOf(t) < 0) {
this._animatebles.push(t);
t.clock = this;
}
};
t.prototype.remove = function(t) {
var e = this._animatebles.indexOf(t);
if (e >= 0) {
this._animatebles[e] = null;
t.clock = null;
}
};
t.prototype.clear = function() {
for (var t = 0, e = this._animatebles; t < e.length; t++) {
var i = e[t];
null !== i && (i.clock = null);
}
};
Object.defineProperty(t.prototype, "clock", {
get: function() {
return this._clock;
},
set: function(t) {
if (this._clock !== t) {
null !== this._clock && this._clock.remove(this);
this._clock = t;
null !== this._clock && this._clock.add(this);
}
},
enumerable: !0,
configurable: !0
});
t.clock = new t();
return t;
})();
t.WorldClock = e;
})(s || (s = {}));
(function(t) {
var e = (function(e) {
a(i, e);
function i() {
var t = null !== e && e.apply(this, arguments) || this;
t._animationNames = [];
t._animationStates = [];
t._animations = {};
t._animationConfig = null;
return t;
}
i.toString = function() {
return "[class dragonBones.Animation]";
};
i.prototype._onClear = function() {
for (var t = 0, e = this._animationStates; t < e.length; t++) {
e[t].returnToPool();
}
for (var i in this._animations) delete this._animations[i];
null !== this._animationConfig && this._animationConfig.returnToPool();
this.timeScale = 1;
this._lockUpdate = !1;
this._animationDirty = !1;
this._inheritTimeScale = 1;
this._animationNames.length = 0;
this._animationStates.length = 0;
this._armature = null;
this._animationConfig = null;
this._lastAnimationState = null;
};
i.prototype._fadeOut = function(t) {
switch (t.fadeOutMode) {
case 1:
for (var e = 0, i = this._animationStates; e < i.length; e++) {
null === (l = i[e])._parent && (l.layer === t.layer && l.fadeOut(t.fadeOutTime, t.pauseFadeOut));
}
break;

case 2:
for (var n = 0, r = this._animationStates; n < r.length; n++) {
null === (l = r[n])._parent && (l.group === t.group && l.fadeOut(t.fadeOutTime, t.pauseFadeOut));
}
break;

case 3:
for (var s = 0, a = this._animationStates; s < a.length; s++) {
null === (l = a[s])._parent && (l.layer === t.layer && l.group === t.group && l.fadeOut(t.fadeOutTime, t.pauseFadeOut));
}
break;

case 4:
for (var o = 0, h = this._animationStates; o < h.length; o++) {
var l;
null === (l = h[o])._parent && l.fadeOut(t.fadeOutTime, t.pauseFadeOut);
}
}
};
i.prototype.init = function(e) {
if (null === this._armature) {
this._armature = e;
this._animationConfig = t.BaseObject.borrowObject(t.AnimationConfig);
}
};
i.prototype.advanceTime = function(t) {
t < 0 && (t = -t);
this._armature.inheritAnimation && null !== this._armature._parent ? this._inheritTimeScale = this._armature._parent._armature.animation._inheritTimeScale * this.timeScale : this._inheritTimeScale = this.timeScale;
1 !== this._inheritTimeScale && (t *= this._inheritTimeScale);
var e = this._animationStates.length;
if (1 === e) {
if ((_ = this._animationStates[0])._fadeState > 0 && _._subFadeState > 0) {
this._armature._dragonBones.bufferObject(_);
this._animationStates.length = 0;
this._lastAnimationState = null;
} else {
var i = _._animationData, n = i.cacheFrameRate;
if (this._animationDirty && n > 0) {
this._animationDirty = !1;
for (var r = 0, s = this._armature.getBones(); r < s.length; r++) {
var a = s[r];
a._cachedFrameIndices = i.getBoneCachedFrameIndices(a.name);
}
for (var o = 0, h = this._armature.getSlots(); o < h.length; o++) {
var l = h[o];
l._cachedFrameIndices = i.getSlotCachedFrameIndices(l.name);
}
}
_.advanceTime(t, n);
}
} else if (e > 1) {
for (var c = 0, u = 0; c < e; ++c) {
var _;
if ((_ = this._animationStates[c])._fadeState > 0 && _._subFadeState > 0) {
u++;
this._armature._dragonBones.bufferObject(_);
this._animationDirty = !0;
this._lastAnimationState === _ && (this._lastAnimationState = null);
} else {
u > 0 && (this._animationStates[c - u] = _);
_.advanceTime(t, 0);
}
if (c === e - 1 && u > 0) {
this._animationStates.length -= u;
null === this._lastAnimationState && this._animationStates.length > 0 && (this._lastAnimationState = this._animationStates[this._animationStates.length - 1]);
}
}
this._armature._cacheFrameIndex = -1;
} else this._armature._cacheFrameIndex = -1;
};
i.prototype.reset = function() {
for (var t = 0, e = this._animationStates; t < e.length; t++) {
e[t].returnToPool();
}
this._animationDirty = !1;
this._animationConfig.clear();
this._animationStates.length = 0;
this._lastAnimationState = null;
};
i.prototype.stop = function(t) {
void 0 === t && (t = null);
if (null !== t) {
null !== (n = this.getState(t)) && n.stop();
} else for (var e = 0, i = this._animationStates; e < i.length; e++) {
var n;
(n = i[e]).stop();
}
};
i.prototype.playConfig = function(e) {
var i = e.animation;
if (!(i in this._animations)) {
console.warn("Non-existent animation.\n", "DragonBones name: " + this._armature.armatureData.parent.name, "Armature name: " + this._armature.name, "Animation name: " + i);
return null;
}
var n = this._animations[i];
if (5 === e.fadeOutMode) for (var r = 0, s = this._animationStates; r < s.length; r++) {
var a = s[r];
if (a._animationData === n) return a;
}
0 === this._animationStates.length ? e.fadeInTime = 0 : e.fadeInTime < 0 && (e.fadeInTime = n.fadeInTime);
e.fadeOutTime < 0 && (e.fadeOutTime = e.fadeInTime);
e.timeScale <= -100 && (e.timeScale = 1 / n.scale);
if (n.frameCount > 1) {
if (e.position < 0) {
e.position %= n.duration;
e.position = n.duration - e.position;
} else e.position === n.duration ? e.position -= 1e-6 : e.position > n.duration && (e.position %= n.duration);
e.duration > 0 && e.position + e.duration > n.duration && (e.duration = n.duration - e.position);
e.playTimes < 0 && (e.playTimes = n.playTimes);
} else {
e.playTimes = 1;
e.position = 0;
e.duration > 0 && (e.duration = 0);
}
0 === e.duration && (e.duration = -1);
this._fadeOut(e);
var o = t.BaseObject.borrowObject(t.AnimationState);
o.init(this._armature, n, e);
this._animationDirty = !0;
this._armature._cacheFrameIndex = -1;
if (this._animationStates.length > 0) {
for (var h = !1, l = 0, c = this._animationStates.length; l < c; ++l) {
if (o.layer > this._animationStates[l].layer) {
h = !0;
this._animationStates.splice(l, 0, o);
break;
}
if (l !== c - 1 && o.layer > this._animationStates[l + 1].layer) {
h = !0;
this._animationStates.splice(l + 1, 0, o);
break;
}
}
h || this._animationStates.push(o);
} else this._animationStates.push(o);
for (var u = 0, _ = this._armature.getSlots(); u < _.length; u++) {
var m = _[u].childArmature;
null !== m && m.inheritAnimation && m.animation.hasAnimation(i) && null === m.animation.getState(i) && m.animation.fadeIn(i);
}
var f = !1;
for (var d in n.animationTimelines) {
if (!this._lockUpdate) {
f = !0;
this._lockUpdate = !0;
}
var p = this.fadeIn(d, e.fadeInTime, 1, o.layer, null, 0);
if (null !== p) {
p.resetToPose = !1;
p._parent = o;
p.stop();
}
}
f && (this._lockUpdate = !1);
if (!this._lockUpdate) {
e.fadeInTime <= 0 && this._armature.advanceTime(0);
this._lastAnimationState = o;
}
return o;
};
i.prototype.play = function(t, e) {
void 0 === t && (t = null);
void 0 === e && (e = -1);
this._animationConfig.clear();
this._animationConfig.resetToPose = !0;
this._animationConfig.playTimes = e;
this._animationConfig.fadeInTime = 0;
this._animationConfig.animation = null !== t ? t : "";
if (null !== t && t.length > 0) this.playConfig(this._animationConfig); else if (null === this._lastAnimationState) {
var i = this._armature.armatureData.defaultAnimation;
if (null !== i) {
this._animationConfig.animation = i.name;
this.playConfig(this._animationConfig);
}
} else if (this._lastAnimationState.isPlaying || this._lastAnimationState.isCompleted) {
this._animationConfig.animation = this._lastAnimationState.name;
this.playConfig(this._animationConfig);
} else this._lastAnimationState.play();
return this._lastAnimationState;
};
i.prototype.fadeIn = function(t, e, i, n, r, s) {
void 0 === e && (e = -1);
void 0 === i && (i = -1);
void 0 === n && (n = 0);
void 0 === r && (r = null);
void 0 === s && (s = 3);
this._animationConfig.clear();
this._animationConfig.fadeOutMode = s;
this._animationConfig.playTimes = i;
this._animationConfig.layer = n;
this._animationConfig.fadeInTime = e;
this._animationConfig.animation = t;
this._animationConfig.group = null !== r ? r : "";
return this.playConfig(this._animationConfig);
};
i.prototype.gotoAndPlayByTime = function(t, e, i) {
void 0 === e && (e = 0);
void 0 === i && (i = -1);
this._animationConfig.clear();
this._animationConfig.resetToPose = !0;
this._animationConfig.playTimes = i;
this._animationConfig.position = e;
this._animationConfig.fadeInTime = 0;
this._animationConfig.animation = t;
return this.playConfig(this._animationConfig);
};
i.prototype.gotoAndPlayByFrame = function(t, e, i) {
void 0 === e && (e = 0);
void 0 === i && (i = -1);
this._animationConfig.clear();
this._animationConfig.resetToPose = !0;
this._animationConfig.playTimes = i;
this._animationConfig.fadeInTime = 0;
this._animationConfig.animation = t;
var n = t in this._animations ? this._animations[t] : null;
null !== n && (this._animationConfig.position = n.duration * e / n.frameCount);
return this.playConfig(this._animationConfig);
};
i.prototype.gotoAndPlayByProgress = function(t, e, i) {
void 0 === e && (e = 0);
void 0 === i && (i = -1);
this._animationConfig.clear();
this._animationConfig.resetToPose = !0;
this._animationConfig.playTimes = i;
this._animationConfig.fadeInTime = 0;
this._animationConfig.animation = t;
var n = t in this._animations ? this._animations[t] : null;
null !== n && (this._animationConfig.position = n.duration * (e > 0 ? e : 0));
return this.playConfig(this._animationConfig);
};
i.prototype.gotoAndStopByTime = function(t, e) {
void 0 === e && (e = 0);
var i = this.gotoAndPlayByTime(t, e, 1);
null !== i && i.stop();
return i;
};
i.prototype.gotoAndStopByFrame = function(t, e) {
void 0 === e && (e = 0);
var i = this.gotoAndPlayByFrame(t, e, 1);
null !== i && i.stop();
return i;
};
i.prototype.gotoAndStopByProgress = function(t, e) {
void 0 === e && (e = 0);
var i = this.gotoAndPlayByProgress(t, e, 1);
null !== i && i.stop();
return i;
};
i.prototype.getState = function(t) {
for (var e = this._animationStates.length; e--; ) {
var i = this._animationStates[e];
if (i.name === t) return i;
}
return null;
};
i.prototype.hasAnimation = function(t) {
return t in this._animations;
};
i.prototype.getStates = function() {
return this._animationStates;
};
Object.defineProperty(i.prototype, "isPlaying", {
get: function() {
for (var t = 0, e = this._animationStates; t < e.length; t++) {
if (e[t].isPlaying) return !0;
}
return !1;
},
enumerable: !0,
configurable: !0
});
Object.defineProperty(i.prototype, "isCompleted", {
get: function() {
for (var t = 0, e = this._animationStates; t < e.length; t++) {
if (!e[t].isCompleted) return !1;
}
return this._animationStates.length > 0;
},
enumerable: !0,
configurable: !0
});
Object.defineProperty(i.prototype, "lastAnimationName", {
get: function() {
return null !== this._lastAnimationState ? this._lastAnimationState.name : "";
},
enumerable: !0,
configurable: !0
});
Object.defineProperty(i.prototype, "animationNames", {
get: function() {
return this._animationNames;
},
enumerable: !0,
configurable: !0
});
Object.defineProperty(i.prototype, "animations", {
get: function() {
return this._animations;
},
set: function(t) {
if (this._animations !== t) {
this._animationNames.length = 0;
for (var e in this._animations) delete this._animations[e];
for (var e in t) {
this._animationNames.push(e);
this._animations[e] = t[e];
}
}
},
enumerable: !0,
configurable: !0
});
Object.defineProperty(i.prototype, "animationConfig", {
get: function() {
this._animationConfig.clear();
return this._animationConfig;
},
enumerable: !0,
configurable: !0
});
Object.defineProperty(i.prototype, "lastAnimationState", {
get: function() {
return this._lastAnimationState;
},
enumerable: !0,
configurable: !0
});
i.prototype.gotoAndPlay = function(t, e, i, n, r, s, a, o, h) {
void 0 === e && (e = -1);
void 0 === i && (i = -1);
void 0 === n && (n = -1);
void 0 === r && (r = 0);
void 0 === s && (s = null);
void 0 === a && (a = 3);
void 0 === o && (o = !0);
void 0 === h && (h = !0);
this._animationConfig.clear();
this._animationConfig.resetToPose = !0;
this._animationConfig.fadeOutMode = a;
this._animationConfig.playTimes = n;
this._animationConfig.layer = r;
this._animationConfig.fadeInTime = e;
this._animationConfig.animation = t;
this._animationConfig.group = null !== s ? s : "";
var l = this._animations[t];
l && i > 0 && (this._animationConfig.timeScale = l.duration / i);
return this.playConfig(this._animationConfig);
};
i.prototype.gotoAndStop = function(t, e) {
void 0 === e && (e = 0);
return this.gotoAndStopByTime(t, e);
};
Object.defineProperty(i.prototype, "animationList", {
get: function() {
return this._animationNames;
},
enumerable: !0,
configurable: !0
});
Object.defineProperty(i.prototype, "animationDataList", {
get: function() {
for (var t = [], e = 0, i = this._animationNames.length; e < i; ++e) t.push(this._animations[this._animationNames[e]]);
return t;
},
enumerable: !0,
configurable: !0
});
return i;
})(t.BaseObject);
t.Animation = e;
})(s || (s = {}));
(function(t) {
var e = (function(e) {
a(r, e);
function r() {
var t = null !== e && e.apply(this, arguments) || this;
t._blendState = new n();
t._boneMask = [];
t._boneTimelines = [];
t._surfaceTimelines = [];
t._slotTimelines = [];
t._constraintTimelines = [];
t._animationTimelines = [];
t._poseTimelines = [];
t._bonePoses = {};
t._actionTimeline = null;
t._zOrderTimeline = null;
t._parent = null;
return t;
}
r.toString = function() {
return "[class dragonBones.AnimationState]";
};
r.prototype._onClear = function() {
for (var t = 0, e = this._boneTimelines; t < e.length; t++) {
e[t].returnToPool();
}
for (var i = 0, n = this._surfaceTimelines; i < n.length; i++) {
n[i].returnToPool();
}
for (var r = 0, s = this._slotTimelines; r < s.length; r++) {
s[r].returnToPool();
}
for (var a = 0, o = this._constraintTimelines; a < o.length; a++) {
o[a].returnToPool();
}
for (var h = 0, l = this._animationTimelines; h < l.length; h++) {
l[h].returnToPool();
}
for (var c in this._bonePoses) {
this._bonePoses[c].returnToPool();
delete this._bonePoses[c];
}
null !== this._actionTimeline && this._actionTimeline.returnToPool();
null !== this._zOrderTimeline && this._zOrderTimeline.returnToPool();
this.actionEnabled = !1;
this.additiveBlending = !1;
this.displayControl = !1;
this.resetToPose = !1;
this.playTimes = 1;
this.layer = 0;
this.timeScale = 1;
this.weight = 1;
this.autoFadeOutTime = 0;
this.fadeTotalTime = 0;
this.name = "";
this.group = "";
this._timelineDirty = 2;
this._playheadState = 0;
this._fadeState = -1;
this._subFadeState = -1;
this._position = 0;
this._duration = 0;
this._fadeTime = 0;
this._time = 0;
this._fadeProgress = 0;
this._weightResult = 0;
this._blendState.clear();
this._boneMask.length = 0;
this._boneTimelines.length = 0;
this._surfaceTimelines.length = 0;
this._slotTimelines.length = 0;
this._constraintTimelines.length = 0;
this._animationTimelines.length = 0;
this._poseTimelines.length = 0;
this._animationData = null;
this._armature = null;
this._actionTimeline = null;
this._zOrderTimeline = null;
this._parent = null;
};
r.prototype._updateTimelines = function() {
for (var e = 0, i = this._armature._constraints; e < i.length; e++) {
var n = i[e];
if (null !== (l = this._animationData.getConstraintTimelines(n.name))) for (var r = 0, s = l; r < s.length; r++) {
switch ((_ = s[r]).type) {
case 30:
(m = t.BaseObject.borrowObject(t.IKConstraintTimelineState)).constraint = n;
m.init(this._armature, this, _);
this._constraintTimelines.push(m);
}
} else if (this.resetToPose) {
(m = t.BaseObject.borrowObject(t.IKConstraintTimelineState)).constraint = n;
m.init(this._armature, this, null);
this._constraintTimelines.push(m);
this._poseTimelines.push(m);
}
}
for (var a = 0, o = this._armature.animation.getStates(); a < o.length; a++) {
var h = o[a];
if (h._parent === this) {
var l;
if (null !== (l = this._animationData.getAnimationTimelines(h.name))) for (var c = 0, u = l; c < u.length; c++) {
var _;
switch ((_ = u[c]).type) {
case 40:
var m;
(m = t.BaseObject.borrowObject(t.AnimationTimelineState)).animationState = h;
m.init(this._armature, this, _);
this._animationTimelines.push(m);
}
}
}
}
};
r.prototype._updateBoneAndSlotTimelines = function() {
for (var e = {}, n = 0, r = this._boneTimelines; n < r.length; n++) {
(h = (y = r[n]).bone.name) in e || (e[h] = []);
e[h].push(y);
}
for (var s = 0, a = this._armature.getBones(); s < a.length; s++) {
var o = a[s], h = o.name;
if (this.containsBoneMask(h)) if (h in e) delete e[h]; else if (0 === o._boneData.type) {
var l = this._animationData.getBoneTimelines(h), c = h in this._bonePoses ? this._bonePoses[h] : this._bonePoses[h] = t.BaseObject.borrowObject(i);
if (null !== l) for (var u = 0, _ = l; u < _.length; u++) {
switch ((P = _[u]).type) {
case 10:
(y = t.BaseObject.borrowObject(t.BoneAllTimelineState)).bone = o;
y.bonePose = c;
y.init(this._armature, this, P);
this._boneTimelines.push(y);
break;

case 11:
(y = t.BaseObject.borrowObject(t.BoneTranslateTimelineState)).bone = o;
y.bonePose = c;
y.init(this._armature, this, P);
this._boneTimelines.push(y);
break;

case 12:
(y = t.BaseObject.borrowObject(t.BoneRotateTimelineState)).bone = o;
y.bonePose = c;
y.init(this._armature, this, P);
this._boneTimelines.push(y);
break;

case 13:
(y = t.BaseObject.borrowObject(t.BoneScaleTimelineState)).bone = o;
y.bonePose = c;
y.init(this._armature, this, P);
this._boneTimelines.push(y);
}
} else if (this.resetToPose) {
(y = t.BaseObject.borrowObject(t.BoneAllTimelineState)).bone = o;
y.bonePose = c;
y.init(this._armature, this, null);
this._boneTimelines.push(y);
this._poseTimelines.push(y);
}
} else if (1 === o._boneData.type) {
if (null !== (l = this._animationData.getSurfaceTimelines(h))) for (var m = 0, f = l; m < f.length; m++) {
switch ((P = f[m]).type) {
case 50:
(y = t.BaseObject.borrowObject(t.SurfaceTimelineState)).surface = o;
y.init(this._armature, this, P);
this._surfaceTimelines.push(y);
}
} else if (this.resetToPose) {
(y = t.BaseObject.borrowObject(t.SurfaceTimelineState)).surface = o;
y.init(this._armature, this, null);
this._surfaceTimelines.push(y);
this._poseTimelines.push(y);
}
}
}
for (var d in e) for (var p = 0, g = e[d]; p < g.length; p++) {
var y = g[p];
this._boneTimelines.splice(this._boneTimelines.indexOf(y), 1);
y.returnToPool();
}
for (var v = {}, x = [], A = 0, b = this._slotTimelines; A < b.length; A++) {
(h = (y = b[A]).slot.name) in v || (v[h] = []);
v[h].push(y);
}
for (var T = 0, C = this._armature.getSlots(); T < C.length; T++) {
var w = C[T], S = w.parent.name;
if (this.containsBoneMask(S)) {
h = w.name, l = this._animationData.getSlotTimelines(h);
if (h in v) delete v[h]; else {
var E = !1, D = !1;
x.length = 0;
if (null !== l) for (var M = 0, I = l; M < I.length; M++) {
var P;
switch ((P = I[M]).type) {
case 20:
(y = t.BaseObject.borrowObject(t.SlotDislayTimelineState)).slot = w;
y.init(this._armature, this, P);
this._slotTimelines.push(y);
E = !0;
break;

case 21:
(y = t.BaseObject.borrowObject(t.SlotColorTimelineState)).slot = w;
y.init(this._armature, this, P);
this._slotTimelines.push(y);
D = !0;
break;

case 22:
(y = t.BaseObject.borrowObject(t.SlotFFDTimelineState)).slot = w;
y.init(this._armature, this, P);
this._slotTimelines.push(y);
x.push(y.meshOffset);
}
}
if (this.resetToPose) {
if (!E) {
(y = t.BaseObject.borrowObject(t.SlotDislayTimelineState)).slot = w;
y.init(this._armature, this, null);
this._slotTimelines.push(y);
this._poseTimelines.push(y);
}
if (!D) {
(y = t.BaseObject.borrowObject(t.SlotColorTimelineState)).slot = w;
y.init(this._armature, this, null);
this._slotTimelines.push(y);
this._poseTimelines.push(y);
}
if (null !== w.rawDisplayDatas) for (var B = 0, R = w.rawDisplayDatas; B < R.length; B++) {
var L = R[B];
if (null !== L && 2 === L.type) {
var O = L.offset;
if (x.indexOf(O) < 0) {
(y = t.BaseObject.borrowObject(t.SlotFFDTimelineState)).meshOffset = O;
y.slot = w;
y.init(this._armature, this, null);
this._slotTimelines.push(y);
this._poseTimelines.push(y);
}
}
}
}
}
}
}
for (var d in v) for (var F = 0, N = v[d]; F < N.length; F++) {
y = N[F];
this._slotTimelines.splice(this._slotTimelines.indexOf(y), 1);
y.returnToPool();
}
};
r.prototype._advanceFadeTime = function(e) {
var i = this._fadeState > 0;
if (this._subFadeState < 0) {
this._subFadeState = 0;
var n = i ? t.EventObject.FADE_OUT : t.EventObject.FADE_IN;
if (this._armature.eventDispatcher.hasDBEventListener(n)) {
(r = t.BaseObject.borrowObject(t.EventObject)).type = n;
r.armature = this._armature;
r.animationState = this;
this._armature._dragonBones.bufferEvent(r);
}
}
e < 0 && (e = -e);
this._fadeTime += e;
if (this._fadeTime >= this.fadeTotalTime) {
this._subFadeState = 1;
this._fadeProgress = i ? 0 : 1;
} else this._fadeTime > 0 ? this._fadeProgress = i ? 1 - this._fadeTime / this.fadeTotalTime : this._fadeTime / this.fadeTotalTime : this._fadeProgress = i ? 1 : 0;
if (this._subFadeState > 0) {
if (!i) {
this._playheadState |= 1;
this._fadeState = 0;
}
n = i ? t.EventObject.FADE_OUT_COMPLETE : t.EventObject.FADE_IN_COMPLETE;
if (this._armature.eventDispatcher.hasDBEventListener(n)) {
var r;
(r = t.BaseObject.borrowObject(t.EventObject)).type = n;
r.armature = this._armature;
r.animationState = this;
this._armature._dragonBones.bufferEvent(r);
}
}
};
r.prototype.init = function(e, i, n) {
if (null === this._armature) {
this._armature = e;
this._animationData = i;
this.resetToPose = n.resetToPose;
this.additiveBlending = n.additiveBlending;
this.displayControl = n.displayControl;
this.actionEnabled = n.actionEnabled;
this.layer = n.layer;
this.playTimes = n.playTimes;
this.timeScale = n.timeScale;
this.fadeTotalTime = n.fadeInTime;
this.autoFadeOutTime = n.autoFadeOutTime;
this.weight = n.weight;
this.name = n.name.length > 0 ? n.name : n.animation;
this.group = n.group;
n.pauseFadeIn ? this._playheadState = 2 : this._playheadState = 3;
if (n.duration < 0) {
this._position = 0;
this._duration = this._animationData.duration;
0 !== n.position ? this.timeScale >= 0 ? this._time = n.position : this._time = n.position - this._duration : this._time = 0;
} else {
this._position = n.position;
this._duration = n.duration;
this._time = 0;
}
this.timeScale < 0 && 0 === this._time && (this._time = -1e-6);
this.fadeTotalTime <= 0 && (this._fadeProgress = .999999);
if (n.boneMask.length > 0) {
this._boneMask.length = n.boneMask.length;
for (var r = 0, s = this._boneMask.length; r < s; ++r) this._boneMask[r] = n.boneMask[r];
}
this._actionTimeline = t.BaseObject.borrowObject(t.ActionTimelineState);
this._actionTimeline.init(this._armature, this, this._animationData.actionTimeline);
this._actionTimeline.currentTime = this._time;
this._actionTimeline.currentTime < 0 && (this._actionTimeline.currentTime = this._duration - this._actionTimeline.currentTime);
if (null !== this._animationData.zOrderTimeline) {
this._zOrderTimeline = t.BaseObject.borrowObject(t.ZOrderTimelineState);
this._zOrderTimeline.init(this._armature, this, this._animationData.zOrderTimeline);
}
}
};
r.prototype.advanceTime = function(e, i) {
this._blendState.dirty = !1;
0 === this._fadeState && 0 === this._subFadeState || this._advanceFadeTime(e);
if (3 === this._playheadState) {
1 !== this.timeScale && (e *= this.timeScale);
this._time += e;
}
if (0 !== this._timelineDirty) {
2 === this._timelineDirty && this._updateTimelines();
this._timelineDirty = 0;
this._updateBoneAndSlotTimelines();
}
if (0 !== this.weight) {
var n = 0 === this._fadeState && i > 0, r = !0, s = !0, a = this._time;
this._weightResult = this.weight * this._fadeProgress;
null !== this._parent && (this._weightResult *= this._parent._weightResult / this._parent._fadeProgress);
this._actionTimeline.playState <= 0 && this._actionTimeline.update(a);
if (n) {
var o = 2 * i;
this._actionTimeline.currentTime = Math.floor(this._actionTimeline.currentTime * o) / o;
}
null !== this._zOrderTimeline && this._zOrderTimeline.playState <= 0 && this._zOrderTimeline.update(a);
if (n) {
var h = Math.floor(this._actionTimeline.currentTime * i);
if (this._armature._cacheFrameIndex === h) {
r = !1;
s = !1;
} else {
this._armature._cacheFrameIndex = h;
this._animationData.cachedFrames[h] ? s = !1 : this._animationData.cachedFrames[h] = !0;
}
}
if (r) {
if (s) for (var l = 0, c = this._boneTimelines.length; l < c; ++l) {
(d = this._boneTimelines[l]).playState <= 0 && d.update(a);
if (l === c - 1 || d.bone !== this._boneTimelines[l + 1].bone) {
0 !== (u = d.bone._blendState.update(this._weightResult, this.layer)) && d.blend(u);
}
}
for (l = 0, c = this._surfaceTimelines.length; l < c; ++l) {
var u = (d = this._surfaceTimelines[l]).surface._blendState.update(this._weightResult, this.layer);
d.playState <= 0 && d.update(a);
0 !== u && d.blend(u);
}
if (this.displayControl) for (l = 0, c = this._slotTimelines.length; l < c; ++l) {
var _ = (d = this._slotTimelines[l]).slot.displayController;
null !== _ && _ !== this.name && _ !== this.group || d.playState <= 0 && d.update(a);
}
for (l = 0, c = this._constraintTimelines.length; l < c; ++l) {
(d = this._constraintTimelines[l]).playState <= 0 && d.update(a);
}
for (l = 0, c = this._animationTimelines.length; l < c; ++l) {
u = (d = this._animationTimelines[l]).animationState._blendState.update(this._weightResult, this.layer);
d.playState <= 0 && d.update(a);
0 !== u && d.blend(u);
}
}
if (0 === this._fadeState) {
if (this._subFadeState > 0) {
this._subFadeState = 0;
if (this._poseTimelines.length > 0) {
for (var m = 0, f = this._poseTimelines; m < f.length; m++) {
var d;
(d = f[m]) instanceof t.BoneTimelineState ? this._boneTimelines.splice(this._boneTimelines.indexOf(d), 1) : d instanceof t.SurfaceTimelineState ? this._surfaceTimelines.splice(this._surfaceTimelines.indexOf(d), 1) : d instanceof t.SlotTimelineState ? this._slotTimelines.splice(this._slotTimelines.indexOf(d), 1) : d instanceof t.ConstraintTimelineState && this._constraintTimelines.splice(this._constraintTimelines.indexOf(d), 1);
d.returnToPool();
}
this._poseTimelines.length = 0;
}
}
this._actionTimeline.playState > 0 && this.autoFadeOutTime >= 0 && this.fadeOut(this.autoFadeOutTime);
}
}
};
r.prototype.play = function() {
this._playheadState = 3;
};
r.prototype.stop = function() {
this._playheadState &= 1;
};
r.prototype.fadeOut = function(t, e) {
void 0 === e && (e = !0);
t < 0 && (t = 0);
e && (this._playheadState &= 2);
if (this._fadeState > 0) {
if (t > this.fadeTotalTime - this._fadeTime) return;
} else {
this._fadeState = 1;
this._subFadeState = -1;
(t <= 0 || this._fadeProgress <= 0) && (this._fadeProgress = 1e-6);
for (var i = 0, n = this._boneTimelines; i < n.length; i++) {
(_ = n[i]).fadeOut();
}
for (var r = 0, s = this._surfaceTimelines; r < s.length; r++) {
(_ = s[r]).fadeOut();
}
for (var a = 0, o = this._slotTimelines; a < o.length; a++) {
(_ = o[a]).fadeOut();
}
for (var h = 0, l = this._constraintTimelines; h < l.length; h++) {
(_ = l[h]).fadeOut();
}
for (var c = 0, u = this._animationTimelines; c < u.length; c++) {
var _;
(_ = u[c]).animationState.fadeOut(t, e);
_.fadeOut();
}
}
this.displayControl = !1;
this.fadeTotalTime = this._fadeProgress > 1e-6 ? t / this._fadeProgress : 0;
this._fadeTime = this.fadeTotalTime * (1 - this._fadeProgress);
};
r.prototype.containsBoneMask = function(t) {
return 0 === this._boneMask.length || this._boneMask.indexOf(t) >= 0;
};
r.prototype.addBoneMask = function(t, e) {
void 0 === e && (e = !0);
var i = this._armature.getBone(t);
if (null !== i) {
this._boneMask.indexOf(t) < 0 && this._boneMask.push(t);
if (e) for (var n = 0, r = this._armature.getBones(); n < r.length; n++) {
var s = r[n];
this._boneMask.indexOf(s.name) < 0 && i.contains(s) && this._boneMask.push(s.name);
}
this._timelineDirty = 1;
}
};
r.prototype.removeBoneMask = function(t, e) {
void 0 === e && (e = !0);
var i = this._boneMask.indexOf(t);
i >= 0 && this._boneMask.splice(i, 1);
if (e) {
var n = this._armature.getBone(t);
if (null !== n) {
var r = this._armature.getBones();
if (this._boneMask.length > 0) for (var s = 0, a = r; s < a.length; s++) {
var o = a[s], h = this._boneMask.indexOf(o.name);
h >= 0 && n.contains(o) && this._boneMask.splice(h, 1);
} else for (var l = 0, c = r; l < c.length; l++) {
(o = c[l]) !== n && (n.contains(o) || this._boneMask.push(o.name));
}
}
}
this._timelineDirty = 1;
};
r.prototype.removeAllBoneMask = function() {
this._boneMask.length = 0;
this._timelineDirty = 1;
};
Object.defineProperty(r.prototype, "isFadeIn", {
get: function() {
return this._fadeState < 0;
},
enumerable: !0,
configurable: !0
});
Object.defineProperty(r.prototype, "isFadeOut", {
get: function() {
return this._fadeState > 0;
},
enumerable: !0,
configurable: !0
});
Object.defineProperty(r.prototype, "isFadeComplete", {
get: function() {
return 0 === this._fadeState;
},
enumerable: !0,
configurable: !0
});
Object.defineProperty(r.prototype, "isPlaying", {
get: function() {
return 0 != (2 & this._playheadState) && this._actionTimeline.playState <= 0;
},
enumerable: !0,
configurable: !0
});
Object.defineProperty(r.prototype, "isCompleted", {
get: function() {
return this._actionTimeline.playState > 0;
},
enumerable: !0,
configurable: !0
});
Object.defineProperty(r.prototype, "currentPlayTimes", {
get: function() {
return this._actionTimeline.currentPlayTimes;
},
enumerable: !0,
configurable: !0
});
Object.defineProperty(r.prototype, "totalTime", {
get: function() {
return this._duration;
},
enumerable: !0,
configurable: !0
});
Object.defineProperty(r.prototype, "currentTime", {
get: function() {
return this._actionTimeline.currentTime;
},
set: function(t) {
var e = this._actionTimeline.currentPlayTimes - (this._actionTimeline.playState > 0 ? 1 : 0);
(t < 0 || this._duration < t) && (t = t % this._duration + e * this._duration) < 0 && (t += this._duration);
this.playTimes > 0 && e === this.playTimes - 1 && t === this._duration && (t = this._duration - 1e-6);
if (this._time !== t) {
this._time = t;
this._actionTimeline.setCurrentTime(this._time);
null !== this._zOrderTimeline && (this._zOrderTimeline.playState = -1);
for (var i = 0, n = this._boneTimelines; i < n.length; i++) {
n[i].playState = -1;
}
for (var r = 0, s = this._slotTimelines; r < s.length; r++) {
s[r].playState = -1;
}
}
},
enumerable: !0,
configurable: !0
});
Object.defineProperty(r.prototype, "animationData", {
get: function() {
return this._animationData;
},
enumerable: !0,
configurable: !0
});
return r;
})(t.BaseObject);
t.AnimationState = e;
var i = (function(e) {
a(i, e);
function i() {
var i = null !== e && e.apply(this, arguments) || this;
i.current = new t.Transform();
i.delta = new t.Transform();
i.result = new t.Transform();
return i;
}
i.toString = function() {
return "[class dragonBones.BonePose]";
};
i.prototype._onClear = function() {
this.current.identity();
this.delta.identity();
this.result.identity();
};
return i;
})(t.BaseObject);
t.BonePose = i;
var n = (function() {
function t() {}
t.prototype.update = function(t, e) {
if (this.dirty) {
if (!(this.leftWeight > 0)) return 0;
if (this.layer !== e) {
if (this.layerWeight >= this.leftWeight) {
this.leftWeight = 0;
return 0;
}
this.layer = e;
this.leftWeight -= this.layerWeight;
this.layerWeight = 0;
}
t *= this.leftWeight;
this.layerWeight += t;
this.blendWeight = t;
return 1;
}
this.dirty = !0;
this.layer = e;
this.layerWeight = t;
this.leftWeight = 1;
this.blendWeight = t;
return -1;
};
t.prototype.clear = function() {
this.dirty = !1;
this.layer = 0;
this.leftWeight = 0;
this.layerWeight = 0;
this.blendWeight = 0;
};
return t;
})();
t.BlendState = n;
})(s || (s = {}));
(function(t) {
var e = (function(t) {
a(e, t);
function e() {
return null !== t && t.apply(this, arguments) || this;
}
e.prototype._onClear = function() {
this.playState = -1;
this.currentPlayTimes = -1;
this.currentTime = -1;
this._tweenState = 0;
this._frameRate = 0;
this._frameValueOffset = 0;
this._frameCount = 0;
this._frameOffset = 0;
this._frameIndex = -1;
this._frameRateR = 0;
this._position = 0;
this._duration = 0;
this._timeScale = 1;
this._timeOffset = 0;
this._dragonBonesData = null;
this._animationData = null;
this._timelineData = null;
this._armature = null;
this._animationState = null;
this._actionTimeline = null;
this._frameArray = null;
this._frameIntArray = null;
this._frameFloatArray = null;
this._timelineArray = null;
this._frameIndices = null;
};
e.prototype._setCurrentTime = function(t) {
var e = this.playState, i = this.currentPlayTimes, n = this.currentTime;
if (null !== this._actionTimeline && this._frameCount <= 1) {
this.playState = this._actionTimeline.playState >= 0 ? 1 : -1;
this.currentPlayTimes = 1;
this.currentTime = this._actionTimeline.currentTime;
} else if (null === this._actionTimeline || 1 !== this._timeScale || 0 !== this._timeOffset) {
var r = this._animationState.playTimes, s = r * this._duration;
t *= this._timeScale;
0 !== this._timeOffset && (t += this._timeOffset * this._animationData.duration);
if (r > 0 && (t >= s || t <= -s)) {
this.playState <= 0 && 3 === this._animationState._playheadState && (this.playState = 1);
this.currentPlayTimes = r;
this.currentTime = t < 0 ? 0 : this._duration + 1e-6;
} else {
0 !== this.playState && 3 === this._animationState._playheadState && (this.playState = 0);
if (t < 0) {
t = -t;
this.currentPlayTimes = Math.floor(t / this._duration);
this.currentTime = this._duration - t % this._duration;
} else {
this.currentPlayTimes = Math.floor(t / this._duration);
this.currentTime = t % this._duration;
}
}
this.currentTime += this._position;
} else {
this.playState = this._actionTimeline.playState;
this.currentPlayTimes = this._actionTimeline.currentPlayTimes;
this.currentTime = this._actionTimeline.currentTime;
}
if (this.currentPlayTimes === i && this.currentTime === n) return !1;
(e < 0 && this.playState !== e || this.playState <= 0 && this.currentPlayTimes !== i) && (this._frameIndex = -1);
return !0;
};
e.prototype.init = function(t, e, i) {
this._armature = t;
this._animationState = e;
this._timelineData = i;
this._actionTimeline = this._animationState._actionTimeline;
this === this._actionTimeline && (this._actionTimeline = null);
this._animationData = this._animationState._animationData;
this._frameRate = this._animationData.parent.frameRate;
this._frameRateR = 1 / this._frameRate;
this._position = this._animationState._position;
this._duration = this._animationState._duration;
this._dragonBonesData = this._animationData.parent.parent;
if (null !== this._timelineData) {
this._frameIntArray = this._dragonBonesData.frameIntArray;
this._frameFloatArray = this._dragonBonesData.frameFloatArray;
this._frameArray = this._dragonBonesData.frameArray;
this._timelineArray = this._dragonBonesData.timelineArray;
this._frameIndices = this._dragonBonesData.frameIndices;
this._frameCount = this._timelineArray[this._timelineData.offset + 2];
this._frameValueOffset = this._timelineArray[this._timelineData.offset + 4];
this._timeScale = 100 / this._timelineArray[this._timelineData.offset + 0];
this._timeOffset = .01 * this._timelineArray[this._timelineData.offset + 1];
}
};
e.prototype.fadeOut = function() {};
e.prototype.update = function(t) {
if (this._setCurrentTime(t)) {
if (this._frameCount > 1) {
var e = Math.floor(this.currentTime * this._frameRate), i = this._frameIndices[this._timelineData.frameIndicesOffset + e];
if (this._frameIndex !== i) {
this._frameIndex = i;
this._frameOffset = this._animationData.frameOffset + this._timelineArray[this._timelineData.offset + 5 + this._frameIndex];
this._onArriveAtFrame();
}
} else if (this._frameIndex < 0) {
this._frameIndex = 0;
null !== this._timelineData && (this._frameOffset = this._animationData.frameOffset + this._timelineArray[this._timelineData.offset + 5]);
this._onArriveAtFrame();
}
0 !== this._tweenState && this._onUpdateFrame();
}
};
return e;
})(t.BaseObject);
t.TimelineState = e;
var i = (function(t) {
a(e, t);
function e() {
return null !== t && t.apply(this, arguments) || this;
}
e._getEasingValue = function(t, e, i) {
var n = e;
switch (t) {
case 3:
n = Math.pow(e, 2);
break;

case 4:
n = 1 - Math.pow(1 - e, 2);
break;

case 5:
n = .5 * (1 - Math.cos(e * Math.PI));
}
return (n - e) * i + e;
};
e._getEasingCurveValue = function(t, e, i, n) {
if (t <= 0) return 0;
if (t >= 1) return 1;
var r = i + 1, s = Math.floor(t * r), a = 0 === s ? 0 : e[n + s - 1];
return 1e-4 * (a + ((s === r - 1 ? 1e4 : e[n + s]) - a) * (t * r - s));
};
e.prototype._onClear = function() {
t.prototype._onClear.call(this);
this._tweenType = 0;
this._curveCount = 0;
this._framePosition = 0;
this._frameDurationR = 0;
this._tweenProgress = 0;
this._tweenEasing = 0;
};
e.prototype._onArriveAtFrame = function() {
if (this._frameCount > 1 && (this._frameIndex !== this._frameCount - 1 || 0 === this._animationState.playTimes || this._animationState.currentPlayTimes < this._animationState.playTimes - 1)) {
this._tweenType = this._frameArray[this._frameOffset + 1];
this._tweenState = 0 === this._tweenType ? 1 : 2;
2 === this._tweenType ? this._curveCount = this._frameArray[this._frameOffset + 2] : 0 !== this._tweenType && 1 !== this._tweenType && (this._tweenEasing = .01 * this._frameArray[this._frameOffset + 2]);
this._framePosition = this._frameArray[this._frameOffset] * this._frameRateR;
if (this._frameIndex === this._frameCount - 1) this._frameDurationR = 1 / (this._animationData.duration - this._framePosition); else {
var t = this._animationData.frameOffset + this._timelineArray[this._timelineData.offset + 5 + this._frameIndex + 1], e = this._frameArray[t] * this._frameRateR - this._framePosition;
this._frameDurationR = e > 0 ? 1 / e : 0;
}
} else this._tweenState = 1;
};
e.prototype._onUpdateFrame = function() {
if (2 === this._tweenState) {
this._tweenProgress = (this.currentTime - this._framePosition) * this._frameDurationR;
2 === this._tweenType ? this._tweenProgress = e._getEasingCurveValue(this._tweenProgress, this._frameArray, this._curveCount, this._frameOffset + 3) : 1 !== this._tweenType && (this._tweenProgress = e._getEasingValue(this._tweenType, this._tweenProgress, this._tweenEasing));
} else this._tweenProgress = 0;
};
return e;
})(e);
t.TweenTimelineState = i;
var n = (function(t) {
a(e, t);
function e() {
return null !== t && t.apply(this, arguments) || this;
}
e.prototype._onClear = function() {
t.prototype._onClear.call(this);
this.bone = null;
this.bonePose = null;
};
e.prototype.blend = function(t) {
var e = this.bone._blendState.blendWeight, i = this.bone.animationPose, n = this.bonePose.result;
if (t > 0) {
i.x += n.x * e;
i.y += n.y * e;
i.rotation += n.rotation * e;
i.skew += n.skew * e;
i.scaleX += (n.scaleX - 1) * e;
i.scaleY += (n.scaleY - 1) * e;
} else if (1 !== e) {
i.x = n.x * e;
i.y = n.y * e;
i.rotation = n.rotation * e;
i.skew = n.skew * e;
i.scaleX = (n.scaleX - 1) * e + 1;
i.scaleY = (n.scaleY - 1) * e + 1;
} else {
i.x = n.x;
i.y = n.y;
i.rotation = n.rotation;
i.skew = n.skew;
i.scaleX = n.scaleX;
i.scaleY = n.scaleY;
}
0 === this._animationState._fadeState && 0 === this._animationState._subFadeState || (this.bone._transformDirty = !0);
};
return e;
})(i);
t.BoneTimelineState = n;
var r = (function(t) {
a(e, t);
function e() {
return null !== t && t.apply(this, arguments) || this;
}
e.prototype._onClear = function() {
t.prototype._onClear.call(this);
this.slot = null;
};
return e;
})(i);
t.SlotTimelineState = r;
var s = (function(t) {
a(e, t);
function e() {
return null !== t && t.apply(this, arguments) || this;
}
e.prototype._onClear = function() {
t.prototype._onClear.call(this);
this.constraint = null;
};
return e;
})(i);
t.ConstraintTimelineState = s;
})(s || (s = {}));
(function(t) {
var e = (function(e) {
a(i, e);
function i() {
return null !== e && e.apply(this, arguments) || this;
}
i.toString = function() {
return "[class dragonBones.ActionTimelineState]";
};
i.prototype._onCrossFrame = function(e) {
var i = this._armature.eventDispatcher;
if (this._animationState.actionEnabled) for (var n = this._animationData.frameOffset + this._timelineArray[this._timelineData.offset + 5 + e], r = this._frameArray[n + 1], s = this._animationData.parent.actions, a = 0; a < r; ++a) {
var o = s[this._frameArray[n + 2 + a]];
if (0 === o.type) if (null !== o.slot) {
if (null !== (c = this._armature.getSlot(o.slot.name))) {
null !== (u = c.childArmature) && u._bufferAction(o, !0);
}
} else if (null !== o.bone) for (var h = 0, l = this._armature.getSlots(); h < l.length; h++) {
var c, u;
null !== (u = (c = l[h]).childArmature) && c.parent._boneData === o.bone && u._bufferAction(o, !0);
} else this._armature._bufferAction(o, !0); else {
var _ = 10 === o.type ? t.EventObject.FRAME_EVENT : t.EventObject.SOUND_EVENT;
if (11 === o.type || i.hasDBEventListener(_)) {
var m = t.BaseObject.borrowObject(t.EventObject);
m.time = this._frameArray[n] / this._frameRate;
m.type = _;
m.name = o.name;
m.data = o.data;
m.armature = this._armature;
m.animationState = this._animationState;
null !== o.bone && (m.bone = this._armature.getBone(o.bone.name));
null !== o.slot && (m.slot = this._armature.getSlot(o.slot.name));
this._armature._dragonBones.bufferEvent(m);
}
}
}
};
i.prototype._onArriveAtFrame = function() {};
i.prototype._onUpdateFrame = function() {};
i.prototype.update = function(e) {
var i = this.playState, n = this.currentPlayTimes, r = this.currentTime;
if (this._setCurrentTime(e)) {
var s = this._armature.eventDispatcher;
if (i < 0) {
if (this.playState === i) return;
this._animationState.displayControl && this._animationState.resetToPose && this._armature._sortZOrder(null, 0);
n = this.currentPlayTimes;
if (s.hasDBEventListener(t.EventObject.START)) {
var a = t.BaseObject.borrowObject(t.EventObject);
a.type = t.EventObject.START;
a.armature = this._armature;
a.animationState = this._animationState;
this._armature._dragonBones.bufferEvent(a);
}
}
var o = this._animationState.timeScale < 0, h = null, l = null;
if (this.currentPlayTimes !== n) {
if (s.hasDBEventListener(t.EventObject.LOOP_COMPLETE)) {
(h = t.BaseObject.borrowObject(t.EventObject)).type = t.EventObject.LOOP_COMPLETE;
h.armature = this._armature;
h.animationState = this._animationState;
}
if (this.playState > 0 && s.hasDBEventListener(t.EventObject.COMPLETE)) {
(l = t.BaseObject.borrowObject(t.EventObject)).type = t.EventObject.COMPLETE;
l.armature = this._armature;
l.animationState = this._animationState;
}
}
if (this._frameCount > 1) {
var c = this._timelineData, u = Math.floor(this.currentTime * this._frameRate), _ = this._frameIndices[c.frameIndicesOffset + u];
if (this._frameIndex !== _) {
var m = this._frameIndex;
this._frameIndex = _;
if (null !== this._timelineArray) {
this._frameOffset = this._animationData.frameOffset + this._timelineArray[c.offset + 5 + this._frameIndex];
if (o) {
if (m < 0) {
var f = Math.floor(r * this._frameRate);
m = this._frameIndices[c.frameIndicesOffset + f];
this.currentPlayTimes === n && m === _ && (m = -1);
}
for (;m >= 0; ) {
var d = this._animationData.frameOffset + this._timelineArray[c.offset + 5 + m], p = this._frameArray[d] / this._frameRate;
this._position <= p && p <= this._position + this._duration && this._onCrossFrame(m);
if (null !== h && 0 === m) {
this._armature._dragonBones.bufferEvent(h);
h = null;
}
m > 0 ? m-- : m = this._frameCount - 1;
if (m === _) break;
}
} else {
if (m < 0) {
f = Math.floor(r * this._frameRate);
m = this._frameIndices[c.frameIndicesOffset + f];
d = this._animationData.frameOffset + this._timelineArray[c.offset + 5 + m], p = this._frameArray[d] / this._frameRate;
this.currentPlayTimes === n && (r <= p ? m > 0 ? m-- : m = this._frameCount - 1 : m === _ && (m = -1));
}
for (;m >= 0; ) {
m < this._frameCount - 1 ? m++ : m = 0;
d = this._animationData.frameOffset + this._timelineArray[c.offset + 5 + m], p = this._frameArray[d] / this._frameRate;
this._position <= p && p <= this._position + this._duration && this._onCrossFrame(m);
if (null !== h && 0 === m) {
this._armature._dragonBones.bufferEvent(h);
h = null;
}
if (m === _) break;
}
}
}
}
} else if (this._frameIndex < 0) {
this._frameIndex = 0;
if (null !== this._timelineData) {
this._frameOffset = this._animationData.frameOffset + this._timelineArray[this._timelineData.offset + 5];
p = this._frameArray[this._frameOffset] / this._frameRate;
if (this.currentPlayTimes === n) r <= p && this._onCrossFrame(this._frameIndex); else if (this._position <= p) {
if (!o && null !== h) {
this._armature._dragonBones.bufferEvent(h);
h = null;
}
this._onCrossFrame(this._frameIndex);
}
}
}
null !== h && this._armature._dragonBones.bufferEvent(h);
null !== l && this._armature._dragonBones.bufferEvent(l);
}
};
i.prototype.setCurrentTime = function(t) {
this._setCurrentTime(t);
this._frameIndex = -1;
};
return i;
})(t.TimelineState);
t.ActionTimelineState = e;
var i = (function(t) {
a(e, t);
function e() {
return null !== t && t.apply(this, arguments) || this;
}
e.toString = function() {
return "[class dragonBones.ZOrderTimelineState]";
};
e.prototype._onArriveAtFrame = function() {
if (this.playState >= 0) {
this._frameArray[this._frameOffset + 1] > 0 ? this._armature._sortZOrder(this._frameArray, this._frameOffset + 2) : this._armature._sortZOrder(null, 0);
}
};
e.prototype._onUpdateFrame = function() {};
return e;
})(t.TimelineState);
t.ZOrderTimelineState = i;
var n = (function(e) {
a(i, e);
function i() {
return null !== e && e.apply(this, arguments) || this;
}
i.toString = function() {
return "[class dragonBones.BoneAllTimelineState]";
};
i.prototype._onArriveAtFrame = function() {
e.prototype._onArriveAtFrame.call(this);
if (null !== this._timelineData) {
var t = this._animationData.frameFloatOffset + this._frameValueOffset + 6 * this._frameIndex, i = this._armature._armatureData.scale, n = this._frameFloatArray, r = this.bonePose.current, s = this.bonePose.delta;
r.x = n[t++] * i;
r.y = n[t++] * i;
r.rotation = n[t++];
r.skew = n[t++];
r.scaleX = n[t++];
r.scaleY = n[t++];
if (2 === this._tweenState) {
this._frameIndex === this._frameCount - 1 && (t = this._animationData.frameFloatOffset + this._frameValueOffset);
s.x = n[t++] * i - r.x;
s.y = n[t++] * i - r.y;
s.rotation = n[t++] - r.rotation;
s.skew = n[t++] - r.skew;
s.scaleX = n[t++] - r.scaleX;
s.scaleY = n[t++] - r.scaleY;
} else {
s.x = 0;
s.y = 0;
s.rotation = 0;
s.skew = 0;
s.scaleX = 0;
s.scaleY = 0;
}
} else {
r = this.bonePose.current, s = this.bonePose.delta;
r.x = 0;
r.y = 0;
r.rotation = 0;
r.skew = 0;
r.scaleX = 1;
r.scaleY = 1;
s.x = 0;
s.y = 0;
s.rotation = 0;
s.skew = 0;
s.scaleX = 0;
s.scaleY = 0;
}
};
i.prototype._onUpdateFrame = function() {
e.prototype._onUpdateFrame.call(this);
var t = this.bonePose.current, i = this.bonePose.delta, n = this.bonePose.result;
this.bone._transformDirty = !0;
2 !== this._tweenState && (this._tweenState = 0);
n.x = t.x + i.x * this._tweenProgress;
n.y = t.y + i.y * this._tweenProgress;
n.rotation = t.rotation + i.rotation * this._tweenProgress;
n.skew = t.skew + i.skew * this._tweenProgress;
n.scaleX = t.scaleX + i.scaleX * this._tweenProgress;
n.scaleY = t.scaleY + i.scaleY * this._tweenProgress;
};
i.prototype.fadeOut = function() {
var e = this.bonePose.result;
e.rotation = t.Transform.normalizeRadian(e.rotation);
e.skew = t.Transform.normalizeRadian(e.skew);
};
return i;
})(t.BoneTimelineState);
t.BoneAllTimelineState = n;
var r = (function(t) {
a(e, t);
function e() {
return null !== t && t.apply(this, arguments) || this;
}
e.toString = function() {
return "[class dragonBones.BoneTranslateTimelineState]";
};
e.prototype._onArriveAtFrame = function() {
t.prototype._onArriveAtFrame.call(this);
if (null !== this._timelineData) {
var e = this._animationData.frameFloatOffset + this._frameValueOffset + 2 * this._frameIndex, i = this._armature._armatureData.scale, n = this._frameFloatArray, r = this.bonePose.current, s = this.bonePose.delta;
r.x = n[e++] * i;
r.y = n[e++] * i;
if (2 === this._tweenState) {
this._frameIndex === this._frameCount - 1 && (e = this._animationData.frameFloatOffset + this._frameValueOffset);
s.x = n[e++] * i - r.x;
s.y = n[e++] * i - r.y;
} else {
s.x = 0;
s.y = 0;
}
} else {
r = this.bonePose.current, s = this.bonePose.delta;
r.x = 0;
r.y = 0;
s.x = 0;
s.y = 0;
}
};
e.prototype._onUpdateFrame = function() {
t.prototype._onUpdateFrame.call(this);
var e = this.bonePose.current, i = this.bonePose.delta, n = this.bonePose.result;
this.bone._transformDirty = !0;
2 !== this._tweenState && (this._tweenState = 0);
n.x = e.x + i.x * this._tweenProgress;
n.y = e.y + i.y * this._tweenProgress;
};
return e;
})(t.BoneTimelineState);
t.BoneTranslateTimelineState = r;
var s = (function(e) {
a(i, e);
function i() {
return null !== e && e.apply(this, arguments) || this;
}
i.toString = function() {
return "[class dragonBones.BoneRotateTimelineState]";
};
i.prototype._onArriveAtFrame = function() {
e.prototype._onArriveAtFrame.call(this);
if (null !== this._timelineData) {
var t = this._animationData.frameFloatOffset + this._frameValueOffset + 2 * this._frameIndex, i = this._frameFloatArray, n = this.bonePose.current, r = this.bonePose.delta;
n.rotation = i[t++];
n.skew = i[t++];
if (2 === this._tweenState) {
this._frameIndex === this._frameCount - 1 && (t = this._animationData.frameFloatOffset + this._frameValueOffset);
r.rotation = i[t++] - n.rotation;
r.skew = i[t++] - n.skew;
} else {
r.rotation = 0;
r.skew = 0;
}
} else {
n = this.bonePose.current, r = this.bonePose.delta;
n.rotation = 0;
n.skew = 0;
r.rotation = 0;
r.skew = 0;
}
};
i.prototype._onUpdateFrame = function() {
e.prototype._onUpdateFrame.call(this);
var t = this.bonePose.current, i = this.bonePose.delta, n = this.bonePose.result;
this.bone._transformDirty = !0;
2 !== this._tweenState && (this._tweenState = 0);
n.rotation = t.rotation + i.rotation * this._tweenProgress;
n.skew = t.skew + i.skew * this._tweenProgress;
};
i.prototype.fadeOut = function() {
var e = this.bonePose.result;
e.rotation = t.Transform.normalizeRadian(e.rotation);
e.skew = t.Transform.normalizeRadian(e.skew);
};
return i;
})(t.BoneTimelineState);
t.BoneRotateTimelineState = s;
var o = (function(t) {
a(e, t);
function e() {
return null !== t && t.apply(this, arguments) || this;
}
e.toString = function() {
return "[class dragonBones.BoneScaleTimelineState]";
};
e.prototype._onArriveAtFrame = function() {
t.prototype._onArriveAtFrame.call(this);
if (null !== this._timelineData) {
var e = this._animationData.frameFloatOffset + this._frameValueOffset + 2 * this._frameIndex, i = this._frameFloatArray, n = this.bonePose.current, r = this.bonePose.delta;
n.scaleX = i[e++];
n.scaleY = i[e++];
if (2 === this._tweenState) {
this._frameIndex === this._frameCount - 1 && (e = this._animationData.frameFloatOffset + this._frameValueOffset);
r.scaleX = i[e++] - n.scaleX;
r.scaleY = i[e++] - n.scaleY;
} else {
r.scaleX = 0;
r.scaleY = 0;
}
} else {
n = this.bonePose.current, r = this.bonePose.delta;
n.scaleX = 1;
n.scaleY = 1;
r.scaleX = 0;
r.scaleY = 0;
}
};
e.prototype._onUpdateFrame = function() {
t.prototype._onUpdateFrame.call(this);
var e = this.bonePose.current, i = this.bonePose.delta, n = this.bonePose.result;
this.bone._transformDirty = !0;
2 !== this._tweenState && (this._tweenState = 0);
n.scaleX = e.scaleX + i.scaleX * this._tweenProgress;
n.scaleY = e.scaleY + i.scaleY * this._tweenProgress;
};
return e;
})(t.BoneTimelineState);
t.BoneScaleTimelineState = o;
var h = (function(t) {
a(e, t);
function e() {
var e = null !== t && t.apply(this, arguments) || this;
e._current = [];
e._delta = [];
e._result = [];
return e;
}
e.toString = function() {
return "[class dragonBones.SurfaceTimelineState]";
};
e.prototype._onClear = function() {
t.prototype._onClear.call(this);
this.surface = null;
this._frameFloatOffset = 0;
this._valueCount = 0;
this._deformCount = 0;
this._valueOffset = 0;
this._current.length = 0;
this._delta.length = 0;
this._result.length = 0;
};
e.prototype._onArriveAtFrame = function() {
t.prototype._onArriveAtFrame.call(this);
if (null !== this._timelineData) {
var e = this._animationData.frameFloatOffset + this._frameValueOffset + this._frameIndex * this._valueCount, i = this._armature._armatureData.scale, n = this._frameFloatArray;
if (2 === this._tweenState) {
var r = e + this._valueCount;
this._frameIndex === this._frameCount - 1 && (r = this._animationData.frameFloatOffset + this._frameValueOffset);
for (var s = 0; s < this._valueCount; ++s) this._delta[s] = n[r + s] * i - (this._current[s] = n[e + s] * i);
} else for (s = 0; s < this._valueCount; ++s) this._current[s] = n[e + s] * i;
} else for (s = 0; s < this._valueCount; ++s) this._current[s] = 0;
};
e.prototype._onUpdateFrame = function() {
t.prototype._onUpdateFrame.call(this);
this.surface._transformDirty = !0;
2 !== this._tweenState && (this._tweenState = 0);
for (var e = 0; e < this._valueCount; ++e) this._result[e] = this._current[e] + this._delta[e] * this._tweenProgress;
};
e.prototype.init = function(e, i, n) {
t.prototype.init.call(this, e, i, n);
if (null !== this._timelineData) {
var r = this._animationData.frameIntOffset + this._timelineArray[this._timelineData.offset + 3];
this._deformCount = this._frameIntArray[r + 1];
this._valueCount = this._frameIntArray[r + 2];
this._valueOffset = this._frameIntArray[r + 3];
this._frameFloatOffset = this._frameIntArray[r + 4] + this._animationData.frameFloatOffset;
} else {
this._deformCount = this.surface._deformVertices.length;
this._valueCount = this._deformCount;
this._valueOffset = 0;
this._frameFloatOffset = 0;
}
this._current.length = this._valueCount;
this._delta.length = this._valueCount;
this._result.length = this._valueCount;
for (var s = 0; s < this._valueCount; ++s) this._delta[s] = 0;
};
e.prototype.blend = function(t) {
for (var e = this.surface._blendState.blendWeight, i = this.surface._deformVertices, n = 0; n < this._deformCount; ++n) {
var r = 0;
r = n < this._valueOffset ? this._frameFloatArray[this._frameFloatOffset + n] : n < this._valueOffset + this._valueCount ? this._result[n - this._valueOffset] : this._frameFloatArray[this._frameFloatOffset + n - this._valueCount];
t > 0 ? i[n] += r * e : i[n] = 1 !== e ? r * e : r;
}
0 === this._animationState._fadeState && 0 === this._animationState._subFadeState || (this.surface._transformDirty = !0);
};
return e;
})(t.TweenTimelineState);
t.SurfaceTimelineState = h;
var l = (function(t) {
a(e, t);
function e() {
return null !== t && t.apply(this, arguments) || this;
}
e.toString = function() {
return "[class dragonBones.SlotDislayTimelineState]";
};
e.prototype._onArriveAtFrame = function() {
if (this.playState >= 0) {
var t = null !== this._timelineData ? this._frameArray[this._frameOffset + 1] : this.slot._slotData.displayIndex;
this.slot.displayIndex !== t && this.slot._setDisplayIndex(t, !0);
}
};
return e;
})(t.SlotTimelineState);
t.SlotDislayTimelineState = l;
var c = (function(t) {
a(e, t);
function e() {
var e = null !== t && t.apply(this, arguments) || this;
e._current = [ 0, 0, 0, 0, 0, 0, 0, 0 ];
e._delta = [ 0, 0, 0, 0, 0, 0, 0, 0 ];
e._result = [ 0, 0, 0, 0, 0, 0, 0, 0 ];
return e;
}
e.toString = function() {
return "[class dragonBones.SlotColorTimelineState]";
};
e.prototype._onClear = function() {
t.prototype._onClear.call(this);
this._dirty = !1;
};
e.prototype._onArriveAtFrame = function() {
t.prototype._onArriveAtFrame.call(this);
if (null !== this._timelineData) {
var e = this._dragonBonesData.intArray, i = this._frameIntArray, n = this._animationData.frameIntOffset + this._frameValueOffset + 1 * this._frameIndex, r = i[n];
r < 0 && (r += 65536);
this._current[0] = e[r++];
this._current[1] = e[r++];
this._current[2] = e[r++];
this._current[3] = e[r++];
this._current[4] = e[r++];
this._current[5] = e[r++];
this._current[6] = e[r++];
this._current[7] = e[r++];
if (2 === this._tweenState) {
(r = this._frameIndex === this._frameCount - 1 ? i[this._animationData.frameIntOffset + this._frameValueOffset] : i[n + 1]) < 0 && (r += 65536);
this._delta[0] = e[r++] - this._current[0];
this._delta[1] = e[r++] - this._current[1];
this._delta[2] = e[r++] - this._current[2];
this._delta[3] = e[r++] - this._current[3];
this._delta[4] = e[r++] - this._current[4];
this._delta[5] = e[r++] - this._current[5];
this._delta[6] = e[r++] - this._current[6];
this._delta[7] = e[r++] - this._current[7];
}
} else {
var s = this.slot._slotData.color;
this._current[0] = 100 * s.alphaMultiplier;
this._current[1] = 100 * s.redMultiplier;
this._current[2] = 100 * s.greenMultiplier;
this._current[3] = 100 * s.blueMultiplier;
this._current[4] = s.alphaOffset;
this._current[5] = s.redOffset;
this._current[6] = s.greenOffset;
this._current[7] = s.blueOffset;
}
};
e.prototype._onUpdateFrame = function() {
t.prototype._onUpdateFrame.call(this);
this._dirty = !0;
2 !== this._tweenState && (this._tweenState = 0);
this._result[0] = .01 * (this._current[0] + this._delta[0] * this._tweenProgress);
this._result[1] = .01 * (this._current[1] + this._delta[1] * this._tweenProgress);
this._result[2] = .01 * (this._current[2] + this._delta[2] * this._tweenProgress);
this._result[3] = .01 * (this._current[3] + this._delta[3] * this._tweenProgress);
this._result[4] = this._current[4] + this._delta[4] * this._tweenProgress;
this._result[5] = this._current[5] + this._delta[5] * this._tweenProgress;
this._result[6] = this._current[6] + this._delta[6] * this._tweenProgress;
this._result[7] = this._current[7] + this._delta[7] * this._tweenProgress;
};
e.prototype.fadeOut = function() {
this._tweenState = 0;
this._dirty = !1;
};
e.prototype.update = function(e) {
t.prototype.update.call(this, e);
if (0 !== this._tweenState || this._dirty) {
var i = this.slot._colorTransform;
if (0 !== this._animationState._fadeState || 0 !== this._animationState._subFadeState) {
if (i.alphaMultiplier !== this._result[0] || i.redMultiplier !== this._result[1] || i.greenMultiplier !== this._result[2] || i.blueMultiplier !== this._result[3] || i.alphaOffset !== this._result[4] || i.redOffset !== this._result[5] || i.greenOffset !== this._result[6] || i.blueOffset !== this._result[7]) {
var n = Math.pow(this._animationState._fadeProgress, 4);
i.alphaMultiplier += (this._result[0] - i.alphaMultiplier) * n;
i.redMultiplier += (this._result[1] - i.redMultiplier) * n;
i.greenMultiplier += (this._result[2] - i.greenMultiplier) * n;
i.blueMultiplier += (this._result[3] - i.blueMultiplier) * n;
i.alphaOffset += (this._result[4] - i.alphaOffset) * n;
i.redOffset += (this._result[5] - i.redOffset) * n;
i.greenOffset += (this._result[6] - i.greenOffset) * n;
i.blueOffset += (this._result[7] - i.blueOffset) * n;
this.slot._colorDirty = !0;
}
} else if (this._dirty) {
this._dirty = !1;
if (i.alphaMultiplier !== this._result[0] || i.redMultiplier !== this._result[1] || i.greenMultiplier !== this._result[2] || i.blueMultiplier !== this._result[3] || i.alphaOffset !== this._result[4] || i.redOffset !== this._result[5] || i.greenOffset !== this._result[6] || i.blueOffset !== this._result[7]) {
i.alphaMultiplier = this._result[0];
i.redMultiplier = this._result[1];
i.greenMultiplier = this._result[2];
i.blueMultiplier = this._result[3];
i.alphaOffset = this._result[4];
i.redOffset = this._result[5];
i.greenOffset = this._result[6];
i.blueOffset = this._result[7];
this.slot._colorDirty = !0;
}
}
}
};
return e;
})(t.SlotTimelineState);
t.SlotColorTimelineState = c;
var u = (function(t) {
a(e, t);
function e() {
var e = null !== t && t.apply(this, arguments) || this;
e._current = [];
e._delta = [];
e._result = [];
return e;
}
e.toString = function() {
return "[class dragonBones.SlotFFDTimelineState]";
};
e.prototype._onClear = function() {
t.prototype._onClear.call(this);
this.meshOffset = 0;
this._dirty = !1;
this._frameFloatOffset = 0;
this._valueCount = 0;
this._deformCount = 0;
this._valueOffset = 0;
this._current.length = 0;
this._delta.length = 0;
this._result.length = 0;
};
e.prototype._onArriveAtFrame = function() {
t.prototype._onArriveAtFrame.call(this);
if (null !== this._timelineData) {
var e = this._animationData.frameFloatOffset + this._frameValueOffset + this._frameIndex * this._valueCount, i = this._armature._armatureData.scale, n = this._frameFloatArray;
if (2 === this._tweenState) {
var r = e + this._valueCount;
this._frameIndex === this._frameCount - 1 && (r = this._animationData.frameFloatOffset + this._frameValueOffset);
for (var s = 0; s < this._valueCount; ++s) this._delta[s] = n[r + s] * i - (this._current[s] = n[e + s] * i);
} else for (s = 0; s < this._valueCount; ++s) this._current[s] = n[e + s] * i;
} else for (s = 0; s < this._valueCount; ++s) this._current[s] = 0;
};
e.prototype._onUpdateFrame = function() {
t.prototype._onUpdateFrame.call(this);
this._dirty = !0;
2 !== this._tweenState && (this._tweenState = 0);
for (var e = 0; e < this._valueCount; ++e) this._result[e] = this._current[e] + this._delta[e] * this._tweenProgress;
};
e.prototype.init = function(e, i, n) {
t.prototype.init.call(this, e, i, n);
if (null !== this._timelineData) {
var r = this._animationData.frameIntOffset + this._timelineArray[this._timelineData.offset + 3];
this.meshOffset = this._frameIntArray[r + 0];
this.meshOffset < 0 && (this.meshOffset += 65536);
this._deformCount = this._frameIntArray[r + 1];
this._valueCount = this._frameIntArray[r + 2];
this._valueOffset = this._frameIntArray[r + 3];
this._frameFloatOffset = this._frameIntArray[r + 4] + this._animationData.frameFloatOffset;
} else {
this._deformCount = this.slot._deformVertices.length;
this._valueCount = this._deformCount;
this._valueOffset = 0;
this._frameFloatOffset = 0;
}
this._current.length = this._valueCount;
this._delta.length = this._valueCount;
this._result.length = this._valueCount;
for (var s = 0; s < this._valueCount; ++s) this._delta[s] = 0;
};
e.prototype.fadeOut = function() {
this._tweenState = 0;
this._dirty = !1;
};
e.prototype.update = function(e) {
if (null !== this.slot._meshData && this.slot._meshData.offset === this.meshOffset) {
t.prototype.update.call(this, e);
if (0 !== this._tweenState || this._dirty) {
var i = this.slot._deformVertices;
if (0 !== this._animationState._fadeState || 0 !== this._animationState._subFadeState) {
for (var n = Math.pow(this._animationState._fadeProgress, 2), r = 0; r < this._deformCount; ++r) r < this._valueOffset ? i[r] += (this._frameFloatArray[this._frameFloatOffset + r] - i[r]) * n : r < this._valueOffset + this._valueCount ? i[r] += (this._result[r - this._valueOffset] - i[r]) * n : i[r] += (this._frameFloatArray[this._frameFloatOffset + r - this._valueCount] - i[r]) * n;
this.slot._meshDirty = !0;
} else if (this._dirty) {
this._dirty = !1;
for (r = 0; r < this._deformCount; ++r) r < this._valueOffset ? i[r] = this._frameFloatArray[this._frameFloatOffset + r] : r < this._valueOffset + this._valueCount ? i[r] = this._result[r - this._valueOffset] : i[r] = this._frameFloatArray[this._frameFloatOffset + r - this._valueCount];
this.slot._meshDirty = !0;
}
}
}
};
return e;
})(t.SlotTimelineState);
t.SlotFFDTimelineState = u;
var _ = (function(t) {
a(e, t);
function e() {
return null !== t && t.apply(this, arguments) || this;
}
e.toString = function() {
return "[class dragonBones.IKConstraintTimelineState]";
};
e.prototype._onClear = function() {
t.prototype._onClear.call(this);
this._current = 0;
this._delta = 0;
};
e.prototype._onArriveAtFrame = function() {
t.prototype._onArriveAtFrame.call(this);
var e = this.constraint;
if (null !== this._timelineData) {
var i = this._animationData.frameIntOffset + this._frameValueOffset + 2 * this._frameIndex, n = this._frameIntArray, r = 0 !== n[i++];
this._current = .01 * n[i++];
if (2 === this._tweenState) {
this._frameIndex === this._frameCount - 1 && (i = this._animationData.frameIntOffset + this._frameValueOffset);
this._delta = .01 * n[i + 1] - this._current;
} else this._delta = 0;
e._bendPositive = r;
} else {
var s = e._constraintData;
this._current = s.weight;
this._delta = 0;
e._bendPositive = s.bendPositive;
}
e.invalidUpdate();
};
e.prototype._onUpdateFrame = function() {
t.prototype._onUpdateFrame.call(this);
2 !== this._tweenState && (this._tweenState = 0);
var e = this.constraint;
e._weight = this._current + this._delta * this._tweenProgress;
e.invalidUpdate();
};
return e;
})(t.ConstraintTimelineState);
t.IKConstraintTimelineState = _;
var m = (function(t) {
a(e, t);
function e() {
var e = null !== t && t.apply(this, arguments) || this;
e._floats = [ 0, 0, 0, 0, 0, 0 ];
return e;
}
e.toString = function() {
return "[class dragonBones.AnimationTimelineState]";
};
e.prototype._onClear = function() {
t.prototype._onClear.call(this);
this.animationState = null;
};
e.prototype._onArriveAtFrame = function() {
t.prototype._onArriveAtFrame.call(this);
if (null !== this._timelineData) {
var e = this._animationData.frameIntOffset + this._frameValueOffset + 2 * this._frameIndex, i = 1 / this.animationState._animationData.parent.frameRate, n = this._frameIntArray;
this._floats[0] = n[e++] * i;
this._floats[3] = .01 * n[e++];
if (2 === this._tweenState) {
this._frameIndex === this._frameCount - 1 && (e = this._animationData.frameIntOffset + this._frameValueOffset);
this._floats[1] = n[e++] * i - this._floats[0];
this._floats[4] = .01 * n[e++] - this._floats[3];
} else {
this._floats[1] = 0;
this._floats[4] = 0;
}
}
};
e.prototype._onUpdateFrame = function() {
t.prototype._onUpdateFrame.call(this);
2 !== this._tweenState && (this._tweenState = 0);
this._floats[0] >= 0 && (this._floats[2] = this._floats[0] + this._floats[1] * this._tweenProgress);
this._floats[5] = this._floats[3] + this._floats[4] * this._tweenProgress;
};
e.prototype.blend = function(t) {
var e = this.animationState, i = e._blendState.blendWeight;
if (t > 0) {
e.weight += this._floats[5] * i;
e.currentTime += this._floats[2] * i;
} else {
e.weight = this._floats[5] * i;
e.currentTime = this._floats[2] * i;
}
};
return e;
})(t.TweenTimelineState);
t.AnimationTimelineState = m;
})(s || (s = {}));
(function(t) {
var e = (function(t) {
a(e, t);
function e() {
return null !== t && t.apply(this, arguments) || this;
}
e.toString = function() {
return "[class dragonBones.EventObject]";
};
e.prototype._onClear = function() {
this.time = 0;
this.type = "";
this.name = "";
this.armature = null;
this.bone = null;
this.slot = null;
this.animationState = null;
this.data = null;
};
e.START = "start";
e.LOOP_COMPLETE = "loopComplete";
e.COMPLETE = "complete";
e.FADE_IN = "fadeIn";
e.FADE_IN_COMPLETE = "fadeInComplete";
e.FADE_OUT = "fadeOut";
e.FADE_OUT_COMPLETE = "fadeOutComplete";
e.FRAME_EVENT = "frameEvent";
e.SOUND_EVENT = "soundEvent";
return e;
})(t.BaseObject);
t.EventObject = e;
})(s || (s = {}));
(function(t) {
var e = (function() {
function e() {}
e._getArmatureType = function(t) {
switch (t.toLowerCase()) {
case "stage":
return 2;

case "armature":
return 0;

case "movieclip":
return 1;

default:
return 0;
}
};
e._getBoneType = function(t) {
switch (t.toLowerCase()) {
case "bone":
return 0;

case "surface":
return 1;

default:
return 0;
}
};
e._getDisplayType = function(t) {
switch (t.toLowerCase()) {
case "image":
return 0;

case "mesh":
return 2;

case "armature":
return 1;

case "boundingbox":
return 3;

default:
return 0;
}
};
e._getBoundingBoxType = function(t) {
switch (t.toLowerCase()) {
case "rectangle":
return 0;

case "ellipse":
return 1;

case "polygon":
return 2;

default:
return 0;
}
};
e._getActionType = function(t) {
switch (t.toLowerCase()) {
case "play":
return 0;

case "frame":
return 10;

case "sound":
return 11;

default:
return 0;
}
};
e._getBlendMode = function(t) {
switch (t.toLowerCase()) {
case "normal":
return 0;

case "add":
return 1;

case "alpha":
return 2;

case "darken":
return 3;

case "difference":
return 4;

case "erase":
return 5;

case "hardlight":
return 6;

case "invert":
return 7;

case "layer":
return 8;

case "lighten":
return 9;

case "multiply":
return 10;

case "overlay":
return 11;

case "screen":
return 12;

case "subtract":
return 13;

default:
return 0;
}
};
e.parseDragonBonesData = function(e) {
return e instanceof ArrayBuffer ? t.BinaryDataParser.getInstance().parseDragonBonesData(e) : t.ObjectDataParser.getInstance().parseDragonBonesData(e);
};
e.parseTextureAtlasData = function(i, n) {
void 0 === n && (n = 1);
console.warn("已废弃");
for (var r = {}, s = i[e.SUB_TEXTURE], a = 0, o = s.length; a < o; a++) {
var h = s[a], l = h[e.NAME], c = new t.Rectangle(), u = null;
c.x = h[e.X] / n;
c.y = h[e.Y] / n;
c.width = h[e.WIDTH] / n;
c.height = h[e.HEIGHT] / n;
if (e.FRAME_WIDTH in h) {
(u = new t.Rectangle()).x = h[e.FRAME_X] / n;
u.y = h[e.FRAME_Y] / n;
u.width = h[e.FRAME_WIDTH] / n;
u.height = h[e.FRAME_HEIGHT] / n;
}
r[l] = {
region: c,
frame: u,
rotated: !1
};
}
return r;
};
e.DATA_VERSION_2_3 = "2.3";
e.DATA_VERSION_3_0 = "3.0";
e.DATA_VERSION_4_0 = "4.0";
e.DATA_VERSION_4_5 = "4.5";
e.DATA_VERSION_5_0 = "5.0";
e.DATA_VERSION_5_5 = "5.5";
e.DATA_VERSION = e.DATA_VERSION_5_5;
e.DATA_VERSIONS = [ e.DATA_VERSION_4_0, e.DATA_VERSION_4_5, e.DATA_VERSION_5_0, e.DATA_VERSION_5_5 ];
e.TEXTURE_ATLAS = "textureAtlas";
e.SUB_TEXTURE = "SubTexture";
e.FORMAT = "format";
e.IMAGE_PATH = "imagePath";
e.WIDTH = "width";
e.HEIGHT = "height";
e.ROTATED = "rotated";
e.FRAME_X = "frameX";
e.FRAME_Y = "frameY";
e.FRAME_WIDTH = "frameWidth";
e.FRAME_HEIGHT = "frameHeight";
e.DRADON_BONES = "dragonBones";
e.USER_DATA = "userData";
e.ARMATURE = "armature";
e.BONE = "bone";
e.SURFACE = "surface";
e.SLOT = "slot";
e.CONSTRAINT = "constraint";
e.IK = "ik";
e.SKIN = "skin";
e.DISPLAY = "display";
e.ANIMATION = "animation";
e.Z_ORDER = "zOrder";
e.FFD = "ffd";
e.FRAME = "frame";
e.TRANSLATE_FRAME = "translateFrame";
e.ROTATE_FRAME = "rotateFrame";
e.SCALE_FRAME = "scaleFrame";
e.DISPLAY_FRAME = "displayFrame";
e.COLOR_FRAME = "colorFrame";
e.DEFAULT_ACTIONS = "defaultActions";
e.ACTIONS = "actions";
e.EVENTS = "events";
e.INTS = "ints";
e.FLOATS = "floats";
e.STRINGS = "strings";
e.CANVAS = "canvas";
e.TRANSFORM = "transform";
e.PIVOT = "pivot";
e.AABB = "aabb";
e.COLOR = "color";
e.VERSION = "version";
e.COMPATIBLE_VERSION = "compatibleVersion";
e.FRAME_RATE = "frameRate";
e.TYPE = "type";
e.SUB_TYPE = "subType";
e.NAME = "name";
e.PARENT = "parent";
e.TARGET = "target";
e.STAGE = "stage";
e.SHARE = "share";
e.PATH = "path";
e.LENGTH = "length";
e.DISPLAY_INDEX = "displayIndex";
e.BLEND_MODE = "blendMode";
e.INHERIT_TRANSLATION = "inheritTranslation";
e.INHERIT_ROTATION = "inheritRotation";
e.INHERIT_SCALE = "inheritScale";
e.INHERIT_REFLECTION = "inheritReflection";
e.INHERIT_ANIMATION = "inheritAnimation";
e.INHERIT_DEFORM = "inheritDeform";
e.SEGMENT_X = "segmentX";
e.SEGMENT_Y = "segmentY";
e.BEND_POSITIVE = "bendPositive";
e.CHAIN = "chain";
e.WEIGHT = "weight";
e.FADE_IN_TIME = "fadeInTime";
e.PLAY_TIMES = "playTimes";
e.SCALE = "scale";
e.OFFSET = "offset";
e.POSITION = "position";
e.DURATION = "duration";
e.TWEEN_EASING = "tweenEasing";
e.TWEEN_ROTATE = "tweenRotate";
e.TWEEN_SCALE = "tweenScale";
e.CLOCK_WISE = "clockwise";
e.CURVE = "curve";
e.SOUND = "sound";
e.EVENT = "event";
e.ACTION = "action";
e.X = "x";
e.Y = "y";
e.SKEW_X = "skX";
e.SKEW_Y = "skY";
e.SCALE_X = "scX";
e.SCALE_Y = "scY";
e.VALUE = "value";
e.ROTATE = "rotate";
e.SKEW = "skew";
e.ALPHA_OFFSET = "aO";
e.RED_OFFSET = "rO";
e.GREEN_OFFSET = "gO";
e.BLUE_OFFSET = "bO";
e.ALPHA_MULTIPLIER = "aM";
e.RED_MULTIPLIER = "rM";
e.GREEN_MULTIPLIER = "gM";
e.BLUE_MULTIPLIER = "bM";
e.UVS = "uvs";
e.VERTICES = "vertices";
e.TRIANGLES = "triangles";
e.WEIGHTS = "weights";
e.SLOT_POSE = "slotPose";
e.BONE_POSE = "bonePose";
e.GLUE_WEIGHTS = "glueWeights";
e.GLUE_MESHES = "glueMeshes";
e.GOTO_AND_PLAY = "gotoAndPlay";
e.DEFAULT_NAME = "default";
return e;
})();
t.DataParser = e;
})(s || (s = {}));
(function(i) {
var n = (function(n) {
a(s, n);
function s() {
var t = null !== n && n.apply(this, arguments) || this;
t._rawTextureAtlasIndex = 0;
t._rawBones = [];
t._data = null;
t._armature = null;
t._bone = null;
t._surface = null;
t._slot = null;
t._skin = null;
t._mesh = null;
t._animation = null;
t._timeline = null;
t._rawTextureAtlases = null;
t._defaultColorOffset = -1;
t._prevClockwise = 0;
t._prevRotation = 0;
t._helpMatrixA = new i.Matrix();
t._helpMatrixB = new i.Matrix();
t._helpTransform = new i.Transform();
t._helpColorTransform = new i.ColorTransform();
t._helpPoint = new i.Point();
t._helpArray = [];
t._intArray = [];
t._floatArray = [];
t._frameIntArray = [];
t._frameFloatArray = [];
t._frameArray = [];
t._timelineArray = [];
t._cacheRawMeshes = [];
t._cacheMeshes = [];
t._actionFrames = [];
t._weightSlotPose = {};
t._weightBonePoses = {};
t._cacheBones = {};
t._slotChildActions = {};
return t;
}
s._getBoolean = function(i, n, r) {
if (n in i) {
var s = i[n], a = "object" === (e = typeof s) ? t(s) : e;
if ("boolean" === a) return s;
if ("string" !== a) return !!s;
switch (s) {
case "0":
case "NaN":
case "":
case "false":
case "null":
case "undefined":
return !1;

default:
return !0;
}
}
return r;
};
s._getNumber = function(t, e, i) {
if (e in t) {
var n = t[e];
return null === n || "NaN" === n ? i : +n || 0;
}
return i;
};
s._getString = function(n, r, s) {
if (r in n) {
var a = n[r];
if ("string" === ("object" === (e = typeof a) ? t(a) : e)) {
if (i.DragonBones.webAssembly) for (var o = 0, h = a.length; o < h; ++o) if (a.charCodeAt(o) > 255) return encodeURI(a);
return a;
}
return String(a);
}
return s;
};
s.prototype._getCurvePoint = function(t, e, i, n, r, s, a, o, h, l) {
var c = 1 - h, u = c * c, _ = h * h, m = c * u, f = 3 * h * u, d = 3 * c * _, p = h * _;
l.x = m * t + f * i + d * r + p * a;
l.y = m * e + f * n + d * s + p * o;
};
s.prototype._samplingEasingCurve = function(t, e) {
for (var i = t.length, n = -2, r = 0, s = e.length; r < s; ++r) {
for (var a = (r + 1) / (s + 1); (n + 6 < i ? t[n + 6] : 1) < a; ) n += 6;
for (var o = n >= 0 && n + 6 < i, h = o ? t[n] : 0, l = o ? t[n + 1] : 0, c = t[n + 2], u = t[n + 3], _ = t[n + 4], m = t[n + 5], f = o ? t[n + 6] : 1, d = o ? t[n + 7] : 1, p = 0, g = 1; g - p > 1e-4; ) {
var y = .5 * (g + p);
this._getCurvePoint(h, l, c, u, _, m, f, d, y, this._helpPoint);
a - this._helpPoint.x > 0 ? p = y : g = y;
}
e[r] = this._helpPoint.y;
}
};
s.prototype._parseActionDataInFrame = function(t, e, n, r) {
i.DataParser.EVENT in t && this._mergeActionFrame(t[i.DataParser.EVENT], e, 10, n, r);
i.DataParser.SOUND in t && this._mergeActionFrame(t[i.DataParser.SOUND], e, 11, n, r);
i.DataParser.ACTION in t && this._mergeActionFrame(t[i.DataParser.ACTION], e, 0, n, r);
i.DataParser.EVENTS in t && this._mergeActionFrame(t[i.DataParser.EVENTS], e, 10, n, r);
i.DataParser.ACTIONS in t && this._mergeActionFrame(t[i.DataParser.ACTIONS], e, 0, n, r);
};
s.prototype._mergeActionFrame = function(t, e, n, s, a) {
for (var o = i.DragonBones.webAssembly ? this._armature.actions.size() : this._armature.actions.length, h = this._parseActionData(t, n, s, a), l = 0, c = null, u = 0, _ = h; u < _.length; u++) {
var m = _[u];
this._armature.addAction(m, !1);
}
if (0 === this._actionFrames.length) {
(c = new r()).frameStart = 0;
this._actionFrames.push(c);
c = null;
}
for (var f = 0, d = this._actionFrames; f < d.length; f++) {
var p = d[f];
if (p.frameStart === e) {
c = p;
break;
}
if (p.frameStart > e) break;
l++;
}
if (null === c) {
(c = new r()).frameStart = e;
this._actionFrames.splice(l + 1, 0, c);
}
for (var g = 0; g < h.length; ++g) c.actions.push(o + g);
};
s.prototype._parseArmature = function(n, r) {
var a = i.BaseObject.borrowObject(i.ArmatureData);
a.name = s._getString(n, i.DataParser.NAME, "");
a.frameRate = s._getNumber(n, i.DataParser.FRAME_RATE, this._data.frameRate);
a.scale = r;
i.DataParser.TYPE in n && "string" === ("object" === (e = typeof n[i.DataParser.TYPE]) ? t(n[i.DataParser.TYPE]) : e) ? a.type = i.DataParser._getArmatureType(n[i.DataParser.TYPE]) : a.type = s._getNumber(n, i.DataParser.TYPE, 0);
0 === a.frameRate && (a.frameRate = 24);
this._armature = a;
if (i.DataParser.CANVAS in n) {
var o = n[i.DataParser.CANVAS], h = i.BaseObject.borrowObject(i.CanvasData);
i.DataParser.COLOR in o ? h.hasBackground = !0 : h.hasBackground = !1;
h.color = s._getNumber(o, i.DataParser.COLOR, 0);
h.x = s._getNumber(o, i.DataParser.X, 0) * a.scale;
h.y = s._getNumber(o, i.DataParser.Y, 0) * a.scale;
h.width = s._getNumber(o, i.DataParser.WIDTH, 0) * a.scale;
h.height = s._getNumber(o, i.DataParser.HEIGHT, 0) * a.scale;
a.canvas = h;
}
if (i.DataParser.AABB in n) {
var l = n[i.DataParser.AABB];
a.aabb.x = s._getNumber(l, i.DataParser.X, 0) * a.scale;
a.aabb.y = s._getNumber(l, i.DataParser.Y, 0) * a.scale;
a.aabb.width = s._getNumber(l, i.DataParser.WIDTH, 0) * a.scale;
a.aabb.height = s._getNumber(l, i.DataParser.HEIGHT, 0) * a.scale;
}
if (i.DataParser.BONE in n) for (var c = 0, u = n[i.DataParser.BONE]; c < u.length; c++) {
var _ = u[c], m = s._getString(_, i.DataParser.PARENT, ""), f = this._parseBone(_);
if (m.length > 0) {
var d = a.getBone(m);
if (null !== d) f.parent = d; else {
m in this._cacheBones || (this._cacheBones[m] = []);
this._cacheBones[m].push(f);
}
}
if (f.name in this._cacheBones) {
for (var p = 0, g = this._cacheBones[f.name]; p < g.length; p++) {
g[p].parent = f;
}
delete this._cacheBones[f.name];
}
a.addBone(f);
this._rawBones.push(f);
}
if (i.DataParser.IK in n) for (var y = 0, v = n[i.DataParser.IK]; y < v.length; y++) {
var x = v[y], A = this._parseIKConstraint(x);
A && a.addConstraint(A);
}
a.sortBones();
if (i.DataParser.SLOT in n) for (var b = 0, T = 0, C = n[i.DataParser.SLOT]; T < C.length; T++) {
var w = C[T];
a.addSlot(this._parseSlot(w, b++));
}
if (i.DataParser.SKIN in n) for (var S = 0, E = n[i.DataParser.SKIN]; S < E.length; S++) {
var D = E[S];
a.addSkin(this._parseSkin(D));
}
for (var M = 0, I = this._cacheRawMeshes.length; M < I; ++M) {
var P = this._cacheRawMeshes[M];
i.DataParser.GLUE_WEIGHTS in P && i.DataParser.GLUE_MESHES in P && this._parseMeshGlue(P, this._cacheMeshes[M]);
}
for (M = 0, I = this._cacheRawMeshes.length; M < I; ++M) {
var B = this._cacheRawMeshes[M], R = s._getString(B, i.DataParser.SHARE, "");
if (0 !== R.length) {
var L = s._getString(B, i.DataParser.SKIN, i.DataParser.DEFAULT_NAME);
0 === L.length && (L = i.DataParser.DEFAULT_NAME);
var O = a.getMesh(L, "", R);
if (null !== O) {
var F = this._cacheMeshes[M];
F.offset = O.offset;
F.weight = O.weight;
F.glue = O.glue;
}
}
}
if (i.DataParser.ANIMATION in n) for (var N = 0, k = n[i.DataParser.ANIMATION]; N < k.length; N++) {
var z = k[N], G = this._parseAnimation(z);
a.addAnimation(G);
}
if (i.DataParser.DEFAULT_ACTIONS in n) for (var U = 0, V = this._parseActionData(n[i.DataParser.DEFAULT_ACTIONS], 0, null, null); U < V.length; U++) {
var j = V[U];
a.addAction(j, !0);
if (0 === j.type) {
null !== (G = a.getAnimation(j.name)) && (a.defaultAnimation = G);
}
}
if (i.DataParser.ACTIONS in n) for (var W = 0, H = this._parseActionData(n[i.DataParser.ACTIONS], 0, null, null); W < H.length; W++) {
j = H[W];
a.addAction(j, !1);
}
this._rawBones.length = 0;
this._cacheRawMeshes.length = 0;
this._cacheMeshes.length = 0;
this._armature = null;
for (var q in this._weightSlotPose) delete this._weightSlotPose[q];
for (var q in this._weightBonePoses) delete this._weightBonePoses[q];
for (var q in this._cacheBones) delete this._cacheBones[q];
for (var q in this._slotChildActions) delete this._slotChildActions[q];
return a;
};
s.prototype._parseBone = function(n) {
var r = this._armature.scale;
if (0 === (i.DataParser.TYPE in n && "string" === ("object" === (e = typeof n[i.DataParser.TYPE]) ? t(n[i.DataParser.TYPE]) : e) ? i.DataParser._getBoneType(n[i.DataParser.TYPE]) : s._getNumber(n, i.DataParser.TYPE, 0))) {
var a = i.BaseObject.borrowObject(i.BoneData);
a.inheritTranslation = s._getBoolean(n, i.DataParser.INHERIT_TRANSLATION, !0);
a.inheritRotation = s._getBoolean(n, i.DataParser.INHERIT_ROTATION, !0);
a.inheritScale = s._getBoolean(n, i.DataParser.INHERIT_SCALE, !0);
a.inheritReflection = s._getBoolean(n, i.DataParser.INHERIT_REFLECTION, !0);
a.length = s._getNumber(n, i.DataParser.LENGTH, 0) * r;
a.name = s._getString(n, i.DataParser.NAME, "");
i.DataParser.TRANSFORM in n && this._parseTransform(n[i.DataParser.TRANSFORM], a.transform, r);
return a;
}
var o = i.BaseObject.borrowObject(i.SurfaceData);
o.name = s._getString(n, i.DataParser.NAME, "");
o.segmentX = s._getNumber(n, i.DataParser.SEGMENT_X, 0);
o.segmentY = s._getNumber(n, i.DataParser.SEGMENT_Y, 0);
o.vertices.length = (o.segmentX + 1) * (o.segmentY + 1) * 2;
if (i.DataParser.VERTICES in n) for (var h = n[i.DataParser.VERTICES], l = 0, c = o.vertices.length; l < c; ++l) l < h.length ? o.vertices[l] = h[l] * r : o.vertices[l] = 0;
return o;
};
s.prototype._parseIKConstraint = function(t) {
var e = this._armature.getBone(s._getString(t, i.DataParser.BONE, ""));
if (null === e) return null;
var n = this._armature.getBone(s._getString(t, i.DataParser.TARGET, ""));
if (null === n) return null;
var r = i.BaseObject.borrowObject(i.IKConstraintData);
r.scaleEnabled = s._getBoolean(t, i.DataParser.SCALE, !1);
r.bendPositive = s._getBoolean(t, i.DataParser.BEND_POSITIVE, !0);
r.weight = s._getNumber(t, i.DataParser.WEIGHT, 1);
r.name = s._getString(t, i.DataParser.NAME, "");
r.target = n;
if (s._getNumber(t, i.DataParser.CHAIN, 0) > 0 && null !== e.parent) {
r.root = e.parent;
r.bone = e;
} else {
r.root = e;
r.bone = null;
}
return r;
};
s.prototype._parseSlot = function(n, r) {
var a = i.BaseObject.borrowObject(i.SlotData);
a.displayIndex = s._getNumber(n, i.DataParser.DISPLAY_INDEX, 0);
a.zOrder = r;
a.name = s._getString(n, i.DataParser.NAME, "");
a.parent = this._armature.getBone(s._getString(n, i.DataParser.PARENT, ""));
i.DataParser.BLEND_MODE in n && "string" === ("object" === (e = typeof n[i.DataParser.BLEND_MODE]) ? t(n[i.DataParser.BLEND_MODE]) : e) ? a.blendMode = i.DataParser._getBlendMode(n[i.DataParser.BLEND_MODE]) : a.blendMode = s._getNumber(n, i.DataParser.BLEND_MODE, 0);
if (i.DataParser.COLOR in n) {
a.color = i.SlotData.createColor();
this._parseColorTransform(n[i.DataParser.COLOR], a.color);
} else a.color = i.SlotData.DEFAULT_COLOR;
i.DataParser.ACTIONS in n && (this._slotChildActions[a.name] = this._parseActionData(n[i.DataParser.ACTIONS], 0, null, null));
return a;
};
s.prototype._parseSkin = function(t) {
var e = i.BaseObject.borrowObject(i.SkinData);
e.name = s._getString(t, i.DataParser.NAME, i.DataParser.DEFAULT_NAME);
0 === e.name.length && (e.name = i.DataParser.DEFAULT_NAME);
if (i.DataParser.SLOT in t) {
var n = t[i.DataParser.SLOT];
this._skin = e;
for (var r = 0, a = n; r < a.length; r++) {
var o = a[r], h = s._getString(o, i.DataParser.NAME, ""), l = this._armature.getSlot(h);
if (null !== l) {
this._slot = l;
if (i.DataParser.DISPLAY in o) for (var c = 0, u = o[i.DataParser.DISPLAY]; c < u.length; c++) {
var _ = u[c];
_ ? e.addDisplay(h, this._parseDisplay(_)) : e.addDisplay(h, null);
}
this._slot = null;
}
}
this._skin = null;
}
return e;
};
s.prototype._parseDisplay = function(n) {
var r = s._getString(n, i.DataParser.NAME, ""), a = s._getString(n, i.DataParser.PATH, ""), o = 0, h = null;
switch (o = i.DataParser.TYPE in n && "string" === ("object" === (e = typeof n[i.DataParser.TYPE]) ? t(n[i.DataParser.TYPE]) : e) ? i.DataParser._getDisplayType(n[i.DataParser.TYPE]) : s._getNumber(n, i.DataParser.TYPE, o)) {
case 0:
var l = h = i.BaseObject.borrowObject(i.ImageDisplayData);
l.name = r;
l.path = a.length > 0 ? a : r;
this._parsePivot(n, l);
break;

case 1:
var c = h = i.BaseObject.borrowObject(i.ArmatureDisplayData);
c.name = r;
c.path = a.length > 0 ? a : r;
c.inheritAnimation = !0;
if (i.DataParser.ACTIONS in n) for (var u = 0, _ = this._parseActionData(n[i.DataParser.ACTIONS], 0, null, null); u < _.length; u++) {
var m = _[u];
c.addAction(m);
} else if (this._slot.name in this._slotChildActions) {
var f = this._skin.getDisplays(this._slot.name);
if (null === f ? 0 === this._slot.displayIndex : this._slot.displayIndex === f.length) {
for (var d = 0, p = this._slotChildActions[this._slot.name]; d < p.length; d++) {
m = p[d];
c.addAction(m);
}
delete this._slotChildActions[this._slot.name];
}
}
break;

case 2:
var g = h = i.BaseObject.borrowObject(i.MeshDisplayData);
g.inheritDeform = s._getBoolean(n, i.DataParser.INHERIT_DEFORM, !0);
g.name = r;
g.path = a.length > 0 ? a : r;
if (i.DataParser.SHARE in n) {
this._cacheRawMeshes.push(n);
this._cacheRawMeshes.push(g);
} else this._parseMesh(n, g);
if (i.DataParser.GLUE_WEIGHTS in n && i.DataParser.GLUE_MESHES in n) {
this._cacheRawMeshes.push(n);
this._cacheRawMeshes.push(g);
}
break;

case 3:
var y = this._parseBoundingBox(n);
if (null !== y) {
var v = h = i.BaseObject.borrowObject(i.BoundingBoxDisplayData);
v.name = r;
v.path = a.length > 0 ? a : r;
v.boundingBox = y;
}
}
null !== h && i.DataParser.TRANSFORM in n && this._parseTransform(n[i.DataParser.TRANSFORM], h.transform, this._armature.scale);
return h;
};
s.prototype._parsePivot = function(t, e) {
if (i.DataParser.PIVOT in t) {
var n = t[i.DataParser.PIVOT];
e.pivot.x = s._getNumber(n, i.DataParser.X, 0);
e.pivot.y = s._getNumber(n, i.DataParser.Y, 0);
} else {
e.pivot.x = .5;
e.pivot.y = .5;
}
};
s.prototype._parseMesh = function(t, e) {
var n = t[i.DataParser.VERTICES], r = t[i.DataParser.UVS], s = t[i.DataParser.TRIANGLES], a = Math.floor(n.length / 2), o = Math.floor(s.length / 3), h = this._floatArray.length, l = h + 2 * a, c = this._intArray.length, u = this._skin.name + "_" + this._slot.name + "_" + e.name;
e.offset = c;
this._intArray.length += 4 + 3 * o;
this._intArray[c + 0] = a;
this._intArray[c + 1] = o;
this._intArray[c + 2] = h;
for (var _ = 0, m = 3 * o; _ < m; ++_) this._intArray[c + 4 + _] = s[_];
this._floatArray.length += 2 * a + 2 * a;
for (_ = 0, m = 2 * a; _ < m; ++_) {
this._floatArray[h + _] = n[_];
this._floatArray[l + _] = r[_];
}
if (i.DataParser.WEIGHTS in t) {
var f = t[i.DataParser.WEIGHTS], d = t[i.DataParser.SLOT_POSE], p = t[i.DataParser.BONE_POSE], g = this._armature.sortedBones, y = new Array(), v = Math.floor(p.length / 7), x = this._floatArray.length, A = Math.floor(f.length - a) / 2, b = this._intArray.length, T = i.BaseObject.borrowObject(i.WeightData);
T.count = A;
T.offset = b;
y.length = v;
this._intArray.length += 2 + v + a + A;
this._intArray[b + 1] = x;
for (_ = 0; _ < v; ++_) {
var C = p[7 * _], w = this._rawBones[C];
T.addBone(w);
y[_] = C;
this._intArray[b + 2 + _] = g.indexOf(w);
}
this._floatArray.length += 3 * A;
this._helpMatrixA.copyFromArray(d, 0);
_ = 0;
for (var S = 0, E = b + 2 + v, D = x; _ < a; ++_) {
var M = 2 * _, I = this._intArray[E++] = f[S++], P = this._floatArray[h + M], B = this._floatArray[h + M + 1];
this._helpMatrixA.transformPoint(P, B, this._helpPoint);
P = this._helpPoint.x;
B = this._helpPoint.y;
for (var R = 0; R < I; ++R) {
C = f[S++];
var L = y.indexOf(C);
this._helpMatrixB.copyFromArray(p, 7 * L + 1);
this._helpMatrixB.invert();
this._helpMatrixB.transformPoint(P, B, this._helpPoint);
this._intArray[E++] = L;
this._floatArray[D++] = f[S++];
this._floatArray[D++] = this._helpPoint.x;
this._floatArray[D++] = this._helpPoint.y;
}
}
e.weight = T;
this._weightSlotPose[u] = d;
this._weightBonePoses[u] = p;
}
};
s.prototype._parseMeshGlue = function(t, e) {
var n = t[i.DataParser.GLUE_WEIGHTS], r = t[i.DataParser.GLUE_MESHES];
e.glue = i.BaseObject.borrowObject(i.GlueData);
e.glue.weights.length = n.length;
for (var s = 0, a = n.length; s < a; ++s) e.glue.weights[s] = n[s];
for (s = 0, a = r.length; s < a; s += 3) {
var o = this._armature.getMesh(r[s], r[s + 1], r[s + 2]);
e.glue.addMesh(o);
}
};
s.prototype._parseBoundingBox = function(n) {
var r = null, a = 0;
switch (a = i.DataParser.SUB_TYPE in n && "string" === ("object" === (e = typeof n[i.DataParser.SUB_TYPE]) ? t(n[i.DataParser.SUB_TYPE]) : e) ? i.DataParser._getBoundingBoxType(n[i.DataParser.SUB_TYPE]) : s._getNumber(n, i.DataParser.SUB_TYPE, a)) {
case 0:
r = i.BaseObject.borrowObject(i.RectangleBoundingBoxData);
break;

case 1:
r = i.BaseObject.borrowObject(i.EllipseBoundingBoxData);
break;

case 2:
r = this._parsePolygonBoundingBox(n);
}
if (null !== r) {
r.color = s._getNumber(n, i.DataParser.COLOR, 0);
if (0 === r.type || 1 === r.type) {
r.width = s._getNumber(n, i.DataParser.WIDTH, 0);
r.height = s._getNumber(n, i.DataParser.HEIGHT, 0);
}
}
return r;
};
s.prototype._parsePolygonBoundingBox = function(t) {
var e = i.BaseObject.borrowObject(i.PolygonBoundingBoxData);
if (i.DataParser.VERTICES in t) {
var n = this._armature.scale, r = t[i.DataParser.VERTICES], s = e.vertices;
i.DragonBones.webAssembly ? s.resize(r.length, 0) : s.length = r.length;
for (var a = 0, o = r.length; a < o; a += 2) {
var h = r[a] * n, l = r[a + 1] * n;
if (i.DragonBones.webAssembly) {
s.set(a, h);
s.set(a + 1, l);
} else {
s[a] = h;
s[a + 1] = l;
}
if (0 === a) {
e.x = h;
e.y = l;
e.width = h;
e.height = l;
} else {
h < e.x ? e.x = h : h > e.width && (e.width = h);
l < e.y ? e.y = l : l > e.height && (e.height = l);
}
}
e.width -= e.x;
e.height -= e.y;
} else console.warn("Data error.\n Please reexport DragonBones Data to fixed the bug.");
return e;
};
s.prototype._parseAnimation = function(t) {
var e = i.BaseObject.borrowObject(i.AnimationData);
e.frameCount = Math.max(s._getNumber(t, i.DataParser.DURATION, 1), 1);
e.playTimes = s._getNumber(t, i.DataParser.PLAY_TIMES, 1);
e.duration = e.frameCount / this._armature.frameRate;
e.fadeInTime = s._getNumber(t, i.DataParser.FADE_IN_TIME, 0);
e.scale = s._getNumber(t, i.DataParser.SCALE, 1);
e.name = s._getString(t, i.DataParser.NAME, i.DataParser.DEFAULT_NAME);
0 === e.name.length && (e.name = i.DataParser.DEFAULT_NAME);
e.frameIntOffset = this._frameIntArray.length;
e.frameFloatOffset = this._frameFloatArray.length;
e.frameOffset = this._frameArray.length;
this._animation = e;
if (i.DataParser.FRAME in t) {
var n = t[i.DataParser.FRAME], r = n.length;
if (r > 0) for (var a = 0, o = 0; a < r; ++a) {
var h = n[a];
this._parseActionDataInFrame(h, o, null, null);
o += s._getNumber(h, i.DataParser.DURATION, 1);
}
}
i.DataParser.Z_ORDER in t && (this._animation.zOrderTimeline = this._parseTimeline(t[i.DataParser.Z_ORDER], null, i.DataParser.FRAME, 1, !1, !1, 0, this._parseZOrderFrame));
if (i.DataParser.BONE in t) for (var l = 0, c = t[i.DataParser.BONE]; l < c.length; l++) {
var u = c[l];
this._parseBoneTimeline(u);
}
if (i.DataParser.SURFACE in t) for (var _ = 0, m = t[i.DataParser.SURFACE]; _ < m.length; _++) {
u = m[_];
var f = s._getString(u, i.DataParser.NAME, "");
this._surface = this._armature.getBone(f);
if (null !== this._surface) {
null !== (D = this._parseTimeline(u, null, i.DataParser.FRAME, 50, !1, !0, 0, this._parseSurfaceFrame)) && this._animation.addSurfaceTimeline(this._surface, D);
this._surface = null;
}
}
if (i.DataParser.SLOT in t) for (var d = 0, p = t[i.DataParser.SLOT]; d < p.length; d++) {
u = p[d];
this._parseSlotTimeline(u);
}
if (i.DataParser.FFD in t) for (var g = 0, y = t[i.DataParser.FFD]; g < y.length; g++) {
u = y[g];
var v = s._getString(u, i.DataParser.SKIN, i.DataParser.DEFAULT_NAME), x = s._getString(u, i.DataParser.SLOT, ""), A = s._getString(u, i.DataParser.NAME, "");
0 === v.length && (v = i.DataParser.DEFAULT_NAME);
this._slot = this._armature.getSlot(x);
this._mesh = this._armature.getMesh(v, x, A);
if (null !== this._slot && null !== this._mesh) {
null !== (D = this._parseTimeline(u, null, i.DataParser.FRAME, 22, !1, !0, 0, this._parseSlotFFDFrame)) && this._animation.addSlotTimeline(this._slot, D);
this._slot = null;
this._mesh = null;
}
}
if (i.DataParser.IK in t) for (var b = 0, T = t[i.DataParser.IK]; b < T.length; b++) {
u = T[b];
var C = s._getString(u, i.DataParser.NAME, ""), w = this._armature.getConstraint(C);
if (null !== w) {
null !== (D = this._parseTimeline(u, null, i.DataParser.FRAME, 30, !0, !1, 2, this._parseIKConstraintFrame)) && this._animation.addConstraintTimeline(w, D);
}
}
if (i.DataParser.ANIMATION in t) for (var S = 0, E = t[i.DataParser.ANIMATION]; S < E.length; S++) {
u = E[S];
var D, M = s._getString(u, i.DataParser.NAME, "");
null !== (D = this._parseTimeline(u, null, i.DataParser.FRAME, 40, !0, !1, 2, this._parseAnimationFrame)) && this._animation.addAnimationTimeline(M, D);
}
if (this._actionFrames.length > 0) {
this._animation.actionTimeline = this._parseTimeline(null, this._actionFrames, "", 0, !1, !1, 0, this._parseActionFrame);
this._actionFrames.length = 0;
}
this._animation = null;
return e;
};
s.prototype._parseTimeline = function(t, e, n, a, o, h, l, c) {
null !== t && n.length > 0 && n in t && (e = t[n]);
if (null === e) return null;
var u = e.length;
if (0 === u) return null;
var _ = this._frameIntArray.length, m = this._frameFloatArray.length, f = i.BaseObject.borrowObject(i.TimelineData), d = this._timelineArray.length;
this._timelineArray.length += 5 + u;
if (null !== t) {
this._timelineArray[d + 0] = Math.round(100 * s._getNumber(t, i.DataParser.SCALE, 1));
this._timelineArray[d + 1] = Math.round(100 * s._getNumber(t, i.DataParser.OFFSET, 0));
} else {
this._timelineArray[d + 0] = 100;
this._timelineArray[d + 1] = 0;
}
this._timelineArray[d + 2] = u;
this._timelineArray[d + 3] = l;
this._timelineArray[d + 4] = o ? _ - this._animation.frameIntOffset : h ? m - this._animation.frameFloatOffset : 0;
this._timeline = f;
f.type = a;
f.offset = d;
if (1 === u) {
f.frameIndicesOffset = -1;
this._timelineArray[d + 5 + 0] = c.call(this, e[0], 0, 0) - this._animation.frameOffset;
} else {
var p = this._animation.frameCount + 1, g = this._data.frameIndices, y = 0;
if (i.DragonBones.webAssembly) {
y = g.size();
g.resize(y + p, 0);
} else {
y = g.length;
g.length += p;
}
f.frameIndicesOffset = y;
for (var v = 0, x = 0, A = 0, b = 0; v < p; ++v) {
if (A + b <= v && x < u) {
var T = e[x];
A = v;
b = x === u - 1 ? this._animation.frameCount - A : T instanceof r ? this._actionFrames[x + 1].frameStart - A : s._getNumber(T, i.DataParser.DURATION, 1);
this._timelineArray[d + 5 + x] = c.call(this, T, A, b) - this._animation.frameOffset;
x++;
}
i.DragonBones.webAssembly ? g.set(y + v, x - 1) : g[y + v] = x - 1;
}
}
this._timeline = null;
return f;
};
s.prototype._parseBoneTimeline = function(t) {
var e = this._armature.getBone(s._getString(t, i.DataParser.NAME, ""));
if (null !== e) {
this._bone = e;
this._slot = this._armature.getSlot(this._bone.name);
if (i.DataParser.TRANSLATE_FRAME in t) {
null !== (n = this._parseTimeline(t, null, i.DataParser.TRANSLATE_FRAME, 11, !1, !0, 2, this._parseBoneTranslateFrame)) && this._animation.addBoneTimeline(e, n);
}
if (i.DataParser.ROTATE_FRAME in t) {
null !== (n = this._parseTimeline(t, null, i.DataParser.ROTATE_FRAME, 12, !1, !0, 2, this._parseBoneRotateFrame)) && this._animation.addBoneTimeline(e, n);
}
if (i.DataParser.SCALE_FRAME in t) {
null !== (n = this._parseTimeline(t, null, i.DataParser.SCALE_FRAME, 13, !1, !0, 2, this._parseBoneScaleFrame)) && this._animation.addBoneTimeline(e, n);
}
if (i.DataParser.FRAME in t) {
var n;
null !== (n = this._parseTimeline(t, null, i.DataParser.FRAME, 10, !1, !0, 6, this._parseBoneAllFrame)) && this._animation.addBoneTimeline(e, n);
}
this._bone = null;
this._slot = null;
}
};
s.prototype._parseSlotTimeline = function(t) {
var e = this._armature.getSlot(s._getString(t, i.DataParser.NAME, ""));
if (null !== e) {
this._slot = e;
var n = null;
null !== (n = i.DataParser.DISPLAY_FRAME in t ? this._parseTimeline(t, null, i.DataParser.DISPLAY_FRAME, 20, !1, !1, 0, this._parseSlotDisplayFrame) : this._parseTimeline(t, null, i.DataParser.FRAME, 20, !1, !1, 0, this._parseSlotDisplayFrame)) && this._animation.addSlotTimeline(e, n);
var r = null;
null !== (r = i.DataParser.COLOR_FRAME in t ? this._parseTimeline(t, null, i.DataParser.COLOR_FRAME, 21, !0, !1, 1, this._parseSlotColorFrame) : this._parseTimeline(t, null, i.DataParser.FRAME, 21, !0, !1, 1, this._parseSlotColorFrame)) && this._animation.addSlotTimeline(e, r);
this._slot = null;
}
};
s.prototype._parseFrame = function(t, e, i) {
var n = this._frameArray.length;
this._frameArray.length += 1;
this._frameArray[n + 0] = e;
return n;
};
s.prototype._parseTweenFrame = function(t, e, n) {
var r = this._parseFrame(t, e, n);
if (n > 0) if (i.DataParser.CURVE in t) {
var a = n + 1;
this._helpArray.length = a;
this._samplingEasingCurve(t[i.DataParser.CURVE], this._helpArray);
this._frameArray.length += 2 + this._helpArray.length;
this._frameArray[r + 1] = 2;
this._frameArray[r + 2] = a;
for (var o = 0; o < a; ++o) this._frameArray[r + 3 + o] = Math.round(1e4 * this._helpArray[o]);
} else {
var h = -2;
i.DataParser.TWEEN_EASING in t && (h = s._getNumber(t, i.DataParser.TWEEN_EASING, -2));
if (-2 === h) {
this._frameArray.length += 1;
this._frameArray[r + 1] = 0;
} else if (0 === h) {
this._frameArray.length += 1;
this._frameArray[r + 1] = 1;
} else if (h < 0) {
this._frameArray.length += 2;
this._frameArray[r + 1] = 3;
this._frameArray[r + 2] = Math.round(100 * -h);
} else if (h <= 1) {
this._frameArray.length += 2;
this._frameArray[r + 1] = 4;
this._frameArray[r + 2] = Math.round(100 * h);
} else {
this._frameArray.length += 2;
this._frameArray[r + 1] = 5;
this._frameArray[r + 2] = Math.round(100 * h - 100);
}
} else {
this._frameArray.length += 1;
this._frameArray[r + 1] = 0;
}
return r;
};
s.prototype._parseActionFrame = function(t, e, i) {
var n = this._frameArray.length, r = t.actions.length;
this._frameArray.length += 2 + r;
this._frameArray[n + 0] = e;
this._frameArray[n + 0 + 1] = r;
for (var s = 0; s < r; ++s) this._frameArray[n + 0 + 2 + s] = t.actions[s];
return n;
};
s.prototype._parseZOrderFrame = function(t, e, n) {
var r = this._parseFrame(t, e, n);
if (i.DataParser.Z_ORDER in t) {
var s = t[i.DataParser.Z_ORDER];
if (s.length > 0) {
for (var a = this._armature.sortedSlots.length, o = new Array(a - s.length / 2), h = new Array(a), l = 0; l < o.length; ++l) o[l] = 0;
for (var c = 0; c < a; ++c) h[c] = -1;
for (var u = 0, _ = 0, m = 0, f = s.length; m < f; m += 2) {
for (var d = s[m], p = s[m + 1]; u !== d; ) o[_++] = u++;
h[u + p] = u++;
}
for (;u < a; ) o[_++] = u++;
this._frameArray.length += 1 + a;
this._frameArray[r + 1] = a;
for (var g = a; g--; ) -1 === h[g] ? this._frameArray[r + 2 + g] = o[--_] || 0 : this._frameArray[r + 2 + g] = h[g] || 0;
return r;
}
}
this._frameArray.length += 1;
this._frameArray[r + 1] = 0;
return r;
};
s.prototype._parseBoneAllFrame = function(t, e, n) {
this._helpTransform.identity();
i.DataParser.TRANSFORM in t && this._parseTransform(t[i.DataParser.TRANSFORM], this._helpTransform, 1);
var r = this._helpTransform.rotation;
if (0 !== e) if (0 === this._prevClockwise) r = this._prevRotation + i.Transform.normalizeRadian(r - this._prevRotation); else {
(this._prevClockwise > 0 ? r >= this._prevRotation : r <= this._prevRotation) && (this._prevClockwise = this._prevClockwise > 0 ? this._prevClockwise - 1 : this._prevClockwise + 1);
r = this._prevRotation + r - this._prevRotation + i.Transform.PI_D * this._prevClockwise;
}
this._prevClockwise = s._getNumber(t, i.DataParser.TWEEN_ROTATE, 0);
this._prevRotation = r;
var a = this._parseTweenFrame(t, e, n), o = this._frameFloatArray.length;
this._frameFloatArray.length += 6;
this._frameFloatArray[o++] = this._helpTransform.x;
this._frameFloatArray[o++] = this._helpTransform.y;
this._frameFloatArray[o++] = r;
this._frameFloatArray[o++] = this._helpTransform.skew;
this._frameFloatArray[o++] = this._helpTransform.scaleX;
this._frameFloatArray[o++] = this._helpTransform.scaleY;
this._parseActionDataInFrame(t, e, this._bone, this._slot);
return a;
};
s.prototype._parseBoneTranslateFrame = function(t, e, n) {
var r = this._parseTweenFrame(t, e, n), a = this._frameFloatArray.length;
this._frameFloatArray.length += 2;
this._frameFloatArray[a++] = s._getNumber(t, i.DataParser.X, 0);
this._frameFloatArray[a++] = s._getNumber(t, i.DataParser.Y, 0);
return r;
};
s.prototype._parseBoneRotateFrame = function(t, e, n) {
var r = s._getNumber(t, i.DataParser.ROTATE, 0) * i.Transform.DEG_RAD;
if (0 !== e) if (0 === this._prevClockwise) r = this._prevRotation + i.Transform.normalizeRadian(r - this._prevRotation); else {
(this._prevClockwise > 0 ? r >= this._prevRotation : r <= this._prevRotation) && (this._prevClockwise = this._prevClockwise > 0 ? this._prevClockwise - 1 : this._prevClockwise + 1);
r = this._prevRotation + r - this._prevRotation + i.Transform.PI_D * this._prevClockwise;
}
this._prevClockwise = s._getNumber(t, i.DataParser.CLOCK_WISE, 0);
this._prevRotation = r;
var a = this._parseTweenFrame(t, e, n), o = this._frameFloatArray.length;
this._frameFloatArray.length += 2;
this._frameFloatArray[o++] = r;
this._frameFloatArray[o++] = s._getNumber(t, i.DataParser.SKEW, 0) * i.Transform.DEG_RAD;
return a;
};
s.prototype._parseBoneScaleFrame = function(t, e, n) {
var r = this._parseTweenFrame(t, e, n), a = this._frameFloatArray.length;
this._frameFloatArray.length += 2;
this._frameFloatArray[a++] = s._getNumber(t, i.DataParser.X, 1);
this._frameFloatArray[a++] = s._getNumber(t, i.DataParser.Y, 1);
return r;
};
s.prototype._parseSurfaceFrame = function(t, e, n) {
var r = this._frameFloatArray.length, a = this._parseTweenFrame(t, e, n), o = t[i.DataParser.VERTICES], h = s._getNumber(t, i.DataParser.OFFSET, 0), l = this._surface.vertices.length / 2, c = 0, u = 0;
this._frameFloatArray.length += 2 * l;
for (var _ = 0; _ < 2 * l; _ += 2) {
c = _ < h || _ - h >= o.length ? 0 : o[_ - h];
u = _ + 1 < h || _ + 1 - h >= o.length ? 0 : o[_ + 1 - h];
this._frameFloatArray[r + _] = c;
this._frameFloatArray[r + _ + 1] = u;
}
if (0 === e) {
var m = this._frameIntArray.length;
this._frameIntArray.length += 5;
this._frameIntArray[m + 0] = 0;
this._frameIntArray[m + 1] = this._frameFloatArray.length - r;
this._frameIntArray[m + 2] = this._frameFloatArray.length - r;
this._frameIntArray[m + 3] = 0;
this._frameIntArray[m + 4] = r - this._animation.frameFloatOffset;
this._timelineArray[this._timeline.offset + 3] = m - this._animation.frameIntOffset;
}
return a;
};
s.prototype._parseSlotDisplayFrame = function(t, e, n) {
var r = this._parseFrame(t, e, n);
this._frameArray.length += 1;
i.DataParser.VALUE in t ? this._frameArray[r + 1] = s._getNumber(t, i.DataParser.VALUE, 0) : this._frameArray[r + 1] = s._getNumber(t, i.DataParser.DISPLAY_INDEX, 0);
this._parseActionDataInFrame(t, e, this._slot.parent, this._slot);
return r;
};
s.prototype._parseSlotColorFrame = function(t, e, n) {
var r = this._parseTweenFrame(t, e, n), s = -1;
if (i.DataParser.VALUE in t || i.DataParser.COLOR in t) {
var a = i.DataParser.VALUE in t ? t[i.DataParser.VALUE] : t[i.DataParser.COLOR];
for (var o in a) {
this._parseColorTransform(a, this._helpColorTransform);
s = this._intArray.length;
this._intArray.length += 8;
this._intArray[s++] = Math.round(100 * this._helpColorTransform.alphaMultiplier);
this._intArray[s++] = Math.round(100 * this._helpColorTransform.redMultiplier);
this._intArray[s++] = Math.round(100 * this._helpColorTransform.greenMultiplier);
this._intArray[s++] = Math.round(100 * this._helpColorTransform.blueMultiplier);
this._intArray[s++] = Math.round(this._helpColorTransform.alphaOffset);
this._intArray[s++] = Math.round(this._helpColorTransform.redOffset);
this._intArray[s++] = Math.round(this._helpColorTransform.greenOffset);
this._intArray[s++] = Math.round(this._helpColorTransform.blueOffset);
s -= 8;
break;
}
}
if (s < 0) {
if (this._defaultColorOffset < 0) {
this._defaultColorOffset = s = this._intArray.length;
this._intArray.length += 8;
this._intArray[s++] = 100;
this._intArray[s++] = 100;
this._intArray[s++] = 100;
this._intArray[s++] = 100;
this._intArray[s++] = 0;
this._intArray[s++] = 0;
this._intArray[s++] = 0;
this._intArray[s++] = 0;
}
s = this._defaultColorOffset;
}
var h = this._frameIntArray.length;
this._frameIntArray.length += 1;
this._frameIntArray[h] = s;
return r;
};
s.prototype._parseSlotFFDFrame = function(t, e, n) {
var r = this._frameFloatArray.length, a = this._parseTweenFrame(t, e, n), o = i.DataParser.VERTICES in t ? t[i.DataParser.VERTICES] : null, h = s._getNumber(t, i.DataParser.OFFSET, 0), l = this._intArray[this._mesh.offset + 0], c = this._mesh.parent.name + "_" + this._slot.name + "_" + this._mesh.name, u = 0, _ = 0, m = 0, f = 0;
if (null !== this._mesh.weight) {
var d = this._weightSlotPose[c];
this._helpMatrixA.copyFromArray(d, 0);
this._frameFloatArray.length += 2 * this._mesh.weight.count;
m = this._mesh.weight.offset + 2 + this._mesh.weight.bones.length;
} else this._frameFloatArray.length += 2 * l;
for (var p = 0; p < 2 * l; p += 2) {
if (null === o) {
u = 0;
_ = 0;
} else {
u = p < h || p - h >= o.length ? 0 : o[p - h];
_ = p + 1 < h || p + 1 - h >= o.length ? 0 : o[p + 1 - h];
}
if (null !== this._mesh.weight) {
var g = this._weightBonePoses[c], y = this._intArray[m++];
this._helpMatrixA.transformPoint(u, _, this._helpPoint, !0);
u = this._helpPoint.x;
_ = this._helpPoint.y;
for (var v = 0; v < y; ++v) {
var x = this._intArray[m++];
this._helpMatrixB.copyFromArray(g, 7 * x + 1);
this._helpMatrixB.invert();
this._helpMatrixB.transformPoint(u, _, this._helpPoint, !0);
this._frameFloatArray[r + f++] = this._helpPoint.x;
this._frameFloatArray[r + f++] = this._helpPoint.y;
}
} else {
this._frameFloatArray[r + p] = u;
this._frameFloatArray[r + p + 1] = _;
}
}
if (0 === e) {
var A = this._frameIntArray.length;
this._frameIntArray.length += 5;
this._frameIntArray[A + 0] = this._mesh.offset;
this._frameIntArray[A + 1] = this._frameFloatArray.length - r;
this._frameIntArray[A + 2] = this._frameFloatArray.length - r;
this._frameIntArray[A + 3] = 0;
this._frameIntArray[A + 4] = r - this._animation.frameFloatOffset;
this._timelineArray[this._timeline.offset + 3] = A - this._animation.frameIntOffset;
}
return a;
};
s.prototype._parseIKConstraintFrame = function(t, e, n) {
var r = this._parseTweenFrame(t, e, n), a = this._frameIntArray.length;
this._frameIntArray.length += 2;
this._frameIntArray[a++] = s._getBoolean(t, i.DataParser.BEND_POSITIVE, !0) ? 1 : 0;
this._frameIntArray[a++] = Math.round(100 * s._getNumber(t, i.DataParser.WEIGHT, 1));
return r;
};
s.prototype._parseAnimationFrame = function(t, e, n) {
var r = this._parseTweenFrame(t, e, n), a = this._frameIntArray.length;
this._frameIntArray.length += 2;
this._frameIntArray[a++] = s._getNumber(t, i.DataParser.VALUE, 0);
this._frameIntArray[a++] = Math.round(100 * s._getNumber(t, i.DataParser.WEIGHT, 1));
return r;
};
s.prototype._parseActionData = function(n, r, a, o) {
var h = new Array();
if ("string" === ("object" === (e = typeof n) ? t(n) : e)) {
(_ = i.BaseObject.borrowObject(i.ActionData)).type = r;
_.name = n;
_.bone = a;
_.slot = o;
h.push(_);
} else if (n instanceof Array) for (var l = 0, c = n; l < c.length; l++) {
var u = c[l], _ = i.BaseObject.borrowObject(i.ActionData);
if (i.DataParser.GOTO_AND_PLAY in u) {
_.type = 0;
_.name = s._getString(u, i.DataParser.GOTO_AND_PLAY, "");
} else {
i.DataParser.TYPE in u && "string" === ("object" === (e = typeof u[i.DataParser.TYPE]) ? t(u[i.DataParser.TYPE]) : e) ? _.type = i.DataParser._getActionType(u[i.DataParser.TYPE]) : _.type = s._getNumber(u, i.DataParser.TYPE, r);
_.name = s._getString(u, i.DataParser.NAME, "");
}
if (i.DataParser.BONE in u) {
var m = s._getString(u, i.DataParser.BONE, "");
_.bone = this._armature.getBone(m);
} else _.bone = a;
if (i.DataParser.SLOT in u) {
var f = s._getString(u, i.DataParser.SLOT, "");
_.slot = this._armature.getSlot(f);
} else _.slot = o;
var d = null;
if (i.DataParser.INTS in u) {
null === d && (d = i.BaseObject.borrowObject(i.UserData));
for (var p = 0, g = u[i.DataParser.INTS]; p < g.length; p++) {
var y = g[p];
d.addInt(y);
}
}
if (i.DataParser.FLOATS in u) {
null === d && (d = i.BaseObject.borrowObject(i.UserData));
for (var v = 0, x = u[i.DataParser.FLOATS]; v < x.length; v++) {
y = x[v];
d.addFloat(y);
}
}
if (i.DataParser.STRINGS in u) {
null === d && (d = i.BaseObject.borrowObject(i.UserData));
for (var A = 0, b = u[i.DataParser.STRINGS]; A < b.length; A++) {
y = b[A];
d.addString(y);
}
}
_.data = d;
h.push(_);
}
return h;
};
s.prototype._parseTransform = function(t, e, n) {
e.x = s._getNumber(t, i.DataParser.X, 0) * n;
e.y = s._getNumber(t, i.DataParser.Y, 0) * n;
if (i.DataParser.ROTATE in t || i.DataParser.SKEW in t) {
e.rotation = i.Transform.normalizeRadian(s._getNumber(t, i.DataParser.ROTATE, 0) * i.Transform.DEG_RAD);
e.skew = i.Transform.normalizeRadian(s._getNumber(t, i.DataParser.SKEW, 0) * i.Transform.DEG_RAD);
} else if (i.DataParser.SKEW_X in t || i.DataParser.SKEW_Y in t) {
e.rotation = i.Transform.normalizeRadian(s._getNumber(t, i.DataParser.SKEW_Y, 0) * i.Transform.DEG_RAD);
e.skew = i.Transform.normalizeRadian(s._getNumber(t, i.DataParser.SKEW_X, 0) * i.Transform.DEG_RAD) - e.rotation;
}
e.scaleX = s._getNumber(t, i.DataParser.SCALE_X, 1);
e.scaleY = s._getNumber(t, i.DataParser.SCALE_Y, 1);
};
s.prototype._parseColorTransform = function(t, e) {
e.alphaMultiplier = .01 * s._getNumber(t, i.DataParser.ALPHA_MULTIPLIER, 100);
e.redMultiplier = .01 * s._getNumber(t, i.DataParser.RED_MULTIPLIER, 100);
e.greenMultiplier = .01 * s._getNumber(t, i.DataParser.GREEN_MULTIPLIER, 100);
e.blueMultiplier = .01 * s._getNumber(t, i.DataParser.BLUE_MULTIPLIER, 100);
e.alphaOffset = s._getNumber(t, i.DataParser.ALPHA_OFFSET, 0);
e.redOffset = s._getNumber(t, i.DataParser.RED_OFFSET, 0);
e.greenOffset = s._getNumber(t, i.DataParser.GREEN_OFFSET, 0);
e.blueOffset = s._getNumber(t, i.DataParser.BLUE_OFFSET, 0);
};
s.prototype._parseArray = function(t) {
this._intArray.length = 0;
this._floatArray.length = 0;
this._frameIntArray.length = 0;
this._frameFloatArray.length = 0;
this._frameArray.length = 0;
this._timelineArray.length = 0;
};
s.prototype._modifyArray = function() {
this._intArray.length % Int16Array.BYTES_PER_ELEMENT != 0 && this._intArray.push(0);
this._frameIntArray.length % Int16Array.BYTES_PER_ELEMENT != 0 && this._frameIntArray.push(0);
this._frameArray.length % Int16Array.BYTES_PER_ELEMENT != 0 && this._frameArray.push(0);
this._timelineArray.length % Uint16Array.BYTES_PER_ELEMENT != 0 && this._timelineArray.push(0);
var t = this._intArray.length * Int16Array.BYTES_PER_ELEMENT, e = this._floatArray.length * Float32Array.BYTES_PER_ELEMENT, n = this._frameIntArray.length * Int16Array.BYTES_PER_ELEMENT, r = this._frameFloatArray.length * Float32Array.BYTES_PER_ELEMENT, s = this._frameArray.length * Int16Array.BYTES_PER_ELEMENT, a = this._timelineArray.length * Uint16Array.BYTES_PER_ELEMENT, o = t + e + n + r + s + a;
if (i.DragonBones.webAssembly) {
for (var h = i.webAssemblyModule.HEAP16.buffer, l = i.webAssemblyModule._malloc(o), c = new Int16Array(h, l, this._intArray.length), u = new Float32Array(h, l + t, this._floatArray.length), _ = new Int16Array(h, l + t + e, this._frameIntArray.length), m = new Float32Array(h, l + t + e + n, this._frameFloatArray.length), f = new Int16Array(h, l + t + e + n + r, this._frameArray.length), d = new Uint16Array(h, l + t + e + n + r + s, this._timelineArray.length), p = 0, g = this._intArray.length; p < g; ++p) c[p] = this._intArray[p];
for (p = 0, g = this._floatArray.length; p < g; ++p) u[p] = this._floatArray[p];
for (p = 0, g = this._frameIntArray.length; p < g; ++p) _[p] = this._frameIntArray[p];
for (p = 0, g = this._frameFloatArray.length; p < g; ++p) m[p] = this._frameFloatArray[p];
for (p = 0, g = this._frameArray.length; p < g; ++p) f[p] = this._frameArray[p];
for (p = 0, g = this._timelineArray.length; p < g; ++p) d[p] = this._timelineArray[p];
i.webAssemblyModule.setDataBinary(this._data, l, t, e, n, r, s, a);
} else {
var y = new ArrayBuffer(o);
for (c = new Int16Array(y, 0, this._intArray.length), u = new Float32Array(y, t, this._floatArray.length), 
_ = new Int16Array(y, t + e, this._frameIntArray.length), m = new Float32Array(y, t + e + n, this._frameFloatArray.length), 
f = new Int16Array(y, t + e + n + r, this._frameArray.length), d = new Uint16Array(y, t + e + n + r + s, this._timelineArray.length), 
p = 0, g = this._intArray.length; p < g; ++p) c[p] = this._intArray[p];
for (p = 0, g = this._floatArray.length; p < g; ++p) u[p] = this._floatArray[p];
for (p = 0, g = this._frameIntArray.length; p < g; ++p) _[p] = this._frameIntArray[p];
for (p = 0, g = this._frameFloatArray.length; p < g; ++p) m[p] = this._frameFloatArray[p];
for (p = 0, g = this._frameArray.length; p < g; ++p) f[p] = this._frameArray[p];
for (p = 0, g = this._timelineArray.length; p < g; ++p) d[p] = this._timelineArray[p];
this._data.binary = y;
this._data.intArray = c;
this._data.floatArray = u;
this._data.frameIntArray = _;
this._data.frameFloatArray = m;
this._data.frameArray = f;
this._data.timelineArray = d;
}
this._defaultColorOffset = -1;
};
s.prototype.parseDragonBonesData = function(t, e) {
void 0 === e && (e = 1);
console.assert(null !== t && void 0 !== t, "Data error.");
var n = s._getString(t, i.DataParser.VERSION, ""), r = s._getString(t, i.DataParser.COMPATIBLE_VERSION, "");
if (i.DataParser.DATA_VERSIONS.indexOf(n) >= 0 || i.DataParser.DATA_VERSIONS.indexOf(r) >= 0) {
var a = i.BaseObject.borrowObject(i.DragonBonesData);
a.version = n;
a.name = s._getString(t, i.DataParser.NAME, "");
a.frameRate = s._getNumber(t, i.DataParser.FRAME_RATE, 24);
0 === a.frameRate && (a.frameRate = 24);
if (i.DataParser.ARMATURE in t) {
this._data = a;
this._parseArray(t);
for (var o = 0, h = t[i.DataParser.ARMATURE]; o < h.length; o++) {
var l = h[o];
a.addArmature(this._parseArmature(l, e));
}
this._data.binary || this._modifyArray();
i.DataParser.STAGE in t ? a.stage = a.getArmature(s._getString(t, i.DataParser.STAGE, "")) : a.armatureNames.length > 0 && (a.stage = a.getArmature(a.armatureNames[0]));
this._data = null;
}
i.DataParser.TEXTURE_ATLAS in t && (this._rawTextureAtlases = t[i.DataParser.TEXTURE_ATLAS]);
return a;
}
console.assert(!1, "Nonsupport data version: " + n + "\nPlease convert DragonBones data to support version.\nRead more: https://github.com/DragonBones/Tools/");
return null;
};
s.prototype.parseTextureAtlasData = function(t, e, n) {
void 0 === n && (n = 1);
console.assert(void 0 !== t);
if (null === t) {
if (null === this._rawTextureAtlases || 0 === this._rawTextureAtlases.length) return !1;
var r = this._rawTextureAtlases[this._rawTextureAtlasIndex++];
this.parseTextureAtlasData(r, e, n);
if (this._rawTextureAtlasIndex >= this._rawTextureAtlases.length) {
this._rawTextureAtlasIndex = 0;
this._rawTextureAtlases = null;
}
return !0;
}
e.width = s._getNumber(t, i.DataParser.WIDTH, 0);
e.height = s._getNumber(t, i.DataParser.HEIGHT, 0);
e.scale = 1 === n ? 1 / s._getNumber(t, i.DataParser.SCALE, 1) : n;
e.name = s._getString(t, i.DataParser.NAME, "");
e.imagePath = s._getString(t, i.DataParser.IMAGE_PATH, "");
if (i.DataParser.SUB_TEXTURE in t) for (var a = t[i.DataParser.SUB_TEXTURE], o = 0, h = a.length; o < h; ++o) {
var l = a[o], c = e.createTexture();
c.rotated = s._getBoolean(l, i.DataParser.ROTATED, !1);
c.name = s._getString(l, i.DataParser.NAME, "");
c.region.x = s._getNumber(l, i.DataParser.X, 0);
c.region.y = s._getNumber(l, i.DataParser.Y, 0);
c.region.width = s._getNumber(l, i.DataParser.WIDTH, 0);
c.region.height = s._getNumber(l, i.DataParser.HEIGHT, 0);
var u = s._getNumber(l, i.DataParser.FRAME_WIDTH, -1), _ = s._getNumber(l, i.DataParser.FRAME_HEIGHT, -1);
if (u > 0 && _ > 0) {
c.frame = i.TextureData.createRectangle();
c.frame.x = s._getNumber(l, i.DataParser.FRAME_X, 0);
c.frame.y = s._getNumber(l, i.DataParser.FRAME_Y, 0);
c.frame.width = u;
c.frame.height = _;
}
e.addTexture(c);
}
return !0;
};
s.getInstance = function() {
null === s._objectDataParserInstance && (s._objectDataParserInstance = new s());
return s._objectDataParserInstance;
};
s._objectDataParserInstance = null;
return s;
})(i.DataParser);
i.ObjectDataParser = n;
var r = (function() {
return function() {
this.frameStart = 0;
this.actions = [];
};
})();
i.ActionFrame = r;
})(s || (s = {}));
(function(t) {
var e = (function(e) {
a(i, e);
function i() {
return null !== e && e.apply(this, arguments) || this;
}
i.prototype._inRange = function(t, e, i) {
return e <= t && t <= i;
};
i.prototype._decodeUTF8 = function(t) {
for (var e, i = 0, n = "", r = 0, s = 0, a = 0, o = 0; t.length > i; ) {
var h = t[i++];
if (-1 === h) e = 0 !== s ? 65533 : -1; else if (0 === s) if (this._inRange(h, 0, 127)) e = h; else {
if (this._inRange(h, 194, 223)) {
s = 1;
o = 128;
r = h - 192;
} else if (this._inRange(h, 224, 239)) {
s = 2;
o = 2048;
r = h - 224;
} else if (this._inRange(h, 240, 244)) {
s = 3;
o = 65536;
r = h - 240;
}
r *= Math.pow(64, s);
e = null;
} else if (this._inRange(h, 128, 191)) {
a += 1;
r += (h - 128) * Math.pow(64, s - a);
if (a !== s) e = null; else {
var l = r, c = o;
r = 0;
s = 0;
a = 0;
o = 0;
e = this._inRange(l, c, 1114111) && !this._inRange(l, 55296, 57343) ? l : h;
}
} else {
r = 0;
s = 0;
a = 0;
o = 0;
i--;
e = h;
}
if (null !== e && -1 !== e) if (e <= 65535) e > 0 && (n += String.fromCharCode(e)); else {
e -= 65536;
n += String.fromCharCode(55296 + (e >> 10 & 1023));
n += String.fromCharCode(56320 + (1023 & e));
}
}
return n;
};
i.prototype._getUTF16Key = function(t) {
for (var e = 0, i = t.length; e < i; ++e) if (t.charCodeAt(e) > 255) return encodeURI(t);
return t;
};
i.prototype._parseBinaryTimeline = function(e, i, n) {
void 0 === n && (n = null);
var r = null !== n ? n : t.BaseObject.borrowObject(t.TimelineData);
r.type = e;
r.offset = i;
this._timeline = r;
var s = this._timelineArrayBuffer[r.offset + 2];
if (1 === s) r.frameIndicesOffset = -1; else {
var a = 0, o = this._animation.frameCount + 1, h = this._data.frameIndices;
if (t.DragonBones.webAssembly) {
a = h.size();
h.resize(a + o, 0);
} else {
a = h.length;
h.length += o;
}
r.frameIndicesOffset = a;
for (var l = 0, c = 0, u = 0, _ = 0; l < o; ++l) {
if (u + _ <= l && c < s) {
u = this._frameArrayBuffer[this._animation.frameOffset + this._timelineArrayBuffer[r.offset + 5 + c]];
_ = c === s - 1 ? this._animation.frameCount - u : this._frameArrayBuffer[this._animation.frameOffset + this._timelineArrayBuffer[r.offset + 5 + c + 1]] - u;
c++;
}
t.DragonBones.webAssembly ? h.set(a + l, c - 1) : h[a + l] = c - 1;
}
}
this._timeline = null;
return r;
};
i.prototype._parseMesh = function(e, i) {
i.offset = e[t.DataParser.OFFSET];
var n = this._intArrayBuffer[i.offset + 3];
if (n >= 0) {
var r = t.BaseObject.borrowObject(t.WeightData), s = this._intArrayBuffer[i.offset + 0], a = this._intArrayBuffer[n + 0];
r.offset = n;
for (var o = 0; o < a; ++o) {
var h = this._intArrayBuffer[n + 2 + o];
r.addBone(this._rawBones[h]);
}
for (var l = n + 2 + a, c = 0, u = (o = 0, s); o < u; ++o) {
var _ = this._intArrayBuffer[l++];
c += _;
l += _;
}
r.count = c;
i.weight = r;
}
};
i.prototype._parseAnimation = function(e) {
var i = t.BaseObject.borrowObject(t.AnimationData);
i.frameCount = Math.max(t.ObjectDataParser._getNumber(e, t.DataParser.DURATION, 1), 1);
i.playTimes = t.ObjectDataParser._getNumber(e, t.DataParser.PLAY_TIMES, 1);
i.duration = i.frameCount / this._armature.frameRate;
i.fadeInTime = t.ObjectDataParser._getNumber(e, t.DataParser.FADE_IN_TIME, 0);
i.scale = t.ObjectDataParser._getNumber(e, t.DataParser.SCALE, 1);
i.name = t.ObjectDataParser._getString(e, t.DataParser.NAME, t.DataParser.DEFAULT_NAME);
0 === i.name.length && (i.name = t.DataParser.DEFAULT_NAME);
var n = e[t.DataParser.OFFSET];
i.frameIntOffset = n[0];
i.frameFloatOffset = n[1];
i.frameOffset = n[2];
this._animation = i;
t.DataParser.ACTION in e && (i.actionTimeline = this._parseBinaryTimeline(0, e[t.DataParser.ACTION]));
t.DataParser.Z_ORDER in e && (i.zOrderTimeline = this._parseBinaryTimeline(1, e[t.DataParser.Z_ORDER]));
if (t.DataParser.BONE in e) {
var r = e[t.DataParser.BONE];
for (var s in r) {
var a = r[s];
t.DragonBones.webAssembly && (s = this._getUTF16Key(s));
var o = this._armature.getBone(s);
if (null !== o) for (var h = 0, l = a.length; h < l; h += 2) {
var c = a[h], u = a[h + 1], _ = this._parseBinaryTimeline(c, u);
this._animation.addBoneTimeline(o, _);
}
}
}
if (t.DataParser.SURFACE in e) {
r = e[t.DataParser.SURFACE];
for (var s in r) {
a = r[s];
t.DragonBones.webAssembly && (s = this._getUTF16Key(s));
var m = this._armature.getBone(s);
if (null !== m) for (h = 0, l = a.length; h < l; h += 2) {
c = a[h], u = a[h + 1], _ = this._parseBinaryTimeline(c, u);
this._animation.addSurfaceTimeline(m, _);
}
}
}
if (t.DataParser.SLOT in e) {
r = e[t.DataParser.SLOT];
for (var s in r) {
a = r[s];
t.DragonBones.webAssembly && (s = this._getUTF16Key(s));
var f = this._armature.getSlot(s);
if (null !== f) for (h = 0, l = a.length; h < l; h += 2) {
c = a[h], u = a[h + 1], _ = this._parseBinaryTimeline(c, u);
this._animation.addSlotTimeline(f, _);
}
}
}
if (t.DataParser.CONSTRAINT in e) {
r = e[t.DataParser.CONSTRAINT];
for (var s in r) {
a = r[s];
t.DragonBones.webAssembly && (s = this._getUTF16Key(s));
var d = this._armature.getConstraint(s);
if (null !== d) for (h = 0, l = a.length; h < l; h += 2) {
c = a[h], u = a[h + 1], _ = this._parseBinaryTimeline(c, u);
this._animation.addConstraintTimeline(d, _);
}
}
}
if (t.DataParser.ANIMATION in e) {
r = e[t.DataParser.ANIMATION];
for (var s in r) {
a = r[s];
t.DragonBones.webAssembly && (s = this._getUTF16Key(s));
for (h = 0, l = a.length; h < l; h += 2) {
c = a[h], u = a[h + 1], _ = this._parseBinaryTimeline(c, u);
this._animation.addAnimationTimeline(s, _);
}
}
}
this._animation = null;
return i;
};
i.prototype._parseArray = function(e) {
var i = e[t.DataParser.OFFSET], n = i[1], r = i[3], s = i[5], a = i[7], o = i[9], h = i[11], l = new Int16Array(this._binary, this._binaryOffset + i[0], n / Int16Array.BYTES_PER_ELEMENT), c = new Float32Array(this._binary, this._binaryOffset + i[2], r / Float32Array.BYTES_PER_ELEMENT), u = new Int16Array(this._binary, this._binaryOffset + i[4], s / Int16Array.BYTES_PER_ELEMENT), _ = new Float32Array(this._binary, this._binaryOffset + i[6], a / Float32Array.BYTES_PER_ELEMENT), m = new Int16Array(this._binary, this._binaryOffset + i[8], o / Int16Array.BYTES_PER_ELEMENT), f = new Uint16Array(this._binary, this._binaryOffset + i[10], h / Uint16Array.BYTES_PER_ELEMENT);
if (t.DragonBones.webAssembly) {
for (var d = n + r + s + a + o + h, p = t.webAssemblyModule._malloc(d), g = new Uint8Array(this._binary, this._binaryOffset, d / Uint8Array.BYTES_PER_ELEMENT), y = new Uint8Array(t.webAssemblyModule.HEAP16.buffer, p, g.length), v = 0, x = g.length; v < x; ++v) y[v] = g[v];
t.webAssemblyModule.setDataBinary(this._data, p, n, r, s, a, o, h);
this._intArrayBuffer = l;
this._floatArrayBuffer = c;
this._frameIntArrayBuffer = u;
this._frameFloatArrayBuffer = _;
this._frameArrayBuffer = m;
this._timelineArrayBuffer = f;
} else {
this._data.binary = this._binary;
this._data.intArray = this._intArrayBuffer = l;
this._data.floatArray = this._floatArrayBuffer = c;
this._data.frameIntArray = this._frameIntArrayBuffer = u;
this._data.frameFloatArray = this._frameFloatArrayBuffer = _;
this._data.frameArray = this._frameArrayBuffer = m;
this._data.timelineArray = this._timelineArrayBuffer = f;
}
};
i.prototype.parseDragonBonesData = function(t, i) {
void 0 === i && (i = 1);
console.assert(null !== t && void 0 !== t && t instanceof ArrayBuffer, "Data error.");
var n = new Uint8Array(t, 0, 8);
if (n[0] !== "D".charCodeAt(0) || n[1] !== "B".charCodeAt(0) || n[2] !== "D".charCodeAt(0) || n[3] !== "T".charCodeAt(0)) {
console.assert(!1, "Nonsupport data.");
return null;
}
var r = new Uint32Array(t, 8, 1)[0], s = new Uint8Array(t, 12, r), a = this._decodeUTF8(s), o = JSON.parse(a);
this._binaryOffset = 12 + r;
this._binary = t;
return e.prototype.parseDragonBonesData.call(this, o, i);
};
i.getInstance = function() {
null === i._binaryDataParserInstance && (i._binaryDataParserInstance = new i());
return i._binaryDataParserInstance;
};
i._binaryDataParserInstance = null;
return i;
})(t.ObjectDataParser);
t.BinaryDataParser = e;
})(s || (s = {}));
(function(t) {
var e = (function() {
function e(i) {
void 0 === i && (i = null);
this.autoSearch = !1;
this._dragonBonesDataMap = {};
this._textureAtlasDataMap = {};
this._dragonBones = null;
this._dataParser = null;
null === e._objectParser && (e._objectParser = new t.ObjectDataParser());
null === e._binaryParser && (e._binaryParser = new t.BinaryDataParser());
this._dataParser = null !== i ? i : e._objectParser;
}
e.prototype._isSupportMesh = function() {
return !0;
};
e.prototype._getTextureData = function(t, e) {
if (t in this._textureAtlasDataMap) for (var i = 0, n = this._textureAtlasDataMap[t]; i < n.length; i++) {
if (null !== (h = (o = n[i]).getTexture(e))) return h;
}
if (this.autoSearch) for (var r in this._textureAtlasDataMap) for (var s = 0, a = this._textureAtlasDataMap[r]; s < a.length; s++) {
var o;
if ((o = a[s]).autoSearch) {
var h;
if (null !== (h = o.getTexture(e))) return h;
}
}
return null;
};
e.prototype._fillBuildArmaturePackage = function(t, e, i, n, r) {
var s = null, a = null;
e.length > 0 && e in this._dragonBonesDataMap && (a = (s = this._dragonBonesDataMap[e]).getArmature(i));
if (null === a && (0 === e.length || this.autoSearch)) for (var o in this._dragonBonesDataMap) {
s = this._dragonBonesDataMap[o];
if ((0 === e.length || s.autoSearch) && null !== (a = s.getArmature(i))) {
e = o;
break;
}
}
if (null !== a) {
t.dataName = e;
t.textureAtlasName = r;
t.data = s;
t.armature = a;
t.skin = null;
if (n.length > 0) {
t.skin = a.getSkin(n);
if (null === t.skin && this.autoSearch) for (var o in this._dragonBonesDataMap) {
var h = this._dragonBonesDataMap[o].getArmature(n);
if (null !== h) {
t.skin = h.defaultSkin;
break;
}
}
}
null === t.skin && (t.skin = a.defaultSkin);
return !0;
}
return !1;
};
e.prototype._buildBones = function(e, i) {
for (var n = 0, r = e.armature.sortedBones; n < r.length; n++) {
var s = r[n], a = t.BaseObject.borrowObject(0 === s.type ? t.Bone : t.Surface);
a.init(s);
null !== s.parent ? i.addBone(a, s.parent.name) : i.addBone(a, "");
}
var o = e.armature.constraints;
for (var h in o) {
var l = o[h], c = t.BaseObject.borrowObject(t.IKConstraint);
c.init(l, i);
i.addConstraint(c);
}
};
e.prototype._buildSlots = function(e, i) {
var n = e.skin, r = e.armature.defaultSkin;
if (null !== n && null !== r) {
var s = {};
for (var a in r.displays) {
var o = r.getDisplays(a);
s[a] = o;
}
if (n !== r) for (var a in n.displays) {
o = n.getDisplays(a);
s[a] = o;
}
for (var h = 0, l = e.armature.sortedSlots; h < l.length; h++) {
var c = l[h], u = (o = c.name in s ? s[c.name] : null, this._buildSlot(e, c, o, i));
i.addSlot(u, c.parent.name);
if (null !== o) {
for (var _ = new Array(), m = 0, f = t.DragonBones.webAssembly ? o.size() : o.length; m < f; ++m) {
var d = t.DragonBones.webAssembly ? o.get(m) : o[m];
null !== d ? _.push(this._getSlotDisplay(e, d, null, u)) : _.push(null);
}
u._setDisplayList(_);
}
u._setDisplayIndex(c.displayIndex, !0);
}
}
};
e.prototype._buildChildArmature = function(t, e, i) {
return this.buildArmature(i.path, null !== t ? t.dataName : "", "", null !== t ? t.textureAtlasName : "");
};
e.prototype._getSlotDisplay = function(t, e, i, n) {
var r = null !== t ? t.dataName : e.parent.parent.parent.name, s = null;
switch (e.type) {
case 0:
var a = e;
null === a.texture ? a.texture = this._getTextureData(r, e.path) : null !== t && t.textureAtlasName.length > 0 && (a.texture = this._getTextureData(t.textureAtlasName, e.path));
s = null !== i && 2 === i.type && this._isSupportMesh() ? n.meshDisplay : n.rawDisplay;
break;

case 2:
var o = e;
null === o.texture ? o.texture = this._getTextureData(r, o.path) : null !== t && t.textureAtlasName.length > 0 && (o.texture = this._getTextureData(t.textureAtlasName, o.path));
s = this._isSupportMesh() ? n.meshDisplay : n.rawDisplay;
break;

case 1:
var h = e, l = this._buildChildArmature(t, n, e);
if (null !== l) {
l.inheritAnimation = h.inheritAnimation;
if (!l.inheritAnimation) {
var c = h.actions.length > 0 ? h.actions : l.armatureData.defaultActions;
if (c.length > 0) for (var u = 0, _ = c; u < _.length; u++) {
var m = _[u];
l._bufferAction(m, !0);
} else l.animation.play();
}
h.armature = l.armatureData;
}
s = l;
}
return s;
};
e.prototype.parseDragonBonesData = function(t, i, n) {
void 0 === i && (i = null);
void 0 === n && (n = 1);
for (var r = t instanceof ArrayBuffer ? e._binaryParser : this._dataParser, s = r.parseDragonBonesData(t, n); ;) {
var a = this._buildTextureAtlasData(null, null);
if (!r.parseTextureAtlasData(null, a, n)) {
a.returnToPool();
break;
}
this.addTextureAtlasData(a, i);
}
null !== s && this.addDragonBonesData(s, i);
return s;
};
e.prototype.parseTextureAtlasData = function(t, e, i, n) {
void 0 === i && (i = null);
void 0 === n && (n = 1);
var r = this._buildTextureAtlasData(null, null);
this._dataParser.parseTextureAtlasData(t, r, n);
this._buildTextureAtlasData(r, e || null);
this.addTextureAtlasData(r, i);
return r;
};
e.prototype.updateTextureAtlasData = function(t, e) {
var i = this.getTextureAtlasData(t);
if (null !== i) for (var n = 0, r = i.length; n < r; ++n) n < e.length && this._buildTextureAtlasData(i[n], e[n]);
};
e.prototype.getDragonBonesData = function(t) {
return t in this._dragonBonesDataMap ? this._dragonBonesDataMap[t] : null;
};
e.prototype.addDragonBonesData = function(t, e) {
void 0 === e && (e = null);
if ((e = null !== e ? e : t.name) in this._dragonBonesDataMap) {
if (this._dragonBonesDataMap[e] === t) return;
console.warn("Can not add same name data: " + e);
} else this._dragonBonesDataMap[e] = t;
};
e.prototype.removeDragonBonesData = function(t, e) {
void 0 === e && (e = !0);
if (t in this._dragonBonesDataMap) {
e && this._dragonBones.bufferObject(this._dragonBonesDataMap[t]);
delete this._dragonBonesDataMap[t];
}
};
e.prototype.getTextureAtlasData = function(t) {
return t in this._textureAtlasDataMap ? this._textureAtlasDataMap[t] : null;
};
e.prototype.addTextureAtlasData = function(t, e) {
void 0 === e && (e = null);
var i = (e = null !== e ? e : t.name) in this._textureAtlasDataMap ? this._textureAtlasDataMap[e] : this._textureAtlasDataMap[e] = [];
i.indexOf(t) < 0 && i.push(t);
};
e.prototype.removeTextureAtlasData = function(t, e) {
void 0 === e && (e = !0);
if (t in this._textureAtlasDataMap) {
var i = this._textureAtlasDataMap[t];
if (e) for (var n = 0, r = i; n < r.length; n++) {
var s = r[n];
this._dragonBones.bufferObject(s);
}
delete this._textureAtlasDataMap[t];
}
};
e.prototype.getArmatureData = function(t, e) {
void 0 === e && (e = "");
var n = new i();
return this._fillBuildArmaturePackage(n, e, t, "", "") ? n.armature : null;
};
e.prototype.clear = function(t) {
void 0 === t && (t = !0);
for (var e in this._dragonBonesDataMap) {
t && this._dragonBones.bufferObject(this._dragonBonesDataMap[e]);
delete this._dragonBonesDataMap[e];
}
for (var e in this._textureAtlasDataMap) {
if (t) for (var i = 0, n = this._textureAtlasDataMap[e]; i < n.length; i++) {
var r = n[i];
this._dragonBones.bufferObject(r);
}
delete this._textureAtlasDataMap[e];
}
};
e.prototype.buildArmature = function(t, e, n, r) {
void 0 === e && (e = "");
void 0 === n && (n = "");
void 0 === r && (r = "");
var s = new i();
if (!this._fillBuildArmaturePackage(s, e || "", t, n || "", r || "")) {
console.warn("No armature data: " + t + ", " + (null !== e ? e : ""));
return null;
}
var a = this._buildArmature(s);
this._buildBones(s, a);
this._buildSlots(s, a);
a.invalidUpdate(null, !0);
a.advanceTime(0);
return a;
};
e.prototype.replaceDisplay = function(e, i, n) {
void 0 === n && (n = -1);
n < 0 && (n = e.displayIndex);
n < 0 && (n = 0);
e.replaceDisplayData(i, n);
var r = e.displayList;
if (r.length <= n) {
r.length = n + 1;
for (var s = 0, a = r.length; s < a; ++s) r[s] || (r[s] = null);
}
if (null !== i) {
var o = e.rawDisplayDatas, h = null;
o && (t.DragonBones.webAssembly ? n < o.size() && (h = o.get(n)) : n < o.length && (h = o[n]));
r[n] = this._getSlotDisplay(null, i, h, e);
} else r[n] = null;
e.displayList = r;
};
e.prototype.replaceSlotDisplay = function(t, e, i, n, r, s) {
void 0 === s && (s = -1);
var a = this.getArmatureData(e, t || "");
if (!a || !a.defaultSkin) return !1;
var o = a.defaultSkin.getDisplay(i, n);
if (!o) return !1;
this.replaceDisplay(r, o, s);
return !0;
};
e.prototype.replaceSlotDisplayList = function(e, i, n, r) {
var s = this.getArmatureData(i, e || "");
if (!s || !s.defaultSkin) return !1;
var a = s.defaultSkin.getDisplays(n);
if (!a) return !1;
for (var o = 0, h = 0, l = t.DragonBones.webAssembly ? a.size() : a.length; h < l; ++h) {
var c = t.DragonBones.webAssembly ? a.get(h) : a[h];
this.replaceDisplay(r, c, o++);
}
return !0;
};
e.prototype.replaceSkin = function(e, i, n, r) {
void 0 === n && (n = !1);
void 0 === r && (r = null);
for (var s = !1, a = i.parent.defaultSkin, o = 0, h = e.getSlots(); o < h.length; o++) {
var l = h[o];
if (!(null !== r && r.indexOf(l.name) >= 0)) {
var c = i.getDisplays(l.name);
if (!c) {
null !== a && i !== a && (c = a.getDisplays(l.name));
if (!c) {
if (n) {
l.rawDisplayDatas = null;
l.displayList = [];
}
continue;
}
}
var u = t.DragonBones.webAssembly ? c.size() : c.length, _ = l.displayList;
_.length = u;
for (var m = 0, f = u; m < f; ++m) {
var d = t.DragonBones.webAssembly ? c.get(m) : c[m];
_[m] = null !== d ? this._getSlotDisplay(null, d, null, l) : null;
}
s = !0;
l.rawDisplayDatas = c;
l.displayList = _;
}
}
return s;
};
e.prototype.replaceAnimation = function(e, i, n) {
void 0 === n && (n = !0);
var r = i.defaultSkin;
if (null === r) return !1;
if (n) e.animation.animations = i.animations; else {
var s = e.animation.animations, a = {};
for (var o in s) a[o] = s[o];
for (var o in i.animations) a[o] = i.animations[o];
e.animation.animations = a;
}
for (var h = 0, l = e.getSlots(); h < l.length; h++) for (var c = l[h], u = 0, _ = 0, m = c.displayList; _ < m.length; _++) {
var f = m[_];
if (f instanceof t.Armature) {
var d = r.getDisplays(c.name);
if (null !== d && u < (t.DragonBones.webAssembly ? d.size() : d.length)) {
var p = t.DragonBones.webAssembly ? d.get(u) : d[u];
if (null !== p && 1 === p.type) {
var g = this.getArmatureData(p.path, p.parent.parent.parent.name);
g && this.replaceAnimation(f, g, n);
}
}
}
u++;
}
return !0;
};
e.prototype.getAllDragonBonesData = function() {
return this._dragonBonesDataMap;
};
e.prototype.getAllTextureAtlasData = function() {
return this._textureAtlasDataMap;
};
Object.defineProperty(e.prototype, "clock", {
get: function() {
return this._dragonBones.clock;
},
enumerable: !0,
configurable: !0
});
Object.defineProperty(e.prototype, "dragonBones", {
get: function() {
return this._dragonBones;
},
enumerable: !0,
configurable: !0
});
e.prototype.changeSkin = function(t, e, i) {
void 0 === i && (i = null);
return this.replaceSkin(t, e, !1, i);
};
e.prototype.copyAnimationsToArmature = function(t, e, i, n, r) {
void 0 === i && (i = "");
void 0 === n && (n = "");
void 0 === r && (r = !0);
var s = this.getArmatureData(e, n);
return !!s && this.replaceAnimation(t, s, r);
};
e._objectParser = null;
e._binaryParser = null;
return e;
})();
t.BaseFactory = e;
var i = (function() {
return function() {
this.dataName = "";
this.textureAtlasName = "";
this.skin = null;
};
})();
t.BuildArmaturePackage = i;
})(s || (s = {}));
n.exports = s;
}), {} ],
280: [ (function(t, e, i) {
var n = t("./ArmatureDisplay"), r = t("../../cocos2d/core/renderer/render-engine").math, s = (t("../../cocos2d/core/platform/js"), 
t("../../cocos2d/core/renderer/render-flow")), a = t("../../cocos2d/core/renderer/webgl/vertex-format").vfmtPosUvColor, o = r.mat4.create(), h = (cc.v3(), 
void 0), l = void 0, c = void 0, u = void 0, _ = void 0, m = void 0, f = void 0, d = void 0, p = void 0, g = void 0, y = void 0, v = void 0, x = void 0, A = void 0, b = void 0, T = void 0, C = void 0, w = {
updateRenderData: function(t) {
var e = t._armature;
if (e && !t._isChildArmature) {
var i = t._renderData;
i || (i = t._renderData = t.requestRenderData());
var n = t.node._contentSize, r = t.node._anchorPoint;
i.updateSizeNPivot(n.width, n.height, r.x, r.y);
i.material = t.getMaterial();
i.vertexCount = 0;
i.indiceCount = 0;
this.calcBufferCount(i, e);
}
},
calcBufferCount: function(t, e) {
for (var i = e._slots, n = 0, r = i.length; n < r; n++) {
var s = i[n];
if (s._visible && s._displayData) if (s.childArmature) this.calcBufferCount(t, s.childArmature); else {
t.vertexCount += s._vertices.length;
t.indiceCount += s._indices.length;
}
}
},
fillBuffers: function(t, e) {
var i = t._armature;
if (i && !t._isChildArmature) {
var n = e.getBuffer("mesh", a), r = t._renderData;
_ = n.byteOffset >> 2;
h = n._vData;
l = n._uintVData;
u = n._iData;
m = n.indiceOffset;
c = n.vertexOffset;
n.request(r.vertexCount, r.indiceCount);
var o = t.node, w = o.color;
x = w.r / 255;
A = w.g / 255;
b = w.b / 255;
T = w.a / 255;
C = o._worldMatrix;
f = C.m00;
d = C.m01;
p = C.m04;
g = C.m05;
y = C.m12;
v = C.m13;
this.fillIndexBufferWithArmature(i);
this.fillVertexBufferWithArmature(i);
t.node._renderFlag |= s.FLAG_UPDATE_RENDER_DATA;
C = u = h = l = null;
}
},
fillVertexBufferWithArmature: function(t) {
for (var e = t._slots, i = 0, n = e.length; i < n; i++) {
var s = e[i];
if (s._visible && s._displayData) if (s.childArmature) {
r.mat4.mul(o, C, s._matrix);
f = o.m00;
d = o.m01;
p = o.m04;
g = o.m05;
y = o.m12;
v = o.m13;
this.fillVertexBufferWithArmature(s.childArmature);
f = C.m00;
d = C.m01;
p = C.m04;
g = C.m05;
y = C.m12;
v = C.m13;
} else for (var a = s._vertices, c = s._color, u = c.r * x, m = c.g * A, w = c.b * b, S = (c.a * T << 24 >>> 0) + (w << 16) + (m << 8) + u, E = 0, D = a.length; E < D; E++) {
var M = a[E];
h[_++] = M.x * f + M.y * p + y;
h[_++] = M.x * d + M.y * g + v;
h[_++] = M.u;
h[_++] = M.v;
l[_++] = S;
}
}
},
fillIndexBufferWithArmature: function(t) {
for (var e = t._slots, i = 0, n = e.length; i < n; i++) {
var r = e[i];
if (r._visible && r._displayData) if (r.childArmature) this.fillIndexBufferWithArmature(r.childArmature); else {
for (var s = r._indices, a = 0, o = s.length; a < o; a++) u[m++] = c + s[a];
c += r._vertices.length;
}
}
}
};
e.exports = n._assembler = w;
}), {
"../../cocos2d/core/platform/js": 173,
"../../cocos2d/core/renderer/render-engine": 195,
"../../cocos2d/core/renderer/render-flow": 196,
"../../cocos2d/core/renderer/webgl/vertex-format": 221,
"./ArmatureDisplay": 271
} ],
281: [ (function(t, e, i) {
var n = t("./track-entry-listeners"), r = t("../../cocos2d/core/components/CCRenderComponent"), s = t("./lib/spine"), a = t("../../cocos2d/core/renderer/render-engine").SpriteMaterial, o = t("../../cocos2d/core/CCNode"), h = t("../../cocos2d/core/graphics/graphics"), l = cc.Enum({
default: -1
}), c = cc.Enum({
"<None>": 0
});
sp.Skeleton = cc.Class({
name: "sp.Skeleton",
extends: r,
editor: !1,
properties: {
paused: {
default: !1,
visible: !1
},
skeletonData: {
default: null,
type: sp.SkeletonData,
notify: function() {
this.defaultSkin = "";
this.defaultAnimation = "";
0;
this._updateSkeletonData();
},
tooltip: !1
},
defaultSkin: {
default: "",
visible: !1
},
defaultAnimation: {
default: "",
visible: !1
},
animation: {
get: function() {
var t = this.getCurrent(0);
return t && t.animation.name || "";
},
set: function(t) {
this.defaultAnimation = t;
if (t) this.setAnimation(0, t, this.loop); else {
this.clearTrack(0);
this.setToSetupPose();
}
},
visible: !1
},
_defaultSkinIndex: {
get: function() {
if (this.skeletonData && this.defaultSkin) {
var t = this.skeletonData.getSkinsEnum();
if (t) {
var e = t[this.defaultSkin];
if (void 0 !== e) return e;
}
}
return 0;
},
set: function(t) {
var e;
this.skeletonData && (e = this.skeletonData.getSkinsEnum());
if (!e) return cc.errorID("", this.name);
var i = e[t];
if (void 0 !== i) {
this.defaultSkin = i;
0;
} else cc.errorID(7501, this.name);
},
type: l,
visible: !0,
displayName: "Default Skin",
tooltip: !1
},
_animationIndex: {
get: function() {
var t = this.animation;
if (this.skeletonData && t) {
var e = this.skeletonData.getAnimsEnum();
if (e) {
var i = e[t];
if (void 0 !== i) return i;
}
}
return 0;
},
set: function(t) {
if (0 !== t) {
var e;
this.skeletonData && (e = this.skeletonData.getAnimsEnum());
if (!e) return cc.errorID(7502, this.name);
var i = e[t];
void 0 !== i ? this.animation = i : cc.errorID(7503, this.name);
} else this.animation = "";
},
type: c,
visible: !0,
displayName: "Animation",
tooltip: !1
},
loop: {
default: !0,
tooltip: !1
},
premultipliedAlpha: {
default: !0,
tooltip: !1
},
timeScale: {
default: 1,
tooltip: !1
},
debugSlots: {
default: !1,
editorOnly: !0,
tooltip: !1
},
debugBones: {
default: !1,
editorOnly: !0,
tooltip: !1
}
},
ctor: function() {
this._skeleton = null;
this._rootBone = null;
this._listener = null;
this._boundingBox = cc.rect();
this._material = new a();
this._renderDatas = [];
this._debugNode = new o();
this._debugRenderer = this._debugNode.addComponent(h);
},
setSkeletonData: function(t) {
null != t.width && null != t.height && this.node.setContentSize(t.width, t.height);
this._skeleton = new s.Skeleton(t);
this._rootBone = this._skeleton.getRootBone();
},
setAnimationStateData: function(t) {
var e = new s.AnimationState(t);
if (this._listener) {
this._state && this._listener && this._state.removeListener(this._listener);
e.addListener(this._listener);
}
this._state = e;
},
__preload: function() {
this._updateSkeletonData();
},
onRestore: function() {
if (!this._material) {
this._boundingBox = cc.rect();
this._material = new a();
this._renderDatas = [];
this._debugNode = new o();
this._debugRenderer = this._debugNode.addComponent(h);
}
},
onDestroy: function() {
this._super();
this._debugNode.destroy();
this._debugRenderer.clear();
this._renderDatas.length = 0;
},
updateWorldTransform: function() {
this._skeleton && this._skeleton.updateWorldTransform();
},
setToSetupPose: function() {
this._skeleton && this._skeleton.setToSetupPose();
},
setBonesToSetupPose: function() {
this._skeleton && this._skeleton.setBonesToSetupPose();
},
setSlotsToSetupPose: function() {
this._skeleton && this._skeleton.setSlotsToSetupPose();
},
findBone: function(t) {
return this._skeleton ? this._skeleton.findBone(t) : null;
},
findSlot: function(t) {
return this._skeleton ? this._skeleton.findSlot(t) : null;
},
setSkin: function(t) {
return this._skeleton ? this._skeleton.setSkin(t) : null;
},
getAttachment: function(t, e) {
return this._skeleton ? this._skeleton.getAttachment(t, e) : null;
},
setAttachment: function(t, e) {
this._skeleton && this._skeleton.setAttachment(t, e);
},
getTextureAtlas: function(t) {
return t.region;
},
setMix: function(t, e, i) {
this._state && this._state.data.setMixWith(t, e, i);
},
setAnimationListener: function(t, e) {
this._skeleton && this._skeleton.setAnimationListener(t, e);
},
setAnimation: function(t, e, i) {
if (this._skeleton) {
var n = this._skeleton.data.findAnimation(e);
if (!n) {
cc.logID(7509, e);
return null;
}
0;
return this._state.setAnimationWith(t, n, i);
}
return null;
},
addAnimation: function(t, e, i, n) {
if (this._skeleton) {
n = n || 0;
var r = this._skeleton.data.findAnimation(e);
if (!r) {
cc.logID(7510, e);
return null;
}
return this._state.addAnimationWith(t, r, i, n);
}
return null;
},
findAnimation: function(t) {
return this._skeleton ? this._skeleton.data.findAnimation(t) : null;
},
getCurrent: function(t) {
return this._state ? this._state.getCurrent(t) : null;
},
clearTracks: function() {
this._state && this._state.clearTracks();
},
clearTrack: function(t) {
if (this._state) {
this._state.clearTrack(t);
0;
}
},
setStartListener: function(t) {
this._ensureListener();
this._listener.start = t;
},
setInterruptListener: function(t) {
this._ensureListener();
this._listener.interrupt = t;
},
setEndListener: function(t) {
this._ensureListener();
this._listener.end = t;
},
setDisposeListener: function(t) {
this._ensureListener();
this._listener.dispose = t;
},
setCompleteListener: function(t) {
this._ensureListener();
this._listener.complete = t;
},
setEventListener: function(t) {
this._ensureListener();
this._listener.event = t;
},
setTrackStartListener: function(t, e) {
n.getListeners(t).start = e;
},
setTrackInterruptListener: function(t, e) {
n.getListeners(t).interrupt = e;
},
setTrackEndListener: function(t, e) {
n.getListeners(t).end = e;
},
setTrackDisposeListener: function(t, e) {
n.getListeners(t).dispose = e;
},
setTrackCompleteListener: function(t, e) {
n.getListeners(t).complete = function(t) {
var i = Math.floor(t.trackTime / t.animationEnd);
e(t, i);
};
},
setTrackEventListener: function(t, e) {
n.getListeners(t).event = e;
},
getState: function() {
return this._state;
},
_updateAnimEnum: !1,
_updateSkinEnum: !1,
_ensureListener: function() {
if (!this._listener) {
this._listener = new n();
this._state.addListener(this._listener);
}
},
_updateSkeletonData: function() {
if (this.skeletonData) {
var t = this.skeletonData.getRuntimeData();
if (t) {
try {
this.setSkeletonData(t);
this.setAnimationStateData(new s.AnimationStateData(this._skeleton.data));
this.defaultSkin && this._skeleton.setSkinByName(this.defaultSkin);
} catch (t) {
cc.warn(t);
}
this.animation = this.defaultAnimation;
}
}
},
_refreshInspector: function() {
this._updateAnimEnum();
this._updateSkinEnum();
Editor.Utils.refreshSelectedInspector("node", this.node.uuid);
}
});
e.exports = sp.Skeleton;
}), {
"../../cocos2d/core/CCNode": 28,
"../../cocos2d/core/components/CCRenderComponent": 75,
"../../cocos2d/core/graphics/graphics": 102,
"../../cocos2d/core/renderer/render-engine": 195,
"./lib/spine": 283,
"./track-entry-listeners": 287
} ],
282: [ (function(i, n, r) {
("undefined" === ("object" === (e = typeof window) ? t(window) : e) ? global : window).sp = {};
sp.ATTACHMENT_TYPE = {
REGION: 0,
BOUNDING_BOX: 1,
MESH: 2,
SKINNED_MESH: 3
};
sp.AnimationEventType = cc.Enum({
START: 0,
INTERRUPT: 1,
END: 2,
DISPOSE: 3,
COMPLETE: 4,
EVENT: 5
});
sp.spine = i("./lib/spine");
i("./skeleton-texture");
i("./skeleton-data");
i("./Skeleton");
i("./spine-assembler");
}), {
"./Skeleton": 281,
"./lib/spine": 283,
"./skeleton-data": 284,
"./skeleton-texture": 285,
"./spine-assembler": 286
} ],
283: [ (function(i, n, r) {
var s, a = this && this.__extends || function(t, e) {
for (var i in e) e.hasOwnProperty(i) && (t[i] = e[i]);
function n() {
this.constructor = t;
}
t.prototype = null === e ? Object.create(e) : (n.prototype = e.prototype, new n());
};
(function(t) {
var e = (function() {
function t(t, e, i) {
if (null == t) throw new Error("name cannot be null.");
if (null == e) throw new Error("timelines cannot be null.");
this.name = t;
this.timelines = e;
this.duration = i;
}
t.prototype.apply = function(t, e, i, n, r, s, a, o) {
if (null == t) throw new Error("skeleton cannot be null.");
if (n && 0 != this.duration) {
i %= this.duration;
e > 0 && (e %= this.duration);
}
for (var h = this.timelines, l = 0, c = h.length; l < c; l++) h[l].apply(t, e, i, r, s, a, o);
};
t.binarySearch = function(t, e, i) {
void 0 === i && (i = 1);
var n = 0, r = t.length / i - 2;
if (0 == r) return i;
for (var s = r >>> 1; ;) {
t[(s + 1) * i] <= e ? n = s + 1 : r = s;
if (n == r) return (n + 1) * i;
s = n + r >>> 1;
}
};
t.linearSearch = function(t, e, i) {
for (var n = 0, r = t.length - i; n <= r; n += i) if (t[n] > e) return n;
return -1;
};
return t;
})();
t.Animation = e;
(function(t) {
t[t.rotate = 0] = "rotate";
t[t.translate = 1] = "translate";
t[t.scale = 2] = "scale";
t[t.shear = 3] = "shear";
t[t.attachment = 4] = "attachment";
t[t.color = 5] = "color";
t[t.deform = 6] = "deform";
t[t.event = 7] = "event";
t[t.drawOrder = 8] = "drawOrder";
t[t.ikConstraint = 9] = "ikConstraint";
t[t.transformConstraint = 10] = "transformConstraint";
t[t.pathConstraintPosition = 11] = "pathConstraintPosition";
t[t.pathConstraintSpacing = 12] = "pathConstraintSpacing";
t[t.pathConstraintMix = 13] = "pathConstraintMix";
})(t.TimelineType || (t.TimelineType = {}));
var i = t.TimelineType, n = (function() {
function e(i) {
if (i <= 0) throw new Error("frameCount must be > 0: " + i);
this.curves = t.Utils.newFloatArray((i - 1) * e.BEZIER_SIZE);
}
e.prototype.getFrameCount = function() {
return this.curves.length / e.BEZIER_SIZE + 1;
};
e.prototype.setLinear = function(t) {
this.curves[t * e.BEZIER_SIZE] = e.LINEAR;
};
e.prototype.setStepped = function(t) {
this.curves[t * e.BEZIER_SIZE] = e.STEPPED;
};
e.prototype.getCurveType = function(t) {
var i = t * e.BEZIER_SIZE;
if (i == this.curves.length) return e.LINEAR;
var n = this.curves[i];
return n == e.LINEAR ? e.LINEAR : n == e.STEPPED ? e.STEPPED : e.BEZIER;
};
e.prototype.setCurve = function(t, i, n, r, s) {
var a = .03 * (2 * -i + r), o = .03 * (2 * -n + s), h = .006 * (3 * (i - r) + 1), l = .006 * (3 * (n - s) + 1), c = 2 * a + h, u = 2 * o + l, _ = .3 * i + a + .16666667 * h, m = .3 * n + o + .16666667 * l, f = t * e.BEZIER_SIZE, d = this.curves;
d[f++] = e.BEZIER;
for (var p = _, g = m, y = f + e.BEZIER_SIZE - 1; f < y; f += 2) {
d[f] = p;
d[f + 1] = g;
_ += c;
m += u;
c += h;
u += l;
p += _;
g += m;
}
};
e.prototype.getCurvePercent = function(i, n) {
n = t.MathUtils.clamp(n, 0, 1);
var r = this.curves, s = i * e.BEZIER_SIZE, a = r[s];
if (a == e.LINEAR) return n;
if (a == e.STEPPED) return 0;
for (var o = 0, h = ++s, l = s + e.BEZIER_SIZE - 1; s < l; s += 2) if ((o = r[s]) >= n) {
var c = void 0, u = void 0;
if (s == h) {
c = 0;
u = 0;
} else {
c = r[s - 2];
u = r[s - 1];
}
return u + (r[s + 1] - u) * (n - c) / (o - c);
}
var _ = r[s - 1];
return _ + (1 - _) * (n - o) / (1 - o);
};
e.LINEAR = 0;
e.STEPPED = 1;
e.BEZIER = 2;
e.BEZIER_SIZE = 19;
return e;
})();
t.CurveTimeline = n;
var r = (function(n) {
a(r, n);
function r(e) {
n.call(this, e);
this.frames = t.Utils.newFloatArray(e << 1);
}
r.prototype.getPropertyId = function() {
return (i.rotate << 24) + this.boneIndex;
};
r.prototype.setFrame = function(t, e, i) {
t <<= 1;
this.frames[t] = e;
this.frames[t + r.ROTATION] = i;
};
r.prototype.apply = function(t, i, n, s, a, o, h) {
var l = this.frames, c = t.bones[this.boneIndex];
if (n < l[0]) o && (c.rotation = c.data.rotation); else if (n >= l[l.length - r.ENTRIES]) if (o) c.rotation = c.data.rotation + l[l.length + r.PREV_ROTATION] * a; else {
var u = c.data.rotation + l[l.length + r.PREV_ROTATION] - c.rotation;
u -= 360 * (16384 - (16384.499999999996 - u / 360 | 0));
c.rotation += u * a;
} else {
var _ = e.binarySearch(l, n, r.ENTRIES), m = l[_ + r.PREV_ROTATION], f = l[_], d = this.getCurvePercent((_ >> 1) - 1, 1 - (n - f) / (l[_ + r.PREV_TIME] - f)), p = l[_ + r.ROTATION] - m;
p = m + (p -= 360 * (16384 - (16384.499999999996 - p / 360 | 0))) * d;
if (o) {
p -= 360 * (16384 - (16384.499999999996 - p / 360 | 0));
c.rotation = c.data.rotation + p * a;
} else {
p = c.data.rotation + p - c.rotation;
p -= 360 * (16384 - (16384.499999999996 - p / 360 | 0));
c.rotation += p * a;
}
}
};
r.ENTRIES = 2;
r.PREV_TIME = -2;
r.PREV_ROTATION = -1;
r.ROTATION = 1;
return r;
})(n);
t.RotateTimeline = r;
var s = (function(n) {
a(r, n);
function r(e) {
n.call(this, e);
this.frames = t.Utils.newFloatArray(e * r.ENTRIES);
}
r.prototype.getPropertyId = function() {
return (i.translate << 24) + this.boneIndex;
};
r.prototype.setFrame = function(t, e, i, n) {
t *= r.ENTRIES;
this.frames[t] = e;
this.frames[t + r.X] = i;
this.frames[t + r.Y] = n;
};
r.prototype.apply = function(t, i, n, s, a, o, h) {
var l = this.frames, c = t.bones[this.boneIndex];
if (n < l[0]) {
if (o) {
c.x = c.data.x;
c.y = c.data.y;
}
} else {
var u = 0, _ = 0;
if (n >= l[l.length - r.ENTRIES]) {
u = l[l.length + r.PREV_X];
_ = l[l.length + r.PREV_Y];
} else {
var m = e.binarySearch(l, n, r.ENTRIES);
u = l[m + r.PREV_X];
_ = l[m + r.PREV_Y];
var f = l[m], d = this.getCurvePercent(m / r.ENTRIES - 1, 1 - (n - f) / (l[m + r.PREV_TIME] - f));
u += (l[m + r.X] - u) * d;
_ += (l[m + r.Y] - _) * d;
}
if (o) {
c.x = c.data.x + u * a;
c.y = c.data.y + _ * a;
} else {
c.x += (c.data.x + u - c.x) * a;
c.y += (c.data.y + _ - c.y) * a;
}
}
};
r.ENTRIES = 3;
r.PREV_TIME = -3;
r.PREV_X = -2;
r.PREV_Y = -1;
r.X = 1;
r.Y = 2;
return r;
})(n);
t.TranslateTimeline = s;
var o = (function(n) {
a(r, n);
function r(t) {
n.call(this, t);
}
r.prototype.getPropertyId = function() {
return (i.scale << 24) + this.boneIndex;
};
r.prototype.apply = function(i, n, s, a, o, h, l) {
var c = this.frames, u = i.bones[this.boneIndex];
if (s < c[0]) {
if (h) {
u.scaleX = u.data.scaleX;
u.scaleY = u.data.scaleY;
}
} else {
var _ = 0, m = 0;
if (s >= c[c.length - r.ENTRIES]) {
_ = c[c.length + r.PREV_X] * u.data.scaleX;
m = c[c.length + r.PREV_Y] * u.data.scaleY;
} else {
var f = e.binarySearch(c, s, r.ENTRIES);
_ = c[f + r.PREV_X];
m = c[f + r.PREV_Y];
var d = c[f], p = this.getCurvePercent(f / r.ENTRIES - 1, 1 - (s - d) / (c[f + r.PREV_TIME] - d));
_ = (_ + (c[f + r.X] - _) * p) * u.data.scaleX;
m = (m + (c[f + r.Y] - m) * p) * u.data.scaleY;
}
if (1 == o) {
u.scaleX = _;
u.scaleY = m;
} else {
var g = 0, y = 0;
if (h) {
g = u.data.scaleX;
y = u.data.scaleY;
} else {
g = u.scaleX;
y = u.scaleY;
}
if (l) {
_ = Math.abs(_) * t.MathUtils.signum(g);
m = Math.abs(m) * t.MathUtils.signum(y);
} else {
g = Math.abs(g) * t.MathUtils.signum(_);
y = Math.abs(y) * t.MathUtils.signum(m);
}
u.scaleX = g + (_ - g) * o;
u.scaleY = y + (m - y) * o;
}
}
};
return r;
})(s);
t.ScaleTimeline = o;
var h = (function(t) {
a(n, t);
function n(e) {
t.call(this, e);
}
n.prototype.getPropertyId = function() {
return (i.shear << 24) + this.boneIndex;
};
n.prototype.apply = function(t, i, r, s, a, o, h) {
var l = this.frames, c = t.bones[this.boneIndex];
if (r < l[0]) {
if (o) {
c.shearX = c.data.shearX;
c.shearY = c.data.shearY;
}
} else {
var u = 0, _ = 0;
if (r >= l[l.length - n.ENTRIES]) {
u = l[l.length + n.PREV_X];
_ = l[l.length + n.PREV_Y];
} else {
var m = e.binarySearch(l, r, n.ENTRIES);
u = l[m + n.PREV_X];
_ = l[m + n.PREV_Y];
var f = l[m], d = this.getCurvePercent(m / n.ENTRIES - 1, 1 - (r - f) / (l[m + n.PREV_TIME] - f));
u += (l[m + n.X] - u) * d;
_ += (l[m + n.Y] - _) * d;
}
if (o) {
c.shearX = c.data.shearX + u * a;
c.shearY = c.data.shearY + _ * a;
} else {
c.shearX += (c.data.shearX + u - c.shearX) * a;
c.shearY += (c.data.shearY + _ - c.shearY) * a;
}
}
};
return n;
})(s);
t.ShearTimeline = h;
var l = (function(n) {
a(r, n);
function r(e) {
n.call(this, e);
this.frames = t.Utils.newFloatArray(e * r.ENTRIES);
}
r.prototype.getPropertyId = function() {
return (i.color << 24) + this.slotIndex;
};
r.prototype.setFrame = function(t, e, i, n, s, a) {
t *= r.ENTRIES;
this.frames[t] = e;
this.frames[t + r.R] = i;
this.frames[t + r.G] = n;
this.frames[t + r.B] = s;
this.frames[t + r.A] = a;
};
r.prototype.apply = function(t, i, n, s, a, o, h) {
var l = t.slots[this.slotIndex], c = this.frames;
if (n < c[0]) o && l.color.setFromColor(l.data.color); else {
var u = 0, _ = 0, m = 0, f = 0;
if (n >= c[c.length - r.ENTRIES]) {
var d = c.length;
u = c[d + r.PREV_R];
_ = c[d + r.PREV_G];
m = c[d + r.PREV_B];
f = c[d + r.PREV_A];
} else {
var p = e.binarySearch(c, n, r.ENTRIES);
u = c[p + r.PREV_R];
_ = c[p + r.PREV_G];
m = c[p + r.PREV_B];
f = c[p + r.PREV_A];
var g = c[p], y = this.getCurvePercent(p / r.ENTRIES - 1, 1 - (n - g) / (c[p + r.PREV_TIME] - g));
u += (c[p + r.R] - u) * y;
_ += (c[p + r.G] - _) * y;
m += (c[p + r.B] - m) * y;
f += (c[p + r.A] - f) * y;
}
if (1 == a) l.color.set(u, _, m, f); else {
var v = l.color;
o && v.setFromColor(l.data.color);
v.add((u - v.r) * a, (_ - v.g) * a, (m - v.b) * a, (f - v.a) * a);
}
}
};
r.ENTRIES = 5;
r.PREV_TIME = -5;
r.PREV_R = -4;
r.PREV_G = -3;
r.PREV_B = -2;
r.PREV_A = -1;
r.R = 1;
r.G = 2;
r.B = 3;
r.A = 4;
return r;
})(n);
t.ColorTimeline = l;
var c = (function() {
function n(e) {
this.frames = t.Utils.newFloatArray(e);
this.attachmentNames = new Array(e);
}
n.prototype.getPropertyId = function() {
return (i.attachment << 24) + this.slotIndex;
};
n.prototype.getFrameCount = function() {
return this.frames.length;
};
n.prototype.setFrame = function(t, e, i) {
this.frames[t] = e;
this.attachmentNames[t] = i;
};
n.prototype.apply = function(t, i, n, r, s, a, o) {
var h = t.slots[this.slotIndex];
if (o && a) {
var l = h.data.attachmentName;
h.setAttachment(null == l ? null : t.getAttachment(this.slotIndex, l));
} else {
var c = this.frames;
if (n < c[0]) {
if (a) {
var u = h.data.attachmentName;
h.setAttachment(null == u ? null : t.getAttachment(this.slotIndex, u));
}
} else {
var _ = 0;
_ = n >= c[c.length - 1] ? c.length - 1 : e.binarySearch(c, n, 1) - 1;
var m = this.attachmentNames[_];
t.slots[this.slotIndex].setAttachment(null == m ? null : t.getAttachment(this.slotIndex, m));
}
}
};
return n;
})();
t.AttachmentTimeline = c;
var u = (function(n) {
a(r, n);
function r(e) {
n.call(this, e);
this.frames = t.Utils.newFloatArray(e);
this.frameVertices = new Array(e);
}
r.prototype.getPropertyId = function() {
return (i.deform << 24) + this.slotIndex;
};
r.prototype.setFrame = function(t, e, i) {
this.frames[t] = e;
this.frameVertices[t] = i;
};
r.prototype.apply = function(i, n, r, s, a, o, h) {
var l = i.slots[this.slotIndex], c = l.getAttachment();
if (c instanceof t.VertexAttachment && c.applyDeform(this.attachment)) {
var u = this.frames, _ = l.attachmentVertices;
if (r < u[0]) o && t.Utils.setArraySize(_, 0); else {
var m = this.frameVertices, f = m[0].length;
_.length != f && (a = 1);
var d = t.Utils.setArraySize(_, f);
if (r >= u[u.length - 1]) {
var p = m[u.length - 1];
if (1 == a) t.Utils.arrayCopy(p, 0, d, 0, f); else if (o) {
if (null == (S = c).bones) for (var g = S.vertices, y = 0; y < f; y++) {
var v = g[y];
d[y] = v + (p[y] - v) * a;
} else for (y = 0; y < f; y++) d[y] = p[y] * a;
} else for (y = 0; y < f; y++) d[y] += (p[y] - d[y]) * a;
} else {
var x = e.binarySearch(u, r), A = m[x - 1], b = m[x], T = u[x], C = this.getCurvePercent(x - 1, 1 - (r - T) / (u[x - 1] - T));
if (1 == a) for (y = 0; y < f; y++) {
var w = A[y];
d[y] = w + (b[y] - w) * C;
} else if (o) {
var S;
if (null == (S = c).bones) for (g = S.vertices, y = 0; y < f; y++) {
w = A[y], v = g[y];
d[y] = v + (w + (b[y] - w) * C - v) * a;
} else for (y = 0; y < f; y++) {
w = A[y];
d[y] = (w + (b[y] - w) * C) * a;
}
} else for (y = 0; y < f; y++) {
w = A[y];
d[y] += (w + (b[y] - w) * C - d[y]) * a;
}
}
}
}
};
return r;
})(n);
t.DeformTimeline = u;
var _ = (function() {
function n(e) {
this.frames = t.Utils.newFloatArray(e);
this.events = new Array(e);
}
n.prototype.getPropertyId = function() {
return i.event << 24;
};
n.prototype.getFrameCount = function() {
return this.frames.length;
};
n.prototype.setFrame = function(t, e) {
this.frames[t] = e.time;
this.events[t] = e;
};
n.prototype.apply = function(t, i, n, r, s, a, o) {
if (null != r) {
var h = this.frames, l = this.frames.length;
if (i > n) {
this.apply(t, i, Number.MAX_VALUE, r, s, a, o);
i = -1;
} else if (i >= h[l - 1]) return;
if (!(n < h[0])) {
var c = 0;
if (i < h[0]) c = 0; else for (var u = h[c = e.binarySearch(h, i)]; c > 0 && h[c - 1] == u; ) c--;
for (;c < l && n >= h[c]; c++) r.push(this.events[c]);
}
}
};
return n;
})();
t.EventTimeline = _;
var m = (function() {
function n(e) {
this.frames = t.Utils.newFloatArray(e);
this.drawOrders = new Array(e);
}
n.prototype.getPropertyId = function() {
return i.drawOrder << 24;
};
n.prototype.getFrameCount = function() {
return this.frames.length;
};
n.prototype.setFrame = function(t, e, i) {
this.frames[t] = e;
this.drawOrders[t] = i;
};
n.prototype.apply = function(i, n, r, s, a, o, h) {
var l = i.drawOrder, c = i.slots;
if (h && o) t.Utils.arrayCopy(i.slots, 0, i.drawOrder, 0, i.slots.length); else {
var u = this.frames;
if (r < u[0]) o && t.Utils.arrayCopy(i.slots, 0, i.drawOrder, 0, i.slots.length); else {
var _ = 0;
_ = r >= u[u.length - 1] ? u.length - 1 : e.binarySearch(u, r) - 1;
var m = this.drawOrders[_];
if (null == m) t.Utils.arrayCopy(c, 0, l, 0, c.length); else for (var f = 0, d = m.length; f < d; f++) l[f] = c[m[f]];
}
}
};
return n;
})();
t.DrawOrderTimeline = m;
var f = (function(n) {
a(r, n);
function r(e) {
n.call(this, e);
this.frames = t.Utils.newFloatArray(e * r.ENTRIES);
}
r.prototype.getPropertyId = function() {
return (i.ikConstraint << 24) + this.ikConstraintIndex;
};
r.prototype.setFrame = function(t, e, i, n) {
t *= r.ENTRIES;
this.frames[t] = e;
this.frames[t + r.MIX] = i;
this.frames[t + r.BEND_DIRECTION] = n;
};
r.prototype.apply = function(t, i, n, s, a, o, h) {
var l = this.frames, c = t.ikConstraints[this.ikConstraintIndex];
if (n < l[0]) {
if (o) {
c.mix = c.data.mix;
c.bendDirection = c.data.bendDirection;
}
} else if (n >= l[l.length - r.ENTRIES]) if (o) {
c.mix = c.data.mix + (l[l.length + r.PREV_MIX] - c.data.mix) * a;
c.bendDirection = h ? c.data.bendDirection : l[l.length + r.PREV_BEND_DIRECTION];
} else {
c.mix += (l[l.length + r.PREV_MIX] - c.mix) * a;
h || (c.bendDirection = l[l.length + r.PREV_BEND_DIRECTION]);
} else {
var u = e.binarySearch(l, n, r.ENTRIES), _ = l[u + r.PREV_MIX], m = l[u], f = this.getCurvePercent(u / r.ENTRIES - 1, 1 - (n - m) / (l[u + r.PREV_TIME] - m));
if (o) {
c.mix = c.data.mix + (_ + (l[u + r.MIX] - _) * f - c.data.mix) * a;
c.bendDirection = h ? c.data.bendDirection : l[u + r.PREV_BEND_DIRECTION];
} else {
c.mix += (_ + (l[u + r.MIX] - _) * f - c.mix) * a;
h || (c.bendDirection = l[u + r.PREV_BEND_DIRECTION]);
}
}
};
r.ENTRIES = 3;
r.PREV_TIME = -3;
r.PREV_MIX = -2;
r.PREV_BEND_DIRECTION = -1;
r.MIX = 1;
r.BEND_DIRECTION = 2;
return r;
})(n);
t.IkConstraintTimeline = f;
var d = (function(n) {
a(r, n);
function r(e) {
n.call(this, e);
this.frames = t.Utils.newFloatArray(e * r.ENTRIES);
}
r.prototype.getPropertyId = function() {
return (i.transformConstraint << 24) + this.transformConstraintIndex;
};
r.prototype.setFrame = function(t, e, i, n, s, a) {
t *= r.ENTRIES;
this.frames[t] = e;
this.frames[t + r.ROTATE] = i;
this.frames[t + r.TRANSLATE] = n;
this.frames[t + r.SCALE] = s;
this.frames[t + r.SHEAR] = a;
};
r.prototype.apply = function(t, i, n, s, a, o, h) {
var l = this.frames, c = t.transformConstraints[this.transformConstraintIndex];
if (n < l[0]) {
if (o) {
var u = c.data;
c.rotateMix = u.rotateMix;
c.translateMix = u.rotateMix;
c.scaleMix = u.scaleMix;
c.shearMix = u.shearMix;
}
} else {
var _ = 0, m = 0, f = 0, d = 0;
if (n >= l[l.length - r.ENTRIES]) {
var p = l.length;
_ = l[p + r.PREV_ROTATE];
m = l[p + r.PREV_TRANSLATE];
f = l[p + r.PREV_SCALE];
d = l[p + r.PREV_SHEAR];
} else {
var g = e.binarySearch(l, n, r.ENTRIES);
_ = l[g + r.PREV_ROTATE];
m = l[g + r.PREV_TRANSLATE];
f = l[g + r.PREV_SCALE];
d = l[g + r.PREV_SHEAR];
var y = l[g], v = this.getCurvePercent(g / r.ENTRIES - 1, 1 - (n - y) / (l[g + r.PREV_TIME] - y));
_ += (l[g + r.ROTATE] - _) * v;
m += (l[g + r.TRANSLATE] - m) * v;
f += (l[g + r.SCALE] - f) * v;
d += (l[g + r.SHEAR] - d) * v;
}
if (o) {
u = c.data;
c.rotateMix = u.rotateMix + (_ - u.rotateMix) * a;
c.translateMix = u.translateMix + (m - u.translateMix) * a;
c.scaleMix = u.scaleMix + (f - u.scaleMix) * a;
c.shearMix = u.shearMix + (d - u.shearMix) * a;
} else {
c.rotateMix += (_ - c.rotateMix) * a;
c.translateMix += (m - c.translateMix) * a;
c.scaleMix += (f - c.scaleMix) * a;
c.shearMix += (d - c.shearMix) * a;
}
}
};
r.ENTRIES = 5;
r.PREV_TIME = -5;
r.PREV_ROTATE = -4;
r.PREV_TRANSLATE = -3;
r.PREV_SCALE = -2;
r.PREV_SHEAR = -1;
r.ROTATE = 1;
r.TRANSLATE = 2;
r.SCALE = 3;
r.SHEAR = 4;
return r;
})(n);
t.TransformConstraintTimeline = d;
var p = (function(n) {
a(r, n);
function r(e) {
n.call(this, e);
this.frames = t.Utils.newFloatArray(e * r.ENTRIES);
}
r.prototype.getPropertyId = function() {
return (i.pathConstraintPosition << 24) + this.pathConstraintIndex;
};
r.prototype.setFrame = function(t, e, i) {
t *= r.ENTRIES;
this.frames[t] = e;
this.frames[t + r.VALUE] = i;
};
r.prototype.apply = function(t, i, n, s, a, o, h) {
var l = this.frames, c = t.pathConstraints[this.pathConstraintIndex];
if (n < l[0]) o && (c.position = c.data.position); else {
var u = 0;
if (n >= l[l.length - r.ENTRIES]) u = l[l.length + r.PREV_VALUE]; else {
var _ = e.binarySearch(l, n, r.ENTRIES);
u = l[_ + r.PREV_VALUE];
var m = l[_], f = this.getCurvePercent(_ / r.ENTRIES - 1, 1 - (n - m) / (l[_ + r.PREV_TIME] - m));
u += (l[_ + r.VALUE] - u) * f;
}
o ? c.position = c.data.position + (u - c.data.position) * a : c.position += (u - c.position) * a;
}
};
r.ENTRIES = 2;
r.PREV_TIME = -2;
r.PREV_VALUE = -1;
r.VALUE = 1;
return r;
})(n);
t.PathConstraintPositionTimeline = p;
var g = (function(t) {
a(n, t);
function n(e) {
t.call(this, e);
}
n.prototype.getPropertyId = function() {
return (i.pathConstraintSpacing << 24) + this.pathConstraintIndex;
};
n.prototype.apply = function(t, i, r, s, a, o, h) {
var l = this.frames, c = t.pathConstraints[this.pathConstraintIndex];
if (r < l[0]) o && (c.spacing = c.data.spacing); else {
var u = 0;
if (r >= l[l.length - n.ENTRIES]) u = l[l.length + n.PREV_VALUE]; else {
var _ = e.binarySearch(l, r, n.ENTRIES);
u = l[_ + n.PREV_VALUE];
var m = l[_], f = this.getCurvePercent(_ / n.ENTRIES - 1, 1 - (r - m) / (l[_ + n.PREV_TIME] - m));
u += (l[_ + n.VALUE] - u) * f;
}
o ? c.spacing = c.data.spacing + (u - c.data.spacing) * a : c.spacing += (u - c.spacing) * a;
}
};
return n;
})(p);
t.PathConstraintSpacingTimeline = g;
var y = (function(n) {
a(r, n);
function r(e) {
n.call(this, e);
this.frames = t.Utils.newFloatArray(e * r.ENTRIES);
}
r.prototype.getPropertyId = function() {
return (i.pathConstraintMix << 24) + this.pathConstraintIndex;
};
r.prototype.setFrame = function(t, e, i, n) {
t *= r.ENTRIES;
this.frames[t] = e;
this.frames[t + r.ROTATE] = i;
this.frames[t + r.TRANSLATE] = n;
};
r.prototype.apply = function(t, i, n, s, a, o, h) {
var l = this.frames, c = t.pathConstraints[this.pathConstraintIndex];
if (n < l[0]) {
if (o) {
c.rotateMix = c.data.rotateMix;
c.translateMix = c.data.translateMix;
}
} else {
var u = 0, _ = 0;
if (n >= l[l.length - r.ENTRIES]) {
u = l[l.length + r.PREV_ROTATE];
_ = l[l.length + r.PREV_TRANSLATE];
} else {
var m = e.binarySearch(l, n, r.ENTRIES);
u = l[m + r.PREV_ROTATE];
_ = l[m + r.PREV_TRANSLATE];
var f = l[m], d = this.getCurvePercent(m / r.ENTRIES - 1, 1 - (n - f) / (l[m + r.PREV_TIME] - f));
u += (l[m + r.ROTATE] - u) * d;
_ += (l[m + r.TRANSLATE] - _) * d;
}
if (o) {
c.rotateMix = c.data.rotateMix + (u - c.data.rotateMix) * a;
c.translateMix = c.data.translateMix + (_ - c.data.translateMix) * a;
} else {
c.rotateMix += (u - c.rotateMix) * a;
c.translateMix += (_ - c.translateMix) * a;
}
}
};
r.ENTRIES = 3;
r.PREV_TIME = -3;
r.PREV_ROTATE = -2;
r.PREV_TRANSLATE = -1;
r.ROTATE = 1;
r.TRANSLATE = 2;
return r;
})(n);
t.PathConstraintMixTimeline = y;
})(s || (s = {}));
(function(t) {
var e = (function() {
function e(e) {
this.tracks = new Array();
this.events = new Array();
this.listeners = new Array();
this.queue = new n(this);
this.propertyIDs = new t.IntSet();
this.animationsChanged = !1;
this.timeScale = 1;
this.trackEntryPool = new t.Pool(function() {
return new i();
});
this.data = e;
}
e.prototype.update = function(t) {
t *= this.timeScale;
for (var e = this.tracks, i = 0, n = e.length; i < n; i++) {
var r = e[i];
if (null != r) {
r.animationLast = r.nextAnimationLast;
r.trackLast = r.nextTrackLast;
var s = t * r.timeScale;
if (r.delay > 0) {
r.delay -= s;
if (r.delay > 0) continue;
s = -r.delay;
r.delay = 0;
}
var a = r.next;
if (null != a) {
var o = r.trackLast - a.delay;
if (o >= 0) {
a.delay = 0;
a.trackTime = o + t * a.timeScale;
r.trackTime += s;
this.setCurrent(i, a, !0);
for (;null != a.mixingFrom; ) {
a.mixTime += s;
a = a.mixingFrom;
}
continue;
}
} else if (r.trackLast >= r.trackEnd && null == r.mixingFrom) {
e[i] = null;
this.queue.end(r);
this.disposeNext(r);
continue;
}
this.updateMixingFrom(r, t);
r.trackTime += s;
}
}
this.queue.drain();
};
e.prototype.updateMixingFrom = function(t, e) {
var i = t.mixingFrom;
if (null != i) {
this.updateMixingFrom(i, e);
if (t.mixTime >= t.mixDuration && null != i.mixingFrom && t.mixTime > 0) {
t.mixingFrom = null;
this.queue.end(i);
} else {
i.animationLast = i.nextAnimationLast;
i.trackLast = i.nextTrackLast;
i.trackTime += e * i.timeScale;
t.mixTime += e * i.timeScale;
}
}
};
e.prototype.apply = function(e) {
if (null == e) throw new Error("skeleton cannot be null.");
this.animationsChanged && this._animationsChanged();
for (var i = this.events, n = this.tracks, r = 0, s = n.length; r < s; r++) {
var a = n[r];
if (!(null == a || a.delay > 0)) {
var o = a.alpha;
null != a.mixingFrom ? o *= this.applyMixingFrom(a, e) : a.trackTime >= a.trackEnd && (o = 0);
var h = a.animationLast, l = a.getAnimationTime(), c = a.animation.timelines.length, u = a.animation.timelines;
if (1 == o) for (var _ = 0; _ < c; _++) u[_].apply(e, h, l, i, 1, !0, !1); else {
var m = 0 == a.timelinesRotation.length;
m && t.Utils.setArraySize(a.timelinesRotation, c << 1, null);
var f = a.timelinesRotation, d = a.timelinesFirst;
for (_ = 0; _ < c; _++) {
var p = u[_];
p instanceof t.RotateTimeline ? this.applyRotateTimeline(p, e, l, o, d[_], f, _ << 1, m) : p.apply(e, h, l, i, o, d[_], !1);
}
}
this.queueEvents(a, l);
i.length = 0;
a.nextAnimationLast = l;
a.nextTrackLast = a.trackTime;
}
}
this.queue.drain();
};
e.prototype.applyMixingFrom = function(e, i) {
var n = e.mixingFrom;
null != n.mixingFrom && this.applyMixingFrom(n, i);
var r = 0;
0 == e.mixDuration ? r = 1 : (r = e.mixTime / e.mixDuration) > 1 && (r = 1);
var s = r < n.eventThreshold ? this.events : null, a = r < n.attachmentThreshold, o = r < n.drawOrderThreshold, h = n.animationLast, l = n.getAnimationTime(), c = n.animation.timelines.length, u = n.animation.timelines, _ = n.timelinesFirst, m = n.alpha * e.mixAlpha * (1 - r), f = 0 == n.timelinesRotation.length;
f && t.Utils.setArraySize(n.timelinesRotation, c << 1, null);
for (var d = n.timelinesRotation, p = 0; p < c; p++) {
var g = u[p], y = _[p];
if (g instanceof t.RotateTimeline) this.applyRotateTimeline(g, i, l, m, y, d, p << 1, f); else {
if (!y) {
if (!a && g instanceof t.AttachmentTimeline) continue;
if (!o && g instanceof t.DrawOrderTimeline) continue;
}
g.apply(i, h, l, s, m, y, !0);
}
}
e.mixDuration > 0 && this.queueEvents(n, l);
this.events.length = 0;
n.nextAnimationLast = l;
n.nextTrackLast = n.trackTime;
return r;
};
e.prototype.applyRotateTimeline = function(e, i, n, r, s, a, o, h) {
h && (a[o] = 0);
if (1 != r) {
var l = e, c = l.frames, u = i.bones[l.boneIndex];
if (n < c[0]) s && (u.rotation = u.data.rotation); else {
var _ = 0;
if (n >= c[c.length - t.RotateTimeline.ENTRIES]) _ = u.data.rotation + c[c.length + t.RotateTimeline.PREV_ROTATION]; else {
var m = t.Animation.binarySearch(c, n, t.RotateTimeline.ENTRIES), f = c[m + t.RotateTimeline.PREV_ROTATION], d = c[m], p = l.getCurvePercent((m >> 1) - 1, 1 - (n - d) / (c[m + t.RotateTimeline.PREV_TIME] - d));
_ = c[m + t.RotateTimeline.ROTATION] - f;
_ = f + (_ -= 360 * (16384 - (16384.499999999996 - _ / 360 | 0))) * p + u.data.rotation;
_ -= 360 * (16384 - (16384.499999999996 - _ / 360 | 0));
}
var g = s ? u.data.rotation : u.rotation, y = 0, v = _ - g;
if (0 == v) y = a[o]; else {
v -= 360 * (16384 - (16384.499999999996 - v / 360 | 0));
var x = 0, A = 0;
if (h) {
x = 0;
A = v;
} else {
x = a[o];
A = a[o + 1];
}
var b = v > 0, T = x >= 0;
if (t.MathUtils.signum(A) != t.MathUtils.signum(v) && Math.abs(A) <= 90) {
Math.abs(x) > 180 && (x += 360 * t.MathUtils.signum(x));
T = b;
}
y = v + x - x % 360;
T != b && (y += 360 * t.MathUtils.signum(x));
a[o] = y;
}
a[o + 1] = v;
g += y * r;
u.rotation = g - 360 * (16384 - (16384.499999999996 - g / 360 | 0));
}
} else e.apply(i, 0, n, null, 1, s, !1);
};
e.prototype.queueEvents = function(t, e) {
for (var i = t.animationStart, n = t.animationEnd, r = n - i, s = t.trackLast % r, a = this.events, o = 0, h = a.length; o < h; o++) {
var l = a[o];
if (l.time < s) break;
l.time > n || this.queue.event(t, l);
}
(t.loop ? s > t.trackTime % r : e >= n && t.animationLast < n) && this.queue.complete(t);
for (;o < h; o++) {
a[o].time < i || this.queue.event(t, a[o]);
}
};
e.prototype.clearTracks = function() {
this.queue.drainDisabled = !0;
for (var t = 0, e = this.tracks.length; t < e; t++) this.clearTrack(t);
this.tracks.length = 0;
this.queue.drainDisabled = !1;
this.queue.drain();
};
e.prototype.clearTrack = function(t) {
if (!(t >= this.tracks.length)) {
var e = this.tracks[t];
if (null != e) {
this.queue.end(e);
this.disposeNext(e);
for (var i = e; ;) {
var n = i.mixingFrom;
if (null == n) break;
this.queue.end(n);
i.mixingFrom = null;
i = n;
}
this.tracks[e.trackIndex] = null;
this.queue.drain();
}
}
};
e.prototype.setCurrent = function(t, e, i) {
var n = this.expandToIndex(t);
this.tracks[t] = e;
if (null != n) {
i && this.queue.interrupt(n);
e.mixingFrom = n;
e.mixTime = 0;
n.timelinesRotation.length = 0;
null != n.mixingFrom && n.mixDuration > 0 && (e.mixAlpha *= Math.min(n.mixTime / n.mixDuration, 1));
}
this.queue.start(e);
};
e.prototype.setAnimation = function(t, e, i) {
var n = this.data.skeletonData.findAnimation(e);
if (null == n) throw new Error("Animation not found: " + e);
return this.setAnimationWith(t, n, i);
};
e.prototype.setAnimationWith = function(t, e, i) {
if (null == e) throw new Error("animation cannot be null.");
var n = !0, r = this.expandToIndex(t);
if (null != r) if (-1 == r.nextTrackLast) {
this.tracks[t] = r.mixingFrom;
this.queue.interrupt(r);
this.queue.end(r);
this.disposeNext(r);
r = r.mixingFrom;
n = !1;
} else this.disposeNext(r);
var s = this.trackEntry(t, e, i, r);
this.setCurrent(t, s, n);
this.queue.drain();
return s;
};
e.prototype.addAnimation = function(t, e, i, n) {
var r = this.data.skeletonData.findAnimation(e);
if (null == r) throw new Error("Animation not found: " + e);
return this.addAnimationWith(t, r, i, n);
};
e.prototype.addAnimationWith = function(t, e, i, n) {
if (null == e) throw new Error("animation cannot be null.");
var r = this.expandToIndex(t);
if (null != r) for (;null != r.next; ) r = r.next;
var s = this.trackEntry(t, e, i, r);
if (null == r) {
this.setCurrent(t, s, !0);
this.queue.drain();
} else {
r.next = s;
if (n <= 0) {
var a = r.animationEnd - r.animationStart;
0 != a ? n += a * (1 + (r.trackTime / a | 0)) - this.data.getMix(r.animation, e) : n = 0;
}
}
s.delay = n;
return s;
};
e.prototype.setEmptyAnimation = function(t, i) {
var n = this.setAnimationWith(t, e.emptyAnimation, !1);
n.mixDuration = i;
n.trackEnd = i;
return n;
};
e.prototype.addEmptyAnimation = function(t, i, n) {
n <= 0 && (n -= i);
var r = this.addAnimationWith(t, e.emptyAnimation, !1, n);
r.mixDuration = i;
r.trackEnd = i;
return r;
};
e.prototype.setEmptyAnimations = function(t) {
this.queue.drainDisabled = !0;
for (var e = 0, i = this.tracks.length; e < i; e++) {
var n = this.tracks[e];
null != n && this.setEmptyAnimation(n.trackIndex, t);
}
this.queue.drainDisabled = !1;
this.queue.drain();
};
e.prototype.expandToIndex = function(e) {
if (e < this.tracks.length) return this.tracks[e];
t.Utils.ensureArrayCapacity(this.tracks, e - this.tracks.length + 1, null);
this.tracks.length = e + 1;
return null;
};
e.prototype.trackEntry = function(t, e, i, n) {
var r = this.trackEntryPool.obtain();
r.trackIndex = t;
r.animation = e;
r.loop = i;
r.eventThreshold = 0;
r.attachmentThreshold = 0;
r.drawOrderThreshold = 0;
r.animationStart = 0;
r.animationEnd = e.duration;
r.animationLast = -1;
r.nextAnimationLast = -1;
r.delay = 0;
r.trackTime = 0;
r.trackLast = -1;
r.nextTrackLast = -1;
r.trackEnd = Number.MAX_VALUE;
r.timeScale = 1;
r.alpha = 1;
r.mixAlpha = 1;
r.mixTime = 0;
r.mixDuration = null == n ? 0 : this.data.getMix(n.animation, e);
return r;
};
e.prototype.disposeNext = function(t) {
for (var e = t.next; null != e; ) {
this.queue.dispose(e);
e = e.next;
}
t.next = null;
};
e.prototype._animationsChanged = function() {
this.animationsChanged = !1;
var t = this.propertyIDs, e = 0, i = this.tracks.length;
t.clear();
for (;e < i; e++) {
if (null != (n = this.tracks[e])) {
this.setTimelinesFirst(n);
e++;
break;
}
}
for (;e < i; e++) {
var n;
null != (n = this.tracks[e]) && this.checkTimelinesFirst(n);
}
};
e.prototype.setTimelinesFirst = function(e) {
if (null == e.mixingFrom) for (var i = this.propertyIDs, n = e.animation.timelines, r = n.length, s = t.Utils.setArraySize(e.timelinesFirst, r, !1), a = 0; a < r; a++) {
i.add(n[a].getPropertyId());
s[a] = !0;
} else {
this.setTimelinesFirst(e.mixingFrom);
this.checkTimelinesUsage(e, e.timelinesFirst);
}
};
e.prototype.checkTimelinesFirst = function(t) {
null != t.mixingFrom && this.checkTimelinesFirst(t.mixingFrom);
this.checkTimelinesUsage(t, t.timelinesFirst);
};
e.prototype.checkTimelinesUsage = function(e, i) {
for (var n = this.propertyIDs, r = e.animation.timelines, s = r.length, a = t.Utils.setArraySize(i, s), o = 0; o < s; o++) a[o] = n.add(r[o].getPropertyId());
};
e.prototype.getCurrent = function(t) {
return t >= this.tracks.length ? null : this.tracks[t];
};
e.prototype.addListener = function(t) {
if (null == t) throw new Error("listener cannot be null.");
this.listeners.push(t);
};
e.prototype.removeListener = function(t) {
var e = this.listeners.indexOf(t);
e >= 0 && this.listeners.splice(e, 1);
};
e.prototype.clearListeners = function() {
this.listeners.length = 0;
};
e.prototype.clearListenerNotifications = function() {
this.queue.clear();
};
e.emptyAnimation = new t.Animation("<empty>", [], 0);
return e;
})();
t.AnimationState = e;
var i = (function() {
function t() {
this.timelinesFirst = new Array();
this.timelinesRotation = new Array();
}
t.prototype.reset = function() {
this.next = null;
this.mixingFrom = null;
this.animation = null;
this.listener = null;
this.timelinesFirst.length = 0;
this.timelinesRotation.length = 0;
};
t.prototype.getAnimationTime = function() {
if (this.loop) {
var t = this.animationEnd - this.animationStart;
return 0 == t ? this.animationStart : this.trackTime % t + this.animationStart;
}
return Math.min(this.trackTime + this.animationStart, this.animationEnd);
};
t.prototype.setAnimationLast = function(t) {
this.animationLast = t;
this.nextAnimationLast = t;
};
t.prototype.isComplete = function() {
return this.trackTime >= this.animationEnd - this.animationStart;
};
t.prototype.resetRotationDirections = function() {
this.timelinesRotation.length = 0;
};
return t;
})();
t.TrackEntry = i;
var n = (function() {
function t(t) {
this.objects = [];
this.drainDisabled = !1;
this.animState = t;
}
t.prototype.start = function(t) {
this.objects.push(r.start);
this.objects.push(t);
this.animState.animationsChanged = !0;
};
t.prototype.interrupt = function(t) {
this.objects.push(r.interrupt);
this.objects.push(t);
};
t.prototype.end = function(t) {
this.objects.push(r.end);
this.objects.push(t);
this.animState.animationsChanged = !0;
};
t.prototype.dispose = function(t) {
this.objects.push(r.dispose);
this.objects.push(t);
};
t.prototype.complete = function(t) {
this.objects.push(r.complete);
this.objects.push(t);
};
t.prototype.event = function(t, e) {
this.objects.push(r.event);
this.objects.push(t);
this.objects.push(e);
};
t.prototype.drain = function() {
if (!this.drainDisabled) {
this.drainDisabled = !0;
for (var t = this.objects, e = this.animState.listeners, i = 0; i < t.length; i += 2) {
var n = t[i], s = t[i + 1];
switch (n) {
case r.start:
null != s.listener && s.listener.start && s.listener.start(s);
for (var a = 0; a < e.length; a++) e[a].start && e[a].start(s);
break;

case r.interrupt:
null != s.listener && s.listener.interrupt && s.listener.interrupt(s);
for (a = 0; a < e.length; a++) e[a].interrupt && e[a].interrupt(s);
break;

case r.end:
null != s.listener && s.listener.end && s.listener.end(s);
for (a = 0; a < e.length; a++) e[a].end && e[a].end(s);

case r.dispose:
null != s.listener && s.listener.dispose && s.listener.dispose(s);
for (a = 0; a < e.length; a++) e[a].dispose && e[a].dispose(s);
this.animState.trackEntryPool.free(s);
break;

case r.complete:
null != s.listener && s.listener.complete && s.listener.complete(s);
for (a = 0; a < e.length; a++) e[a].complete && e[a].complete(s);
break;

case r.event:
var o = t[2 + i++];
null != s.listener && s.listener.event && s.listener.event(s, o);
for (a = 0; a < e.length; a++) e[a].event && e[a].event(s, o);
}
}
this.clear();
this.drainDisabled = !1;
}
};
t.prototype.clear = function() {
this.objects.length = 0;
};
return t;
})();
t.EventQueue = n;
(function(t) {
t[t.start = 0] = "start";
t[t.interrupt = 1] = "interrupt";
t[t.end = 2] = "end";
t[t.dispose = 3] = "dispose";
t[t.complete = 4] = "complete";
t[t.event = 5] = "event";
})(t.EventType || (t.EventType = {}));
var r = t.EventType, s = (function() {
function t() {}
t.prototype.start = function(t) {};
t.prototype.interrupt = function(t) {};
t.prototype.end = function(t) {};
t.prototype.dispose = function(t) {};
t.prototype.complete = function(t) {};
t.prototype.event = function(t, e) {};
return t;
})();
t.AnimationStateAdapter2 = s;
})(s || (s = {}));
(function(t) {
var e = (function() {
function t(t) {
this.animationToMixTime = {};
this.defaultMix = 0;
if (null == t) throw new Error("skeletonData cannot be null.");
this.skeletonData = t;
}
t.prototype.setMix = function(t, e, i) {
var n = this.skeletonData.findAnimation(t);
if (null == n) throw new Error("Animation not found: " + t);
var r = this.skeletonData.findAnimation(e);
if (null == r) throw new Error("Animation not found: " + e);
this.setMixWith(n, r, i);
};
t.prototype.setMixWith = function(t, e, i) {
if (null == t) throw new Error("from cannot be null.");
if (null == e) throw new Error("to cannot be null.");
var n = t.name + e.name;
this.animationToMixTime[n] = i;
};
t.prototype.getMix = function(t, e) {
var i = t.name + e.name, n = this.animationToMixTime[i];
return void 0 === n ? this.defaultMix : n;
};
return t;
})();
t.AnimationStateData = e;
})(s || (s = {}));
(function(t) {
var e = (function() {
function t(t, e) {
void 0 === e && (e = "");
this.assets = {};
this.errors = {};
this.toLoad = 0;
this.loaded = 0;
this.textureLoader = t;
this.pathPrefix = e;
}
t.prototype.loadText = function(t, e, i) {
var n = this;
void 0 === e && (e = null);
void 0 === i && (i = null);
t = this.pathPrefix + t;
this.toLoad++;
var r = new XMLHttpRequest();
r.onreadystatechange = function() {
if (r.readyState == XMLHttpRequest.DONE) {
if (r.status >= 200 && r.status < 300) {
n.assets[t] = r.responseText;
e && e(t, r.responseText);
} else {
n.errors[t] = "Couldn't load text " + t + ": status " + r.status + ", " + r.responseText;
i && i(t, "Couldn't load text " + t + ": status " + r.status + ", " + r.responseText);
}
n.toLoad--;
n.loaded++;
}
};
r.open("GET", t, !0);
r.send();
};
t.prototype.loadTexture = function(t, e, i) {
var n = this;
void 0 === e && (e = null);
void 0 === i && (i = null);
t = this.pathPrefix + t;
this.toLoad++;
var r = new Image();
r.crossOrigin = "anonymous";
r.src = t;
r.onload = function(i) {
var s = n.textureLoader(r);
n.assets[t] = s;
n.toLoad--;
n.loaded++;
e && e(t, r);
};
r.onerror = function(e) {
n.errors[t] = "Couldn't load image " + t;
n.toLoad--;
n.loaded++;
i && i(t, "Couldn't load image " + t);
};
};
t.prototype.get = function(t) {
t = this.pathPrefix + t;
return this.assets[t];
};
t.prototype.remove = function(t) {
t = this.pathPrefix + t;
var e = this.assets[t];
e.dispose && e.dispose();
this.assets[t] = null;
};
t.prototype.removeAll = function() {
for (var t in this.assets) {
var e = this.assets[t];
e.dispose && e.dispose();
}
this.assets = {};
};
t.prototype.isLoadingComplete = function() {
return 0 == this.toLoad;
};
t.prototype.getToLoad = function() {
return this.toLoad;
};
t.prototype.getLoaded = function() {
return this.loaded;
};
t.prototype.dispose = function() {
this.removeAll();
};
t.prototype.hasErrors = function() {
return Object.keys(this.errors).length > 0;
};
t.prototype.getErrors = function() {
return this.errors;
};
return t;
})();
t.AssetManager = e;
})(s || (s = {}));
(function(t) {
var e = (function() {
function e(t) {
this.atlas = t;
}
e.prototype.newRegionAttachment = function(e, i, n) {
var r = this.atlas.findRegion(n);
if (null == r) throw new Error("Region not found in atlas: " + n + " (region attachment: " + i + ")");
r.renderObject = r;
var s = new t.RegionAttachment(i);
s.setRegion(r);
return s;
};
e.prototype.newMeshAttachment = function(e, i, n) {
var r = this.atlas.findRegion(n);
if (null == r) throw new Error("Region not found in atlas: " + n + " (mesh attachment: " + i + ")");
r.renderObject = r;
var s = new t.MeshAttachment(i);
s.region = r;
return s;
};
e.prototype.newBoundingBoxAttachment = function(e, i) {
return new t.BoundingBoxAttachment(i);
};
e.prototype.newPathAttachment = function(e, i) {
return new t.PathAttachment(i);
};
return e;
})();
t.AtlasAttachmentLoader = e;
})(s || (s = {}));
(function(t) {
var e = (function() {
return function(t) {
if (null == t) throw new Error("name cannot be null.");
this.name = t;
};
})();
t.Attachment = e;
var i = (function(t) {
a(e, t);
function e(e) {
t.call(this, e);
this.worldVerticesLength = 0;
}
e.prototype.computeWorldVertices = function(t, e) {
this.computeWorldVerticesWith(t, 0, this.worldVerticesLength, e, 0);
};
e.prototype.computeWorldVerticesWith = function(t, e, i, n, r) {
i += r;
var s = t.bone.skeleton, a = t.attachmentVertices, o = this.vertices, h = this.bones;
if (null != h) {
for (var l = 0, c = 0, u = 0; u < e; u += 2) {
l += (d = h[l]) + 1;
c += d;
}
var _ = s.bones;
if (0 == a.length) for (E = r, T = 3 * c; E < i; E += 2) {
var m = 0, f = 0, d = h[l++];
d += l;
for (;l < d; l++, T += 3) {
v = _[h[l]], D = o[T], M = o[T + 1];
var p = o[T + 2];
m += (D * v.a + M * v.b + v.worldX) * p;
f += (D * v.c + M * v.d + v.worldY) * p;
}
n[E] = m;
n[E + 1] = f;
} else for (var g = a, y = (E = r, T = 3 * c, c << 1); E < i; E += 2) {
m = 0, f = 0, d = h[l++];
d += l;
for (;l < d; l++, T += 3, y += 2) {
v = _[h[l]], D = o[T] + g[y], M = o[T + 1] + g[y + 1], p = o[T + 2];
m += (D * v.a + M * v.b + v.worldX) * p;
f += (D * v.c + M * v.d + v.worldY) * p;
}
n[E] = m;
n[E + 1] = f;
}
} else {
a.length > 0 && (o = a);
for (var v, x = (v = t.bone).worldX, A = v.worldY, b = v.a, T = v.b, C = v.c, w = v.d, S = e, E = r; E < i; S += 2, 
E += 2) {
var D = o[S], M = o[S + 1];
n[E] = D * b + M * T + x;
n[E + 1] = D * C + M * w + A;
}
}
};
e.prototype.applyDeform = function(t) {
return this == t;
};
return e;
})(e);
t.VertexAttachment = i;
})(s || (s = {}));
(function(t) {
(function(t) {
t[t.Region = 0] = "Region";
t[t.BoundingBox = 1] = "BoundingBox";
t[t.Mesh = 2] = "Mesh";
t[t.LinkedMesh = 3] = "LinkedMesh";
t[t.Path = 4] = "Path";
})(t.AttachmentType || (t.AttachmentType = {}));
t.AttachmentType;
})(s || (s = {}));
(function(t) {
var e = (function(e) {
a(i, e);
function i(i) {
e.call(this, i);
this.color = new t.Color(1, 1, 1, 1);
}
return i;
})(t.VertexAttachment);
t.BoundingBoxAttachment = e;
})(s || (s = {}));
(function(t) {
var e = (function(e) {
a(i, e);
function i(i) {
e.call(this, i);
this.color = new t.Color(1, 1, 1, 1);
this.inheritDeform = !1;
this.tempColor = new t.Color(0, 0, 0, 0);
}
i.prototype.updateUVs = function() {
var e = this.regionUVs, i = e.length, n = 8 * (i >> 1);
null != this.worldVertices && this.worldVertices.length == n || (this.worldVertices = t.Utils.newFloatArray(n));
var r = 0, s = 0, a = 0, o = 0;
if (null == this.region) {
r = s = 0;
a = o = 1;
} else {
r = this.region.u;
s = this.region.v;
a = this.region.u2 - r;
o = this.region.v2 - s;
}
if (this.region.rotate) for (var h = 0, l = 6; h < i; h += 2, l += 8) {
this.worldVertices[l] = r + e[h + 1] * a;
this.worldVertices[l + 1] = s + o - e[h] * o;
} else for (h = 0, l = 6; h < i; h += 2, l += 8) {
this.worldVertices[l] = r + e[h] * a;
this.worldVertices[l + 1] = s + e[h + 1] * o;
}
};
i.prototype.updateWorldVertices = function(t, e) {
var i = t.bone.skeleton, n = i.color, r = t.color, s = this.color, a = n.a * r.a * s.a, o = e ? a : 1, h = this.tempColor;
h.set(n.r * r.r * s.r * o, n.g * r.g * s.g * o, n.b * r.b * s.b * o, a);
var l = t.attachmentVertices, c = this.vertices, u = this.worldVertices, _ = this.bones;
if (null == _) {
var m = c.length;
l.length > 0 && (c = l);
for (var f = (M = t.bone).worldX, d = M.worldY, p = M.a, g = M.b, y = M.c, v = M.d, x = 0, A = 0; x < m; x += 2, 
A += 8) {
var b = c[x], T = c[x + 1];
u[A] = b * p + T * g + f;
u[A + 1] = b * y + T * v + d;
u[A + 2] = h.r;
u[A + 3] = h.g;
u[A + 4] = h.b;
u[A + 5] = h.a;
}
return u;
}
var C = i.bones;
if (0 == l.length) {
A = 0, x = 0, g = 0;
for (var w = _.length; x < w; A += 8) {
for (var S = 0, E = 0, D = _[x++] + x; x < D; x++, g += 3) {
var M = C[_[x]], I = (b = c[g], T = c[g + 1], c[g + 2]);
S += (b * M.a + T * M.b + M.worldX) * I;
E += (b * M.c + T * M.d + M.worldY) * I;
}
u[A] = S;
u[A + 1] = E;
u[A + 2] = h.r;
u[A + 3] = h.g;
u[A + 4] = h.b;
u[A + 5] = h.a;
}
} else {
var P = l, B = (A = 0, x = 0, g = 0, 0);
for (w = _.length; x < w; A += 8) {
for (S = 0, E = 0, D = _[x++] + x; x < D; x++, g += 3, B += 2) {
M = C[_[x]], b = c[g] + P[B], T = c[g + 1] + P[B + 1], I = c[g + 2];
S += (b * M.a + T * M.b + M.worldX) * I;
E += (b * M.c + T * M.d + M.worldY) * I;
}
u[A] = S;
u[A + 1] = E;
u[A + 2] = h.r;
u[A + 3] = h.g;
u[A + 4] = h.b;
u[A + 5] = h.a;
}
}
return u;
};
i.prototype.applyDeform = function(t) {
return this == t || this.inheritDeform && this.parentMesh == t;
};
i.prototype.getParentMesh = function() {
return this.parentMesh;
};
i.prototype.setParentMesh = function(t) {
this.parentMesh = t;
if (null != t) {
this.bones = t.bones;
this.vertices = t.vertices;
this.regionUVs = t.regionUVs;
this.triangles = t.triangles;
this.hullLength = t.hullLength;
}
};
return i;
})(t.VertexAttachment);
t.MeshAttachment = e;
})(s || (s = {}));
(function(t) {
var e = (function(e) {
a(i, e);
function i(i) {
e.call(this, i);
this.closed = !1;
this.constantSpeed = !1;
this.color = new t.Color(1, 1, 1, 1);
}
return i;
})(t.VertexAttachment);
t.PathAttachment = e;
})(s || (s = {}));
(function(t) {
var e = (function(e) {
a(i, e);
function i(i) {
e.call(this, i);
this.x = 0;
this.y = 0;
this.scaleX = 1;
this.scaleY = 1;
this.rotation = 0;
this.width = 0;
this.height = 0;
this.color = new t.Color(1, 1, 1, 1);
this.offset = t.Utils.newFloatArray(8);
this.vertices = t.Utils.newFloatArray(32);
this.tempColor = new t.Color(1, 1, 1, 1);
}
i.prototype.setRegion = function(t) {
var e = this.vertices;
if (t.rotate) {
e[i.U2] = t.u;
e[i.V2] = t.v2;
e[i.U3] = t.u;
e[i.V3] = t.v;
e[i.U4] = t.u2;
e[i.V4] = t.v;
e[i.U1] = t.u2;
e[i.V1] = t.v2;
} else {
e[i.U1] = t.u;
e[i.V1] = t.v2;
e[i.U2] = t.u;
e[i.V2] = t.v;
e[i.U3] = t.u2;
e[i.V3] = t.v;
e[i.U4] = t.u2;
e[i.V4] = t.v2;
}
this.region = t;
};
i.prototype.updateOffset = function() {
var t = this.width / this.region.originalWidth * this.scaleX, e = this.height / this.region.originalHeight * this.scaleY, n = -this.width / 2 * this.scaleX + this.region.offsetX * t, r = -this.height / 2 * this.scaleY + this.region.offsetY * e, s = n + this.region.width * t, a = r + this.region.height * e, o = this.rotation * Math.PI / 180, h = Math.cos(o), l = Math.sin(o), c = n * h + this.x, u = n * l, _ = r * h + this.y, m = r * l, f = s * h + this.x, d = s * l, p = a * h + this.y, g = a * l, y = this.offset;
y[i.OX1] = c - m;
y[i.OY1] = _ + u;
y[i.OX2] = c - g;
y[i.OY2] = p + u;
y[i.OX3] = f - g;
y[i.OY3] = p + d;
y[i.OX4] = f - m;
y[i.OY4] = _ + d;
};
i.prototype.updateWorldVertices = function(t, e) {
var n = t.bone.skeleton.color, r = t.color, s = this.color, a = n.a * r.a * s.a, o = e ? a : 1, h = this.tempColor;
h.set(n.r * r.r * s.r * o, n.g * r.g * s.g * o, n.b * r.b * s.b * o, a);
var l = this.vertices, c = this.offset, u = t.bone, _ = u.worldX, m = u.worldY, f = u.a, d = u.b, p = u.c, g = u.d, y = 0, v = 0;
y = c[i.OX1];
v = c[i.OY1];
l[i.X1] = y * f + v * d + _;
l[i.Y1] = y * p + v * g + m;
l[i.C1R] = h.r;
l[i.C1G] = h.g;
l[i.C1B] = h.b;
l[i.C1A] = h.a;
y = c[i.OX2];
v = c[i.OY2];
l[i.X2] = y * f + v * d + _;
l[i.Y2] = y * p + v * g + m;
l[i.C2R] = h.r;
l[i.C2G] = h.g;
l[i.C2B] = h.b;
l[i.C2A] = h.a;
y = c[i.OX3];
v = c[i.OY3];
l[i.X3] = y * f + v * d + _;
l[i.Y3] = y * p + v * g + m;
l[i.C3R] = h.r;
l[i.C3G] = h.g;
l[i.C3B] = h.b;
l[i.C3A] = h.a;
y = c[i.OX4];
v = c[i.OY4];
l[i.X4] = y * f + v * d + _;
l[i.Y4] = y * p + v * g + m;
l[i.C4R] = h.r;
l[i.C4G] = h.g;
l[i.C4B] = h.b;
l[i.C4A] = h.a;
return l;
};
i.OX1 = 0;
i.OY1 = 1;
i.OX2 = 2;
i.OY2 = 3;
i.OX3 = 4;
i.OY3 = 5;
i.OX4 = 6;
i.OY4 = 7;
i.X1 = 0;
i.Y1 = 1;
i.C1R = 2;
i.C1G = 3;
i.C1B = 4;
i.C1A = 5;
i.U1 = 6;
i.V1 = 7;
i.X2 = 8;
i.Y2 = 9;
i.C2R = 10;
i.C2G = 11;
i.C2B = 12;
i.C2A = 13;
i.U2 = 14;
i.V2 = 15;
i.X3 = 16;
i.Y3 = 17;
i.C3R = 18;
i.C3G = 19;
i.C3B = 20;
i.C3A = 21;
i.U3 = 22;
i.V3 = 23;
i.X4 = 24;
i.Y4 = 25;
i.C4R = 26;
i.C4G = 27;
i.C4B = 28;
i.C4A = 29;
i.U4 = 30;
i.V4 = 31;
return i;
})(t.Attachment);
t.RegionAttachment = e;
})(s || (s = {}));
(function(t) {
(function(t) {
t[t.Normal = 0] = "Normal";
t[t.Additive = 1] = "Additive";
t[t.Multiply = 2] = "Multiply";
t[t.Screen = 3] = "Screen";
})(t.BlendMode || (t.BlendMode = {}));
t.BlendMode;
})(s || (s = {}));
(function(t) {
var e = (function() {
function e(t, e, i) {
this.children = new Array();
this.x = 0;
this.y = 0;
this.rotation = 0;
this.scaleX = 0;
this.scaleY = 0;
this.shearX = 0;
this.shearY = 0;
this.ax = 0;
this.ay = 0;
this.arotation = 0;
this.ascaleX = 0;
this.ascaleY = 0;
this.ashearX = 0;
this.ashearY = 0;
this.appliedValid = !1;
this.a = 0;
this.b = 0;
this.worldX = 0;
this.c = 0;
this.d = 0;
this.worldY = 0;
this.sorted = !1;
if (null == t) throw new Error("data cannot be null.");
if (null == e) throw new Error("skeleton cannot be null.");
this.data = t;
this.skeleton = e;
this.parent = i;
this.setToSetupPose();
}
e.prototype.update = function() {
this.updateWorldTransformWith(this.x, this.y, this.rotation, this.scaleX, this.scaleY, this.shearX, this.shearY);
};
e.prototype.updateWorldTransform = function() {
this.updateWorldTransformWith(this.x, this.y, this.rotation, this.scaleX, this.scaleY, this.shearX, this.shearY);
};
e.prototype.updateWorldTransformWith = function(e, i, n, r, s, a, o) {
this.ax = e;
this.ay = i;
this.arotation = n;
this.ascaleX = r;
this.ascaleY = s;
this.ashearX = a;
this.ashearY = o;
this.appliedValid = !0;
var h = this.parent;
if (null != h) {
var l = h.a, c = h.b, u = h.c, _ = h.d;
this.worldX = l * e + c * i + h.worldX;
this.worldY = u * e + _ * i + h.worldY;
switch (this.data.transformMode) {
case t.TransformMode.Normal:
C = n + 90 + o, w = t.MathUtils.cosDeg(n + a) * r, S = t.MathUtils.cosDeg(C) * s, 
E = t.MathUtils.sinDeg(n + a) * r, D = t.MathUtils.sinDeg(C) * s;
this.a = l * w + c * E;
this.b = l * S + c * D;
this.c = u * w + _ * E;
this.d = u * S + _ * D;
return;

case t.TransformMode.OnlyTranslation:
C = n + 90 + o;
this.a = t.MathUtils.cosDeg(n + a) * r;
this.b = t.MathUtils.cosDeg(C) * s;
this.c = t.MathUtils.sinDeg(n + a) * r;
this.d = t.MathUtils.sinDeg(C) * s;
break;

case t.TransformMode.NoRotationOrReflection:
var m = 0;
if ((p = l * l + u * u) > 1e-4) {
c = u * (p = Math.abs(l * _ - c * u) / p);
_ = l * p;
m = Math.atan2(u, l) * t.MathUtils.radDeg;
} else {
l = 0;
u = 0;
m = 90 - Math.atan2(_, c) * t.MathUtils.radDeg;
}
var f = n + a - m, d = n + o - m + 90;
w = t.MathUtils.cosDeg(f) * r, S = t.MathUtils.cosDeg(d) * s, E = t.MathUtils.sinDeg(f) * r, 
D = t.MathUtils.sinDeg(d) * s;
this.a = l * w - c * E;
this.b = l * S - c * D;
this.c = u * w + _ * E;
this.d = u * S + _ * D;
break;

case t.TransformMode.NoScale:
case t.TransformMode.NoScaleOrReflection:
var p, g = t.MathUtils.cosDeg(n), y = t.MathUtils.sinDeg(n), v = l * g + c * y, x = u * g + _ * y;
(p = Math.sqrt(v * v + x * x)) > 1e-5 && (p = 1 / p);
v *= p;
x *= p;
p = Math.sqrt(v * v + x * x);
var A = Math.PI / 2 + Math.atan2(x, v), b = Math.cos(A) * p, T = Math.sin(A) * p;
w = t.MathUtils.cosDeg(a) * r, S = t.MathUtils.cosDeg(90 + o) * s, E = t.MathUtils.sinDeg(a) * r, 
D = t.MathUtils.sinDeg(90 + o) * s;
this.a = v * w + b * E;
this.b = v * S + b * D;
this.c = x * w + T * E;
this.d = x * S + T * D;
if (this.data.transformMode != t.TransformMode.NoScaleOrReflection ? l * _ - c * u < 0 : this.skeleton.flipX != this.skeleton.flipY) {
this.b = -this.b;
this.d = -this.d;
}
return;
}
if (this.skeleton.flipX) {
this.a = -this.a;
this.b = -this.b;
}
if (this.skeleton.flipY) {
this.c = -this.c;
this.d = -this.d;
}
} else {
var C = n + 90 + o, w = t.MathUtils.cosDeg(n + a) * r, S = t.MathUtils.cosDeg(C) * s, E = t.MathUtils.sinDeg(n + a) * r, D = t.MathUtils.sinDeg(C) * s, M = this.skeleton;
if (M.flipX) {
e = -e;
w = -w;
S = -S;
}
if (M.flipY) {
i = -i;
E = -E;
D = -D;
}
this.a = w;
this.b = S;
this.c = E;
this.d = D;
this.worldX = e + M.x;
this.worldY = i + M.y;
}
};
e.prototype.setToSetupPose = function() {
var t = this.data;
this.x = t.x;
this.y = t.y;
this.rotation = t.rotation;
this.scaleX = t.scaleX;
this.scaleY = t.scaleY;
this.shearX = t.shearX;
this.shearY = t.shearY;
};
e.prototype.getWorldRotationX = function() {
return Math.atan2(this.c, this.a) * t.MathUtils.radDeg;
};
e.prototype.getWorldRotationY = function() {
return Math.atan2(this.d, this.b) * t.MathUtils.radDeg;
};
e.prototype.getWorldScaleX = function() {
return Math.sqrt(this.a * this.a + this.c * this.c);
};
e.prototype.getWorldScaleY = function() {
return Math.sqrt(this.b * this.b + this.d * this.d);
};
e.prototype.worldToLocalRotationX = function() {
var e = this.parent;
if (null == e) return this.arotation;
var i = e.a, n = e.b, r = e.c, s = e.d, a = this.a, o = this.c;
return Math.atan2(i * o - r * a, s * a - n * o) * t.MathUtils.radDeg;
};
e.prototype.worldToLocalRotationY = function() {
var e = this.parent;
if (null == e) return this.arotation;
var i = e.a, n = e.b, r = e.c, s = e.d, a = this.b, o = this.d;
return Math.atan2(i * o - r * a, s * a - n * o) * t.MathUtils.radDeg;
};
e.prototype.rotateWorld = function(e) {
var i = this.a, n = this.b, r = this.c, s = this.d, a = t.MathUtils.cosDeg(e), o = t.MathUtils.sinDeg(e);
this.a = a * i - o * r;
this.b = a * n - o * s;
this.c = o * i + a * r;
this.d = o * n + a * s;
this.appliedValid = !1;
};
e.prototype.updateAppliedTransform = function() {
this.appliedValid = !0;
var e = this.parent;
if (null != e) {
var i = e.a, n = e.b, r = e.c, s = e.d, a = 1 / (i * s - n * r), o = this.worldX - e.worldX, h = this.worldY - e.worldY;
this.ax = o * s * a - h * n * a;
this.ay = h * i * a - o * r * a;
var l = a * s, c = a * i, u = a * n, _ = a * r, m = l * this.a - u * this.c, f = l * this.b - u * this.d, d = c * this.c - _ * this.a, p = c * this.d - _ * this.b;
this.ashearX = 0;
this.ascaleX = Math.sqrt(m * m + d * d);
if (this.ascaleX > 1e-4) {
var g = m * p - f * d;
this.ascaleY = g / this.ascaleX;
this.ashearY = Math.atan2(m * f + d * p, g) * t.MathUtils.radDeg;
this.arotation = Math.atan2(d, m) * t.MathUtils.radDeg;
} else {
this.ascaleX = 0;
this.ascaleY = Math.sqrt(f * f + p * p);
this.ashearY = 0;
this.arotation = 90 - Math.atan2(p, f) * t.MathUtils.radDeg;
}
} else {
this.ax = this.worldX;
this.ay = this.worldY;
this.arotation = Math.atan2(this.c, this.a) * t.MathUtils.radDeg;
this.ascaleX = Math.sqrt(this.a * this.a + this.c * this.c);
this.ascaleY = Math.sqrt(this.b * this.b + this.d * this.d);
this.ashearX = 0;
this.ashearY = Math.atan2(this.a * this.b + this.c * this.d, this.a * this.d - this.b * this.c) * t.MathUtils.radDeg;
}
};
e.prototype.worldToLocal = function(t) {
var e = this.a, i = this.b, n = this.c, r = this.d, s = 1 / (e * r - i * n), a = t.x - this.worldX, o = t.y - this.worldY;
t.x = a * r * s - o * i * s;
t.y = o * e * s - a * n * s;
return t;
};
e.prototype.localToWorld = function(t) {
var e = t.x, i = t.y;
t.x = e * this.a + i * this.b + this.worldX;
t.y = e * this.c + i * this.d + this.worldY;
return t;
};
return e;
})();
t.Bone = e;
})(s || (s = {}));
(function(t) {
var e = (function() {
return function(t, e, n) {
this.x = 0;
this.y = 0;
this.rotation = 0;
this.scaleX = 1;
this.scaleY = 1;
this.shearX = 0;
this.shearY = 0;
this.transformMode = i.Normal;
if (t < 0) throw new Error("index must be >= 0.");
if (null == e) throw new Error("name cannot be null.");
this.index = t;
this.name = e;
this.parent = n;
};
})();
t.BoneData = e;
(function(t) {
t[t.Normal = 0] = "Normal";
t[t.OnlyTranslation = 1] = "OnlyTranslation";
t[t.NoRotationOrReflection = 2] = "NoRotationOrReflection";
t[t.NoScale = 3] = "NoScale";
t[t.NoScaleOrReflection = 4] = "NoScaleOrReflection";
})(t.TransformMode || (t.TransformMode = {}));
var i = t.TransformMode;
})(s || (s = {}));
(function(t) {
var e = (function() {
return function(t, e) {
if (null == e) throw new Error("data cannot be null.");
this.time = t;
this.data = e;
};
})();
t.Event = e;
})(s || (s = {}));
(function(t) {
var e = (function() {
return function(t) {
this.name = t;
};
})();
t.EventData = e;
})(s || (s = {}));
(function(t) {
var e = (function() {
function e(t, e) {
this.mix = 1;
this.bendDirection = 0;
if (null == t) throw new Error("data cannot be null.");
if (null == e) throw new Error("skeleton cannot be null.");
this.data = t;
this.mix = t.mix;
this.bendDirection = t.bendDirection;
this.bones = new Array();
for (var i = 0; i < t.bones.length; i++) this.bones.push(e.findBone(t.bones[i].name));
this.target = e.findBone(t.target.name);
}
e.prototype.getOrder = function() {
return this.data.order;
};
e.prototype.apply = function() {
this.update();
};
e.prototype.update = function() {
var t = this.target, e = this.bones;
switch (e.length) {
case 1:
this.apply1(e[0], t.worldX, t.worldY, this.mix);
break;

case 2:
this.apply2(e[0], e[1], t.worldX, t.worldY, this.bendDirection, this.mix);
}
};
e.prototype.apply1 = function(e, i, n, r) {
e.appliedValid || e.updateAppliedTransform();
var s = e.parent, a = 1 / (s.a * s.d - s.b * s.c), o = i - s.worldX, h = n - s.worldY, l = (o * s.d - h * s.b) * a - e.ax, c = (h * s.a - o * s.c) * a - e.ay, u = Math.atan2(c, l) * t.MathUtils.radDeg - e.ashearX - e.arotation;
e.ascaleX < 0 && (u += 180);
u > 180 ? u -= 360 : u < -180 && (u += 360);
e.updateWorldTransformWith(e.ax, e.ay, e.arotation + u * r, e.ascaleX, e.ascaleY, e.ashearX, e.ashearY);
};
e.prototype.apply2 = function(e, i, n, r, s, a) {
if (0 != a) {
e.appliedValid || e.updateAppliedTransform();
i.appliedValid || i.updateAppliedTransform();
var o = e.ax, h = e.ay, l = e.ascaleX, c = e.ascaleY, u = i.ascaleX, _ = 0, m = 0, f = 0;
if (l < 0) {
l = -l;
_ = 180;
f = -1;
} else {
_ = 0;
f = 1;
}
if (c < 0) {
c = -c;
f = -f;
}
if (u < 0) {
u = -u;
m = 180;
} else m = 0;
var d = i.ax, p = 0, g = 0, y = 0, v = e.a, x = e.b, A = e.c, b = e.d, T = Math.abs(l - c) <= 1e-4;
if (T) {
g = v * d + x * (p = i.ay) + e.worldX;
y = A * d + b * p + e.worldY;
} else {
p = 0;
g = v * d + e.worldX;
y = A * d + e.worldY;
}
var C = e.parent;
v = C.a;
x = C.b;
A = C.c;
var w = 1 / (v * (b = C.d) - x * A), S = n - C.worldX, E = r - C.worldY, D = (S * b - E * x) * w - o, M = (E * v - S * A) * w - h, I = ((S = g - C.worldX) * b - (E = y - C.worldY) * x) * w - o, P = (E * v - S * A) * w - h, B = Math.sqrt(I * I + P * P), R = i.data.length * u, L = 0, O = 0;
t: if (T) {
var F = (D * D + M * M - B * B - (R *= l) * R) / (2 * B * R);
F < -1 ? F = -1 : F > 1 && (F = 1);
O = Math.acos(F) * s;
v = B + R * F;
x = R * Math.sin(O);
L = Math.atan2(M * v - D * x, D * v + M * x);
} else {
var N = (v = l * R) * v, k = (x = c * R) * x, z = D * D + M * M, G = Math.atan2(M, D), U = -2 * k * B, V = k - N;
if ((b = U * U - 4 * V * (A = k * B * B + N * z - N * k)) >= 0) {
var j = Math.sqrt(b);
U < 0 && (j = -j);
var W = (j = -(U + j) / 2) / V, H = A / j, q = Math.abs(W) < Math.abs(H) ? W : H;
if (q * q <= z) {
E = Math.sqrt(z - q * q) * s;
L = G - Math.atan2(E, q);
O = Math.atan2(E / c, (q - B) / l);
break t;
}
}
var X = 0, Y = Number.MAX_VALUE, J = 0, Z = 0, K = 0, Q = 0, $ = 0, tt = 0;
if ((b = (S = B + v) * S) > Q) {
K = 0;
Q = b;
$ = S;
}
if ((b = (S = B - v) * S) < Y) {
X = t.MathUtils.PI;
Y = b;
J = S;
}
var et = Math.acos(-v * B / (N - k));
if ((b = (S = v * Math.cos(et) + B) * S + (E = x * Math.sin(et)) * E) < Y) {
X = et;
Y = b;
J = S;
Z = E;
}
if (b > Q) {
K = et;
Q = b;
$ = S;
tt = E;
}
if (z <= (Y + Q) / 2) {
L = G - Math.atan2(Z * s, J);
O = X * s;
} else {
L = G - Math.atan2(tt * s, $);
O = K * s;
}
}
var it = Math.atan2(p, d) * f, nt = e.arotation;
(L = (L - it) * t.MathUtils.radDeg + _ - nt) > 180 ? L -= 360 : L < -180 && (L += 360);
e.updateWorldTransformWith(o, h, nt + L * a, e.ascaleX, e.ascaleY, 0, 0);
nt = i.arotation;
(O = ((O + it) * t.MathUtils.radDeg - i.ashearX) * f + m - nt) > 180 ? O -= 360 : O < -180 && (O += 360);
i.updateWorldTransformWith(d, p, nt + O * a, i.ascaleX, i.ascaleY, i.ashearX, i.ashearY);
} else i.updateWorldTransform();
};
return e;
})();
t.IkConstraint = e;
})(s || (s = {}));
(function(t) {
var e = (function() {
return function(t) {
this.order = 0;
this.bones = new Array();
this.bendDirection = 1;
this.mix = 1;
this.name = t;
};
})();
t.IkConstraintData = e;
})(s || (s = {}));
(function(t) {
var e = (function() {
function e(t, e) {
this.position = 0;
this.spacing = 0;
this.rotateMix = 0;
this.translateMix = 0;
this.spaces = new Array();
this.positions = new Array();
this.world = new Array();
this.curves = new Array();
this.lengths = new Array();
this.segments = new Array();
if (null == t) throw new Error("data cannot be null.");
if (null == e) throw new Error("skeleton cannot be null.");
this.data = t;
this.bones = new Array();
for (var i = 0, n = t.bones.length; i < n; i++) this.bones.push(e.findBone(t.bones[i].name));
this.target = e.findSlot(t.target.name);
this.position = t.position;
this.spacing = t.spacing;
this.rotateMix = t.rotateMix;
this.translateMix = t.translateMix;
}
e.prototype.apply = function() {
this.update();
};
e.prototype.update = function() {
var e = this.target.getAttachment();
if (e instanceof t.PathAttachment) {
var i = this.rotateMix, n = this.translateMix, r = i > 0;
if (n > 0 || r) {
var s = this.data, a = s.spacingMode, o = a == t.SpacingMode.Length, h = s.rotateMode, l = h == t.RotateMode.Tangent, c = h == t.RotateMode.ChainScale, u = this.bones.length, _ = l ? u : u + 1, m = this.bones, f = t.Utils.setArraySize(this.spaces, _), d = null, p = this.spacing;
if (c || o) {
c && (d = t.Utils.setArraySize(this.lengths, u));
for (var g = 0, y = _ - 1; g < y; ) {
var v = (D = m[g]).data.length, x = v * D.a, A = v * D.c;
v = Math.sqrt(x * x + A * A);
c && (d[g] = v);
f[++g] = o ? Math.max(0, v + p) : p;
}
} else for (g = 1; g < _; g++) f[g] = p;
var b = this.computeWorldPositions(e, _, l, s.positionMode == t.PositionMode.Percent, a == t.SpacingMode.Percent), T = b[0], C = b[1], w = s.offsetRotation, S = !1;
if (0 == w) S = h == t.RotateMode.Chain; else {
S = !1;
w *= (E = this.target.bone).a * E.d - E.b * E.c > 0 ? t.MathUtils.degRad : -t.MathUtils.degRad;
}
g = 0;
for (var E = 3; g < u; g++, E += 3) {
var D;
(D = m[g]).worldX += (T - D.worldX) * n;
D.worldY += (C - D.worldY) * n;
var M = (x = b[E]) - T, I = (A = b[E + 1]) - C;
if (c) {
var P = d[g];
if (0 != P) {
var B = (Math.sqrt(M * M + I * I) / P - 1) * i + 1;
D.a *= B;
D.c *= B;
}
}
T = x;
C = A;
if (r) {
var R = D.a, L = D.b, O = D.c, F = D.d, N = 0, k = 0, z = 0;
N = l ? b[E - 1] : 0 == f[g + 1] ? b[E + 2] : Math.atan2(I, M);
N -= Math.atan2(O, R);
if (S) {
k = Math.cos(N);
z = Math.sin(N);
var G = D.data.length;
T += (G * (k * R - z * O) - M) * i;
C += (G * (z * R + k * O) - I) * i;
} else N += w;
N > t.MathUtils.PI ? N -= t.MathUtils.PI2 : N < -t.MathUtils.PI && (N += t.MathUtils.PI2);
N *= i;
k = Math.cos(N);
z = Math.sin(N);
D.a = k * R - z * O;
D.b = k * L - z * F;
D.c = z * R + k * O;
D.d = z * L + k * F;
}
D.appliedValid = !1;
}
}
}
};
e.prototype.computeWorldPositions = function(i, n, r, s, a) {
var o = this.target, h = this.position, l = this.spaces, c = t.Utils.setArraySize(this.positions, 3 * n + 2), u = null, _ = i.closed, m = i.worldVerticesLength, f = m / 6, d = e.NONE;
if (!i.constantSpeed) {
var p = i.lengths, g = p[f -= _ ? 1 : 2];
s && (h *= g);
if (a) for (var y = 0; y < n; y++) l[y] *= g;
u = t.Utils.setArraySize(this.world, 8);
y = 0;
for (var v = 0, x = 0; y < n; y++, v += 3) {
var A = h += H = l[y];
if (_) {
(A %= g) < 0 && (A += g);
x = 0;
} else {
if (A < 0) {
if (d != e.BEFORE) {
d = e.BEFORE;
i.computeWorldVerticesWith(o, 2, 4, u, 0);
}
this.addBeforePosition(A, u, 0, c, v);
continue;
}
if (A > g) {
if (d != e.AFTER) {
d = e.AFTER;
i.computeWorldVerticesWith(o, m - 6, 4, u, 0);
}
this.addAfterPosition(A - g, u, 0, c, v);
continue;
}
}
for (;;x++) {
var b = p[x];
if (!(A > b)) {
if (0 == x) A /= b; else {
A = (A - (J = p[x - 1])) / (b - J);
}
break;
}
}
if (x != d) {
d = x;
if (_ && x == f) {
i.computeWorldVerticesWith(o, m - 4, 4, u, 0);
i.computeWorldVerticesWith(o, 0, 4, u, 4);
} else i.computeWorldVerticesWith(o, 6 * x + 2, 8, u, 0);
}
this.addCurvePosition(A, u[0], u[1], u[2], u[3], u[4], u[5], u[6], u[7], c, v, r || y > 0 && 0 == H);
}
return c;
}
if (_) {
m += 2;
u = t.Utils.setArraySize(this.world, m);
i.computeWorldVerticesWith(o, 2, m - 4, u, 0);
i.computeWorldVerticesWith(o, 0, 2, u, m - 4);
u[m - 2] = u[0];
u[m - 1] = u[1];
} else {
f--;
m -= 4;
u = t.Utils.setArraySize(this.world, m);
i.computeWorldVerticesWith(o, 2, m, u, 0);
}
for (var T = t.Utils.setArraySize(this.curves, f), C = 0, w = u[0], S = u[1], E = 0, D = 0, M = 0, I = 0, P = 0, B = 0, R = 0, L = 0, O = 0, F = 0, N = 0, k = 0, z = 0, G = 0, U = (y = 0, 
2); y < f; y++, U += 6) {
E = u[U];
D = u[U + 1];
M = u[U + 2];
I = u[U + 3];
P = u[U + 4];
B = u[U + 5];
N = 2 * (R = .1875 * (w - 2 * E + M)) + (O = .09375 * (3 * (E - M) - w + P));
k = 2 * (L = .1875 * (S - 2 * D + I)) + (F = .09375 * (3 * (D - I) - S + B));
z = .75 * (E - w) + R + .16666667 * O;
G = .75 * (D - S) + L + .16666667 * F;
C += Math.sqrt(z * z + G * G);
z += N;
G += k;
N += O;
k += F;
C += Math.sqrt(z * z + G * G);
z += N;
G += k;
C += Math.sqrt(z * z + G * G);
z += N + O;
G += k + F;
C += Math.sqrt(z * z + G * G);
T[y] = C;
w = P;
S = B;
}
s && (h *= C);
if (a) for (y = 0; y < n; y++) l[y] *= C;
for (var V = this.segments, j = 0, W = (y = 0, v = 0, x = 0, 0); y < n; y++, v += 3) {
var H;
A = h += H = l[y];
if (_) {
(A %= C) < 0 && (A += C);
x = 0;
} else {
if (A < 0) {
this.addBeforePosition(A, u, 0, c, v);
continue;
}
if (A > C) {
this.addAfterPosition(A - C, u, m - 4, c, v);
continue;
}
}
for (;;x++) {
var q = T[x];
if (!(A > q)) {
if (0 == x) A /= q; else {
A = (A - (J = T[x - 1])) / (q - J);
}
break;
}
}
if (x != d) {
d = x;
var X = 6 * x;
w = u[X];
S = u[X + 1];
E = u[X + 2];
D = u[X + 3];
M = u[X + 4];
I = u[X + 5];
P = u[X + 6];
B = u[X + 7];
N = 2 * (R = .03 * (w - 2 * E + M)) + (O = .006 * (3 * (E - M) - w + P));
k = 2 * (L = .03 * (S - 2 * D + I)) + (F = .006 * (3 * (D - I) - S + B));
z = .3 * (E - w) + R + .16666667 * O;
G = .3 * (D - S) + L + .16666667 * F;
j = Math.sqrt(z * z + G * G);
V[0] = j;
for (X = 1; X < 8; X++) {
z += N;
G += k;
N += O;
k += F;
j += Math.sqrt(z * z + G * G);
V[X] = j;
}
z += N;
G += k;
j += Math.sqrt(z * z + G * G);
V[8] = j;
z += N + O;
G += k + F;
j += Math.sqrt(z * z + G * G);
V[9] = j;
W = 0;
}
A *= j;
for (;;W++) {
var Y = V[W];
if (!(A > Y)) {
if (0 == W) A /= Y; else {
var J;
A = W + (A - (J = V[W - 1])) / (Y - J);
}
break;
}
}
this.addCurvePosition(.1 * A, w, S, E, D, M, I, P, B, c, v, r || y > 0 && 0 == H);
}
return c;
};
e.prototype.addBeforePosition = function(t, e, i, n, r) {
var s = e[i], a = e[i + 1], o = e[i + 2] - s, h = e[i + 3] - a, l = Math.atan2(h, o);
n[r] = s + t * Math.cos(l);
n[r + 1] = a + t * Math.sin(l);
n[r + 2] = l;
};
e.prototype.addAfterPosition = function(t, e, i, n, r) {
var s = e[i + 2], a = e[i + 3], o = s - e[i], h = a - e[i + 1], l = Math.atan2(h, o);
n[r] = s + t * Math.cos(l);
n[r + 1] = a + t * Math.sin(l);
n[r + 2] = l;
};
e.prototype.addCurvePosition = function(t, e, i, n, r, s, a, o, h, l, c, u) {
(0 == t || isNaN(t)) && (t = 1e-4);
var _ = t * t, m = _ * t, f = 1 - t, d = f * f, p = d * f, g = f * t, y = 3 * g, v = f * y, x = y * t, A = e * p + n * v + s * x + o * m, b = i * p + r * v + a * x + h * m;
l[c] = A;
l[c + 1] = b;
u && (l[c + 2] = Math.atan2(b - (i * d + r * g * 2 + a * _), A - (e * d + n * g * 2 + s * _)));
};
e.prototype.getOrder = function() {
return this.data.order;
};
e.NONE = -1;
e.BEFORE = -2;
e.AFTER = -3;
return e;
})();
t.PathConstraint = e;
})(s || (s = {}));
(function(t) {
var e = (function() {
return function(t) {
this.order = 0;
this.bones = new Array();
this.name = t;
};
})();
t.PathConstraintData = e;
(function(t) {
t[t.Fixed = 0] = "Fixed";
t[t.Percent = 1] = "Percent";
})(t.PositionMode || (t.PositionMode = {}));
t.PositionMode;
(function(t) {
t[t.Length = 0] = "Length";
t[t.Fixed = 1] = "Fixed";
t[t.Percent = 2] = "Percent";
})(t.SpacingMode || (t.SpacingMode = {}));
t.SpacingMode;
(function(t) {
t[t.Tangent = 0] = "Tangent";
t[t.Chain = 1] = "Chain";
t[t.ChainScale = 2] = "ChainScale";
})(t.RotateMode || (t.RotateMode = {}));
t.RotateMode;
})(s || (s = {}));
(function(t) {
var e = (function() {
function t(t) {
this.toLoad = new Array();
this.assets = {};
this.clientId = t;
}
t.prototype.loaded = function() {
var t = 0;
for (var e in this.assets) t++;
return t;
};
return t;
})(), i = (function() {
function t(t) {
void 0 === t && (t = "");
this.clientAssets = {};
this.queuedAssets = {};
this.rawAssets = {};
this.errors = {};
this.pathPrefix = t;
}
t.prototype.queueAsset = function(t, i, n) {
var r = this.clientAssets[t];
if (null === r || void 0 === r) {
r = new e(t);
this.clientAssets[t] = r;
}
null !== i && (r.textureLoader = i);
r.toLoad.push(n);
if (this.queuedAssets[n] === n) return !1;
this.queuedAssets[n] = n;
return !0;
};
t.prototype.loadText = function(t, e) {
var i = this;
e = this.pathPrefix + e;
if (this.queueAsset(t, null, e)) {
var n = new XMLHttpRequest();
n.onreadystatechange = function() {
n.readyState == XMLHttpRequest.DONE && (n.status >= 200 && n.status < 300 ? i.rawAssets[e] = n.responseText : i.errors[e] = "Couldn't load text " + e + ": status " + n.status + ", " + n.responseText);
};
n.open("GET", e, !0);
n.send();
}
};
t.prototype.loadJson = function(t, e) {
var i = this;
e = this.pathPrefix + e;
if (this.queueAsset(t, null, e)) {
var n = new XMLHttpRequest();
n.onreadystatechange = function() {
n.readyState == XMLHttpRequest.DONE && (n.status >= 200 && n.status < 300 ? i.rawAssets[e] = JSON.parse(n.responseText) : i.errors[e] = "Couldn't load text " + e + ": status " + n.status + ", " + n.responseText);
};
n.open("GET", e, !0);
n.send();
}
};
t.prototype.loadTexture = function(t, e, i) {
var n = this;
i = this.pathPrefix + i;
if (this.queueAsset(t, e, i)) {
var r = new Image();
r.src = i;
r.crossOrigin = "anonymous";
r.onload = function(t) {
n.rawAssets[i] = r;
};
r.onerror = function(t) {
n.errors[i] = "Couldn't load image " + i;
};
}
};
t.prototype.get = function(t, e) {
e = this.pathPrefix + e;
var i = this.clientAssets[t];
return null === i || void 0 === i || i.assets[e];
};
t.prototype.updateClientAssets = function(t) {
for (var e = 0; e < t.toLoad.length; e++) {
var i = t.toLoad[e], n = t.assets[i];
if (null === n || void 0 === n) {
var r = this.rawAssets[i];
if (null === r || void 0 === r) continue;
r instanceof HTMLImageElement ? t.assets[i] = t.textureLoader(r) : t.assets[i] = r;
}
}
};
t.prototype.isLoadingComplete = function(t) {
var e = this.clientAssets[t];
if (null === e || void 0 === e) return !0;
this.updateClientAssets(e);
return e.toLoad.length == e.loaded();
};
t.prototype.dispose = function() {};
t.prototype.hasErrors = function() {
return Object.keys(this.errors).length > 0;
};
t.prototype.getErrors = function() {
return this.errors;
};
return t;
})();
t.SharedAssetManager = i;
})(s || (s = {}));
(function(t) {
var e = (function() {
function e(e) {
this._updateCache = new Array();
this.updateCacheReset = new Array();
this.time = 0;
this.flipX = !1;
this.flipY = !1;
this.x = 0;
this.y = 0;
if (null == e) throw new Error("data cannot be null.");
this.data = e;
this.bones = new Array();
for (var i = 0; i < e.bones.length; i++) {
var n = e.bones[i], r = void 0;
if (null == n.parent) r = new t.Bone(n, this, null); else {
var s = this.bones[n.parent.index];
r = new t.Bone(n, this, s);
s.children.push(r);
}
this.bones.push(r);
}
this.slots = new Array();
this.drawOrder = new Array();
for (i = 0; i < e.slots.length; i++) {
var a = e.slots[i], o = (r = this.bones[a.boneData.index], new t.Slot(a, r));
this.slots.push(o);
this.drawOrder.push(o);
}
this.ikConstraints = new Array();
for (i = 0; i < e.ikConstraints.length; i++) {
var h = e.ikConstraints[i];
this.ikConstraints.push(new t.IkConstraint(h, this));
}
this.transformConstraints = new Array();
for (i = 0; i < e.transformConstraints.length; i++) {
var l = e.transformConstraints[i];
this.transformConstraints.push(new t.TransformConstraint(l, this));
}
this.pathConstraints = new Array();
for (i = 0; i < e.pathConstraints.length; i++) {
var c = e.pathConstraints[i];
this.pathConstraints.push(new t.PathConstraint(c, this));
}
this.color = new t.Color(1, 1, 1, 1);
this.updateCache();
}
e.prototype.updateCache = function() {
this._updateCache.length = 0;
for (var t = this.bones, e = 0, i = t.length; e < i; e++) t[e].sorted = !1;
var n = this.ikConstraints, r = this.transformConstraints, s = this.pathConstraints, a = n.length, o = r.length, h = s.length, l = a + o + h;
t: for (e = 0; e < l; e++) {
for (var c = 0; c < a; c++) {
if ((u = n[c]).data.order == e) {
this.sortIkConstraint(u);
continue t;
}
}
for (c = 0; c < o; c++) {
if ((u = r[c]).data.order == e) {
this.sortTransformConstraint(u);
continue t;
}
}
for (c = 0; c < h; c++) {
var u;
if ((u = s[c]).data.order == e) {
this.sortPathConstraint(u);
continue t;
}
}
}
for (e = 0, i = t.length; e < i; e++) this.sortBone(t[e]);
};
e.prototype.sortIkConstraint = function(t) {
var e = t.target;
this.sortBone(e);
var i = t.bones, n = i[0];
this.sortBone(n);
if (i.length > 1) {
var r = i[i.length - 1];
this._updateCache.indexOf(r) > -1 || this.updateCacheReset.push(r);
}
this._updateCache.push(t);
this.sortReset(n.children);
i[i.length - 1].sorted = !0;
};
e.prototype.sortPathConstraint = function(e) {
var i = e.target, n = i.data.index, r = i.bone;
null != this.skin && this.sortPathConstraintAttachment(this.skin, n, r);
null != this.data.defaultSkin && this.data.defaultSkin != this.skin && this.sortPathConstraintAttachment(this.data.defaultSkin, n, r);
for (var s = 0, a = this.data.skins.length; s < a; s++) this.sortPathConstraintAttachment(this.data.skins[s], n, r);
var o = i.getAttachment();
o instanceof t.PathAttachment && this.sortPathConstraintAttachmentWith(o, r);
var h = e.bones, l = h.length;
for (s = 0; s < l; s++) this.sortBone(h[s]);
this._updateCache.push(e);
for (s = 0; s < l; s++) this.sortReset(h[s].children);
for (s = 0; s < l; s++) h[s].sorted = !0;
};
e.prototype.sortTransformConstraint = function(t) {
this.sortBone(t.target);
for (var e = t.bones, i = e.length, n = 0; n < i; n++) this.sortBone(e[n]);
this._updateCache.push(t);
for (n = 0; n < i; n++) this.sortReset(e[n].children);
for (n = 0; n < i; n++) e[n].sorted = !0;
};
e.prototype.sortPathConstraintAttachment = function(t, e, i) {
var n = t.attachments[e];
if (n) for (var r in n) this.sortPathConstraintAttachmentWith(n[r], i);
};
e.prototype.sortPathConstraintAttachmentWith = function(e, i) {
if (e instanceof t.PathAttachment) {
var n = e.bones;
if (null == n) this.sortBone(i); else for (var r = this.bones, s = 0; s < n.length; ) for (var a = n[s++], o = s + a; s < o; s++) {
var h = n[s];
this.sortBone(r[h]);
}
}
};
e.prototype.sortBone = function(t) {
if (!t.sorted) {
var e = t.parent;
null != e && this.sortBone(e);
t.sorted = !0;
this._updateCache.push(t);
}
};
e.prototype.sortReset = function(t) {
for (var e = 0, i = t.length; e < i; e++) {
var n = t[e];
n.sorted && this.sortReset(n.children);
n.sorted = !1;
}
};
e.prototype.updateWorldTransform = function() {
for (var t = this.updateCacheReset, e = 0, i = t.length; e < i; e++) {
var n = t[e];
n.ax = n.x;
n.ay = n.y;
n.arotation = n.rotation;
n.ascaleX = n.scaleX;
n.ascaleY = n.scaleY;
n.ashearX = n.shearX;
n.ashearY = n.shearY;
n.appliedValid = !0;
}
var r = this._updateCache;
for (e = 0, i = r.length; e < i; e++) r[e].update();
};
e.prototype.setToSetupPose = function() {
this.setBonesToSetupPose();
this.setSlotsToSetupPose();
};
e.prototype.setBonesToSetupPose = function() {
for (var t = this.bones, e = 0, i = t.length; e < i; e++) t[e].setToSetupPose();
var n = this.ikConstraints;
for (e = 0, i = n.length; e < i; e++) {
(o = n[e]).bendDirection = o.data.bendDirection;
o.mix = o.data.mix;
}
var r = this.transformConstraints;
for (e = 0, i = r.length; e < i; e++) {
var s = (o = r[e]).data;
o.rotateMix = s.rotateMix;
o.translateMix = s.translateMix;
o.scaleMix = s.scaleMix;
o.shearMix = s.shearMix;
}
var a = this.pathConstraints;
for (e = 0, i = a.length; e < i; e++) {
var o;
s = (o = a[e]).data;
o.position = s.position;
o.spacing = s.spacing;
o.rotateMix = s.rotateMix;
o.translateMix = s.translateMix;
}
};
e.prototype.setSlotsToSetupPose = function() {
var e = this.slots;
t.Utils.arrayCopy(e, 0, this.drawOrder, 0, e.length);
for (var i = 0, n = e.length; i < n; i++) e[i].setToSetupPose();
};
e.prototype.getRootBone = function() {
return 0 == this.bones.length ? null : this.bones[0];
};
e.prototype.findBone = function(t) {
if (null == t) throw new Error("boneName cannot be null.");
for (var e = this.bones, i = 0, n = e.length; i < n; i++) {
var r = e[i];
if (r.data.name == t) return r;
}
return null;
};
e.prototype.findBoneIndex = function(t) {
if (null == t) throw new Error("boneName cannot be null.");
for (var e = this.bones, i = 0, n = e.length; i < n; i++) if (e[i].data.name == t) return i;
return -1;
};
e.prototype.findSlot = function(t) {
if (null == t) throw new Error("slotName cannot be null.");
for (var e = this.slots, i = 0, n = e.length; i < n; i++) {
var r = e[i];
if (r.data.name == t) return r;
}
return null;
};
e.prototype.findSlotIndex = function(t) {
if (null == t) throw new Error("slotName cannot be null.");
for (var e = this.slots, i = 0, n = e.length; i < n; i++) if (e[i].data.name == t) return i;
return -1;
};
e.prototype.setSkinByName = function(t) {
var e = this.data.findSkin(t);
if (null == e) throw new Error("Skin not found: " + t);
this.setSkin(e);
};
e.prototype.setSkin = function(t) {
if (null != t) if (null != this.skin) t.attachAll(this, this.skin); else for (var e = this.slots, i = 0, n = e.length; i < n; i++) {
var r = e[i], s = r.data.attachmentName;
if (null != s) {
var a = t.getAttachment(i, s);
null != a && r.setAttachment(a);
}
}
this.skin = t;
};
e.prototype.getAttachmentByName = function(t, e) {
return this.getAttachment(this.data.findSlotIndex(t), e);
};
e.prototype.getAttachment = function(t, e) {
if (null == e) throw new Error("attachmentName cannot be null.");
if (null != this.skin) {
var i = this.skin.getAttachment(t, e);
if (null != i) return i;
}
return null != this.data.defaultSkin ? this.data.defaultSkin.getAttachment(t, e) : null;
};
e.prototype.setAttachment = function(t, e) {
if (null == t) throw new Error("slotName cannot be null.");
for (var i = this.slots, n = 0, r = i.length; n < r; n++) {
var s = i[n];
if (s.data.name == t) {
var a = null;
if (null != e && null == (a = this.getAttachment(n, e))) throw new Error("Attachment not found: " + e + ", for slot: " + t);
s.setAttachment(a);
return;
}
}
throw new Error("Slot not found: " + t);
};
e.prototype.findIkConstraint = function(t) {
if (null == t) throw new Error("constraintName cannot be null.");
for (var e = this.ikConstraints, i = 0, n = e.length; i < n; i++) {
var r = e[i];
if (r.data.name == t) return r;
}
return null;
};
e.prototype.findTransformConstraint = function(t) {
if (null == t) throw new Error("constraintName cannot be null.");
for (var e = this.transformConstraints, i = 0, n = e.length; i < n; i++) {
var r = e[i];
if (r.data.name == t) return r;
}
return null;
};
e.prototype.findPathConstraint = function(t) {
if (null == t) throw new Error("constraintName cannot be null.");
for (var e = this.pathConstraints, i = 0, n = e.length; i < n; i++) {
var r = e[i];
if (r.data.name == t) return r;
}
return null;
};
e.prototype.getBounds = function(e, i) {
if (null == e) throw new Error("offset cannot be null.");
if (null == i) throw new Error("size cannot be null.");
for (var n = this.drawOrder, r = Number.POSITIVE_INFINITY, s = Number.POSITIVE_INFINITY, a = Number.NEGATIVE_INFINITY, o = Number.NEGATIVE_INFINITY, h = 0, l = n.length; h < l; h++) {
var c = n[h], u = null, _ = c.getAttachment();
_ instanceof t.RegionAttachment ? u = _.updateWorldVertices(c, !1) : _ instanceof t.MeshAttachment && (u = _.updateWorldVertices(c, !0));
if (null != u) for (var m = 0, f = u.length; m < f; m += 8) {
var d = u[m], p = u[m + 1];
r = Math.min(r, d);
s = Math.min(s, p);
a = Math.max(a, d);
o = Math.max(o, p);
}
}
e.set(r, s);
i.set(a - r, o - s);
};
e.prototype.update = function(t) {
this.time += t;
};
return e;
})();
t.Skeleton = e;
})(s || (s = {}));
(function(t) {
var e = (function() {
function e() {
this.minX = 0;
this.minY = 0;
this.maxX = 0;
this.maxY = 0;
this.boundingBoxes = new Array();
this.polygons = new Array();
this.polygonPool = new t.Pool(function() {
return t.Utils.newFloatArray(16);
});
}
e.prototype.update = function(e, i) {
if (null == e) throw new Error("skeleton cannot be null.");
var n = this.boundingBoxes, r = this.polygons, s = this.polygonPool, a = e.slots, o = a.length;
n.length = 0;
s.freeAll(r);
r.length = 0;
for (var h = 0; h < o; h++) {
var l = a[h], c = l.getAttachment();
if (c instanceof t.BoundingBoxAttachment) {
var u = c;
n.push(u);
var _ = s.obtain();
_.length != u.worldVerticesLength && (_ = t.Utils.newFloatArray(u.worldVerticesLength));
r.push(_);
u.computeWorldVertices(l, _);
}
}
if (i) this.aabbCompute(); else {
this.minX = Number.POSITIVE_INFINITY;
this.minY = Number.POSITIVE_INFINITY;
this.maxX = Number.NEGATIVE_INFINITY;
this.maxY = Number.NEGATIVE_INFINITY;
}
};
e.prototype.aabbCompute = function() {
for (var t = Number.POSITIVE_INFINITY, e = Number.POSITIVE_INFINITY, i = Number.NEGATIVE_INFINITY, n = Number.NEGATIVE_INFINITY, r = this.polygons, s = 0, a = r.length; s < a; s++) for (var o = r[s], h = o, l = 0, c = o.length; l < c; l += 2) {
var u = h[l], _ = h[l + 1];
t = Math.min(t, u);
e = Math.min(e, _);
i = Math.max(i, u);
n = Math.max(n, _);
}
this.minX = t;
this.minY = e;
this.maxX = i;
this.maxY = n;
};
e.prototype.aabbContainsPoint = function(t, e) {
return t >= this.minX && t <= this.maxX && e >= this.minY && e <= this.maxY;
};
e.prototype.aabbIntersectsSegment = function(t, e, i, n) {
var r = this.minX, s = this.minY, a = this.maxX, o = this.maxY;
if (t <= r && i <= r || e <= s && n <= s || t >= a && i >= a || e >= o && n >= o) return !1;
var h = (n - e) / (i - t), l = h * (r - t) + e;
if (l > s && l < o) return !0;
if ((l = h * (a - t) + e) > s && l < o) return !0;
var c = (s - e) / h + t;
return c > r && c < a || (c = (o - e) / h + t) > r && c < a;
};
e.prototype.aabbIntersectsSkeleton = function(t) {
return this.minX < t.maxX && this.maxX > t.minX && this.minY < t.maxY && this.maxY > t.minY;
};
e.prototype.containsPoint = function(t, e) {
for (var i = this.polygons, n = 0, r = i.length; n < r; n++) if (this.containsPointPolygon(i[n], t, e)) return this.boundingBoxes[n];
return null;
};
e.prototype.containsPointPolygon = function(t, e, i) {
for (var n = t, r = t.length, s = r - 2, a = !1, o = 0; o < r; o += 2) {
var h = n[o + 1], l = n[s + 1];
if (h < i && l >= i || l < i && h >= i) {
var c = n[o];
c + (i - h) / (l - h) * (n[s] - c) < e && (a = !a);
}
s = o;
}
return a;
};
e.prototype.intersectsSegment = function(t, e, i, n) {
for (var r = this.polygons, s = 0, a = r.length; s < a; s++) if (this.intersectsSegmentPolygon(r[s], t, e, i, n)) return this.boundingBoxes[s];
return null;
};
e.prototype.intersectsSegmentPolygon = function(t, e, i, n, r) {
for (var s = t, a = t.length, o = e - n, h = i - r, l = e * r - i * n, c = s[a - 2], u = s[a - 1], _ = 0; _ < a; _ += 2) {
var m = s[_], f = s[_ + 1], d = c * f - u * m, p = c - m, g = u - f, y = o * g - h * p, v = (l * p - o * d) / y;
if ((v >= c && v <= m || v >= m && v <= c) && (v >= e && v <= n || v >= n && v <= e)) {
var x = (l * g - h * d) / y;
if ((x >= u && x <= f || x >= f && x <= u) && (x >= i && x <= r || x >= r && x <= i)) return !0;
}
c = m;
u = f;
}
return !1;
};
e.prototype.getPolygon = function(t) {
if (null == t) throw new Error("boundingBox cannot be null.");
var e = this.boundingBoxes.indexOf(t);
return -1 == e ? null : this.polygons[e];
};
e.prototype.getWidth = function() {
return this.maxX - this.minX;
};
e.prototype.getHeight = function() {
return this.maxY - this.minY;
};
return e;
})();
t.SkeletonBounds = e;
})(s || (s = {}));
(function(t) {
var e = (function() {
function t() {
this.bones = new Array();
this.slots = new Array();
this.skins = new Array();
this.events = new Array();
this.animations = new Array();
this.ikConstraints = new Array();
this.transformConstraints = new Array();
this.pathConstraints = new Array();
this.fps = 0;
}
t.prototype.findBone = function(t) {
if (null == t) throw new Error("boneName cannot be null.");
for (var e = this.bones, i = 0, n = e.length; i < n; i++) {
var r = e[i];
if (r.name == t) return r;
}
return null;
};
t.prototype.findBoneIndex = function(t) {
if (null == t) throw new Error("boneName cannot be null.");
for (var e = this.bones, i = 0, n = e.length; i < n; i++) if (e[i].name == t) return i;
return -1;
};
t.prototype.findSlot = function(t) {
if (null == t) throw new Error("slotName cannot be null.");
for (var e = this.slots, i = 0, n = e.length; i < n; i++) {
var r = e[i];
if (r.name == t) return r;
}
return null;
};
t.prototype.findSlotIndex = function(t) {
if (null == t) throw new Error("slotName cannot be null.");
for (var e = this.slots, i = 0, n = e.length; i < n; i++) if (e[i].name == t) return i;
return -1;
};
t.prototype.findSkin = function(t) {
if (null == t) throw new Error("skinName cannot be null.");
for (var e = this.skins, i = 0, n = e.length; i < n; i++) {
var r = e[i];
if (r.name == t) return r;
}
return null;
};
t.prototype.findEvent = function(t) {
if (null == t) throw new Error("eventDataName cannot be null.");
for (var e = this.events, i = 0, n = e.length; i < n; i++) {
var r = e[i];
if (r.name == t) return r;
}
return null;
};
t.prototype.findAnimation = function(t) {
if (null == t) throw new Error("animationName cannot be null.");
for (var e = this.animations, i = 0, n = e.length; i < n; i++) {
var r = e[i];
if (r.name == t) return r;
}
return null;
};
t.prototype.findIkConstraint = function(t) {
if (null == t) throw new Error("constraintName cannot be null.");
for (var e = this.ikConstraints, i = 0, n = e.length; i < n; i++) {
var r = e[i];
if (r.name == t) return r;
}
return null;
};
t.prototype.findTransformConstraint = function(t) {
if (null == t) throw new Error("constraintName cannot be null.");
for (var e = this.transformConstraints, i = 0, n = e.length; i < n; i++) {
var r = e[i];
if (r.name == t) return r;
}
return null;
};
t.prototype.findPathConstraint = function(t) {
if (null == t) throw new Error("constraintName cannot be null.");
for (var e = this.pathConstraints, i = 0, n = e.length; i < n; i++) {
var r = e[i];
if (r.name == t) return r;
}
return null;
};
t.prototype.findPathConstraintIndex = function(t) {
if (null == t) throw new Error("pathConstraintName cannot be null.");
for (var e = this.pathConstraints, i = 0, n = e.length; i < n; i++) if (e[i].name == t) return i;
return -1;
};
return t;
})();
t.SkeletonData = e;
})(s || (s = {}));
(function(i) {
var n = (function() {
function n(t) {
this.scale = 1;
this.linkedMeshes = new Array();
this.attachmentLoader = t;
}
n.prototype.readSkeletonData = function(r) {
var s = this.scale, a = new i.SkeletonData(), o = "string" === ("object" === (e = typeof r) ? t(r) : e) ? JSON.parse(r) : r, h = o.skeleton;
if (null != h) {
a.hash = h.hash;
a.version = h.spine;
a.width = h.width;
a.height = h.height;
a.fps = h.fps;
a.imagesPath = h.images;
}
if (o.bones) for (var l = 0; l < o.bones.length; l++) {
var c = o.bones[l], u = null, _ = this.getValue(c, "parent", null);
if (null != _ && null == (u = a.findBone(_))) throw new Error("Parent bone not found: " + _);
(p = new i.BoneData(a.bones.length, c.name, u)).length = this.getValue(c, "length", 0) * s;
p.x = this.getValue(c, "x", 0) * s;
p.y = this.getValue(c, "y", 0) * s;
p.rotation = this.getValue(c, "rotation", 0);
p.scaleX = this.getValue(c, "scaleX", 1);
p.scaleY = this.getValue(c, "scaleY", 1);
p.shearX = this.getValue(c, "shearX", 0);
p.shearY = this.getValue(c, "shearY", 0);
p.transformMode = n.transformModeFromString(this.getValue(c, "transform", "normal"));
a.bones.push(p);
}
if (o.slots) for (l = 0; l < o.slots.length; l++) {
var m = (S = o.slots[l]).name, f = S.bone, d = a.findBone(f);
if (null == d) throw new Error("Slot bone not found: " + f);
var p = new i.SlotData(a.slots.length, m, d), g = this.getValue(S, "color", null);
null != g && p.color.setFromString(g);
p.attachmentName = this.getValue(S, "attachment", null);
p.blendMode = n.blendModeFromString(this.getValue(S, "blend", "normal"));
a.slots.push(p);
}
if (o.ik) for (l = 0; l < o.ik.length; l++) {
var y = o.ik[l];
(p = new i.IkConstraintData(y.name)).order = this.getValue(y, "order", 0);
for (var v = 0; v < y.bones.length; v++) {
f = y.bones[v];
if (null == (A = a.findBone(f))) throw new Error("IK bone not found: " + f);
p.bones.push(A);
}
var x = y.target;
p.target = a.findBone(x);
if (null == p.target) throw new Error("IK target bone not found: " + x);
p.bendDirection = this.getValue(y, "bendPositive", !0) ? 1 : -1;
p.mix = this.getValue(y, "mix", 1);
a.ikConstraints.push(p);
}
if (o.transform) for (l = 0; l < o.transform.length; l++) {
y = o.transform[l];
(p = new i.TransformConstraintData(y.name)).order = this.getValue(y, "order", 0);
for (v = 0; v < y.bones.length; v++) {
f = y.bones[v];
if (null == (A = a.findBone(f))) throw new Error("Transform constraint bone not found: " + f);
p.bones.push(A);
}
x = y.target;
p.target = a.findBone(x);
if (null == p.target) throw new Error("Transform constraint target bone not found: " + x);
p.offsetRotation = this.getValue(y, "rotation", 0);
p.offsetX = this.getValue(y, "x", 0) * s;
p.offsetY = this.getValue(y, "y", 0) * s;
p.offsetScaleX = this.getValue(y, "scaleX", 0);
p.offsetScaleY = this.getValue(y, "scaleY", 0);
p.offsetShearY = this.getValue(y, "shearY", 0);
p.rotateMix = this.getValue(y, "rotateMix", 1);
p.translateMix = this.getValue(y, "translateMix", 1);
p.scaleMix = this.getValue(y, "scaleMix", 1);
p.shearMix = this.getValue(y, "shearMix", 1);
a.transformConstraints.push(p);
}
if (o.path) for (l = 0; l < o.path.length; l++) {
y = o.path[l];
(p = new i.PathConstraintData(y.name)).order = this.getValue(y, "order", 0);
for (v = 0; v < y.bones.length; v++) {
var A;
f = y.bones[v];
if (null == (A = a.findBone(f))) throw new Error("Transform constraint bone not found: " + f);
p.bones.push(A);
}
x = y.target;
p.target = a.findSlot(x);
if (null == p.target) throw new Error("Path target slot not found: " + x);
p.positionMode = n.positionModeFromString(this.getValue(y, "positionMode", "percent"));
p.spacingMode = n.spacingModeFromString(this.getValue(y, "spacingMode", "length"));
p.rotateMode = n.rotateModeFromString(this.getValue(y, "rotateMode", "tangent"));
p.offsetRotation = this.getValue(y, "rotation", 0);
p.position = this.getValue(y, "position", 0);
p.positionMode == i.PositionMode.Fixed && (p.position *= s);
p.spacing = this.getValue(y, "spacing", 0);
p.spacingMode != i.SpacingMode.Length && p.spacingMode != i.SpacingMode.Fixed || (p.spacing *= s);
p.rotateMix = this.getValue(y, "rotateMix", 1);
p.translateMix = this.getValue(y, "translateMix", 1);
a.pathConstraints.push(p);
}
if (o.skins) for (var b in o.skins) {
var T = o.skins[b], C = new i.Skin(b);
for (var m in T) {
var w = a.findSlotIndex(m);
if (-1 == w) throw new Error("Slot not found: " + m);
var S = T[m];
for (var E in S) {
var D = this.readAttachment(S[E], C, w, E);
null != D && C.addAttachment(w, E, D);
}
}
a.skins.push(C);
"default" == C.name && (a.defaultSkin = C);
}
l = 0;
for (var M = this.linkedMeshes.length; l < M; l++) {
var I = this.linkedMeshes[l];
if (null == (C = null == I.skin ? a.defaultSkin : a.findSkin(I.skin))) throw new Error("Skin not found: " + I.skin);
var P = C.getAttachment(I.slotIndex, I.parent);
if (null == P) throw new Error("Parent mesh not found: " + I.parent);
I.mesh.setParentMesh(P);
I.mesh.updateUVs();
}
this.linkedMeshes.length = 0;
if (o.events) for (var B in o.events) {
var R = o.events[B];
(p = new i.EventData(B)).intValue = this.getValue(R, "int", 0);
p.floatValue = this.getValue(R, "float", 0);
p.stringValue = this.getValue(R, "string", "");
a.events.push(p);
}
if (o.animations) for (var L in o.animations) {
var O = o.animations[L];
this.readAnimation(O, L, a);
}
return a;
};
n.prototype.readAttachment = function(t, e, n, s) {
var a = this.scale;
s = this.getValue(t, "name", s);
switch (this.getValue(t, "type", "region")) {
case "region":
var o = this.getValue(t, "path", s), h = this.attachmentLoader.newRegionAttachment(e, s, o);
if (null == h) return null;
h.path = o;
h.x = this.getValue(t, "x", 0) * a;
h.y = this.getValue(t, "y", 0) * a;
h.scaleX = this.getValue(t, "scaleX", 1);
h.scaleY = this.getValue(t, "scaleY", 1);
h.rotation = this.getValue(t, "rotation", 0);
h.width = t.width * a;
h.height = t.height * a;
null != (m = this.getValue(t, "color", null)) && h.color.setFromString(m);
h.updateOffset();
return h;

case "boundingbox":
var l = this.attachmentLoader.newBoundingBoxAttachment(e, s);
if (null == l) return null;
this.readVertices(t, l, t.vertexCount << 1);
null != (m = this.getValue(t, "color", null)) && l.color.setFromString(m);
return l;

case "mesh":
case "linkedmesh":
o = this.getValue(t, "path", s);
var c = this.attachmentLoader.newMeshAttachment(e, s, o);
if (null == c) return null;
c.path = o;
null != (m = this.getValue(t, "color", null)) && c.color.setFromString(m);
var u = this.getValue(t, "parent", null);
if (null != u) {
c.inheritDeform = this.getValue(t, "deform", !0);
this.linkedMeshes.push(new r(c, this.getValue(t, "skin", null), n, u));
return c;
}
var _ = t.uvs;
this.readVertices(t, c, _.length);
c.triangles = t.triangles;
c.regionUVs = _;
c.updateUVs();
c.hullLength = 2 * this.getValue(t, "hull", 0);
return c;

case "path":
if (null == (o = this.attachmentLoader.newPathAttachment(e, s))) return null;
o.closed = this.getValue(t, "closed", !1);
o.constantSpeed = this.getValue(t, "constantSpeed", !0);
var m, f = t.vertexCount;
this.readVertices(t, o, f << 1);
for (var d = i.Utils.newArray(f / 3, 0), p = 0; p < t.lengths.length; p++) d[p++] = t.lengths[p] * a;
o.lengths = d;
null != (m = this.getValue(t, "color", null)) && o.color.setFromString(m);
return o;
}
return null;
};
n.prototype.readVertices = function(t, e, n) {
var r = this.scale;
e.worldVerticesLength = n;
var s = t.vertices;
if (n != s.length) {
var a = new Array(), o = new Array();
for (c = 0, u = s.length; c < u; ) {
var h = s[c++];
o.push(h);
for (var l = c + 4 * h; c < l; c += 4) {
o.push(s[c]);
a.push(s[c + 1] * r);
a.push(s[c + 2] * r);
a.push(s[c + 3]);
}
}
e.bones = o;
e.vertices = i.Utils.toFloatArray(a);
} else {
if (1 != r) for (var c = 0, u = s.length; c < u; c++) s[c] *= r;
e.vertices = i.Utils.toFloatArray(s);
}
};
n.prototype.readAnimation = function(t, e, n) {
var r = this.scale, s = new Array(), a = 0;
if (t.slots) for (var o in t.slots) {
var h = t.slots[o];
if (-1 == (X = n.findSlotIndex(o))) throw new Error("Slot not found: " + o);
for (var l in h) {
var c = h[l];
if ("color" == l) {
(y = new i.ColorTimeline(c.length)).slotIndex = X;
for (var u = 0, _ = 0; _ < c.length; _++) {
var m = c[_], f = new i.Color();
f.setFromString(m.color);
y.setFrame(u, m.time, f.r, f.g, f.b, f.a);
this.readCurve(m, y, u);
u++;
}
s.push(y);
a = Math.max(a, y.frames[(y.getFrameCount() - 1) * i.ColorTimeline.ENTRIES]);
} else {
if (!(l = "attachment")) throw new Error("Invalid timeline type for a slot: " + l + " (" + o + ")");
(y = new i.AttachmentTimeline(c.length)).slotIndex = X;
for (u = 0, _ = 0; _ < c.length; _++) {
m = c[_];
y.setFrame(u++, m.time, m.name);
}
s.push(y);
a = Math.max(a, y.frames[y.getFrameCount() - 1]);
}
}
}
if (t.bones) for (var d in t.bones) {
var p = t.bones[d], g = n.findBoneIndex(d);
if (-1 == g) throw new Error("Bone not found: " + d);
for (var l in p) {
c = p[l];
if ("rotate" === l) {
(y = new i.RotateTimeline(c.length)).boneIndex = g;
for (u = 0, _ = 0; _ < c.length; _++) {
m = c[_];
y.setFrame(u, m.time, m.angle);
this.readCurve(m, y, u);
u++;
}
s.push(y);
a = Math.max(a, y.frames[(y.getFrameCount() - 1) * i.RotateTimeline.ENTRIES]);
} else {
if ("translate" !== l && "scale" !== l && "shear" !== l) throw new Error("Invalid timeline type for a bone: " + l + " (" + d + ")");
var y = null, v = 1;
if ("scale" === l) y = new i.ScaleTimeline(c.length); else if ("shear" === l) y = new i.ShearTimeline(c.length); else {
y = new i.TranslateTimeline(c.length);
v = r;
}
y.boneIndex = g;
for (u = 0, _ = 0; _ < c.length; _++) {
m = c[_];
var x = this.getValue(m, "x", 0), A = this.getValue(m, "y", 0);
y.setFrame(u, m.time, x * v, A * v);
this.readCurve(m, y, u);
u++;
}
s.push(y);
a = Math.max(a, y.frames[(y.getFrameCount() - 1) * i.TranslateTimeline.ENTRIES]);
}
}
}
if (t.ik) for (var b in t.ik) {
var T = t.ik[b], C = n.findIkConstraint(b);
(y = new i.IkConstraintTimeline(T.length)).ikConstraintIndex = n.ikConstraints.indexOf(C);
for (u = 0, _ = 0; _ < T.length; _++) {
m = T[_];
y.setFrame(u, m.time, this.getValue(m, "mix", 1), this.getValue(m, "bendPositive", !0) ? 1 : -1);
this.readCurve(m, y, u);
u++;
}
s.push(y);
a = Math.max(a, y.frames[(y.getFrameCount() - 1) * i.IkConstraintTimeline.ENTRIES]);
}
if (t.transform) for (var b in t.transform) {
T = t.transform[b], C = n.findTransformConstraint(b);
(y = new i.TransformConstraintTimeline(T.length)).transformConstraintIndex = n.transformConstraints.indexOf(C);
for (u = 0, _ = 0; _ < T.length; _++) {
m = T[_];
y.setFrame(u, m.time, this.getValue(m, "rotateMix", 1), this.getValue(m, "translateMix", 1), this.getValue(m, "scaleMix", 1), this.getValue(m, "shearMix", 1));
this.readCurve(m, y, u);
u++;
}
s.push(y);
a = Math.max(a, y.frames[(y.getFrameCount() - 1) * i.TransformConstraintTimeline.ENTRIES]);
}
if (t.paths) for (var b in t.paths) {
T = t.paths[b];
var w = n.findPathConstraintIndex(b);
if (-1 == w) throw new Error("Path constraint not found: " + b);
var S = n.pathConstraints[w];
for (var l in T) {
c = T[l];
if ("position" === l || "spacing" === l) {
y = null, v = 1;
if ("spacing" === l) {
y = new i.PathConstraintSpacingTimeline(c.length);
S.spacingMode != i.SpacingMode.Length && S.spacingMode != i.SpacingMode.Fixed || (v = r);
} else {
y = new i.PathConstraintPositionTimeline(c.length);
S.positionMode == i.PositionMode.Fixed && (v = r);
}
y.pathConstraintIndex = w;
for (u = 0, _ = 0; _ < c.length; _++) {
m = c[_];
y.setFrame(u, m.time, this.getValue(m, l, 0) * v);
this.readCurve(m, y, u);
u++;
}
s.push(y);
a = Math.max(a, y.frames[(y.getFrameCount() - 1) * i.PathConstraintPositionTimeline.ENTRIES]);
} else if ("mix" === l) {
(y = new i.PathConstraintMixTimeline(c.length)).pathConstraintIndex = w;
for (u = 0, _ = 0; _ < c.length; _++) {
m = c[_];
y.setFrame(u, m.time, this.getValue(m, "rotateMix", 1), this.getValue(m, "translateMix", 1));
this.readCurve(m, y, u);
u++;
}
s.push(y);
a = Math.max(a, y.frames[(y.getFrameCount() - 1) * i.PathConstraintMixTimeline.ENTRIES]);
}
}
}
if (t.deform) for (var E in t.deform) {
var D = t.deform[E], M = n.findSkin(E);
if (null == M) throw new Error("Skin not found: " + E);
for (var o in D) {
h = D[o];
if (-1 == (X = n.findSlotIndex(o))) throw new Error("Slot not found: " + h.name);
for (var l in h) {
c = h[l];
var I = M.getAttachment(X, l);
if (null == I) throw new Error("Deform attachment not found: " + c.name);
var P = null != I.bones, B = I.vertices, R = P ? B.length / 3 * 2 : B.length;
(y = new i.DeformTimeline(c.length)).slotIndex = X;
y.attachment = I;
u = 0;
for (var L = 0; L < c.length; L++) {
m = c[L];
var O = void 0, F = this.getValue(m, "vertices", null);
if (null == F) O = P ? i.Utils.newFloatArray(R) : B; else {
O = i.Utils.newFloatArray(R);
var N = this.getValue(m, "offset", 0);
i.Utils.arrayCopy(F, 0, O, N, F.length);
if (1 != r) for (var k = (_ = N) + F.length; _ < k; _++) O[_] *= r;
if (!P) for (_ = 0; _ < R; _++) O[_] += B[_];
}
y.setFrame(u, m.time, O);
this.readCurve(m, y, u);
u++;
}
s.push(y);
a = Math.max(a, y.frames[y.getFrameCount() - 1]);
}
}
}
var z = t.drawOrder;
null == z && (z = t.draworder);
if (null != z) {
y = new i.DrawOrderTimeline(z.length);
var G = n.slots.length;
for (u = 0, L = 0; L < z.length; L++) {
var U = z[L], V = null, j = this.getValue(U, "offsets", null);
if (null != j) {
V = i.Utils.newArray(G, -1);
var W = i.Utils.newArray(G - j.length, 0), H = 0, q = 0;
for (_ = 0; _ < j.length; _++) {
var X, Y = j[_];
if (-1 == (X = n.findSlotIndex(Y.slot))) throw new Error("Slot not found: " + Y.slot);
for (;H != X; ) W[q++] = H++;
V[H + Y.offset] = H++;
}
for (;H < G; ) W[q++] = H++;
for (_ = G - 1; _ >= 0; _--) -1 == V[_] && (V[_] = W[--q]);
}
y.setFrame(u++, U.time, V);
}
s.push(y);
a = Math.max(a, y.frames[y.getFrameCount() - 1]);
}
if (t.events) {
for (y = new i.EventTimeline(t.events.length), u = 0, _ = 0; _ < t.events.length; _++) {
var J = t.events[_], Z = n.findEvent(J.name);
if (null == Z) throw new Error("Event not found: " + J.name);
var K = new i.Event(J.time, Z);
K.intValue = this.getValue(J, "int", Z.intValue);
K.floatValue = this.getValue(J, "float", Z.floatValue);
K.stringValue = this.getValue(J, "string", Z.stringValue);
y.setFrame(u++, K);
}
s.push(y);
a = Math.max(a, y.frames[y.getFrameCount() - 1]);
}
if (isNaN(a)) throw new Error("Error while parsing animation, duration is NaN");
n.animations.push(new i.Animation(e, s, a));
};
n.prototype.readCurve = function(t, e, i) {
if (t.curve) if ("stepped" === t.curve) e.setStepped(i); else if ("[object Array]" === Object.prototype.toString.call(t.curve)) {
var n = t.curve;
e.setCurve(i, n[0], n[1], n[2], n[3]);
}
};
n.prototype.getValue = function(t, e, i) {
return void 0 !== t[e] ? t[e] : i;
};
n.blendModeFromString = function(t) {
if ("normal" == (t = t.toLowerCase())) return i.BlendMode.Normal;
if ("additive" == t) return i.BlendMode.Additive;
if ("multiply" == t) return i.BlendMode.Multiply;
if ("screen" == t) return i.BlendMode.Screen;
throw new Error("Unknown blend mode: " + t);
};
n.positionModeFromString = function(t) {
if ("fixed" == (t = t.toLowerCase())) return i.PositionMode.Fixed;
if ("percent" == t) return i.PositionMode.Percent;
throw new Error("Unknown position mode: " + t);
};
n.spacingModeFromString = function(t) {
if ("length" == (t = t.toLowerCase())) return i.SpacingMode.Length;
if ("fixed" == t) return i.SpacingMode.Fixed;
if ("percent" == t) return i.SpacingMode.Percent;
throw new Error("Unknown position mode: " + t);
};
n.rotateModeFromString = function(t) {
if ("tangent" == (t = t.toLowerCase())) return i.RotateMode.Tangent;
if ("chain" == t) return i.RotateMode.Chain;
if ("chainscale" == t) return i.RotateMode.ChainScale;
throw new Error("Unknown rotate mode: " + t);
};
n.transformModeFromString = function(t) {
if ("normal" == (t = t.toLowerCase())) return i.TransformMode.Normal;
if ("onlytranslation" == t) return i.TransformMode.OnlyTranslation;
if ("norotationorreflection" == t) return i.TransformMode.NoRotationOrReflection;
if ("noscale" == t) return i.TransformMode.NoScale;
if ("noscaleorreflection" == t) return i.TransformMode.NoScaleOrReflection;
throw new Error("Unknown transform mode: " + t);
};
return n;
})();
i.SkeletonJson = n;
var r = (function() {
return function(t, e, i, n) {
this.mesh = t;
this.skin = e;
this.slotIndex = i;
this.parent = n;
};
})();
})(s || (s = {}));
(function(t) {
var e = (function() {
function t(t) {
this.attachments = new Array();
if (null == t) throw new Error("name cannot be null.");
this.name = t;
}
t.prototype.addAttachment = function(t, e, i) {
if (null == i) throw new Error("attachment cannot be null.");
var n = this.attachments;
t >= n.length && (n.length = t + 1);
n[t] || (n[t] = {});
n[t][e] = i;
};
t.prototype.getAttachment = function(t, e) {
var i = this.attachments[t];
return i ? i[e] : null;
};
t.prototype.attachAll = function(t, e) {
for (var i = 0, n = 0; n < t.slots.length; n++) {
var r = t.slots[n], s = r.getAttachment();
if (s && i < e.attachments.length) {
var a = e.attachments[i];
for (var o in a) {
if (s == a[o]) {
var h = this.getAttachment(i, o);
null != h && r.setAttachment(h);
break;
}
}
}
i++;
}
};
return t;
})();
t.Skin = e;
})(s || (s = {}));
(function(t) {
var e = (function() {
function e(e, i) {
this.attachmentVertices = new Array();
if (null == e) throw new Error("data cannot be null.");
if (null == i) throw new Error("bone cannot be null.");
this.data = e;
this.bone = i;
this.color = new t.Color();
this.setToSetupPose();
}
e.prototype.getAttachment = function() {
return this.attachment;
};
e.prototype.setAttachment = function(t) {
if (this.attachment != t) {
this.attachment = t;
this.attachmentTime = this.bone.skeleton.time;
this.attachmentVertices.length = 0;
}
};
e.prototype.setAttachmentTime = function(t) {
this.attachmentTime = this.bone.skeleton.time - t;
};
e.prototype.getAttachmentTime = function() {
return this.bone.skeleton.time - this.attachmentTime;
};
e.prototype.setToSetupPose = function() {
this.color.setFromColor(this.data.color);
if (null == this.data.attachmentName) this.attachment = null; else {
this.attachment = null;
this.setAttachment(this.bone.skeleton.getAttachment(this.data.index, this.data.attachmentName));
}
};
return e;
})();
t.Slot = e;
})(s || (s = {}));
(function(t) {
var e = (function() {
return function(e, i, n) {
this.color = new t.Color(1, 1, 1, 1);
if (e < 0) throw new Error("index must be >= 0.");
if (null == i) throw new Error("name cannot be null.");
if (null == n) throw new Error("boneData cannot be null.");
this.index = e;
this.name = i;
this.boneData = n;
};
})();
t.SlotData = e;
})(s || (s = {}));
(function(t) {
var e = (function() {
function t(t) {
this._image = t;
}
t.prototype.getImage = function() {
return this._image;
};
t.filterFromString = function(t) {
switch (t.toLowerCase()) {
case "nearest":
return i.Nearest;

case "linear":
return i.Linear;

case "mipmap":
return i.MipMap;

case "mipmapnearestnearest":
return i.MipMapNearestNearest;

case "mipmaplinearnearest":
return i.MipMapLinearNearest;

case "mipmapnearestlinear":
return i.MipMapNearestLinear;

case "mipmaplinearlinear":
return i.MipMapLinearLinear;

default:
throw new Error("Unknown texture filter " + t);
}
};
t.wrapFromString = function(t) {
switch (t.toLowerCase()) {
case "mirroredtepeat":
return n.MirroredRepeat;

case "clamptoedge":
return n.ClampToEdge;

case "repeat":
return n.Repeat;

default:
throw new Error("Unknown texture wrap " + t);
}
};
return t;
})();
t.Texture = e;
(function(t) {
t[t.Nearest = 9728] = "Nearest";
t[t.Linear = 9729] = "Linear";
t[t.MipMap = 9987] = "MipMap";
t[t.MipMapNearestNearest = 9984] = "MipMapNearestNearest";
t[t.MipMapLinearNearest = 9985] = "MipMapLinearNearest";
t[t.MipMapNearestLinear = 9986] = "MipMapNearestLinear";
t[t.MipMapLinearLinear = 9987] = "MipMapLinearLinear";
})(t.TextureFilter || (t.TextureFilter = {}));
var i = t.TextureFilter;
(function(t) {
t[t.MirroredRepeat = 33648] = "MirroredRepeat";
t[t.ClampToEdge = 33071] = "ClampToEdge";
t[t.Repeat = 10497] = "Repeat";
})(t.TextureWrap || (t.TextureWrap = {}));
var n = t.TextureWrap, r = (function() {
return function() {
this.u = 0;
this.v = 0;
this.u2 = 0;
this.v2 = 0;
this.width = 0;
this.height = 0;
this.rotate = !1;
this.offsetX = 0;
this.offsetY = 0;
this.originalWidth = 0;
this.originalHeight = 0;
};
})();
t.TextureRegion = r;
})(s || (s = {}));
(function(t) {
var e = (function() {
function e(t, e) {
this.pages = new Array();
this.regions = new Array();
this.load(t, e);
}
e.prototype.load = function(e, s) {
if (null == s) throw new Error("textureLoader cannot be null.");
for (var a = new i(e), o = new Array(4), h = null; ;) {
var l = a.readLine();
if (null == l) break;
if (0 == (l = l.trim()).length) h = null; else if (h) {
var c = new r();
c.name = l;
c.page = h;
c.rotate = "true" == a.readValue();
a.readTuple(o);
var u = parseInt(o[0]), _ = parseInt(o[1]);
a.readTuple(o);
var m = parseInt(o[0]), f = parseInt(o[1]);
c.u = u / h.width;
c.v = _ / h.height;
if (c.rotate) {
c.u2 = (u + f) / h.width;
c.v2 = (_ + m) / h.height;
} else {
c.u2 = (u + m) / h.width;
c.v2 = (_ + f) / h.height;
}
c.x = u;
c.y = _;
c.width = Math.abs(m);
c.height = Math.abs(f);
4 == a.readTuple(o) && 4 == a.readTuple(o) && a.readTuple(o);
c.originalWidth = parseInt(o[0]);
c.originalHeight = parseInt(o[1]);
a.readTuple(o);
c.offsetX = parseInt(o[0]);
c.offsetY = parseInt(o[1]);
c.index = parseInt(a.readValue());
c.texture = h.texture;
this.regions.push(c);
} else {
(h = new n()).name = l;
if (2 == a.readTuple(o)) {
h.width = parseInt(o[0]);
h.height = parseInt(o[1]);
a.readTuple(o);
}
a.readTuple(o);
h.minFilter = t.Texture.filterFromString(o[0]);
h.magFilter = t.Texture.filterFromString(o[1]);
var d = a.readValue();
h.uWrap = t.TextureWrap.ClampToEdge;
h.vWrap = t.TextureWrap.ClampToEdge;
"x" == d ? h.uWrap = t.TextureWrap.Repeat : "y" == d ? h.vWrap = t.TextureWrap.Repeat : "xy" == d && (h.uWrap = h.vWrap = t.TextureWrap.Repeat);
h.texture = s(l);
h.texture.setFilters(h.minFilter, h.magFilter);
h.texture.setWraps(h.uWrap, h.vWrap);
h.width = h.texture.getImage().width;
h.height = h.texture.getImage().height;
this.pages.push(h);
}
}
};
e.prototype.findRegion = function(t) {
for (var e = 0; e < this.regions.length; e++) if (this.regions[e].name == t) return this.regions[e];
return null;
};
e.prototype.dispose = function() {
for (var t = 0; t < this.pages.length; t++) this.pages[t].texture.dispose();
};
return e;
})();
t.TextureAtlas = e;
var i = (function() {
function t(t) {
this.index = 0;
this.lines = t.split(/\r\n|\r|\n/);
}
t.prototype.readLine = function() {
return this.index >= this.lines.length ? null : this.lines[this.index++];
};
t.prototype.readValue = function() {
var t = this.readLine(), e = t.indexOf(":");
if (-1 == e) throw new Error("Invalid line: " + t);
return t.substring(e + 1).trim();
};
t.prototype.readTuple = function(t) {
var e = this.readLine(), i = e.indexOf(":");
if (-1 == i) throw new Error("Invalid line: " + e);
for (var n = 0, r = i + 1; n < 3; n++) {
var s = e.indexOf(",", r);
if (-1 == s) break;
t[n] = e.substr(r, s - r).trim();
r = s + 1;
}
t[n] = e.substring(r).trim();
return n + 1;
};
return t;
})(), n = (function() {
return function() {};
})();
t.TextureAtlasPage = n;
var r = (function(t) {
a(e, t);
function e() {
t.apply(this, arguments);
}
return e;
})(t.TextureRegion);
t.TextureAtlasRegion = r;
})(s || (s = {}));
(function(t) {
var e = (function() {
function e(e, i) {
this.rotateMix = 0;
this.translateMix = 0;
this.scaleMix = 0;
this.shearMix = 0;
this.temp = new t.Vector2();
if (null == e) throw new Error("data cannot be null.");
if (null == i) throw new Error("skeleton cannot be null.");
this.data = e;
this.rotateMix = e.rotateMix;
this.translateMix = e.translateMix;
this.scaleMix = e.scaleMix;
this.shearMix = e.shearMix;
this.bones = new Array();
for (var n = 0; n < e.bones.length; n++) this.bones.push(i.findBone(e.bones[n].name));
this.target = i.findBone(e.target.name);
}
e.prototype.apply = function() {
this.update();
};
e.prototype.update = function() {
for (var e = this.rotateMix, i = this.translateMix, n = this.scaleMix, r = this.shearMix, s = this.target, a = s.a, o = s.b, h = s.c, l = s.d, c = a * l - o * h > 0 ? t.MathUtils.degRad : -t.MathUtils.degRad, u = this.data.offsetRotation * c, _ = this.data.offsetShearY * c, m = this.bones, f = 0, d = m.length; f < d; f++) {
var p = m[f], g = !1;
if (0 != e) {
var y = p.a, v = p.b, x = p.c, A = p.d;
(E = Math.atan2(h, a) - Math.atan2(x, y) + u) > t.MathUtils.PI ? E -= t.MathUtils.PI2 : E < -t.MathUtils.PI && (E += t.MathUtils.PI2);
E *= e;
var b = Math.cos(E), T = Math.sin(E);
p.a = b * y - T * x;
p.b = b * v - T * A;
p.c = T * y + b * x;
p.d = T * v + b * A;
g = !0;
}
if (0 != i) {
var C = this.temp;
s.localToWorld(C.set(this.data.offsetX, this.data.offsetY));
p.worldX += (C.x - p.worldX) * i;
p.worldY += (C.y - p.worldY) * i;
g = !0;
}
if (n > 0) {
var w = Math.sqrt(p.a * p.a + p.c * p.c), S = Math.sqrt(a * a + h * h);
w > 1e-5 && (w = (w + (S - w + this.data.offsetScaleX) * n) / w);
p.a *= w;
p.c *= w;
w = Math.sqrt(p.b * p.b + p.d * p.d);
S = Math.sqrt(o * o + l * l);
w > 1e-5 && (w = (w + (S - w + this.data.offsetScaleY) * n) / w);
p.b *= w;
p.d *= w;
g = !0;
}
if (r > 0) {
v = p.b, A = p.d;
var E, D = Math.atan2(A, v);
(E = Math.atan2(l, o) - Math.atan2(h, a) - (D - Math.atan2(p.c, p.a))) > t.MathUtils.PI ? E -= t.MathUtils.PI2 : E < -t.MathUtils.PI && (E += t.MathUtils.PI2);
E = D + (E + _) * r;
w = Math.sqrt(v * v + A * A);
p.b = Math.cos(E) * w;
p.d = Math.sin(E) * w;
g = !0;
}
g && (p.appliedValid = !1);
}
};
e.prototype.getOrder = function() {
return this.data.order;
};
return e;
})();
t.TransformConstraint = e;
})(s || (s = {}));
(function(t) {
var e = (function() {
return function(t) {
this.order = 0;
this.bones = new Array();
this.rotateMix = 0;
this.translateMix = 0;
this.scaleMix = 0;
this.shearMix = 0;
this.offsetRotation = 0;
this.offsetX = 0;
this.offsetY = 0;
this.offsetScaleX = 0;
this.offsetScaleY = 0;
this.offsetShearY = 0;
if (null == t) throw new Error("name cannot be null.");
this.name = t;
};
})();
t.TransformConstraintData = e;
})(s || (s = {}));
(function(i) {
var n = (function() {
function t() {
this.array = new Array();
}
t.prototype.add = function(t) {
var e = this.contains(t);
this.array[0 | t] = 0 | t;
return !e;
};
t.prototype.contains = function(t) {
return void 0 != this.array[0 | t];
};
t.prototype.remove = function(t) {
this.array[0 | t] = void 0;
};
t.prototype.clear = function() {
this.array.length = 0;
};
return t;
})();
i.IntSet = n;
var r = (function() {
function t(t, e, i, n) {
void 0 === t && (t = 0);
void 0 === e && (e = 0);
void 0 === i && (i = 0);
void 0 === n && (n = 0);
this.r = t;
this.g = e;
this.b = i;
this.a = n;
}
t.prototype.set = function(t, e, i, n) {
this.r = t;
this.g = e;
this.b = i;
this.a = n;
this.clamp();
return this;
};
t.prototype.setFromColor = function(t) {
this.r = t.r;
this.g = t.g;
this.b = t.b;
this.a = t.a;
return this;
};
t.prototype.setFromString = function(t) {
t = "#" == t.charAt(0) ? t.substr(1) : t;
this.r = parseInt(t.substr(0, 2), 16) / 255;
this.g = parseInt(t.substr(2, 2), 16) / 255;
this.b = parseInt(t.substr(4, 2), 16) / 255;
this.a = (8 != t.length ? 255 : parseInt(t.substr(6, 2), 16)) / 255;
return this;
};
t.prototype.add = function(t, e, i, n) {
this.r += t;
this.g += e;
this.b += i;
this.a += n;
this.clamp();
return this;
};
t.prototype.clamp = function() {
this.r < 0 ? this.r = 0 : this.r > 1 && (this.r = 1);
this.g < 0 ? this.g = 0 : this.g > 1 && (this.g = 1);
this.b < 0 ? this.b = 0 : this.b > 1 && (this.b = 1);
this.a < 0 ? this.a = 0 : this.a > 1 && (this.a = 1);
return this;
};
t.WHITE = new t(1, 1, 1, 1);
t.RED = new t(1, 0, 0, 1);
t.GREEN = new t(0, 1, 0, 1);
t.BLUE = new t(0, 0, 1, 1);
t.MAGENTA = new t(1, 0, 1, 1);
return t;
})();
i.Color = r;
var s = (function() {
function t() {}
t.clamp = function(t, e, i) {
return t < e ? e : t > i ? i : t;
};
t.cosDeg = function(e) {
return Math.cos(e * t.degRad);
};
t.sinDeg = function(e) {
return Math.sin(e * t.degRad);
};
t.signum = function(t) {
return t > 0 ? 1 : t < 0 ? -1 : 0;
};
t.toInt = function(t) {
return t > 0 ? Math.floor(t) : Math.ceil(t);
};
t.cbrt = function(t) {
var e = Math.pow(Math.abs(t), 1 / 3);
return t < 0 ? -e : e;
};
t.PI = 3.1415927;
t.PI2 = 2 * t.PI;
t.radiansToDegrees = 180 / t.PI;
t.radDeg = t.radiansToDegrees;
t.degreesToRadians = t.PI / 180;
t.degRad = t.degreesToRadians;
return t;
})();
i.MathUtils = s;
var a = (function() {
function i() {}
i.arrayCopy = function(t, e, i, n, r) {
for (var s = e, a = n; s < e + r; s++, a++) i[a] = t[s];
};
i.setArraySize = function(t, e, i) {
void 0 === i && (i = 0);
var n = t.length;
if (n == e) return t;
t.length = e;
if (n < e) for (var r = n; r < e; r++) t[r] = i;
return t;
};
i.ensureArrayCapacity = function(t, e, n) {
void 0 === n && (n = 0);
return t.length >= e ? t : i.setArraySize(t, e, n);
};
i.newArray = function(t, e) {
for (var i = new Array(t), n = 0; n < t; n++) i[n] = e;
return i;
};
i.newFloatArray = function(t) {
if (i.SUPPORTS_TYPED_ARRAYS) return new Float32Array(t);
for (var e = new Array(t), n = 0; n < e.length; n++) e[n] = 0;
return e;
};
i.toFloatArray = function(t) {
return i.SUPPORTS_TYPED_ARRAYS ? new Float32Array(t) : t;
};
i.SUPPORTS_TYPED_ARRAYS = "undefined" !== ("object" === (e = typeof Float32Array) ? t(Float32Array) : e);
return i;
})();
i.Utils = a;
var o = (function() {
function t() {}
t.logBones = function(t) {
for (var e = 0; e < t.bones.length; e++) {
var i = t.bones[e];
console.log(i.data.name + ", " + i.a + ", " + i.b + ", " + i.c + ", " + i.d + ", " + i.worldX + ", " + i.worldY);
}
};
return t;
})();
i.DebugUtils = o;
var h = (function() {
function t(t) {
this.items = new Array();
this.instantiator = t;
}
t.prototype.obtain = function() {
return this.items.length > 0 ? this.items.pop() : this.instantiator();
};
t.prototype.free = function(t) {
t.reset && t.reset();
this.items.push(t);
};
t.prototype.freeAll = function(t) {
for (var e = 0; e < t.length; e++) {
t[e].reset && t[e].reset();
this.items[e] = t[e];
}
};
t.prototype.clear = function() {
this.items.length = 0;
};
return t;
})();
i.Pool = h;
var l = (function() {
function t(t, e) {
void 0 === t && (t = 0);
void 0 === e && (e = 0);
this.x = t;
this.y = e;
}
t.prototype.set = function(t, e) {
this.x = t;
this.y = e;
return this;
};
t.prototype.length = function() {
var t = this.x, e = this.y;
return Math.sqrt(t * t + e * e);
};
t.prototype.normalize = function() {
var t = this.length();
if (0 != t) {
this.x /= t;
this.y /= t;
}
return this;
};
return t;
})();
i.Vector2 = l;
var c = (function() {
function t() {
this.maxDelta = .064;
this.framesPerSecond = 0;
this.delta = 0;
this.totalTime = 0;
this.lastTime = Date.now() / 1e3;
this.frameCount = 0;
this.frameTime = 0;
}
t.prototype.update = function() {
var t = Date.now() / 1e3;
this.delta = t - this.lastTime;
this.frameTime += this.delta;
this.totalTime += this.delta;
this.delta > this.maxDelta && (this.delta = this.maxDelta);
this.lastTime = t;
this.frameCount++;
if (this.frameTime > 1) {
this.framesPerSecond = this.frameCount / this.frameTime;
this.frameTime = 0;
this.frameCount = 0;
}
};
return t;
})();
i.TimeKeeper = c;
})(s || (s = {}));
n.exports = s;
}), {} ],
284: [ (function(t, e, i) {
var n = cc.Class({
name: "sp.SkeletonData",
extends: cc.Asset,
ctor: function() {
this.reset();
},
properties: {
_skeletonJson: null,
skeletonJson: {
get: function() {
return this._skeletonJson;
},
set: function(t) {
this._skeletonJson = t;
this.reset();
}
},
_atlasText: "",
atlasText: {
get: function() {
return this._atlasText;
},
set: function(t) {
this._atlasText = t;
this.reset();
}
},
textures: {
default: [],
type: [ cc.Texture2D ]
},
textureNames: {
default: [],
type: [ cc.String ]
},
scale: 1
},
statics: {
preventDeferredLoadDependents: !0,
preventPreloadNativeObject: !0
},
createNode: !1,
reset: function() {
this._skeletonCache = null;
this._atlasCache = null;
0;
},
getRuntimeData: function(t) {
if (this._skeletonCache) return this._skeletonCache;
if (!(this.textures && this.textures.length > 0) && this.textureNames && this.textureNames.length > 0) {
t || cc.errorID(7507, this.name);
return null;
}
var e = this._getAtlas(t);
if (!e) return null;
var i = new sp.spine.AtlasAttachmentLoader(e), n = new sp.spine.SkeletonJson(i);
n.scale = this.scale;
var r = this.skeletonJson;
this._skeletonCache = n.readSkeletonData(r);
e.dispose(n);
return this._skeletonCache;
},
getSkinsEnum: !1,
getAnimsEnum: !1,
_getTexture: function(t) {
for (var e = this.textureNames, i = 0; i < e.length; i++) if (e[i] === t) {
var n = this.textures[i], r = new sp.SkeletonTexture({
width: n.width,
height: n.height
});
r.setRealTexture(n);
return r;
}
cc.errorID(7506, t);
return null;
},
_getAtlas: function(t) {
if (this._atlasCache) return this._atlasCache;
if (!this.atlasText) {
t || cc.errorID(7508, this.name);
return null;
}
return this._atlasCache = new sp.spine.TextureAtlas(this.atlasText, this._getTexture.bind(this));
}
});
sp.SkeletonData = e.exports = n;
}), {} ],
285: [ (function(t, e, i) {
sp.SkeletonTexture = cc.Class({
name: "sp.SkeletonTexture",
extends: sp.spine.Texture,
_texture: null,
_material: null,
setRealTexture: function(t) {
this._texture = t;
},
getRealTexture: function() {
return this._texture;
},
setFilters: function(t, e) {
this._texture && this._texture.setFilters(t, e);
},
setWraps: function(t, e) {
this._texture && this._texture.setWrapMode(t, e);
},
dispose: function() {}
});
}), {} ],
286: [ (function(t, e, i) {
t("../../cocos2d/core/platform/js");
var n = t("./Skeleton"), r = t("./lib/spine"), s = t("../../cocos2d/core/renderer"), a = t("../../cocos2d/core/renderer/render-flow"), o = t("../../cocos2d/core/renderer/webgl/vertex-format").vfmtPosUvColor, h = s.renderEngine, l = h.gfx, c = h.SpriteMaterial, u = {}, _ = cc.color(0, 0, 255, 255), m = cc.color(255, 0, 0, 255), f = cc.color(0, 255, 0, 255), d = new c();
d.useModel = !0;
d.useColor = !1;
d.useTexture = !1;
d.updateHash();
function p(t, e, i) {
var n = void 0, s = void 0;
switch (t.data.blendMode) {
case r.BlendMode.Additive:
n = i ? cc.macro.ONE : cc.macro.SRC_ALPHA;
s = cc.macro.ONE;
break;

case r.BlendMode.Multiply:
n = cc.macro.DST_COLOR;
s = cc.macro.ONE_MINUS_SRC_ALPHA;
break;

case r.BlendMode.Screen:
n = cc.macro.ONE;
s = cc.macro.ONE_MINUS_SRC_COLOR;
break;

case r.BlendMode.Normal:
default:
n = i ? cc.macro.ONE : cc.macro.SRC_ALPHA;
s = cc.macro.ONE_MINUS_SRC_ALPHA;
}
var a = e.url + n + s, o = u[a];
if (o) {
if (o.texture !== e) {
o.texture = e;
o.updateHash();
}
} else {
(o = new c()).useModel = !0;
o.texture = e;
o.useColor = !1;
o._mainTech.passes[0].setBlend(l.BLEND_FUNC_ADD, n, s, l.BLEND_FUNC_ADD, n, s);
u[a] = o;
o.updateHash();
}
return o;
}
var g = {
useModel: !0,
_readAttachmentData: function(t, e, i, n, s, a) {
var o = e.updateWorldVertices(i, n), h = o.length / 8, l = t._debugRenderer;
s.dataLength += h;
for (var c = s._data, u = t.node._color, m = u.r, f = u.g, d = u.b, p = u.a, g = 0, y = o.length; g < y; g += 8) {
var v = o[g + 2] * m, x = o[g + 3] * f, A = o[g + 4] * d, b = (o[g + 5] * p << 24 >>> 0) + (A << 16) + (x << 8) + v, T = c[a];
T.x = o[g];
T.y = o[g + 1];
T.color = b;
T.u = o[g + 6];
T.v = o[g + 7];
a++;
}
if (t.debugSlots && 4 === h) {
var C = r.RegionAttachment;
l.strokeColor = _;
l.lineWidth = 5;
l.moveTo(o[C.X1], o[C.Y1]);
l.lineTo(o[C.X2], o[C.Y2]);
l.lineTo(o[C.X3], o[C.Y3]);
l.lineTo(o[C.X4], o[C.Y4]);
l.close();
l.stroke();
}
return h;
},
genRenderDatas: function(t, e) {
var i = t._skeleton, n = t.premultipliedAlpha, s = t._debugRenderer;
(t.debugBones || t.debugSlots) && s.clear();
var a = void 0, o = void 0, h = 0, l = t._renderDatas, c = l[h], u = !1;
c || (c = l[h] = t.requestRenderData());
c.dataLength = 0;
for (var g = void 0, y = null, v = null, x = 0, A = 0, b = 0, T = 0, C = 0, w = i.drawOrder.length; C < w; C++) if ((o = i.drawOrder[C]).attachment) {
a = o.attachment;
x = 0;
if (a instanceof r.RegionAttachment) {
x = 4;
b = 6;
} else {
if (!(a instanceof r.MeshAttachment)) continue;
x = a.regionUVs.length / 2;
b = a.triangles.length;
}
if (0 !== x) {
u = !1;
if (v !== (y = p(o, a.region.texture._texture, n))) {
v && (u = !0);
c.material = v = y;
}
if (u) {
c.vertexCount = A;
c.indiceCount = T;
l[++h] || (c = l[h] = t.requestRenderData());
c.dataLength = x;
c.material = v;
A = 0;
T = 0;
}
if (a instanceof r.RegionAttachment) {
(g = c._indices)[T] = A;
g[T + 1] = A + 1;
g[T + 2] = A + 2;
g[T + 3] = A + 0;
g[T + 4] = A + 2;
g[T + 5] = A + 3;
} else for (var S = a.triangles, E = 0; E < S.length; E++) g[T + E] = A + S[E];
T += b;
A += this._readAttachmentData(t, a, o, n, c, A);
}
}
c.vertexCount = A;
c.indiceCount = T;
l.length = h + 1;
if (t.debugBones) {
var D = void 0;
s.lineWidth = 5;
s.strokeColor = m;
s.fillColor = _;
for (var M = 0, I = i.bones.length; M < I; M++) {
var P = (D = i.bones[M]).data.length * D.a + D.worldX, B = D.data.length * D.c + D.worldY;
s.moveTo(D.worldX, D.worldY);
s.lineTo(P, B);
s.stroke();
s.circle(D.worldX, D.worldY, 2 * Math.PI);
s.fill();
0 === M && (s.fillColor = f);
}
}
if (t.debugBones || t.debugSlots) for (var R = s._impl._renderDatas, L = 0; L < R.length; L++) {
R[L].material = d;
l.push(R[L]);
}
},
updateRenderData: function(t, e) {
var i = t._skeleton, n = t._state;
if (i) {
var r = cc.director.getDeltaTime();
i.update(r);
if (n) {
r *= t.timeScale;
n.update(r);
n.apply(i);
}
i.updateWorldTransform();
this.genRenderDatas(t, e);
} else t._renderDatas.length = 0;
},
fillBuffers: function(t, e) {
for (var i = t._renderDatas, n = 0, r = i.length; n < r; n++) {
var s = i[n];
if (s.material !== e.material) {
e._flush();
e.node = t.node;
e.material = s.material;
}
var h = s._data, l = s._indices, c = e.getBuffer("mesh", o), u = c.byteOffset >> 2, _ = c._vData, m = c._uintVData, f = s.vertexCount, d = c._iData, p = c.indiceOffset, g = c.vertexOffset;
c.request(f, s.indiceCount);
for (var y = void 0, v = 0, x = s.dataLength; v < x; v++) {
y = h[v];
_[u++] = y.x;
_[u++] = y.y;
_[u++] = y.u;
_[u++] = y.v;
m[u++] = y.color;
}
for (var A = 0, b = l.length; A < b; A++) d[p++] = g + l[A];
}
t.node._renderFlag |= a.FLAG_UPDATE_RENDER_DATA;
}
};
n._assembler = g;
e.exports = g;
}), {
"../../cocos2d/core/platform/js": 173,
"../../cocos2d/core/renderer": 194,
"../../cocos2d/core/renderer/render-flow": 196,
"../../cocos2d/core/renderer/webgl/vertex-format": 221,
"./Skeleton": 281,
"./lib/spine": 283
} ],
287: [ (function(t, e, i) {
var n = function() {
this.start = null;
this.end = null;
this.complete = null;
this.event = null;
this.interrupt = null;
this.dispose = null;
};
n.getListeners = function(t) {
t.listener || (t.listener = new n());
return t.listener;
};
e.exports = n;
}), {} ],
288: [ (function(i, n, r) {
(function() {
"use strict";
Function.prototype._extend = function(t) {
this.prototype.parent = t;
for (var e in t.prototype) this.prototype[e] || (this.prototype[e] = t.prototype[e]);
};
Function.prototype._implement = function(t) {
return this._extend(t);
};
var i = (function() {
"undefined" === ("object" === (e = typeof performance) ? t(performance) : e) && (window.performance = {
now: function() {
return +new Date();
}
});
function i(t, e) {
this.name = t;
this.parent = e;
this.children = {};
this.startTime = 0;
this.elapsedTime = 0;
this.totalTime = 0;
this.running = !1;
this.childrenCount = 0;
}
i.prototype = {
start: function() {
this.startTime = performance.now();
this.running = !0;
},
stop: function(t) {
if (this.running) {
this.running = !1;
this.elapsedTime += performance.now() - this.startTime;
t && this.start();
for (var e in this.children) this.children[e].stop();
}
},
reset: function(t) {
if (!t) {
this.running = !0;
this.totalTime += this.elapsedTime;
this.start();
}
this.elapsedTime = 0;
for (var e in this.children) this.children[e].reset(!0);
}
};
var n = [], r = new i("root");
function s(t, e) {
if (t.name === e.parent) return t;
for (var i in t.children) {
var n;
if (n = s(t.children[i], e)) return n;
}
return null;
}
return {
create: function(t, e) {
if (!n) throw new Error("late profile creation not allowed");
var r = new i(t, e || "root");
n.push(r);
return r;
},
destroy: function(t) {
t.childrenCount--;
delete t.children[t.name];
},
init: function() {
for (;n.length; ) {
var t = n.pop();
if (t.parentNode = s(r, t)) {
t.parentNode.children[t.name] = t;
t.parentNode.childrenCount++;
} else n.unshift(t);
}
n = null;
},
reset: function() {
r.reset(!0);
},
profileRoot: r
};
})();
function r(t) {
t || console.log("Assertion failed! Pls debug.");
}
var s = Number.MAX_VALUE, a = 2.220446049250313e-16, o = Math.PI, h = 2, l = 8, c = .005, u = 2 / 180 * o, _ = 2 * c, m = 8 / 180 * o, f = .5 * o, d = f * f, p = 2 / 180 * o;
function g(t, e, i) {
this.major = t;
this.minor = e;
this.revision = i;
}
g.prototype = {
toString: function() {
return this.major + "." + this.minor + "." + this.revision;
}
};
var y = new g(2, 3, 1);
function v(t) {
return isFinite(t) && !isNaN(t);
}
var x = Math.sqrt, A = Math.atan2, b = Math.sin, T = Math.cos, C = Math.floor, w = (Math.ceil, 
x), S = A;
function E(i, n) {
if ("undefined" !== ("object" === (e = typeof i) ? t(i) : e)) {
this.x = i;
this.y = n;
} else this.x = this.y = 0;
}
E.prototype = {
Clone: function() {
return new E(this.x, this.y);
},
SetZero: function() {
this.x = 0;
this.y = 0;
return this;
},
Set: function(t, e) {
this.x = t;
this.y = e;
return this;
},
Assign: function(t) {
this.x = t.x;
this.y = t.y;
return this;
},
Negate: function() {
var t = new E();
t.Set(-this.x, -this.y);
return t;
},
get_i: function(t) {
switch (t) {
case 0:
return this.x;

case 1:
return this.y;
}
},
set_i: function(t, e) {
switch (t) {
case 0:
return this.x = e;

case 1:
return this.y = e;
}
},
Add: function(t) {
this.x += t.x;
this.y += t.y;
return this;
},
Subtract: function(t) {
this.x -= t.x;
this.y -= t.y;
return this;
},
Multiply: function(t) {
this.x *= t;
this.y *= t;
return this;
},
Invert: function() {
this.x = -this.x;
this.y = -this.y;
return this;
},
Length: function() {
return w(this.x * this.x + this.y * this.y);
},
LengthSquared: function() {
return this.x * this.x + this.y * this.y;
},
Normalize: function() {
var t = this.Length();
if (t < a) return 0;
var e = 1 / t;
this.x *= e;
this.y *= e;
return t;
},
IsValid: function() {
return v(this.x) && v(this.y);
},
Skew: function() {
return new E(-this.y, this.x);
},
_serialize: function(t) {
var e = t || [];
e[0] = this.x;
e[1] = this.y;
return e;
},
_deserialize: function(t) {
this.x = t[0];
this.y = t[1];
}
};
E.Add = function(t, e) {
return new E(t.x + e.x, t.y + e.y);
};
E.Subtract = function(t, e) {
return new E(t.x - e.x, t.y - e.y);
};
E.Equals = function(t, e) {
return t.x == e.x && t.y == e.y;
};
E.Multiply = function(t, e) {
return new E(t * e.x, t * e.y);
};
E.Negate = function(t) {
return new E(-t.x, -t.y);
};
function D(i, n, r) {
if ("undefined" !== ("object" === (e = typeof i) ? t(i) : e)) {
this.x = i;
this.y = n;
this.z = r;
}
}
D.prototype = {
Clone: function() {
return new D(this.x, this.y, this.z);
},
SetZero: function() {
this.x = 0;
this.y = 0;
this.z = 0;
},
Set: function(t, e, i) {
this.x = t;
this.y = e;
this.z = i;
},
Negate: function() {
var t = new D();
t.Set(-this.x, -this.y, -this.z);
return t;
},
Add: function(t) {
this.x += t.x;
this.y += t.y;
this.z += t.z;
},
Subtract: function(t) {
this.x -= t.x;
this.y -= t.y;
this.z -= t.z;
},
Multiply: function(t) {
this.x *= t;
this.y *= t;
this.z *= t;
},
Invert: function() {
this.x = -this.x;
this.y = -this.y;
this.z = -this.z;
return this;
},
x: 0,
y: 0,
z: 0
};
D.Multiply = function(t, e) {
return new D(t * e.x, t * e.y, t * e.z);
};
D.Add = function(t, e) {
return new D(t.x + e.x, t.y + e.y, t.z + e.z);
};
D.Subtract = function(t, e) {
return new D(t.x - e.x, t.y - e.y, t.z - e.z);
};
function M(t, e) {
this.ex = t ? t.Clone() : new E();
this.ey = e ? e.Clone() : new E();
}
M.prototype = {
Set: function(t, e) {
this.ex.Assign(t);
this.ey.Assign(e);
},
Assign: function(t) {
this.ex.Assign(t.ex);
this.ey.Assign(t.ey);
},
SetIdentity: function() {
this.ex.x = 1;
this.ey.x = 0;
this.ex.y = 0;
this.ey.y = 1;
},
SetZero: function() {
this.ex.x = 0;
this.ey.x = 0;
this.ex.y = 0;
this.ey.y = 0;
},
GetInverse: function() {
var t = this.ex.x, e = this.ey.x, i = this.ex.y, n = this.ey.y, r = new M(), s = t * n - e * i;
0 != s && (s = 1 / s);
r.ex.x = s * n;
r.ey.x = -s * e;
r.ex.y = -s * i;
r.ey.y = s * t;
return r;
},
Solve: function(t) {
var e = this.ex.x, i = this.ey.x, n = this.ex.y, r = this.ey.y, s = e * r - i * n;
0 != s && (s = 1 / s);
var a = new E();
a.x = s * (r * t.x - i * t.y);
a.y = s * (e * t.y - n * t.x);
return a;
}
};
M.Add = function(t, e) {
return new M(E.Add(t.ex, e.ex), E.Add(t.ey, e.ey));
};
function I(t, e, i) {
this.ex = t ? t.Clone() : new D();
this.ey = e ? e.Clone() : new D();
this.ez = i ? i.Clone() : new D();
}
I.prototype = {
SetZero: function() {
this.ex.SetZero();
this.ey.SetZero();
this.ez.SetZero();
},
Solve33: function(t) {
var e = U(this.ex, V(this.ey, this.ez));
0 != e && (e = 1 / e);
var i = new D();
i.x = e * U(t, V(this.ey, this.ez));
i.y = e * U(this.ex, V(t, this.ez));
i.z = e * U(this.ex, V(this.ey, t));
return i;
},
Solve22: function(t) {
var e = this.ex.x, i = this.ey.x, n = this.ex.y, r = this.ey.y, s = e * r - i * n;
0 != s && (s = 1 / s);
var a = new E();
a.x = s * (r * t.x - i * t.y);
a.y = s * (e * t.y - n * t.x);
return a;
},
GetInverse22: function(t) {
var e = this.ex.x, i = this.ey.x, n = this.ex.y, r = this.ey.y, s = e * r - i * n;
0 != s && (s = 1 / s);
t.ex.x = s * r;
t.ey.x = -s * i;
t.ex.z = 0;
t.ex.y = -s * n;
t.ey.y = s * e;
t.ey.z = 0;
t.ez.x = 0;
t.ez.y = 0;
t.ez.z = 0;
},
GetSymInverse33: function(t) {
var e = U(this.ex, V(this.ey, this.ez));
0 != e && (e = 1 / e);
var i = this.ex.x, n = this.ey.x, r = this.ez.x, s = this.ey.y, a = this.ez.y, o = this.ez.z;
t.ex.x = e * (s * o - a * a);
t.ex.y = e * (r * a - n * o);
t.ex.z = e * (n * a - r * s);
t.ey.x = t.ex.y;
t.ey.y = e * (i * o - r * r);
t.ey.z = e * (r * n - i * a);
t.ez.x = t.ex.z;
t.ez.y = t.ey.z;
t.ez.z = e * (i * s - n * n);
}
};
function P(i, n) {
if ("undefined" !== ("object" === (e = typeof n) ? t(n) : e)) {
this.s = i;
this.c = n;
} else "undefined" !== (e = typeof i, "object" === e ? t(i) : e) && this.Set(i);
}
P.prototype = {
Clone: function() {
return new P(this.s, this.c);
},
Assign: function(t) {
this.s = t.s;
this.c = t.c;
},
Set: function(t) {
this.s = b(t);
this.c = T(t);
},
SetIdentity: function() {
this.s = 0;
this.c = 1;
},
GetAngle: function() {
return S(this.s, this.c);
},
GetXAxis: function() {
return new E(this.c, this.s);
},
GetYAxis: function() {
return new E(-this.s, this.c);
},
s: 0,
c: 1
};
function B(t, e) {
this.p = new E();
this.q = new P();
if (t) {
this.p.Assign(t);
this.q.Assign(e);
}
}
B.prototype = {
Clone: function() {
return new B(this.p, this.q);
},
Assign: function(t) {
this.p.Assign(t.p);
this.q.Assign(t.q);
},
SetIdentity: function() {
this.p.SetZero();
this.q.SetIdentity();
},
Set: function(t, e) {
this.p.Assign(t);
this.q.Set(e);
}
};
function R() {
this.localCenter = new E();
this.c0 = new E();
this.c = new E();
}
R.prototype = {
Assign: function(t) {
this.localCenter.Assign(t.localCenter);
this.c0.Assign(t.c0);
this.c.Assign(t.c);
this.a = t.a;
this.a0 = t.a0;
this.alpha0 = t.alpha0;
},
Clone: function() {
var t = new R();
t.localCenter.Assign(this.localCenter);
t.c0.Assign(this.c0);
t.c.Assign(this.c);
t.a = this.a;
t.a0 = this.a0;
t.alpha0 = this.alpha0;
return t;
},
GetTransform: function(t, e) {
t.p.x = (1 - e) * this.c0.x + e * this.c.x;
t.p.y = (1 - e) * this.c0.y + e * this.c.y;
var i = (1 - e) * this.a0 + e * this.a;
t.q.Set(i);
t.p.x -= t.q.c * this.localCenter.x - t.q.s * this.localCenter.y;
t.p.y -= t.q.s * this.localCenter.x + t.q.c * this.localCenter.y;
},
Advance: function(t) {
r(this.alpha0 < 1);
var e = (t - this.alpha0) / (1 - this.alpha0);
this.c0.Add(E.Multiply(e, E.Subtract(this.c, this.c0)));
this.a0 += e * (this.a - this.a0);
this.alpha0 = t;
},
Normalize: function() {
var t = 2 * o, e = t * C(this.a0 / t);
this.a0 -= e;
this.a -= e;
},
a0: 0,
a: 0,
alpha0: 0
};
function L(t, e) {
return t.x * e.x + t.y * e.y;
}
function O(t, e) {
return t.x * e.y - t.y * e.x;
}
function F(t, e) {
return new E(e * t.y, -e * t.x);
}
function N(t, e) {
return new E(-t * e.y, t * e.x);
}
function k(t, e) {
return new E(t.ex.x * e.x + t.ey.x * e.y, t.ex.y * e.x + t.ey.y * e.y);
}
function z(t, e) {
return E.Subtract(t, e).Length();
}
function G(t, e) {
var i = E.Subtract(t, e);
return L(i, i);
}
function U(t, e) {
return t.x * e.x + t.y * e.y + t.z * e.z;
}
function V(t, e) {
return new D(t.y * e.z - t.z * e.y, t.z * e.x - t.x * e.z, t.x * e.y - t.y * e.x);
}
function j(t, e) {
return D.Add(D.Add(D.Multiply(e.x, t.ex), D.Multiply(e.y, t.ey)), D.Multiply(e.z, t.ez));
}
function W(t, e) {
return new E(t.ex.x * e.x + t.ey.x * e.y, t.ex.y * e.x + t.ey.y * e.y);
}
function H(t, e) {
var i = new P();
i.s = t.s * e.c + t.c * e.s;
i.c = t.c * e.c - t.s * e.s;
return i;
}
function q(t, e) {
var i = new P();
i.s = t.c * e.s - t.s * e.c;
i.c = t.c * e.c + t.s * e.s;
return i;
}
function X(t, e) {
return new E(t.c * e.x - t.s * e.y, t.s * e.x + t.c * e.y);
}
function Y(t, e) {
return new E(t.c * e.x + t.s * e.y, -t.s * e.x + t.c * e.y);
}
function J(t, e) {
return new E(t.q.c * e.x - t.q.s * e.y + t.p.x, t.q.s * e.x + t.q.c * e.y + t.p.y);
}
function Z(t, e) {
var i = e.x - t.p.x, n = e.y - t.p.y;
return new E(t.q.c * i + t.q.s * n, -t.q.s * i + t.q.c * n);
}
function K(t, e) {
var i = new B();
i.q = q(t.q, e.q);
var n = e.p.x - t.p.x, r = e.p.y - t.p.y;
i.p.x = t.q.c * n + t.q.s * r;
i.p.y = -t.q.s * n + t.q.c * r;
return i;
}
var Q = Math.abs;
function $(t) {
return new E(Q(t.x), Q(t.y));
}
var tt = Math.min;
function et(t, e) {
return new E(tt(t.x, e.x), tt(t.y, e.y));
}
var it = Math.max;
function nt(t, e) {
return new E(it(t.x, e.x), it(t.y, e.y));
}
function rt(t, e, i) {
return it(e, tt(t, i));
}
function st(t, e, i) {
this.r = t || 0;
this.g = e || 0;
this.b = i || 0;
}
st.prototype = {
Set: function(t, e, i) {
this.r = t;
this.g = e;
this.b = i;
}
};
function at() {}
at.prototype = {
ClearDraw: function() {},
SetFlags: function(t) {
this.m_drawFlags = t;
},
GetFlags: function() {
return this.m_drawFlags;
},
AppendFlags: function(t) {
this.m_drawFlags |= t;
},
ClearFlags: function(t) {
this.m_drawFlags &= ~t;
},
ToggleFlags: function(t) {
this.m_drawFlags ^= t;
},
DrawPolygon: function(t, e, i) {},
DrawSolidPolygon: function(t, e, i) {},
DrawCircle: function(t, e, i) {},
DrawSolidCircle: function(t, e, i, n) {},
DrawSegment: function(t, e, i) {},
DrawTransform: function(t) {},
m_drawFlags: 0
};
at.e_shapeBit = 1;
at.e_jointBit = 2;
at.e_aabbBit = 4;
at.e_centerOfMassBit = 8;
at.e_contactPoints = 16;
at.e_contactNormals = 32;
at.e_contactImpulses = 64;
at.e_frictionImpulses = 128;
at.e_statistics = 256;
at.e_profile = 512;
at.e_pairBit = 1024;
"undefined" === ("object" === (e = typeof performance) ? t(performance) : e) && (window.performance = {
now: function() {
return +new Date();
}
});
function ot() {
this.Reset();
}
ot.prototype = {
Reset: function() {
this.m_start = performance.now();
},
GetMilliseconds: function() {
return performance.now() - this.m_start;
}
};
function ht() {
this.mass = 0;
this.center = new E();
this.I = 0;
}
function lt() {
this.m_type = 0;
this.m_radius = 0;
}
lt.prototype = {
Clone: function() {},
GetType: function() {
return this.m_type;
},
GetChildCount: function() {},
TestPoint: function(t, e) {},
RayCast: function(t, e, i, n) {},
ComputeAABB: function(t, e, i) {},
ComputeMass: function(t, e) {},
_serialize: function(t) {
var e = t || {};
e.m_type = this.m_type;
e.m_radius = this.m_radius;
return e;
},
_deserialize: function(t) {
this.m_radius = t.m_radius;
}
};
lt.e_circle = 0;
lt.e_edge = 1;
lt.e_polygon = 2;
lt.e_chain = 3;
lt.e_typeCount = 4;
function ct() {
this.parent.call(this);
this.m_type = lt.e_circle;
this.m_radius = 0;
this.m_p = new E();
Object.seal(this);
}
ct.prototype = {
Clone: function() {
var t = new ct();
t.m_radius = this.m_radius;
t.m_p = this.m_p.Clone();
return t;
},
GetChildCount: function() {
return 1;
},
TestPoint: function(t, e) {
var i = E.Add(t.p, X(t.q, this.m_p)), n = E.Subtract(e, i);
return L(n, n) <= this.m_radius * this.m_radius;
},
RayCast: function(t, e, i, n) {
var r = E.Add(i.p, X(i.q, this.m_p)), s = E.Subtract(e.p1, r), o = L(s, s) - this.m_radius * this.m_radius, h = E.Subtract(e.p2, e.p1), l = L(s, h), c = L(h, h), u = l * l - c * o;
if (u < 0 || c < a) return !1;
var _ = -(l + w(u));
if (0 <= _ && _ <= e.maxFraction * c) {
_ /= c;
t.fraction = _;
t.normal = E.Add(s, E.Multiply(_, h));
t.normal.Normalize();
return !0;
}
return !1;
},
ComputeAABB: function(t, e, i) {
var n = e.p.x + (e.q.c * this.m_p.x - e.q.s * this.m_p.y), r = e.p.y + (e.q.s * this.m_p.x + e.q.c * this.m_p.y);
t.lowerBound.x = n - this.m_radius;
t.lowerBound.y = r - this.m_radius;
t.upperBound.x = n + this.m_radius;
t.upperBound.y = r + this.m_radius;
},
ComputeMass: function(t, e) {
t.mass = e * o * this.m_radius * this.m_radius;
t.center = this.m_p;
t.I = t.mass * (.5 * this.m_radius * this.m_radius + L(this.m_p, this.m_p));
},
GetSupport: function(t) {
return 0;
},
GetSupportVertex: function(t) {
return this.m_p;
},
GetVertexCount: function() {
return 1;
},
GetVertex: function(t) {
r(0 == t);
return this.m_p;
},
_serialize: function(t) {
var e = t || {};
this.parent.prototype._serialize.call(this, e);
e.m_p = this.m_p._serialize();
return e;
},
_deserialize: function(t) {
this.parent.prototype._deserialize.call(this, t);
this.m_p._deserialize(t.m_p);
}
};
ct._extend(lt);
function ut() {
this.parent.call(this);
this.m_type = lt.e_edge;
this.m_radius = _;
this.m_vertex0 = new E();
this.m_vertex1 = new E();
this.m_vertex2 = new E();
this.m_vertex3 = new E();
this.m_hasVertex0 = !1;
this.m_hasVertex3 = !1;
Object.seal(this);
}
ut.prototype = {
Set: function(t, e) {
this.m_vertex1.Assign(t);
this.m_vertex2.Assign(e);
this.m_hasVertex0 = !1;
this.m_hasVertex3 = !1;
},
Clone: function() {
var t = new ut();
t.m_vertex0 = this.m_vertex0.Clone();
t.m_vertex1 = this.m_vertex1.Clone();
t.m_vertex2 = this.m_vertex2.Clone();
t.m_vertex3 = this.m_vertex3.Clone();
t.m_hasVertex0 = this.m_hasVertex0;
t.m_hasVertex3 = this.m_hasVertex3;
return t;
},
GetChildCount: function() {
return 1;
},
TestPoint: function(t, e) {
return !1;
},
RayCast: function(t, e, i, n) {
var r = Y(i.q, E.Subtract(e.p1, i.p)), s = Y(i.q, E.Subtract(e.p2, i.p)), a = E.Subtract(s, r), o = this.m_vertex1, h = this.m_vertex2, l = E.Subtract(h, o), c = new E(l.y, -l.x);
c.Normalize();
var u = L(c, E.Subtract(o, r)), _ = L(c, a);
if (0 == _) return !1;
var m = u / _;
if (m < 0 || e.maxFraction < m) return !1;
var f = E.Add(r, E.Multiply(m, a)), d = E.Subtract(h, o), p = L(d, d);
if (0 == p) return !1;
var g = L(E.Subtract(f, o), d) / p;
if (g < 0 || 1 < g) return !1;
t.fraction = m;
t.normal = u > 0 ? X(i.q, c).Negate() : X(i.q, c);
return !0;
},
ComputeAABB: function(t, e, i) {
var n = e.q.c * this.m_vertex1.x - e.q.s * this.m_vertex1.y + e.p.x, r = e.q.s * this.m_vertex1.x + e.q.c * this.m_vertex1.y + e.p.y, s = e.q.c * this.m_vertex2.x - e.q.s * this.m_vertex2.y + e.p.x, a = e.q.s * this.m_vertex2.x + e.q.c * this.m_vertex2.y + e.p.y, o = tt(n, s), h = tt(r, a), l = it(n, s), c = it(r, a);
t.lowerBound.x = o - this.m_radius;
t.lowerBound.y = h - this.m_radius;
t.upperBound.x = l + this.m_radius;
t.upperBound.y = c + this.m_radius;
},
ComputeMass: function(t, e) {
t.mass = 0;
t.center = E.Multiply(.5, E.Add(this.m_vertex1, this.m_vertex2));
t.I = 0;
},
_serialize: function(t) {
var e = t || {};
this.parent.prototype._serialize.call(this, e);
e.m_vertex1 = this.m_vertex1._serialize();
e.m_vertex2 = this.m_vertex2._serialize();
e.m_hasVertex0 = this.m_hasVertex0;
this.m_hasVertex0 && (e.m_vertex0 = this.m_vertex0._serialize());
e.m_hasVertex3 = this.m_hasVertex3;
this.m_hasVertex3 && (e.m_vertex3 = this.m_vertex3._serialize());
return e;
},
_deserialize: function(t) {
this.parent.prototype._deserialize.call(this, t);
this.m_vertex1._deserialize(t.m_vertex1);
this.m_vertex2._deserialize(t.m_vertex2);
this.m_hasVertex0 = t.m_hasVertex0;
this.m_hasVertex0 && this.m_vertex0._deserialize(t.m_vertex0);
this.m_hasVertex3 = t.m_hasVertex3;
this.m_hasVertex3 && this.m_vertex3._deserialize(t.m_vertex3);
}
};
ut._extend(lt);
function _t() {
this.parent.call(this);
this.m_type = lt.e_chain;
this.m_radius = _;
this.m_prevVertex = new E();
this.m_nextVertex = new E();
this.m_hasPrevVertex = !1;
this.m_hasNextVertex = !1;
this.Clear();
Object.seal(this);
}
_t._tempEdge = new ut();
_t.prototype = {
Clear: function() {
this.m_vertices = null;
this.m_count = 0;
},
CreateLoop: function(t, e) {
r(null == this.m_vertices && 0 == this.m_count);
r(e >= 3);
for (var i = 1; i < e; ++i) r(G(t[i - 1], t[i]) > c * c);
this.m_count = e + 1;
this.m_vertices = new Array(this.m_count);
for (i = 0; i < e; ++i) this.m_vertices[i] = t[i].Clone();
this.m_vertices[e] = this.m_vertices[0].Clone();
this.m_prevVertex.Assign(this.m_vertices[this.m_count - 2]);
this.m_nextVertex.Assign(this.m_vertices[1]);
this.m_hasPrevVertex = !0;
this.m_hasNextVertex = !0;
},
CreateChain: function(t, e) {
r(null == this.m_vertices && 0 == this.m_count);
r(e >= 2);
for (var i = 1; i < e; ++i) {
r(G(t[i - 1], t[i]) > c * c);
}
this.m_count = e;
this.m_vertices = new Array(e);
for (i = 0; i < e; ++i) this.m_vertices[i] = t[i].Clone();
this.m_hasPrevVertex = !1;
this.m_hasNextVertex = !1;
this.m_prevVertex.SetZero();
this.m_nextVertex.SetZero();
},
SetPrevVertex: function(t) {
this.m_prevVertex.Assign(t);
this.m_hasPrevVertex = !0;
},
SetNextVertex: function(t) {
this.m_nextVertex.Assign(t);
this.m_hasNextVertex = !0;
},
Clone: function() {
var t = new _t();
t.m_count = this.m_count;
t.m_vertices = new Array(this.m_count);
for (var e = 0; e < this.m_count; ++e) t.m_vertices[e] = this.m_vertices[e].Clone();
t.m_prevVertex = this.m_prevVertex.Clone();
t.m_nextVertex = this.m_nextVertex.Clone();
t.m_hasPrevVertex = this.m_hasPrevVertex;
t.m_hasNextVertex = this.m_hasNextVertex;
return t;
},
GetChildCount: function() {
return this.m_count - 1;
},
GetChildEdge: function(t, e) {
r(0 <= e && e < this.m_count - 1);
t.m_type = lt.e_edge;
t.m_radius = this.m_radius;
t.m_vertex1 = this.m_vertices[e + 0];
t.m_vertex2 = this.m_vertices[e + 1];
if (e > 0) {
t.m_vertex0 = this.m_vertices[e - 1];
t.m_hasVertex0 = !0;
} else {
t.m_vertex0 = this.m_prevVertex;
t.m_hasVertex0 = this.m_hasPrevVertex;
}
if (e < this.m_count - 2) {
t.m_vertex3 = this.m_vertices[e + 2];
t.m_hasVertex3 = !0;
} else {
t.m_vertex3 = this.m_nextVertex;
t.m_hasVertex3 = this.m_hasNextVertex;
}
},
TestPoint: function(t, e) {
return !1;
},
RayCast: function(t, e, i, n) {
r(n < this.m_count);
var s = n, a = n + 1;
a == this.m_count && (a = 0);
_t._tempEdge.m_vertex1 = this.m_vertices[s].Clone();
_t._tempEdge.m_vertex2 = this.m_vertices[a].Clone();
return _t._tempEdge.RayCast(t, e, i, 0);
},
ComputeAABB: function(t, e, i) {
r(i < this.m_count);
var n = i, s = i + 1;
s == this.m_count && (s = 0);
var a = e.q.c * this.m_vertices[n].x - e.q.s * this.m_vertices[n].y + e.p.x, o = e.q.s * this.m_vertices[n].x + e.q.c * this.m_vertices[n].y + e.p.y, h = e.q.c * this.m_vertices[s].x - e.q.s * this.m_vertices[s].y + e.p.x, l = e.q.s * this.m_vertices[s].x + e.q.c * this.m_vertices[s].y + e.p.y;
t.lowerBound.x = tt(a, h);
t.lowerBound.y = tt(o, l);
t.upperBound.x = it(a, h);
t.upperBound.y = it(o, l);
},
ComputeMass: function(t, e) {
t.mass = 0;
t.center.SetZero();
t.I = 0;
},
_serialize: function(t) {
var e = t || {};
this.parent.prototype._serialize.call(this, e);
e.m_count = this.m_count;
e.m_vertices = [];
for (var i = 0; i < this.m_count; ++i) e.m_vertices.push(this.m_vertices[i]._serialize());
e.m_hasPrevVertex = this.m_hasPrevVertex;
this.m_hasPrevVertex && (e.m_prevVertex = this.m_prevVertex._serialize());
e.m_hasNextVertex = this.m_hasNextVertex;
this.m_hasNextVertex && (e.m_nextVertex = this.m_nextVertex._serialize());
return e;
},
_deserialize: function(t) {
this.parent.prototype._deserialize.call(this, t);
this.m_count = t.m_count;
this.m_vertices = [];
for (var e = 0; e < this.m_count; ++e) {
this.m_vertices[e] = new E();
this.m_vertices[e]._deserialize(t.m_vertices[e]);
}
this.m_hasPrevVertex = t.m_hasPrevVertex;
this.m_hasPrevVertex && this.m_prevVertex._deserialize(t.m_prevVertex);
this.m_hasNextVertex = t.m_hasNextVertex;
this.m_hasNextVertex && this.m_nextVertex._deserialize(t.m_nextVertex);
}
};
_t._extend(lt);
function mt() {
this.parent.call(this);
this.m_type = lt.e_polygon;
this.m_radius = _;
this.m_count = 0;
this.m_centroid = new E();
this.m_vertices = new Array(l);
this.m_normals = new Array(l);
Object.seal(this);
}
mt.prototype = {
Clone: function() {
var t = new mt();
t.m_count = this.m_count;
t.m_centroid = this.m_centroid.Clone();
for (var e = 0; e < this.m_count; ++e) {
t.m_vertices[e] = this.m_vertices[e].Clone();
t.m_normals[e] = this.m_normals[e].Clone();
}
return t;
},
GetChildCount: function() {
return 1;
},
Set: function(t, e) {
r(3 <= e && e <= l);
if (e < 3) this.SetAsBox(1, 1); else {
for (var i = tt(e, l), n = new Array(l), s = 0, o = 0; o < i; ++o) {
for (var h = t[o], u = !0, _ = 0; _ < s; ++_) if (G(h, n[_]) < .5 * c) {
u = !1;
break;
}
u && (n[s++] = h.Clone());
}
if ((i = s) < 3) {
r(!1);
this.SetAsBox(1, 1);
} else {
var m = 0, f = n[0].x;
for (o = 1; o < i; ++o) {
var d = n[o].x;
if (d > f || d == f && n[o].y < n[m].y) {
m = o;
f = d;
}
}
for (var p = new Array(l), g = 0, y = m; ;) {
p[g] = y;
var v = 0;
for (_ = 1; _ < i; ++_) if (v != y) {
var x = E.Subtract(n[v], n[p[g]]), A = O(x, h = E.Subtract(n[_], n[p[g]]));
A < 0 && (v = _);
0 == A && h.LengthSquared() > x.LengthSquared() && (v = _);
} else v = _;
++g;
y = v;
if (v == m) break;
}
if (g < 3) {
r(!1);
this.SetAsBox(1, 1);
} else {
this.m_count = g;
for (o = 0; o < g; ++o) this.m_vertices[o] = n[p[o]].Clone();
for (o = 0; o < g; ++o) {
var b = o, T = o + 1 < g ? o + 1 : 0, C = E.Subtract(this.m_vertices[T], this.m_vertices[b]);
r(C.LengthSquared() > a * a);
this.m_normals[o] = F(C, 1).Clone();
this.m_normals[o].Normalize();
}
this.m_centroid = mt.ComputeCentroid(this.m_vertices, g);
}
}
}
},
SetAsBox: function(t, e, i, n) {
this.m_count = 4;
this.m_vertices[0] = new E(-t, -e);
this.m_vertices[1] = new E(t, -e);
this.m_vertices[2] = new E(t, e);
this.m_vertices[3] = new E(-t, e);
this.m_normals[0] = new E(0, -1);
this.m_normals[1] = new E(1, 0);
this.m_normals[2] = new E(0, 1);
this.m_normals[3] = new E(-1, 0);
if (i) {
this.m_centroid.Assign(i);
var r = new B();
r.p = i;
r.q.Set(n);
for (var s = 0; s < this.m_count; ++s) {
this.m_vertices[s].Assign(J(r, this.m_vertices[s]));
this.m_normals[s].Assign(X(r.q, this.m_normals[s]));
}
}
},
TestPoint: function(t, e) {
for (var i = Y(t.q, E.Subtract(e, t.p)), n = 0; n < this.m_count; ++n) {
if (L(this.m_normals[n], E.Subtract(i, this.m_vertices[n])) > 0) return !1;
}
return !0;
},
RayCast: function(t, e, i, n) {
for (var s = Y(i.q, E.Subtract(e.p1, i.p)), a = Y(i.q, E.Subtract(e.p2, i.p)), o = E.Subtract(a, s), h = 0, l = e.maxFraction, c = -1, u = 0; u < this.m_count; ++u) {
var _ = L(this.m_normals[u], E.Subtract(this.m_vertices[u], s)), m = L(this.m_normals[u], o);
if (0 == m) {
if (_ < 0) return !1;
} else if (m < 0 && _ < h * m) {
h = _ / m;
c = u;
} else m > 0 && _ < l * m && (l = _ / m);
if (l < h) return !1;
}
r(0 <= h && h <= e.maxFraction);
if (c >= 0) {
t.fraction = h;
t.normal = X(i.q, this.m_normals[c]);
return !0;
}
return !1;
},
ComputeAABB: function(t, e, i) {
for (var n = e.q.c * this.m_vertices[0].x - e.q.s * this.m_vertices[0].y + e.p.x, r = e.q.s * this.m_vertices[0].x + e.q.c * this.m_vertices[0].y + e.p.y, s = n, a = r, o = 1; o < this.m_count; ++o) {
var h = e.q.c * this.m_vertices[o].x - e.q.s * this.m_vertices[o].y + e.p.x, l = e.q.s * this.m_vertices[o].x + e.q.c * this.m_vertices[o].y + e.p.y;
n = tt(n, h);
r = tt(r, l);
s = it(s, h);
a = it(a, l);
}
t.lowerBound.x = n - this.m_radius;
t.lowerBound.y = r - this.m_radius;
t.upperBound.x = s + this.m_radius;
t.upperBound.y = a + this.m_radius;
},
ComputeMass: function(t, e) {
r(this.m_count >= 3);
for (var i = new E(0, 0), n = 0, s = 0, o = new E(0, 0), h = 0; h < this.m_count; ++h) o.Add(this.m_vertices[h]);
o.Multiply(1 / this.m_count);
for (h = 0; h < this.m_count; ++h) {
var l = E.Subtract(this.m_vertices[h], o), c = h + 1 < this.m_count ? E.Subtract(this.m_vertices[h + 1], o) : E.Subtract(this.m_vertices[0], o), u = O(l, c), _ = .5 * u;
n += _;
i.Add(E.Multiply(_ * (1 / 3), E.Add(l, c)));
var m = l.x, f = l.y, d = c.x, p = c.y;
s += 1 / 3 * .25 * u * (m * m + d * m + d * d + (f * f + p * f + p * p));
}
t.mass = e * n;
r(n > a);
i.Multiply(1 / n);
t.center = E.Add(i, o);
t.I = e * s;
t.I += t.mass * (L(t.center, t.center) - L(i, i));
},
GetVertexCount: function() {
return this.m_count;
},
GetVertex: function(t) {
r(0 <= t && t < this.m_count);
return this.m_vertices[t];
},
Validate: function() {
for (var t = 0; t < this.m_count; ++t) for (var e = t, i = t < this.m_count - 1 ? e + 1 : 0, n = this.m_vertices[e], r = E.Subtract(this.m_vertices[i], n), s = 0; s < this.m_count; ++s) if (s != e && s != i) {
if (O(r, E.Subtract(this.m_vertices[s], n)) < 0) return !1;
}
return !0;
},
_serialize: function(t) {
var e = t || {};
this.parent.prototype._serialize.call(this, e);
e.m_count = this.m_count;
e.m_centroid = this.m_centroid._serialize();
e.m_vertices = [];
e.m_normals = [];
for (var i = 0; i < this.m_count; ++i) {
e.m_vertices.push(this.m_vertices[i]._serialize());
e.m_normals.push(this.m_normals[i]._serialize());
}
return e;
},
_deserialize: function(t) {
this.parent.prototype._deserialize.call(this, t);
this.m_count = t.m_count;
this.m_centroid._deserialize(t.m_centroid);
this.m_vertices = [];
this.m_normals = [];
for (var e = 0; e < this.m_count; ++e) {
this.m_vertices[e] = new E();
this.m_vertices[e]._deserialize(t.m_vertices[e]);
this.m_normals[e] = new E();
this.m_normals[e]._deserialize(t.m_normals[e]);
}
}
};
mt.ComputeCentroid = function(t, e) {
r(e >= 3);
for (var i = new E(), n = 0, s = new E(0, 0), o = 0; o < e; ++o) {
var h = s, l = t[o], c = o + 1 < e ? t[o + 1] : t[0], u = .5 * O(E.Subtract(l, h), E.Subtract(c, h));
n += u;
i.Add(E.Multiply(u, E.Multiply(1 / 3, E.Add(E.Add(h, l), c))));
}
r(n > a);
i.Multiply(1 / n);
return i;
};
mt._extend(lt);
function ft() {
this.proxyIdA = 0;
this.proxyIdB = 0;
}
function dt(t, e) {
return t.proxyIdA == e.proxyIdA ? t.proxyIdB - e.proxyIdB : t.proxyIdA - e.proxyIdA;
}
function pt() {
this.m_tree = new Kt();
this.m_queryProxyId = 0;
this.m_proxyCount = 0;
this.m_pairCount = 0;
this.m_pairBuffer = [];
this.m_moveCount = 0;
this.m_moveBuffer = [];
}
pt.prototype = {
CreateProxy: function(t, e) {
var i = this.m_tree.CreateProxy(t, e);
++this.m_proxyCount;
this.BufferMove(i);
return i;
},
DestroyProxy: function(t) {
this.UnBufferMove(t);
--this.m_proxyCount;
this.m_tree.DestroyProxy(t);
},
MoveProxy: function(t, e, i) {
this.m_tree.MoveProxy(t, e, i) && this.BufferMove(t);
},
TouchProxy: function(t) {
this.BufferMove(t);
},
GetFatAABB: function(t) {
return this.m_tree.GetFatAABB(t);
},
GetUserData: function(t) {
return this.m_tree.GetUserData(t);
},
TestOverlap: function(t, e) {
return Yt(this.m_tree.GetFatAABB(t), this.m_tree.GetFatAABB(e));
},
GetProxyCount: function() {
return this.m_proxyCount;
},
UpdatePairs: function(t) {
this.m_pairCount = 0;
this.m_pairBuffer.length = 0;
for (var e = 0; e < this.m_moveCount; ++e) {
this.m_queryProxyId = this.m_moveBuffer[e];
if (this.m_queryProxyId != pt.e_nullProxy) {
var i = this.m_tree.GetFatAABB(this.m_queryProxyId);
this.m_tree.Query(this, i);
}
}
this.m_moveCount = 0;
this.m_pairBuffer.sort(dt);
for (e = 0; e < this.m_pairCount; ) {
var n = this.m_pairBuffer[e], r = this.m_tree.GetUserData(n.proxyIdA), s = this.m_tree.GetUserData(n.proxyIdB);
t.AddPair(r, s);
++e;
for (;e < this.m_pairCount; ) {
var a = this.m_pairBuffer[e];
if (a.proxyIdA != n.proxyIdA || a.proxyIdB != n.proxyIdB) break;
++e;
}
}
},
Query: function(t, e) {
this.m_tree.Query(t, e);
},
RayCast: function(t, e) {
this.m_tree.RayCast(t, e);
},
GetTreeHeight: function() {
return this.m_tree.GetHeight();
},
GetTreeBalance: function() {
return this.m_tree.GetMaxBalance();
},
GetTreeQuality: function() {
return this.m_tree.GetAreaRatio();
},
ShiftOrigin: function(t) {
this.m_tree.ShiftOrigin(t);
},
BufferMove: function(t) {
this.m_moveBuffer[this.m_moveCount] = t;
++this.m_moveCount;
},
UnBufferMove: function(t) {
for (var e = 0; e < this.m_moveCount; ++e) this.m_moveBuffer[e] == t && (this.m_moveBuffer[e] = pt.e_nullProxy);
},
QueryCallback: function(t) {
if (t == this.m_queryProxyId) return !0;
this.m_pairBuffer[this.m_pairCount] = new ft();
this.m_pairBuffer[this.m_pairCount].proxyIdA = tt(t, this.m_queryProxyId);
this.m_pairBuffer[this.m_pairCount].proxyIdB = it(t, this.m_queryProxyId);
++this.m_pairCount;
return !0;
}
};
pt.e_nullProxy = -1;
function gt() {
this.m_vertices = null;
this.m_count = 0;
this.m_radius = 0;
}
gt.prototype = {
Assign: function(t) {
this.m_vertices = t.m_vertices;
this.m_count = t.m_count;
this.m_radius = t.m_radius;
},
Set: function(t, e) {
switch (t.GetType()) {
case lt.e_circle:
var i = t;
this.m_vertices = [ i.m_p ];
this.m_count = 1;
this.m_radius = i.m_radius;
break;

case lt.e_polygon:
var n = t;
this.m_vertices = n.m_vertices;
this.m_count = n.m_count;
this.m_radius = n.m_radius;
break;

case lt.e_chain:
var s = t;
r(0 <= e && e < s.m_count);
this.m_vertices = [ s.m_vertices[e] ];
e + 1 < s.m_count ? this.m_vertices[1] = s.m_vertices[e + 1] : this.m_vertices[1] = s.m_vertices[0];
this.m_count = 2;
this.m_radius = s.m_radius;
break;

case lt.e_edge:
var a = t;
this.m_vertices = [ a.m_vertex1, a.m_vertex2 ];
this.m_count = 2;
this.m_radius = a.m_radius;
break;

default:
r(!1);
}
},
GetSupport: function(t, e) {
for (var i = 0, n = this.m_vertices[0].x * t + this.m_vertices[0].y * e, r = 1; r < this.m_count; ++r) {
var s = this.m_vertices[r].x * t + this.m_vertices[r].y * e;
if (s > n) {
i = r;
n = s;
}
}
return i;
},
GetSupportVertex: function(t, e) {
return this.m_vertices[this.GetSupport(t, e)];
},
GetVertexCount: function() {
return this.m_count;
},
GetVertex: function(t) {
r(0 <= t && t < this.m_count);
return this.m_vertices[t];
}
};
function yt() {
this.metric = 0;
this.count = 0;
this.indexA = [ 0, 0, 0 ];
this.indexB = [ 0, 0, 0 ];
}
function vt() {
this.proxyA = new gt();
this.proxyB = new gt();
this.transformA = new B();
this.transformB = new B();
this.useRadii = !1;
}
function xt() {
this.pointA = new E();
this.pointB = new E();
this.distance = 0;
this.iterations = 0;
}
function At() {
this.wA = new E();
this.wB = new E();
this.w = new E();
this.a = 0;
this.indexA = 0;
this.indexB = 0;
}
At.prototype = {
Assign: function(t) {
this.wA.x = t.wA.x;
this.wA.y = t.wA.y;
this.wB.x = t.wB.x;
this.wB.y = t.wB.y;
this.w.x = t.w.x;
this.w.y = t.w.y;
this.a = t.a;
this.indexA = t.indexA;
this.indexB = t.indexB;
}
};
function bt() {
this.m_v = [ new At(), new At(), new At() ];
this.m_count = 0;
}
bt.prototype = {
ReadCache: function(t, e, i, n, s) {
r(t.count <= 3);
this.m_count = t.count;
for (var o = this.m_v, h = 0; h < this.m_count; ++h) {
(m = o[h]).indexA = t.indexA[h];
m.indexB = t.indexB[h];
var l = e.GetVertex(m.indexA), c = n.GetVertex(m.indexB);
m.wA.x = i.q.c * l.x - i.q.s * l.y + i.p.x;
m.wA.y = i.q.s * l.x + i.q.c * l.y + i.p.y;
m.wB.x = s.q.c * c.x - s.q.s * c.y + s.p.x;
m.wB.y = s.q.s * c.x + s.q.c * c.y + s.p.y;
m.w.x = m.wB.x - m.wA.x;
m.w.y = m.wB.y - m.wA.y;
m.a = 0;
}
if (this.m_count > 1) {
var u = t.metric, _ = this.GetMetric();
(_ < .5 * u || 2 * u < _ || _ < a) && (this.m_count = 0);
}
if (0 == this.m_count) {
var m;
(m = o[0]).indexA = 0;
m.indexB = 0;
l = e.GetVertex(0), c = n.GetVertex(0);
m.wA.x = i.q.c * l.x - i.q.s * l.y + i.p.x;
m.wA.y = i.q.s * l.x + i.q.c * l.y + i.p.y;
m.wB.x = s.q.c * c.x - s.q.s * c.y + s.p.x;
m.wB.y = s.q.s * c.x + s.q.c * c.y + s.p.y;
m.w.x = m.wB.x - m.wA.x;
m.w.y = m.wB.y - m.wA.y;
m.a = 1;
this.m_count = 1;
}
},
WriteCache: function(t) {
t.metric = this.GetMetric();
t.count = this.m_count;
for (var e = this.m_v, i = 0; i < this.m_count; ++i) {
t.indexA[i] = e[i].indexA;
t.indexB[i] = e[i].indexB;
}
},
GetSearchDirection: function(t) {
switch (this.m_count) {
case 1:
t.x = -this.m_v[0].w.x;
t.y = -this.m_v[0].w.y;
break;

case 2:
var e = this.m_v[1].w.x - this.m_v[0].w.x, i = this.m_v[1].w.y - this.m_v[0].w.y;
if (e * -this.m_v[0].w.y - i * -this.m_v[0].w.x > 0) {
t.x = -1 * i;
t.y = 1 * e;
} else {
t.x = 1 * i;
t.y = -1 * e;
}
break;

default:
r(!1);
t.x = t.y = 0;
}
},
GetClosestPoint: function(t) {
switch (this.m_count) {
case 1:
t.x = this.m_v[0].w.x;
t.y = this.m_v[0].w.y;
break;

case 2:
t.x = this.m_v[0].a * this.m_v[0].w.x + this.m_v[1].a * this.m_v[1].w.x;
t.y = this.m_v[0].a * this.m_v[0].w.y + this.m_v[1].a * this.m_v[1].w.y;
break;

case 3:
t.x = t.y = 0;
break;

default:
r(!1);
t.x = t.y = 0;
}
},
GetWitnessPoints: function(t, e) {
switch (this.m_count) {
case 1:
t.x = this.m_v[0].wA.x;
t.y = this.m_v[0].wA.y;
e.x = this.m_v[0].wB.x;
e.y = this.m_v[0].wB.y;
break;

case 2:
t.x = this.m_v[0].a * this.m_v[0].wA.x + this.m_v[1].a * this.m_v[1].wA.x;
t.y = this.m_v[0].a * this.m_v[0].wA.y + this.m_v[1].a * this.m_v[1].wA.y;
e.x = this.m_v[0].a * this.m_v[0].wB.x + this.m_v[1].a * this.m_v[1].wB.x;
e.y = this.m_v[0].a * this.m_v[0].wB.y + this.m_v[1].a * this.m_v[1].wB.y;
break;

case 3:
t.x = this.m_v[0].a * this.m_v[0].wA.x + this.m_v[1].a * this.m_v[1].wA.x + this.m_v[2].a * this.m_v[2].wA.x;
t.y = this.m_v[0].a * this.m_v[0].wA.y + this.m_v[1].a * this.m_v[1].wA.y + this.m_v[2].a * this.m_v[2].wA.y;
e.x = t.x;
e.y = t.y;
break;

default:
r(!1);
}
},
GetMetric: function() {
switch (this.m_count) {
case 1:
return 0;

case 2:
return z(this.m_v[0].w, this.m_v[1].w);

case 3:
return (this.m_v[1].w.x - this.m_v[0].w.x) * (this.m_v[2].w.y - this.m_v[0].w.y) - (this.m_v[1].w.y - this.m_v[0].w.y) * (this.m_v[2].w.x - this.m_v[0].w.x);

default:
r(!1);
return 0;
}
},
Solve2: function() {
var t = this.m_v[0].w, e = this.m_v[1].w, i = e.x - t.x, n = e.y - t.y, r = -(t.x * i + t.y * n);
if (r <= 0) {
this.m_v[0].a = 1;
this.m_count = 1;
} else {
var s = e.x * i + e.y * n;
if (s <= 0) {
this.m_v[1].a = 1;
this.m_count = 1;
this.m_v[0].Assign(this.m_v[1]);
} else {
var a = 1 / (s + r);
this.m_v[0].a = s * a;
this.m_v[1].a = r * a;
this.m_count = 2;
}
}
},
Solve3: function() {
var t = this.m_v[0].w, e = this.m_v[1].w, i = this.m_v[2].w, n = e.x - t.x, r = e.y - t.y, s = t.x * n + t.y * r, a = e.x * n + e.y * r, o = -s, h = i.x - t.x, l = i.y - t.y, c = t.x * h + t.y * l, u = i.x * h + i.y * l, _ = -c, m = i.x - e.x, f = i.y - e.y, d = e.x * m + e.y * f, p = i.x * m + i.y * f, g = -d, y = n * l - r * h, v = y * (e.x * i.y - e.y * i.x), x = y * (i.x * t.y - i.y * t.x), A = y * (t.x * e.y - t.y * e.x);
if (o <= 0 && _ <= 0) {
this.m_v[0].a = 1;
this.m_count = 1;
} else if (a > 0 && o > 0 && A <= 0) {
var b = 1 / (a + o);
this.m_v[0].a = a * b;
this.m_v[1].a = o * b;
this.m_count = 2;
} else if (u > 0 && _ > 0 && x <= 0) {
var T = 1 / (u + _);
this.m_v[0].a = u * T;
this.m_v[2].a = _ * T;
this.m_count = 2;
this.m_v[1].Assign(this.m_v[2]);
} else if (a <= 0 && g <= 0) {
this.m_v[1].a = 1;
this.m_count = 1;
this.m_v[0].Assign(this.m_v[1]);
} else if (u <= 0 && p <= 0) {
this.m_v[2].a = 1;
this.m_count = 1;
this.m_v[0].Assign(this.m_v[2]);
} else if (p > 0 && g > 0 && v <= 0) {
var C = 1 / (p + g);
this.m_v[1].a = p * C;
this.m_v[2].a = g * C;
this.m_count = 2;
this.m_v[0].Assign(this.m_v[2]);
} else {
var w = 1 / (v + x + A);
this.m_v[0].a = v * w;
this.m_v[1].a = x * w;
this.m_v[2].a = A * w;
this.m_count = 3;
}
}
};
var Tt = new bt(), Ct = new E(), wt = new E();
function St(t, e, i) {
++St.b2_gjkCalls;
var n = i.proxyA, s = i.proxyB, o = i.transformA, h = i.transformB;
Tt.ReadCache(e, n, o, s, h);
for (var l = Tt.m_v, c = [ 0, 0, 0 ], u = [ 0, 0, 0 ], _ = 0, m = 0; m < 20; ) {
_ = Tt.m_count;
for (var f = 0; f < _; ++f) {
c[f] = l[f].indexA;
u[f] = l[f].indexB;
}
switch (Tt.m_count) {
case 1:
break;

case 2:
Tt.Solve2();
break;

case 3:
Tt.Solve3();
break;

default:
r(!1);
}
if (3 == Tt.m_count) break;
Tt.GetClosestPoint(wt);
wt.LengthSquared();
Tt.GetSearchDirection(wt);
if (wt.LengthSquared() < a * a) break;
var d = l[Tt.m_count];
d.indexA = n.GetSupport(o.q.c * -wt.x + o.q.s * -wt.y, -o.q.s * -wt.x + o.q.c * -wt.y);
var p = n.GetVertex(d.indexA);
d.wA.x = o.q.c * p.x - o.q.s * p.y + o.p.x;
d.wA.y = o.q.s * p.x + o.q.c * p.y + o.p.y;
d.indexB = s.GetSupport(h.q.c * wt.x + h.q.s * wt.y, -h.q.s * wt.x + h.q.c * wt.y);
var g = s.GetVertex(d.indexB);
d.wB.x = h.q.c * g.x - h.q.s * g.y + h.p.x;
d.wB.y = h.q.s * g.x + h.q.c * g.y + h.p.y;
d.w.x = d.wB.x - d.wA.x;
d.w.y = d.wB.y - d.wA.y;
++m;
++St.b2_gjkIters;
var y = !1;
for (f = 0; f < _; ++f) if (d.indexA == c[f] && d.indexB == u[f]) {
y = !0;
break;
}
if (y) break;
++Tt.m_count;
}
St.b2_gjkMaxIters = it(St.b2_gjkMaxIters, m);
Tt.GetWitnessPoints(t.pointA, t.pointB);
t.distance = z(t.pointA, t.pointB);
t.iterations = m;
Tt.WriteCache(e);
if (i.useRadii) {
var v = n.m_radius, x = s.m_radius;
if (t.distance > v + x && t.distance > a) {
t.distance -= v + x;
Ct.x = t.pointB.x - t.pointA.x;
Ct.y = t.pointB.y - t.pointA.y;
Ct.Normalize();
t.pointA.x += v * Ct.x;
t.pointA.y += v * Ct.y;
t.pointB.x -= x * Ct.x;
t.pointB.y -= x * Ct.y;
} else {
var A = .5 * (t.pointA.x + t.pointB.x), b = .5 * (t.pointA.y + t.pointB.y);
t.pointA.x = A;
t.pointA.y = b;
t.pointB.x = A;
t.pointB.y = b;
t.distance = 0;
}
}
}
St.b2_gjkCalls = 0;
St.b2_gjkIters = 0;
St.b2_gjkMaxIters = 0;
function Et() {}
Et.prototype = {
indexA: 0,
indexB: 0,
typeA: 0,
typeB: 0,
Reset: function() {
this.indexA = this.indexB = this.typeA = this.typeB = 0;
},
Get: function() {
return this.indexA | this.indexB << 8 | this.typeA << 16 | this.typeB << 24;
},
Assign: function(t) {
this.indexA = t.indexA;
this.indexB = t.indexB;
this.typeA = t.typeA;
this.typeB = t.typeB;
}
};
Et.e_vertex = 0;
Et.e_face = 1;
function Dt() {
this.localPoint = new E();
this.normalImpulse = 0;
this.tangentImpulse = 0;
this.id = new Et();
}
Dt.prototype = {
Clone: function() {
var t = new Dt();
t.localPoint.x = this.localPoint.x;
t.localPoint.y = this.localPoint.y;
t.normalImpulse = this.normalImpulse;
t.tangentImpulse = this.tangentImpulse;
t.id.Assign(this.id);
return t;
}
};
function Mt() {
this.points = new Array(h);
this.localNormal = new E();
this.localPoint = new E();
this.type = 0;
this.pointCount = 0;
}
Mt.prototype = {
Clone: function() {
var t = new Mt();
t.pointCount = this.pointCount;
t.type = this.type;
t.localPoint.x = this.localPoint.x;
t.localPoint.y = this.localPoint.y;
t.localNormal.x = this.localNormal.x;
t.localNormal.y = this.localNormal.y;
for (var e = 0; e < this.pointCount; ++e) t.points[e] = this.points[e].Clone();
return t;
},
Assign: function(t) {
this.pointCount = t.pointCount;
this.type = t.type;
this.localPoint.x = t.localPoint.x;
this.localPoint.y = t.localPoint.y;
this.localNormal.x = t.localNormal.x;
this.localNormal.y = t.localNormal.y;
for (var e = 0; e < this.pointCount; ++e) this.points[e] = t.points[e].Clone();
}
};
Mt.e_circles = 0;
Mt.e_faceA = 1;
Mt.e_faceB = 2;
Mt.b2_nullState = 0;
Mt.b2_addState = 1;
Mt.b2_persistState = 2;
Mt.b2_removeState = 3;
function It() {
this.normal = new E();
this.points = new Array(h);
this.separations = new Array(h);
}
It.prototype = {
Initialize: function(t, e, i, n, r) {
if (0 != t.pointCount) switch (t.type) {
case Mt.e_circles:
this.normal.x = 1;
this.normal.y = 0;
var s = e.q.c * t.localPoint.x - e.q.s * t.localPoint.y + e.p.x, o = e.q.s * t.localPoint.x + e.q.c * t.localPoint.y + e.p.y, h = n.q.c * t.points[0].localPoint.x - n.q.s * t.points[0].localPoint.y + n.p.x, l = n.q.s * t.points[0].localPoint.x + n.q.c * t.points[0].localPoint.y + n.p.y, c = s - h, u = o - l;
if (c * c + u * u > a * a) {
this.normal.x = h - s;
this.normal.y = l - o;
this.normal.Normalize();
}
var _ = s + i * this.normal.x, m = o + i * this.normal.y, f = h - r * this.normal.x, d = l - r * this.normal.y;
this.points[0] = new E(.5 * (_ + f), .5 * (m + d));
this.separations[0] = (f - _) * this.normal.x + (d - m) * this.normal.y;
break;

case Mt.e_faceA:
this.normal.x = e.q.c * t.localNormal.x - e.q.s * t.localNormal.y;
this.normal.y = e.q.s * t.localNormal.x + e.q.c * t.localNormal.y;
for (var p = e.q.c * t.localPoint.x - e.q.s * t.localPoint.y + e.p.x, g = e.q.s * t.localPoint.x + e.q.c * t.localPoint.y + e.p.y, y = 0; y < t.pointCount; ++y) {
var v = n.q.c * t.points[y].localPoint.x - n.q.s * t.points[y].localPoint.y + n.p.x, x = n.q.s * t.points[y].localPoint.x + n.q.c * t.points[y].localPoint.y + n.p.y;
_ = v + (i - (A = (v - p) * this.normal.x + (x - g) * this.normal.y)) * this.normal.x, 
m = x + (i - A) * this.normal.y, f = v - r * this.normal.x, d = x - r * this.normal.y;
this.points[y] = new E(.5 * (_ + f), .5 * (m + d));
this.separations[y] = (f - _) * this.normal.x + (d - m) * this.normal.y;
}
break;

case Mt.e_faceB:
this.normal.x = n.q.c * t.localNormal.x - n.q.s * t.localNormal.y;
this.normal.y = n.q.s * t.localNormal.x + n.q.c * t.localNormal.y;
for (p = n.q.c * t.localPoint.x - n.q.s * t.localPoint.y + n.p.x, g = n.q.s * t.localPoint.x + n.q.c * t.localPoint.y + n.p.y, 
y = 0; y < t.pointCount; ++y) {
var A;
v = e.q.c * t.points[y].localPoint.x - e.q.s * t.points[y].localPoint.y + e.p.x, 
x = e.q.s * t.points[y].localPoint.x + e.q.c * t.points[y].localPoint.y + e.p.y, 
f = v + (r - (A = (v - p) * this.normal.x + (x - g) * this.normal.y)) * this.normal.x, 
d = x + (r - A) * this.normal.y, _ = v - i * this.normal.x, m = x - i * this.normal.y;
this.points[y] = new E(.5 * (_ + f), .5 * (m + d));
this.separations[y] = (_ - f) * this.normal.x + (m - d) * this.normal.y;
}
this.normal.x = -this.normal.x;
this.normal.y = -this.normal.y;
}
}
};
function Pt() {
this.v = new E();
this.id = new Et();
}
function Bt() {
this.p1 = new E(), this.p2 = new E();
this.maxFraction = 0;
}
function Rt() {
this.normal = new E();
this.fraction = 0;
}
function Lt() {
this.lowerBound = new E();
this.upperBound = new E();
}
Lt.prototype = {
Assign: function(t) {
this.lowerBound.x = t.lowerBound.x;
this.lowerBound.y = t.lowerBound.y;
this.upperBound.x = t.upperBound.x;
this.upperBound.y = t.upperBound.y;
},
Clone: function() {
var t = new Lt();
t.lowerBound.x = this.lowerBound.x;
t.lowerBound.y = this.lowerBound.y;
t.upperBound.x = this.upperBound.x;
t.upperBound.y = this.upperBound.y;
return t;
},
IsValid: function() {
return this.upperBound.x - this.lowerBound.x >= 0 && this.upperBound.y - this.lowerBound.y >= 0 && this.lowerBound.IsValid() && this.upperBound.IsValid();
},
GetCenter: function() {
return new E(.5 * (this.lowerBound.x + this.upperBound.x), .5 * (this.lowerBound.y + this.upperBound.y));
},
GetExtents: function() {
return new E(.5 * (this.upperBound.x - this.lowerBound.x), .5 * (this.upperBound.y - this.lowerBound.y));
},
GetPerimeter: function() {
return 2 * (this.upperBound.x - this.lowerBound.x + (this.upperBound.y - this.lowerBound.y));
},
Combine: function(t, e) {
if (e) {
this.lowerBound.x = tt(t.lowerBound.x, e.lowerBound.x);
this.lowerBound.y = tt(t.lowerBound.y, e.lowerBound.y);
this.upperBound.x = it(t.upperBound.x, e.upperBound.x);
this.upperBound.y = it(t.upperBound.y, e.upperBound.y);
} else {
this.lowerBound.x = tt(this.lowerBound.x, t.lowerBound.x);
this.lowerBound.y = tt(this.lowerBound.y, t.lowerBound.y);
this.upperBound.x = it(this.upperBound.x, t.upperBound.x);
this.upperBound.y = it(this.upperBound.y, t.upperBound.y);
}
},
Contains: function(t) {
return this.lowerBound.x <= t.lowerBound.x && this.lowerBound.y <= t.lowerBound.y && t.upperBound.x <= this.upperBound.x && t.upperBound.y <= this.upperBound.y;
},
RayCast: function(t, e) {
for (var i = -s, n = s, r = e.p1, o = E.Subtract(e.p2, e.p1), h = $(o), l = new E(), c = 0; c < 2; ++c) if (h.get_i(c) < a) {
if (r.get_i(c) < this.lowerBound.get_i(c) || this.upperBound.get_i(c) < r.get_i(c)) return !1;
} else {
var u = 1 / o.get_i(c), _ = (this.lowerBound.get_i(c) - r.get_i(c)) * u, m = (this.upperBound.get_i(c) - r.get_i(c)) * u, f = -1;
if (_ > m) {
var d = m;
m = _;
_ = d;
f = 1;
}
if (_ > i) {
l.x = l.y = 0;
l.set_i(c, f);
i = _;
}
if (i > (n = tt(n, m))) return !1;
}
if (i < 0 || e.maxFraction < i) return !1;
t.fraction = i;
t.normal.x = l.x;
t.normal.y = l.y;
return !0;
}
};
function Ot(t, e, i, n, r) {
t.pointCount = 0;
var s = J(i, e.m_p), a = J(r, n.m_p), o = a.x - s.x, h = a.y - s.y, l = o * o + h * h, c = e.m_radius + n.m_radius;
if (!(l > c * c)) {
t.type = Mt.e_circles;
t.localPoint.x = e.m_p.x;
t.localPoint.y = e.m_p.y;
t.localNormal.x = t.localNormal.y = 0;
t.pointCount = 1;
t.points[0] = new Dt();
t.points[0].localPoint.x = n.m_p.x;
t.points[0].localPoint.y = n.m_p.y;
t.points[0].id.Reset();
}
}
function Ft(t, e, i, n, r) {
t.pointCount = 0;
for (var o = Z(i, J(r, n.m_p)), h = 0, l = -s, c = e.m_radius + n.m_radius, u = e.m_count, _ = e.m_vertices, m = e.m_normals, f = 0; f < u; ++f) {
var d = m[f].x * (o.x - _[f].x) + m[f].y * (o.y - _[f].y);
if (d > c) return;
if (d > l) {
l = d;
h = f;
}
}
var p = h, g = p + 1 < u ? p + 1 : 0, y = _[p], v = _[g];
if (l < a) {
t.pointCount = 1;
t.type = Mt.e_faceA;
t.localNormal.x = m[h].x;
t.localNormal.y = m[h].y;
t.localPoint.x = .5 * (y.x + v.x);
t.localPoint.y = .5 * (y.y + v.y);
t.points[0] = new Dt();
t.points[0].localPoint.x = n.m_p.x;
t.points[0].localPoint.y = n.m_p.y;
t.points[0].id.Reset();
} else {
var x = (o.x - y.x) * (v.x - y.x) + (o.y - y.y) * (v.y - y.y), A = (o.x - v.x) * (y.x - v.x) + (o.y - v.y) * (y.y - v.y);
if (x <= 0) {
if (G(o, y) > c * c) return;
t.pointCount = 1;
t.type = Mt.e_faceA;
t.localNormal.x = o.x - y.x;
t.localNormal.y = o.y - y.y;
t.localNormal.Normalize();
t.localPoint.x = y.x;
t.localPoint.y = y.y;
t.points[0] = new Dt();
t.points[0].localPoint.x = n.m_p.x;
t.points[0].localPoint.y = n.m_p.y;
t.points[0].id.Reset();
} else if (A <= 0) {
if (G(o, v) > c * c) return;
t.pointCount = 1;
t.type = Mt.e_faceA;
t.localNormal.x = o.x - v.x;
t.localNormal.y = o.y - v.y;
t.localNormal.Normalize();
t.localPoint.x = v.x;
t.localPoint.y = v.y;
t.points[0] = new Dt();
t.points[0].localPoint.x = n.m_p.x;
t.points[0].localPoint.y = n.m_p.y;
t.points[0].id.Reset();
} else {
var b = .5 * (y.x + v.x), T = .5 * (y.y + v.y);
if ((l = (o.x - b) * m[p].x + (o.y - T) * m[p].y) > c) return;
t.pointCount = 1;
t.type = Mt.e_faceA;
t.localNormal.x = m[p].x;
t.localNormal.y = m[p].y;
t.localPoint.x = b;
t.localPoint.y = T;
t.points[0] = new Dt();
t.points[0].localPoint.x = n.m_p.x;
t.points[0].localPoint.y = n.m_p.y;
t.points[0].id.Reset();
}
}
}
function Nt(t, e, i, n, r) {
for (var a = e.m_count, o = n.m_count, h = e.m_normals, l = e.m_vertices, c = n.m_vertices, u = K(r, i), _ = 0, m = -s, f = 0; f < a; ++f) {
for (var d = u.q.c * h[f].x - u.q.s * h[f].y, p = u.q.s * h[f].x + u.q.c * h[f].y, g = u.q.c * l[f].x - u.q.s * l[f].y + u.p.x, y = u.q.s * l[f].x + u.q.c * l[f].y + u.p.y, v = s, x = 0; x < o; ++x) {
var A = d * (c[x].x - g) + p * (c[x].y - y);
A < v && (v = A);
}
if (v > m) {
m = v;
_ = f;
}
}
t[0] = _;
return m;
}
function kt(t, e, i, n, a, o) {
var h = e.m_normals, l = a.m_count, c = a.m_vertices, u = a.m_normals;
r(0 <= n && n < e.m_count);
for (var _ = i.q.c * h[n].x - i.q.s * h[n].y, m = i.q.s * h[n].x + i.q.c * h[n].y, f = o.q.c * _ + o.q.s * m, d = -o.q.s * _ + o.q.c * m, p = 0, g = s, y = 0; y < l; ++y) {
var v = f * u[y].x + d * u[y].y;
if (v < g) {
g = v;
p = y;
}
}
var x = p, A = x + 1 < l ? x + 1 : 0;
t[0].v.x = o.q.c * c[x].x - o.q.s * c[x].y + o.p.x;
t[0].v.y = o.q.s * c[x].x + o.q.c * c[x].y + o.p.y;
t[0].id.indexA = n;
t[0].id.indexB = x;
t[0].id.typeA = Et.e_face;
t[0].id.typeB = Et.e_vertex;
t[1].v.x = o.q.c * c[A].x - o.q.s * c[A].y + o.p.x;
t[1].v.y = o.q.s * c[A].x + o.q.c * c[A].y + o.p.y;
t[1].id.indexA = n;
t[1].id.indexB = A;
t[1].id.typeA = Et.e_face;
t[1].id.typeB = Et.e_vertex;
}
function zt(t, e, i, n, r) {
t.pointCount = 0;
var s = e.m_radius + n.m_radius, a = [ 0 ], o = Nt(a, e, i, n, r);
if (!(o > s)) {
var l = [ 0 ], u = Nt(l, n, r, e, i);
if (!(u > s)) {
var _, m, f, d, p = 0, g = 0;
if (u > o + .1 * c) {
_ = n;
m = e;
f = r;
d = i;
p = l[0];
t.type = Mt.e_faceB;
g = 1;
} else {
_ = e;
m = n;
f = i;
d = r;
p = a[0];
t.type = Mt.e_faceA;
g = 0;
}
kt(zt._local_incidentEdges, _, f, p, m, d);
var y = _.m_count, v = _.m_vertices, x = p, A = p + 1 < y ? p + 1 : 0, b = v[x], T = v[A];
zt._localTangent.x = T.x - b.x;
zt._localTangent.y = T.y - b.y;
zt._localTangent.Normalize();
var C = 1 * zt._localTangent.y, w = -1 * zt._localTangent.x, S = .5 * (b.x + T.x), E = .5 * (b.y + T.y), D = f.q.c * zt._localTangent.x - f.q.s * zt._localTangent.y, M = f.q.s * zt._localTangent.x + f.q.c * zt._localTangent.y, I = 1 * M, P = -1 * D;
b = J(f, b);
T = J(f, T);
var B = I * b.x + P * b.y, R = -(D * b.x + M * b.y) + s, L = D * T.x + M * T.y + s, O = new Array(2), F = new Array(2);
if (!(qt(O, zt._local_incidentEdges, -D, -M, R, x) < 2 || qt(F, O, D, M, L, A) < 2)) {
t.localNormal.x = C;
t.localNormal.y = w;
t.localPoint.x = S;
t.localPoint.y = E;
for (var N = 0, k = 0; k < h; ++k) {
if (I * F[k].v.x + P * F[k].v.y - B <= s) {
var z = t.points[N] = new Dt();
z.localPoint.Assign(Z(d, F[k].v));
z.id.Assign(F[k].id);
if (g) {
var G = new Et();
G.Assign(z.id);
z.id.indexA = G.indexB;
z.id.indexB = G.indexA;
z.id.typeA = G.typeB;
z.id.typeB = G.typeA;
}
++N;
}
}
t.pointCount = N;
}
}
}
}
zt._localTangent = new E();
zt._local_incidentEdges = [ new Pt(), new Pt() ];
function Gt(t, e, i, n, s) {
t.pointCount = 0;
var a = Z(i, J(s, n.m_p)), o = e.m_vertex1, h = e.m_vertex2, l = h.x - o.x, c = h.y - o.y, u = l * (h.x - a.x) + c * (h.y - a.y), _ = l * (a.x - o.x) + c * (a.y - o.y), m = e.m_radius + n.m_radius, f = new Et();
f.indexB = 0;
f.typeB = Et.e_vertex;
if (_ <= 0) {
var d = o;
if ((w = a.x - d.x) * w + (S = a.y - d.y) * S > m * m) return;
if (e.m_hasVertex0) {
var p = e.m_vertex0, g = o, y = g.x - p.x, v = g.y - p.y;
if (y * (g.x - a.x) + v * (g.y - a.y) > 0) return;
}
f.indexA = 0;
f.typeA = Et.e_vertex;
t.pointCount = 1;
t.type = Mt.e_circles;
t.localNormal.x = t.localNormal.y = 0;
t.localPoint.x = d.x;
t.localPoint.y = d.y;
t.points[0] = new Dt();
t.points[0].id.Assign(f);
t.points[0].localPoint.x = n.m_p.x;
t.points[0].localPoint.y = n.m_p.y;
} else if (u <= 0) {
d = h;
if ((w = a.x - d.x) * w + (S = a.y - d.y) * S > m * m) return;
if (e.m_hasVertex3) {
var x = e.m_vertex3, A = h, b = x.x - A.x, T = x.y - A.y;
if (b * (a.x - A.x) + T * (a.y - A.y) > 0) return;
}
f.indexA = 1;
f.typeA = Et.e_vertex;
t.pointCount = 1;
t.type = Mt.e_circles;
t.localNormal.x = t.localNormal.y = 0;
t.localPoint.x = d.x;
t.localPoint.y = d.y;
t.points[0] = new Dt();
t.points[0].id.Assign(f);
t.points[0].localPoint.x = n.m_p.x;
t.points[0].localPoint.y = n.m_p.y;
} else {
var C = l * l + c * c;
r(C > 0);
var w, S, E = 1 / C * (u * o.x + _ * h.x), D = 1 / C * (u * o.y + _ * h.y);
if (!((w = a.x - E) * w + (S = a.y - D) * S > m * m)) {
var M = -c, I = l;
if (M * (a.x - o.x) + I * (a.y - o.y) < 0) {
M = -M;
I = -I;
}
f.indexA = 0;
f.typeA = Et.e_face;
t.pointCount = 1;
t.type = Mt.e_faceA;
t.localNormal.x = M;
t.localNormal.y = I;
t.localNormal.Normalize();
t.localPoint.x = o.x;
t.localPoint.y = o.y;
t.points[0] = new Dt();
t.points[0].id.Assign(f);
t.points[0].localPoint.x = n.m_p.x;
t.points[0].localPoint.y = n.m_p.y;
}
}
}
function Ut() {
this.type = 0;
this.index = 0;
this.separation = 0;
}
Ut.e_unknown = 0;
Ut.e_edgeA = 1;
Ut.e_edgeB = 2;
function Vt() {
this.vertices = new Array(l);
this.normals = new Array(l);
this.count = 0;
}
function jt() {
this.i1 = 0, this.i2 = 0;
this.v1 = new E(), this.v2 = new E();
this.normal = new E();
this.sideNormal1 = new E();
this.sideOffset1 = 0;
this.sideNormal2 = new E();
this.sideOffset2 = 0;
}
function Wt() {
this.m_polygonB = new Vt();
this.m_xf = new B();
this.m_centroidB = new E();
this.m_v0 = new E(), this.m_v1 = new E(), this.m_v2 = new E(), this.m_v3 = new E();
this.m_normal0 = new E(), this.m_normal1 = new E(), this.m_normal2 = new E();
this.m_normal = new E();
this.m_type1 = 0, this.m_type2 = 0;
this.m_lowerLimit = new E(), this.m_upperLimit = new E();
this.m_radius = 0;
this.m_front = !1;
}
Wt._temp_edge = new E();
Wt._temp_edge0 = new E();
Wt._temp_edge2 = new E();
Wt.prototype = {
Collide: function(t, e, i, n, r) {
this.m_xf.Assign(K(i, r));
this.m_centroidB.x = this.m_xf.q.c * n.m_centroid.x - this.m_xf.q.s * n.m_centroid.y + this.m_xf.p.x;
this.m_centroidB.y = this.m_xf.q.s * n.m_centroid.x + this.m_xf.q.c * n.m_centroid.y + this.m_xf.p.y;
this.m_v0.x = e.m_vertex0.x;
this.m_v0.y = e.m_vertex0.y;
this.m_v1.x = e.m_vertex1.x;
this.m_v1.y = e.m_vertex1.y;
this.m_v2.x = e.m_vertex2.x;
this.m_v2.y = e.m_vertex2.y;
this.m_v3.x = e.m_vertex3.x;
this.m_v3.y = e.m_vertex3.y;
var s = e.m_hasVertex0, a = e.m_hasVertex3;
Wt._temp_edge.x = this.m_v2.x - this.m_v1.x;
Wt._temp_edge.y = this.m_v2.y - this.m_v1.y;
Wt._temp_edge.Normalize();
this.m_normal1.x = Wt._temp_edge.y;
this.m_normal1.y = -Wt._temp_edge.x;
var o = this.m_normal1.x * (this.m_centroidB.x - this.m_v1.x) + this.m_normal1.y * (this.m_centroidB.y - this.m_v1.y), l = 0, c = 0, u = !1, m = !1;
if (s) {
Wt._temp_edge0.x = this.m_v1.x - this.m_v0.x;
Wt._temp_edge0.y = this.m_v1.y - this.m_v0.y;
Wt._temp_edge0.Normalize();
this.m_normal0.x = Wt._temp_edge0.y;
this.m_normal0.y = -Wt._temp_edge0.x;
u = Wt._temp_edge0.x * Wt._temp_edge.y - Wt._temp_edge0.y * Wt._temp_edge.x >= 0;
l = this.m_normal0.x * (this.m_centroidB.x - this.m_v0.x) + this.m_normal0.y * (this.m_centroidB.y - this.m_v0.y);
}
if (a) {
Wt._temp_edge2.x = this.m_v3.x - this.m_v2.x;
Wt._temp_edge2.y = this.m_v3.y - this.m_v2.y;
Wt._temp_edge2.Normalize();
this.m_normal2.x = Wt._temp_edge2.y;
this.m_normal2.y = -Wt._temp_edge2.x;
m = Wt._temp_edge.x * Wt._temp_edge2.y - Wt._temp_edge.y * Wt._temp_edge2.x > 0;
c = this.m_normal2.x * (this.m_centroidB.x - this.m_v2.x) + this.m_normal2.y * (this.m_centroidB.y - this.m_v2.y);
}
if (s && a) if (u && m) {
this.m_front = l >= 0 || o >= 0 || c >= 0;
if (this.m_front) {
this.m_normal.x = this.m_normal1.x;
this.m_normal.y = this.m_normal1.y;
this.m_lowerLimit.x = this.m_normal0.x;
this.m_lowerLimit.y = this.m_normal0.y;
this.m_upperLimit.x = this.m_normal2.x;
this.m_upperLimit.y = this.m_normal2.y;
} else {
this.m_normal.x = -this.m_normal1.x;
this.m_normal.y = -this.m_normal1.y;
this.m_lowerLimit.x = -this.m_normal1.x;
this.m_lowerLimit.y = -this.m_normal1.y;
this.m_upperLimit.x = -this.m_normal1.x;
this.m_upperLimit.y = -this.m_normal1.y;
}
} else if (u) {
this.m_front = l >= 0 || o >= 0 && c >= 0;
if (this.m_front) {
this.m_normal.x = this.m_normal1.x;
this.m_normal.y = this.m_normal1.y;
this.m_lowerLimit.x = this.m_normal0.x;
this.m_lowerLimit.y = this.m_normal0.y;
this.m_upperLimit.x = this.m_normal1.x;
this.m_upperLimit.y = this.m_normal1.y;
} else {
this.m_normal.x = -this.m_normal1.x;
this.m_normal.y = -this.m_normal1.y;
this.m_lowerLimit.x = -this.m_normal2.x;
this.m_lowerLimit.y = -this.m_normal2.y;
this.m_upperLimit.x = -this.m_normal1.x;
this.m_upperLimit.y = -this.m_normal1.y;
}
} else if (m) {
this.m_front = c >= 0 || l >= 0 && o >= 0;
if (this.m_front) {
this.m_normal.x = this.m_normal1.x;
this.m_normal.y = this.m_normal1.y;
this.m_lowerLimit.x = this.m_normal1.x;
this.m_lowerLimit.y = this.m_normal1.y;
this.m_upperLimit.x = this.m_normal2.x;
this.m_upperLimit.y = this.m_normal2.y;
} else {
this.m_normal.x = -this.m_normal1.x;
this.m_normal.y = -this.m_normal1.y;
this.m_lowerLimit.x = -this.m_normal1.x;
this.m_lowerLimit.y = -this.m_normal1.y;
this.m_upperLimit.x = -this.m_normal0.x;
this.m_upperLimit.y = -this.m_normal0.y;
}
} else {
this.m_front = l >= 0 && o >= 0 && c >= 0;
if (this.m_front) {
this.m_normal.x = this.m_normal1.x;
this.m_normal.y = this.m_normal1.y;
this.m_lowerLimit.x = this.m_normal1.x;
this.m_lowerLimit.y = this.m_normal1.y;
this.m_upperLimit.x = this.m_normal1.x;
this.m_upperLimit.y = this.m_normal1.y;
} else {
this.m_normal.x = -this.m_normal1.x;
this.m_normal.y = -this.m_normal1.y;
this.m_lowerLimit.x = -this.m_normal2.x;
this.m_lowerLimit.y = -this.m_normal2.y;
this.m_upperLimit.x = -this.m_normal0.x;
this.m_upperLimit.y = -this.m_normal0.y;
}
} else if (s) if (u) {
this.m_front = l >= 0 || o >= 0;
if (this.m_front) {
this.m_normal.x = this.m_normal1.x;
this.m_normal.y = this.m_normal1.y;
this.m_lowerLimit.x = this.m_normal0.x;
this.m_lowerLimit.y = this.m_normal0.y;
this.m_upperLimit.x = -this.m_normal1.x;
this.m_upperLimit.y = -this.m_normal1.y;
} else {
this.m_normal.x = -this.m_normal1.x;
this.m_normal.y = -this.m_normal1.y;
this.m_lowerLimit.x = this.m_normal1.x;
this.m_lowerLimit.y = this.m_normal1.y;
this.m_upperLimit.x = -this.m_normal1.x;
this.m_upperLimit.y = -this.m_normal1.y;
}
} else {
this.m_front = l >= 0 && o >= 0;
if (this.m_front) {
this.m_normal.x = this.m_normal1.x;
this.m_normal.y = this.m_normal1.y;
this.m_lowerLimit.x = this.m_normal1.x;
this.m_lowerLimit.y = this.m_normal1.y;
this.m_upperLimit.x = -this.m_normal1.x;
this.m_upperLimit.y = -this.m_normal1.y;
} else {
this.m_normal.x = -this.m_normal1.x;
this.m_normal.y = -this.m_normal1.y;
this.m_lowerLimit.x = this.m_normal1.x;
this.m_lowerLimit.y = this.m_normal1.y;
this.m_upperLimit.x = -this.m_normal0.x;
this.m_upperLimit.y = -this.m_normal0.y;
}
} else if (a) if (m) {
this.m_front = o >= 0 || c >= 0;
if (this.m_front) {
this.m_normal.x = this.m_normal1.x;
this.m_normal.y = this.m_normal1.y;
this.m_lowerLimit.x = -this.m_normal1.x;
this.m_lowerLimit.y = -this.m_normal1.y;
this.m_upperLimit.x = this.m_normal2.x;
this.m_upperLimit.y = this.m_normal2.y;
} else {
this.m_normal.x = -this.m_normal1.x;
this.m_normal.y = -this.m_normal1.y;
this.m_lowerLimit.x = -this.m_normal1.x;
this.m_lowerLimit.y = -this.m_normal1.y;
this.m_upperLimit.x = this.m_normal1.x;
this.m_upperLimit.y = this.m_normal1.y;
}
} else {
this.m_front = o >= 0 && c >= 0;
if (this.m_front) {
this.m_normal.x = this.m_normal1.x;
this.m_normal.y = this.m_normal1.y;
this.m_lowerLimit.x = -this.m_normal1.x;
this.m_lowerLimit.y = -this.m_normal1.y;
this.m_upperLimit.x = this.m_normal1.x;
this.m_upperLimit.y = this.m_normal1.y;
} else {
this.m_normal.x = -this.m_normal1.x;
this.m_normal.y = -this.m_normal1.y;
this.m_lowerLimit.x = -this.m_normal2.x;
this.m_lowerLimit.y = -this.m_normal2.y;
this.m_upperLimit.x = this.m_normal1.x;
this.m_upperLimit.y = this.m_normal1.y;
}
} else {
this.m_front = o >= 0;
if (this.m_front) {
this.m_normal.x = this.m_normal1.x;
this.m_normal.y = this.m_normal1.y;
this.m_lowerLimit.x = -this.m_normal1.x;
this.m_lowerLimit.y = -this.m_normal1.y;
this.m_upperLimit.x = -this.m_normal1.x;
this.m_upperLimit.y = -this.m_normal1.y;
} else {
this.m_normal.x = -this.m_normal1.x;
this.m_normal.y = -this.m_normal1.y;
this.m_lowerLimit.x = this.m_normal1.x;
this.m_lowerLimit.y = this.m_normal1.y;
this.m_upperLimit.x = this.m_normal1.x;
this.m_upperLimit.y = this.m_normal1.y;
}
}
this.m_polygonB.count = n.m_count;
for (var f = 0; f < n.m_count; ++f) {
this.m_polygonB.vertices[f] = J(this.m_xf, n.m_vertices[f]);
this.m_polygonB.normals[f] = X(this.m_xf.q, n.m_normals[f]);
}
this.m_radius = 2 * _;
t.pointCount = 0;
var d = this.ComputeEdgeSeparation();
if (d.type != Ut.e_unknown && !(d.separation > this.m_radius)) {
var p = this.ComputePolygonSeparation();
if (!(p.type != Ut.e_unknown && p.separation > this.m_radius)) {
var g = new Ut();
g = p.type == Ut.e_unknown ? d : p.separation > .98 * d.separation + .001 ? p : d;
var y = new Array(2), v = new jt();
if (g.type == Ut.e_edgeA) {
t.type = Mt.e_faceA;
var x = 0, A = this.m_normal.x * this.m_polygonB.normals[0].x + this.m_normal.y * this.m_polygonB.normals[0].y;
for (f = 1; f < this.m_polygonB.count; ++f) {
var b = this.m_normal.x * this.m_polygonB.normals[f].x + this.m_normal.y * this.m_polygonB.normals[f].y;
if (b < A) {
A = b;
x = f;
}
}
var T = x, C = T + 1 < this.m_polygonB.count ? T + 1 : 0;
y[0] = new Pt();
y[0].v.x = this.m_polygonB.vertices[T].x;
y[0].v.y = this.m_polygonB.vertices[T].y;
y[0].id.indexA = 0;
y[0].id.indexB = T;
y[0].id.typeA = Et.e_face;
y[0].id.typeB = Et.e_vertex;
y[1] = new Pt();
y[1].v.x = this.m_polygonB.vertices[C].x;
y[1].v.y = this.m_polygonB.vertices[C].y;
y[1].id.indexA = 0;
y[1].id.indexB = C;
y[1].id.typeA = Et.e_face;
y[1].id.typeB = Et.e_vertex;
if (this.m_front) {
v.i1 = 0;
v.i2 = 1;
v.v1.x = this.m_v1.x;
v.v1.y = this.m_v1.y;
v.v2.x = this.m_v2.x;
v.v2.y = this.m_v2.y;
v.normal.x = this.m_normal1.x;
v.normal.y = this.m_normal1.y;
} else {
v.i1 = 1;
v.i2 = 0;
v.v1.x = this.m_v2.x;
v.v1.y = this.m_v2.y;
v.v2.x = this.m_v1.x;
v.v2.y = this.m_v1.y;
v.normal.x = -this.m_normal1.x;
v.normal.y = -this.m_normal1.y;
}
} else {
t.type = Mt.e_faceB;
y[0] = new Pt();
y[0].v = this.m_v1;
y[0].id.indexA = 0;
y[0].id.indexB = g.index;
y[0].id.typeA = Et.e_vertex;
y[0].id.typeB = Et.e_face;
y[1] = new Pt();
y[1].v = this.m_v2;
y[1].id.indexA = 0;
y[1].id.indexB = g.index;
y[1].id.typeA = Et.e_vertex;
y[1].id.typeB = Et.e_face;
v.i1 = g.index;
v.i2 = v.i1 + 1 < this.m_polygonB.count ? v.i1 + 1 : 0;
v.v1.x = this.m_polygonB.vertices[v.i1].x;
v.v1.y = this.m_polygonB.vertices[v.i1].y;
v.v2.x = this.m_polygonB.vertices[v.i2].x;
v.v2.y = this.m_polygonB.vertices[v.i2].y;
v.normal.x = this.m_polygonB.normals[v.i1].x;
v.normal.y = this.m_polygonB.normals[v.i1].y;
}
v.sideNormal1.x = v.normal.y;
v.sideNormal1.y = -v.normal.x;
v.sideNormal2.x = -v.sideNormal1.x;
v.sideNormal2.y = -v.sideNormal1.y;
v.sideOffset1 = v.sideNormal1.x * v.v1.x + v.sideNormal1.y * v.v1.y;
v.sideOffset2 = v.sideNormal2.x * v.v2.x + v.sideNormal2.y * v.v2.y;
var w = new Array(2), S = new Array(2);
if (!(qt(w, y, v.sideNormal1.x, v.sideNormal1.y, v.sideOffset1, v.i1) < h || qt(S, w, v.sideNormal2.x, v.sideNormal2.y, v.sideOffset2, v.i2) < h)) {
if (g.type == Ut.e_edgeA) {
t.localNormal.x = v.normal.x;
t.localNormal.y = v.normal.y;
t.localPoint.x = v.v1.x;
t.localPoint.y = v.v1.y;
} else {
t.localNormal.x = n.m_normals[v.i1].x;
t.localNormal.y = n.m_normals[v.i1].y;
t.localPoint.x = n.m_vertices[v.i1].x;
t.localPoint.y = n.m_vertices[v.i1].y;
}
var E = 0;
for (f = 0; f < h; ++f) {
if (v.normal.x * (S[f].v.x - v.v1.x) + v.normal.y * (S[f].v.y - v.v1.y) <= this.m_radius) {
var D = t.points[E] = new Dt();
if (g.type == Ut.e_edgeA) {
D.localPoint.Assign(Z(this.m_xf, S[f].v));
D.id.Assign(S[f].id);
} else {
D.localPoint.x = S[f].v.x;
D.localPoint.y = S[f].v.y;
D.id.typeA = S[f].id.typeB;
D.id.typeB = S[f].id.typeA;
D.id.indexA = S[f].id.indexB;
D.id.indexB = S[f].id.indexA;
}
++E;
}
}
t.pointCount = E;
}
}
}
},
ComputeEdgeSeparation: function() {
var t = new Ut();
t.type = Ut.e_edgeA;
t.index = this.m_front ? 0 : 1;
t.separation = Number.MAX_VALUE;
for (var e = 0; e < this.m_polygonB.count; ++e) {
var i = this.m_normal.x * (this.m_polygonB.vertices[e].x - this.m_v1.x) + this.m_normal.y * (this.m_polygonB.vertices[e].y - this.m_v1.y);
i < t.separation && (t.separation = i);
}
return t;
},
ComputePolygonSeparation: function() {
var t = new Ut();
t.type = Ut.e_unknown;
t.index = -1;
t.separation = -Number.MAX_VALUE;
for (var e = -this.m_normal.y, i = this.m_normal.x, n = 0; n < this.m_polygonB.count; ++n) {
var r = -this.m_polygonB.normals[n].x, s = -this.m_polygonB.normals[n].y, a = r * (this.m_polygonB.vertices[n].x - this.m_v1.x) + s * (this.m_polygonB.vertices[n].y - this.m_v1.y), o = r * (this.m_polygonB.vertices[n].x - this.m_v2.x) + s * (this.m_polygonB.vertices[n].y - this.m_v2.y), h = tt(a, o);
if (h > this.m_radius) {
t.type = Ut.e_edgeB;
t.index = n;
t.separation = h;
return t;
}
if (r * e + s * i >= 0) {
if ((r - this.m_upperLimit.x) * this.m_normal.x + (s - this.m_upperLimit.y) * this.m_normal.y < -u) continue;
} else if ((r - this.m_lowerLimit.x) * this.m_normal.x + (s - this.m_lowerLimit.y) * this.m_normal.y < -u) continue;
if (h > t.separation) {
t.type = Ut.e_edgeB;
t.index = n;
t.separation = h;
}
}
return t;
}
};
Wt.e_isolated = 0;
Wt.e_concave = 1;
Wt.e_convex = 2;
function Ht(t, e, i, n, r) {
Ht.collider.Collide(t, e, i, n, r);
}
Ht.collider = new Wt();
function qt(t, e, i, n, r, s) {
var a = 0, o = i * e[0].v.x + n * e[0].v.y - r, h = i * e[1].v.x + n * e[1].v.y - r;
o <= 0 && (t[a++] = e[0]);
h <= 0 && (t[a++] = e[1]);
if (o * h < 0) {
var l = o / (o - h);
t[a] = new Pt();
t[a].v.x = e[0].v.x + l * (e[1].v.x - e[0].v.x);
t[a].v.y = e[0].v.y + l * (e[1].v.y - e[0].v.y);
t[a].id.indexA = s;
t[a].id.indexB = e[0].id.indexB;
t[a].id.typeA = Et.e_vertex;
t[a].id.typeB = Et.e_face;
++a;
}
return a;
}
function Xt(t, e, i, n, r, s) {
Xt.input.proxyA.Set(t, e);
Xt.input.proxyB.Set(i, n);
Xt.input.transformA = r;
Xt.input.transformB = s;
Xt.input.useRadii = !0;
Xt.cache.count = 0;
St(Xt.output, Xt.cache, Xt.input);
return Xt.output.distance < 10 * a;
}
Xt.input = new vt();
Xt.cache = new yt();
Xt.output = new xt();
function Yt(t, e) {
return !(e.lowerBound.x - t.upperBound.x > 0 || e.lowerBound.y - t.upperBound.y > 0 || t.lowerBound.x - e.upperBound.x > 0 || t.lowerBound.y - e.upperBound.y > 0);
}
var Jt = -1;
function Zt() {
this.aabb = new Lt();
this.userData = null;
this.parent = 0;
this.child1 = this.child2 = this.height = 0;
}
Zt.prototype = {
IsLeaf: function() {
return this.child1 == Jt;
}
};
function Kt() {
this.m_root = Jt;
this.m_nodeCapacity = 16;
this.m_nodeCount = 0;
this.m_nodes = new Array(this.m_nodeCapacity);
for (var t = 0; t < this.m_nodeCapacity - 1; ++t) {
this.m_nodes[t] = new Zt();
this.m_nodes[t].parent = t + 1;
this.m_nodes[t].height = -1;
}
this.m_nodes[this.m_nodeCapacity - 1] = new Zt();
this.m_nodes[this.m_nodeCapacity - 1].parent = Jt;
this.m_nodes[this.m_nodeCapacity - 1].height = -1;
this.m_freeList = 0;
this.m_path = 0;
this.m_insertionCount = 0;
}
Kt.aabbExtensionFattener = new E(.1, .1);
Kt.prototype = {
CreateProxy: function(t, e) {
var i = this.AllocateNode();
this.m_nodes[i].aabb.lowerBound.Assign(E.Subtract(t.lowerBound, Kt.aabbExtensionFattener));
this.m_nodes[i].aabb.upperBound.Assign(E.Add(t.upperBound, Kt.aabbExtensionFattener));
this.m_nodes[i].userData = e;
this.m_nodes[i].height = 0;
this.InsertLeaf(i);
return i;
},
DestroyProxy: function(t) {
r(0 <= t && t < this.m_nodeCapacity);
r(this.m_nodes[t].IsLeaf());
this.RemoveLeaf(t);
this.FreeNode(t);
},
MoveProxy: function(t, e, i) {
r(0 <= t && t < this.m_nodeCapacity);
r(this.m_nodes[t].IsLeaf());
if (this.m_nodes[t].aabb.Contains(e)) return !1;
this.RemoveLeaf(t);
this.m_nodes[t].aabb.Assign(e);
this.m_nodes[t].aabb.lowerBound.Subtract(Kt.aabbExtensionFattener);
this.m_nodes[t].aabb.upperBound.Add(Kt.aabbExtensionFattener);
var n = E.Multiply(2, i);
n.x < 0 ? this.m_nodes[t].aabb.lowerBound.x += n.x : this.m_nodes[t].aabb.upperBound.x += n.x;
n.y < 0 ? this.m_nodes[t].aabb.lowerBound.y += n.y : this.m_nodes[t].aabb.upperBound.y += n.y;
this.InsertLeaf(t);
return !0;
},
GetUserData: function(t) {
r(0 <= t && t < this.m_nodeCapacity);
return this.m_nodes[t].userData;
},
GetFatAABB: function(t) {
r(0 <= t && t < this.m_nodeCapacity);
return this.m_nodes[t].aabb;
},
Query: function(t, e) {
var i = [];
i.push(this.m_root);
for (;i.length > 0; ) {
var n = i.pop();
if (n != Jt) {
var r = this.m_nodes[n];
if (Yt(r.aabb, e)) if (r.IsLeaf()) {
if (0 == t.QueryCallback(n)) return;
} else {
i.push(r.child1);
i.push(r.child2);
}
}
}
},
RayCast: function(t, e) {
var i = e.p1, n = e.p2, s = E.Subtract(n, i);
r(s.LengthSquared() > 0);
s.Normalize();
var a = N(1, s), o = $(a), h = e.maxFraction, l = new Lt(), c = E.Add(i, E.Multiply(h, E.Subtract(n, i)));
l.lowerBound.Assign(et(i, c));
l.upperBound.Assign(nt(i, c));
var u = [];
u.push(this.m_root);
for (;u.length > 0; ) {
var _ = u.pop();
if (_ != Jt) {
var m = this.m_nodes[_];
if (0 != Yt(m.aabb, l)) {
var f = m.aabb.GetCenter(), d = m.aabb.GetExtents();
if (!(Q(L(a, E.Subtract(i, f))) - L(o, d) > 0)) if (m.IsLeaf()) {
var p = new Bt();
p.p1.Assign(e.p1);
p.p2.Assign(e.p2);
p.maxFraction = h;
var g = t.RayCastCallback(p, _);
if (0 == g) return;
if (g > 0) {
h = g;
c = E.Add(i, E.Multiply(h, E.Subtract(n, i)));
l.lowerBound.Assign(et(i, c));
l.upperBound.Assign(nt(i, c));
}
} else {
u.push(m.child1);
u.push(m.child2);
}
}
}
}
},
Validate: function() {
this.ValidateStructure(this.m_root);
this.ValidateMetrics(this.m_root);
for (var t = 0, e = this.m_freeList; e != Jt; ) {
r(0 <= e && e < this.m_nodeCapacity);
e = this.m_nodes[e].parent;
++t;
}
r(this.GetHeight() == this.ComputeHeight());
r(this.m_nodeCount + t == this.m_nodeCapacity);
},
GetHeight: function() {
return this.m_root == Jt ? 0 : this.m_nodes[this.m_root].height;
},
GetMaxBalance: function() {
for (var t = 0, e = 0; e < this.m_nodeCapacity; ++e) {
var i = this.m_nodes[e];
if (!(i.height <= 1)) {
r(0 == i.IsLeaf());
var n = i.child1, s = i.child2, a = Q(this.m_nodes[s].height - this.m_nodes[n].height);
t = it(t, a);
}
}
return t;
},
GetAreaRatio: function() {
if (this.m_root == Jt) return 0;
for (var t = this.m_nodes[this.m_root].aabb.GetPerimeter(), e = 0, i = 0; i < this.m_nodeCapacity; ++i) {
var n = this.m_nodes[i];
n.height < 0 || (e += n.aabb.GetPerimeter());
}
return e / t;
},
RebuildBottomUp: function() {
for (var t = new Array(this.m_nodeCount), e = 0, i = 0; i < this.m_nodeCapacity; ++i) if (!(this.m_nodes[i].height < 0)) if (this.m_nodes[i].IsLeaf()) {
this.m_nodes[i].parent = Jt;
t[e] = i;
++e;
} else this.FreeNode(i);
for (;e > 1; ) {
var n = s, r = -1, a = -1;
for (i = 0; i < e; ++i) for (var o = this.m_nodes[t[i]].aabb, h = i + 1; h < e; ++h) {
var l = this.m_nodes[t[h]].aabb, c = new Lt();
c.Combine(o, l);
var u = c.GetPerimeter();
if (u < n) {
r = i;
a = h;
n = u;
}
}
var _ = t[r], m = t[a], f = this.m_nodes[_], d = this.m_nodes[m], p = this.AllocateNode(), g = this.m_nodes[p];
g.child1 = _;
g.child2 = m;
g.height = 1 + it(f.height, d.height);
g.aabb.Combine(f.aabb, d.aabb);
g.parent = Jt;
f.parent = p;
d.parent = p;
t[a] = t[e - 1];
t[r] = p;
--e;
}
this.m_root = t[0];
this.Validate();
},
ShiftOrigin: function(t) {
for (var e = 0; e < this.m_nodeCapacity; ++e) {
this.m_nodes[e].aabb.lowerBound.Subtract(t);
this.m_nodes[e].aabb.upperBound.Subtract(t);
}
},
AllocateNode: function() {
if (this.m_freeList == Jt) {
r(this.m_nodeCount == this.m_nodeCapacity);
var t = this.m_nodes;
this.m_nodeCapacity *= 2;
this.m_nodes = t.concat(new Array(this.m_nodeCapacity - this.m_nodeCount));
for (var e = this.m_nodeCount; e < this.m_nodeCapacity - 1; ++e) {
this.m_nodes[e] = new Zt();
this.m_nodes[e].parent = e + 1;
this.m_nodes[e].height = -1;
}
this.m_nodes[this.m_nodeCapacity - 1] = new Zt();
this.m_nodes[this.m_nodeCapacity - 1].parent = Jt;
this.m_nodes[this.m_nodeCapacity - 1].height = -1;
this.m_freeList = this.m_nodeCount;
}
var i = this.m_freeList;
this.m_freeList = this.m_nodes[i].parent;
this.m_nodes[i].parent = Jt;
this.m_nodes[i].child1 = Jt;
this.m_nodes[i].child2 = Jt;
this.m_nodes[i].height = 0;
this.m_nodes[i].userData = null;
++this.m_nodeCount;
return i;
},
FreeNode: function(t) {
r(0 <= t && t < this.m_nodeCapacity);
r(0 < this.m_nodeCount);
this.m_nodes[t].parent = this.m_freeList;
this.m_nodes[t].height = -1;
this.m_freeList = t;
--this.m_nodeCount;
},
InsertLeaf: function(t) {
++this.m_insertionCount;
if (this.m_root != Jt) {
for (var e = this.m_nodes[t].aabb, i = this.m_root; 0 == this.m_nodes[i].IsLeaf(); ) {
var n = this.m_nodes[i].child1, s = this.m_nodes[i].child2, a = this.m_nodes[i].aabb.GetPerimeter(), o = new Lt();
o.Combine(this.m_nodes[i].aabb, e);
var h, l, c, u = o.GetPerimeter(), _ = 2 * u, m = 2 * (u - a);
if (this.m_nodes[n].IsLeaf()) {
(l = new Lt()).Combine(e, this.m_nodes[n].aabb);
h = l.GetPerimeter() + m;
} else {
(l = new Lt()).Combine(e, this.m_nodes[n].aabb);
var f = this.m_nodes[n].aabb.GetPerimeter();
h = l.GetPerimeter() - f + m;
}
if (this.m_nodes[s].IsLeaf()) {
(l = new Lt()).Combine(e, this.m_nodes[s].aabb);
c = l.GetPerimeter() + m;
} else {
(l = new Lt()).Combine(e, this.m_nodes[s].aabb);
f = this.m_nodes[s].aabb.GetPerimeter();
c = l.GetPerimeter() - f + m;
}
if (_ < h && _ < c) break;
i = h < c ? n : s;
}
var d = i, p = this.m_nodes[d].parent, g = this.AllocateNode();
this.m_nodes[g].parent = p;
this.m_nodes[g].userData = null;
this.m_nodes[g].aabb.Combine(e, this.m_nodes[d].aabb);
this.m_nodes[g].height = this.m_nodes[d].height + 1;
if (p != Jt) {
this.m_nodes[p].child1 == d ? this.m_nodes[p].child1 = g : this.m_nodes[p].child2 = g;
this.m_nodes[g].child1 = d;
this.m_nodes[g].child2 = t;
this.m_nodes[d].parent = g;
this.m_nodes[t].parent = g;
} else {
this.m_nodes[g].child1 = d;
this.m_nodes[g].child2 = t;
this.m_nodes[d].parent = g;
this.m_nodes[t].parent = g;
this.m_root = g;
}
i = this.m_nodes[t].parent;
for (;i != Jt; ) {
i = this.Balance(i);
n = this.m_nodes[i].child1, s = this.m_nodes[i].child2;
r(n != Jt);
r(s != Jt);
this.m_nodes[i].height = 1 + it(this.m_nodes[n].height, this.m_nodes[s].height);
this.m_nodes[i].aabb.Combine(this.m_nodes[n].aabb, this.m_nodes[s].aabb);
i = this.m_nodes[i].parent;
}
} else {
this.m_root = t;
this.m_nodes[this.m_root].parent = Jt;
}
},
RemoveLeaf: function(t) {
if (t != this.m_root) {
var e, i = this.m_nodes[t].parent, n = this.m_nodes[i].parent;
e = this.m_nodes[i].child1 == t ? this.m_nodes[i].child2 : this.m_nodes[i].child1;
if (n != Jt) {
this.m_nodes[n].child1 == i ? this.m_nodes[n].child1 = e : this.m_nodes[n].child2 = e;
this.m_nodes[e].parent = n;
this.FreeNode(i);
for (var r = n; r != Jt; ) {
r = this.Balance(r);
var s = this.m_nodes[r].child1, a = this.m_nodes[r].child2;
this.m_nodes[r].aabb.Combine(this.m_nodes[s].aabb, this.m_nodes[a].aabb);
this.m_nodes[r].height = 1 + it(this.m_nodes[s].height, this.m_nodes[a].height);
r = this.m_nodes[r].parent;
}
} else {
this.m_root = e;
this.m_nodes[e].parent = Jt;
this.FreeNode(i);
}
} else this.m_root = Jt;
},
Balance: function(t) {
r(t != Jt);
var e = this.m_nodes[t];
if (e.IsLeaf() || e.height < 2) return t;
var i = e.child1, n = e.child2;
r(0 <= i && i < this.m_nodeCapacity);
r(0 <= n && n < this.m_nodeCapacity);
var s = this.m_nodes[i], a = this.m_nodes[n], o = a.height - s.height;
if (o > 1) {
var h = a.child1, l = a.child2, c = this.m_nodes[h], u = this.m_nodes[l];
r(0 <= h && h < this.m_nodeCapacity);
r(0 <= l && l < this.m_nodeCapacity);
a.child1 = t;
a.parent = e.parent;
e.parent = n;
if (a.parent != Jt) if (this.m_nodes[a.parent].child1 == t) this.m_nodes[a.parent].child1 = n; else {
r(this.m_nodes[a.parent].child2 == t);
this.m_nodes[a.parent].child2 = n;
} else this.m_root = n;
if (c.height > u.height) {
a.child2 = h;
e.child2 = l;
u.parent = t;
e.aabb.Combine(s.aabb, u.aabb);
a.aabb.Combine(e.aabb, c.aabb);
e.height = 1 + it(s.height, u.height);
a.height = 1 + it(e.height, c.height);
} else {
a.child2 = l;
e.child2 = h;
c.parent = t;
e.aabb.Combine(s.aabb, c.aabb);
a.aabb.Combine(e.aabb, u.aabb);
e.height = 1 + it(s.height, c.height);
a.height = 1 + it(e.height, u.height);
}
return n;
}
if (o < -1) {
var _ = s.child1, m = s.child2, f = this.m_nodes[_], d = this.m_nodes[m];
r(0 <= _ && _ < this.m_nodeCapacity);
r(0 <= m && m < this.m_nodeCapacity);
s.child1 = t;
s.parent = e.parent;
e.parent = i;
if (s.parent != Jt) if (this.m_nodes[s.parent].child1 == t) this.m_nodes[s.parent].child1 = i; else {
r(this.m_nodes[s.parent].child2 == t);
this.m_nodes[s.parent].child2 = i;
} else this.m_root = i;
if (f.height > d.height) {
s.child2 = _;
e.child1 = m;
d.parent = t;
e.aabb.Combine(a.aabb, d.aabb);
s.aabb.Combine(e.aabb, f.aabb);
e.height = 1 + it(a.height, d.height);
s.height = 1 + it(e.height, f.height);
} else {
s.child2 = m;
e.child1 = _;
f.parent = t;
e.aabb.Combine(a.aabb, f.aabb);
s.aabb.Combine(e.aabb, d.aabb);
e.height = 1 + it(a.height, f.height);
s.height = 1 + it(e.height, d.height);
}
return i;
}
return t;
},
ComputeHeight: function(i) {
"undefined" === ("object" === (e = typeof i) ? t(i) : e) && (i = this.m_root);
r(0 <= i && i < this.m_nodeCapacity);
var n = this.m_nodes[i];
if (n.IsLeaf()) return 0;
var s = this.ComputeHeight(n.child1), a = this.ComputeHeight(n.child2);
return 1 + it(s, a);
},
ValidateStructure: function(t) {
if (t != Jt) {
t == this.m_root && r(this.m_nodes[t].parent == Jt);
var e = this.m_nodes[t], i = e.child1, n = e.child2;
if (e.IsLeaf()) {
r(i == Jt);
r(n == Jt);
r(0 == e.height);
} else {
r(0 <= i && i < this.m_nodeCapacity);
r(0 <= n && n < this.m_nodeCapacity);
r(this.m_nodes[i].parent == t);
r(this.m_nodes[n].parent == t);
this.ValidateStructure(i);
this.ValidateStructure(n);
}
}
},
ValidateMetrics: function(t) {
if (t != Jt) {
var e = this.m_nodes[t], i = e.child1, n = e.child2;
if (e.IsLeaf()) {
r(i == Jt);
r(n == Jt);
r(0 == e.height);
} else {
r(0 <= i && i < this.m_nodeCapacity);
r(0 <= n && n < this.m_nodeCapacity);
var s, a = this.m_nodes[i].height, o = this.m_nodes[n].height;
s = 1 + it(a, o);
r(e.height == s);
var h = new Lt();
h.Combine(this.m_nodes[i].aabb, this.m_nodes[n].aabb);
r(E.Equals(h.lowerBound, e.aabb.lowerBound));
r(E.Equals(h.upperBound, e.aabb.upperBound));
this.ValidateMetrics(i);
this.ValidateMetrics(n);
}
}
}
};
function Qt() {
this.proxyA = new gt();
this.proxyB = new gt();
this.sweepA = new R();
this.sweepB = new R();
this.tMax = 0;
}
function $t() {
this.state = 0;
this.t = 0;
}
$t.e_unknown = 0;
$t.e_failed = 1;
$t.e_overlapped = 2;
$t.e_touching = 3;
$t.e_separated = 4;
function te() {
this.m_proxyA = null;
this.m_proxyB = null;
this.m_sweepA = null;
this.m_sweepB = null;
this.m_type = 0;
this.m_localPoint = new E();
this.m_axis = new E();
}
var ee = new B(), ie = new B();
te.prototype = {
Initialize: function(t, e, i, n, s, a) {
this.m_proxyA = e;
this.m_proxyB = n;
var o = t.count;
r(0 < o && o < 3);
this.m_sweepA = i;
this.m_sweepB = s;
this.m_sweepA.GetTransform(ee, a);
this.m_sweepB.GetTransform(ie, a);
if (1 == o) {
this.m_type = te.e_points;
var h = this.m_proxyA.GetVertex(t.indexA[0]), l = this.m_proxyB.GetVertex(t.indexB[0]), c = ee.q.c * h.x - ee.q.s * h.y + ee.p.x, u = ee.q.s * h.x + ee.q.c * h.y + ee.p.y, _ = ie.q.c * l.x - ie.q.s * l.y + ie.p.x, m = ie.q.s * l.x + ie.q.c * l.y + ie.p.y;
this.m_axis.x = _ - c;
this.m_axis.y = m - u;
return x = this.m_axis.Normalize();
}
if (t.indexA[0] == t.indexA[1]) {
this.m_type = te.e_faceB;
var f = n.GetVertex(t.indexB[0]), d = n.GetVertex(t.indexB[1]);
this.m_axis.x = 1 * (d.y - f.y);
this.m_axis.y = -1 * (d.x - f.x);
this.m_axis.Normalize();
var p = ie.q.c * this.m_axis.x - ie.q.s * this.m_axis.y, g = ie.q.s * this.m_axis.x + ie.q.c * this.m_axis.y;
this.m_localPoint.x = .5 * (f.x + d.x);
this.m_localPoint.y = .5 * (f.y + d.y);
_ = ie.q.c * this.m_localPoint.x - ie.q.s * this.m_localPoint.y + ie.p.x, m = ie.q.s * this.m_localPoint.x + ie.q.c * this.m_localPoint.y + ie.p.y, 
h = e.GetVertex(t.indexA[0]);
if ((x = ((c = ee.q.c * h.x - ee.q.s * h.y + ee.p.x) - _) * p + ((u = ee.q.s * h.x + ee.q.c * h.y + ee.p.y) - m) * g) < 0) {
this.m_axis.x = -this.m_axis.x;
this.m_axis.y = -this.m_axis.y;
x = -x;
}
return x;
}
this.m_type = te.e_faceA;
var y = this.m_proxyA.GetVertex(t.indexA[0]), v = this.m_proxyA.GetVertex(t.indexA[1]);
this.m_axis.x = 1 * (v.y - y.y);
this.m_axis.y = -1 * (v.x - y.x);
this.m_axis.Normalize();
p = ee.q.c * this.m_axis.x - ee.q.s * this.m_axis.y, g = ee.q.s * this.m_axis.x + ee.q.c * this.m_axis.y;
this.m_localPoint.x = .5 * (y.x + v.x);
this.m_localPoint.y = .5 * (y.y + v.y);
var x;
c = ee.q.c * this.m_localPoint.x - ee.q.s * this.m_localPoint.y + ee.p.x, u = ee.q.s * this.m_localPoint.x + ee.q.c * this.m_localPoint.y + ee.p.y, 
l = this.m_proxyB.GetVertex(t.indexB[0]);
if ((x = ((_ = ie.q.c * l.x - ie.q.s * l.y + ie.p.x) - c) * p + ((m = ie.q.s * l.x + ie.q.c * l.y + ie.p.y) - u) * g) < 0) {
this.m_axis.x = -this.m_axis.x;
this.m_axis.y = -this.m_axis.y;
x = -x;
}
return x;
},
FindMinSeparation: function(t, e) {
this.m_sweepA.GetTransform(ee, e);
this.m_sweepB.GetTransform(ie, e);
switch (this.m_type) {
case te.e_points:
var i = ee.q.c * this.m_axis.x + ee.q.s * this.m_axis.y, n = -ee.q.s * this.m_axis.x + ee.q.c * this.m_axis.y, s = ie.q.c * -this.m_axis.x + ie.q.s * -this.m_axis.y, a = -ie.q.s * -this.m_axis.x + ie.q.c * -this.m_axis.y;
t[0] = this.m_proxyA.GetSupport(i, n);
t[1] = this.m_proxyB.GetSupport(s, a);
var o = this.m_proxyA.GetVertex(t[0]), h = this.m_proxyB.GetVertex(t[1]), l = ee.q.c * o.x - ee.q.s * o.y + ee.p.x, c = ee.q.s * o.x + ee.q.c * o.y + ee.p.y, u = ie.q.c * h.x - ie.q.s * h.y + ie.p.x, _ = ie.q.s * h.x + ie.q.c * h.y + ie.p.y;
return (u - l) * this.m_axis.x + (_ - c) * this.m_axis.y;

case te.e_faceA:
var m = ee.q.c * this.m_axis.x - ee.q.s * this.m_axis.y, f = ee.q.s * this.m_axis.x + ee.q.c * this.m_axis.y;
l = ee.q.c * this.m_localPoint.x - ee.q.s * this.m_localPoint.y + ee.p.x, c = ee.q.s * this.m_localPoint.x + ee.q.c * this.m_localPoint.y + ee.p.y, 
s = ie.q.c * -m + ie.q.s * -f, a = -ie.q.s * -m + ie.q.c * -f;
t[0] = -1;
t[1] = this.m_proxyB.GetSupport(s, a);
h = this.m_proxyB.GetVertex(t[1]);
return ((u = ie.q.c * h.x - ie.q.s * h.y + ie.p.x) - l) * m + ((_ = ie.q.s * h.x + ie.q.c * h.y + ie.p.y) - c) * f;

case te.e_faceB:
m = ie.q.c * this.m_axis.x - ie.q.s * this.m_axis.y, f = ie.q.s * this.m_axis.x + ie.q.c * this.m_axis.y, 
u = ie.q.c * this.m_localPoint.x - ie.q.s * this.m_localPoint.y + ie.p.x, _ = ie.q.s * this.m_localPoint.x + ie.q.c * this.m_localPoint.y + ie.p.y, 
i = ee.q.c * -m + ee.q.s * -f, a = -ee.q.s * -m + ee.q.c * -f;
t[1] = -1;
t[0] = this.m_proxyA.GetSupport(i, a);
o = this.m_proxyA.GetVertex(t[0]);
return ((l = ee.q.c * o.x - ee.q.s * o.y + ee.p.x) - u) * m + ((c = ee.q.s * o.x + ee.q.c * o.y + ee.p.y) - _) * f;

default:
r(!1);
t[0] = -1;
t[1] = -1;
return 0;
}
},
Evaluate: function(t, e, i) {
this.m_sweepA.GetTransform(ee, i);
this.m_sweepB.GetTransform(ie, i);
switch (this.m_type) {
case te.e_points:
var n = this.m_proxyA.GetVertex(t), s = this.m_proxyB.GetVertex(e), a = ee.q.c * n.x - ee.q.s * n.y + ee.p.x, o = ee.q.s * n.x + ee.q.c * n.y + ee.p.y, h = ie.q.c * s.x - ie.q.s * s.y + ie.p.x, l = ie.q.s * s.x + ie.q.c * s.y + ie.p.y;
return (h - a) * this.m_axis.x + (l - o) * this.m_axis.y;

case te.e_faceA:
var c = ee.q.c * this.m_axis.x - ee.q.s * this.m_axis.y, u = ee.q.s * this.m_axis.x + ee.q.c * this.m_axis.y;
a = ee.q.c * this.m_localPoint.x - ee.q.s * this.m_localPoint.y + ee.p.x, o = ee.q.s * this.m_localPoint.x + ee.q.c * this.m_localPoint.y + ee.p.y, 
s = this.m_proxyB.GetVertex(e);
return ((h = ie.q.c * s.x - ie.q.s * s.y + ie.p.x) - a) * c + ((l = ie.q.s * s.x + ie.q.c * s.y + ie.p.y) - o) * u;

case te.e_faceB:
c = ie.q.c * this.m_axis.x - ie.q.s * this.m_axis.y, u = ie.q.s * this.m_axis.x + ie.q.c * this.m_axis.y, 
h = ie.q.c * this.m_localPoint.x - ie.q.s * this.m_localPoint.y + ie.p.x, l = ie.q.s * this.m_localPoint.x + ie.q.c * this.m_localPoint.y + ie.p.y, 
n = this.m_proxyA.GetVertex(t);
return ((a = ee.q.c * n.x - ee.q.s * n.y + ee.p.x) - h) * c + ((o = ee.q.s * n.x + ee.q.c * n.y + ee.p.y) - l) * u;

default:
r(!1);
return 0;
}
}
};
te.e_points = 0;
te.e_faceA = 1;
te.e_faceB = 2;
var ne = i.create("toi", "solveTOI");
function re(t, e) {
ne.start();
++re.b2_toiCalls;
t.state = $t.e_unknown;
t.t = e.tMax;
var i = e.proxyA, n = e.proxyB;
re._temp_sweepA.Assign(e.sweepA);
re._temp_sweepB.Assign(e.sweepB);
re._temp_sweepA.Normalize();
re._temp_sweepB.Normalize();
var s = e.tMax, a = i.m_radius + n.m_radius, o = it(c, a - 3 * c), h = .25 * c;
r(o > h);
var u = 0, _ = 0, m = new yt();
m.count = 0;
var f = new vt();
f.proxyA.Assign(e.proxyA);
f.proxyB.Assign(e.proxyB);
f.useRadii = !1;
for (;;) {
re._temp_sweepA.GetTransform(f.transformA, u);
re._temp_sweepB.GetTransform(f.transformB, u);
var d = new xt();
St(d, m, f);
if (d.distance <= 0) {
t.state = $t.e_overlapped;
t.t = 0;
break;
}
if (d.distance < o + h) {
t.state = $t.e_touching;
t.t = u;
break;
}
var p = new te();
p.Initialize(m, i, re._temp_sweepA, n, re._temp_sweepB, u);
for (var g = !1, y = s, v = 0; ;) {
var x = [], A = p.FindMinSeparation(x, y);
if (A > o + h) {
t.state = $t.e_separated;
t.t = s;
g = !0;
break;
}
if (A > o - h) {
u = y;
break;
}
var b = p.Evaluate(x[0], x[1], u);
if (b < o - h) {
t.state = $t.e_failed;
t.t = u;
g = !0;
break;
}
if (b <= o + h) {
t.state = $t.e_touching;
t.t = u;
g = !0;
break;
}
for (var T = 0, C = u, w = y; ;) {
var S;
S = 1 & T ? C + (o - b) * (w - C) / (A - b) : .5 * (C + w);
++T;
++re.b2_toiRootIters;
var E = p.Evaluate(x[0], x[1], S);
if (Q(E - o) < h) {
y = S;
break;
}
if (E > o) {
C = S;
b = E;
} else {
w = S;
A = E;
}
if (50 == T) break;
}
re.b2_toiMaxRootIters = it(re.b2_toiMaxRootIters, T);
if (++v == l) break;
}
++_;
++re.b2_toiIters;
if (g) break;
if (20 == _) {
t.state = $t.e_failed;
t.t = u;
break;
}
}
re.b2_toiMaxIters = it(re.b2_toiMaxIters, _);
ne.stop();
re.b2_toiMaxTime = it(re.b2_toiMaxTime, ne.elapsedTime);
re.b2_toiTime += ne.elapsedTime;
}
re._temp_sweepA = new R();
re._temp_sweepB = new R();
re.b2_toiTime = 0;
re.b2_toiMaxTime = 0;
re.b2_toiCalls = 0;
re.b2_toiIters = 0;
re.b2_toiMaxIters = 0;
re.b2_toiRootIters = 0;
re.b2_toiMaxRootIters = 0;
function se() {
this.type = ae.b2_staticBody;
this.position = new E(0, 0);
this.angle = 0;
this.linearVelocity = new E(0, 0);
this.angularVelocity = 0;
this.linearDamping = 0;
this.angularDamping = 0;
this.allowSleep = !0;
this.awake = !0;
this.fixedRotation = !1;
this.bullet = !1;
this.active = !0;
this.userData = null;
this.gravityScale = 1;
Object.seal(this);
}
se.prototype = {
_deserialize: function(t) {
this.type = t.type;
this.position._deserialize(t.position);
this.angle = t.angle;
this.linearVelocity._deserialize(t.linearVelocity);
this.angularVelocity = t.angularVelocity;
this.linearDamping = t.linearDamping;
this.angularDamping = t.angularDamping;
this.allowSleep = t.allowSleep;
this.awake = t.awake;
this.fixedRotation = t.fixedRotation;
this.bullet = t.bullet;
this.active = t.active;
this.gravityScale = t.gravityScale;
}
};
function ae(t, e) {
r(t.position.IsValid());
r(t.linearVelocity.IsValid());
r(v(t.angle));
r(v(t.angularVelocity));
r(v(t.angularDamping) && t.angularDamping >= 0);
r(v(t.linearDamping) && t.linearDamping >= 0);
this.m_islandIndex = 0;
this.m_flags = 0;
t.bullet && (this.m_flags |= ae.e_bulletFlag);
t.fixedRotation && (this.m_flags |= ae.e_fixedRotationFlag);
t.allowSleep && (this.m_flags |= ae.e_autoSleepFlag);
t.awake && (this.m_flags |= ae.e_awakeFlag);
t.active && (this.m_flags |= ae.e_activeFlag);
this.m_world = e;
this.m_xf = new B();
this.m_xf.p.Assign(t.position);
this.m_xf.q.Set(t.angle);
this.m_sweep = new R();
this.m_sweep.localCenter.SetZero();
this.m_sweep.c0.Assign(this.m_xf.p);
this.m_sweep.c.Assign(this.m_xf.p);
this.m_sweep.a0 = t.angle;
this.m_sweep.a = t.angle;
this.m_sweep.alpha0 = 0;
this.m_jointList = null;
this.m_contactList = null;
this.m_prev = null;
this.m_next = null;
this.m_linearVelocity = t.linearVelocity.Clone();
this.m_angularVelocity = t.angularVelocity;
this.m_linearDamping = t.linearDamping;
this.m_angularDamping = t.angularDamping;
this.m_gravityScale = t.gravityScale;
this.m_force = new E();
this.m_torque = 0;
this.m_sleepTime = 0;
this.m_type = t.type;
if (this.m_type == ae.b2_dynamicBody) {
this.m_mass = 1;
this.m_invMass = 1;
} else {
this.m_mass = 0;
this.m_invMass = 0;
}
this.m_I = 0;
this.m_invI = 0;
this.m_userData = t.userData;
this.m_fixtureList = null;
this.m_fixtureCount = 0;
}
ae.b2_staticBody = 0;
ae.b2_kinematicBody = 1;
ae.b2_dynamicBody = 2;
ae.e_islandFlag = 1;
ae.e_awakeFlag = 2;
ae.e_autoSleepFlag = 4;
ae.e_bulletFlag = 8;
ae.e_fixedRotationFlag = 16;
ae.e_activeFlag = 32;
ae.e_toiFlag = 64;
ae.m_local_oldCenter = new E();
ae.m_local_xf1 = new B();
ae.prototype = {
CreateFixture: function(i, n) {
if ("undefined" !== ("object" === (e = typeof n) ? t(n) : e)) {
var s = new he();
s.shape = i;
s.density = n;
return this.CreateFixture(s);
}
r(0 == this.m_world.IsLocked());
if (1 == this.m_world.IsLocked()) return null;
var a = new ce();
a.Create(this, i);
if (this.m_flags & ae.e_activeFlag) {
var o = this.m_world.m_contactManager.m_broadPhase;
a.CreateProxies(o, this.m_xf);
}
a.m_next = this.m_fixtureList;
this.m_fixtureList = a;
++this.m_fixtureCount;
a.m_body = this;
a.m_density > 0 && this.ResetMassData();
this.m_world.m_flags |= Se.e_newFixture;
return a;
},
DestroyFixture: function(t) {
r(0 == this.m_world.IsLocked());
if (1 != this.m_world.IsLocked()) {
r(t.m_body == this);
r(this.m_fixtureCount > 0);
for (var e = this.m_fixtureList, i = !1; null != e; ) {
if (e == t) {
this.m_fixtureList = e = t.m_next;
i = !0;
break;
}
e = e.m_next;
}
r(i);
for (var n = this.m_contactList; n; ) {
var s = n.contact;
n = n.next;
var a = s.GetFixtureA(), o = s.GetFixtureB();
t != a && t != o || this.m_world.m_contactManager.Destroy(s);
}
if (this.m_flags & ae.e_activeFlag) {
var h = this.m_world.m_contactManager.m_broadPhase;
t.DestroyProxies(h);
}
t.Destroy();
t.m_body = null;
t.m_next = null;
--this.m_fixtureCount;
this.ResetMassData();
}
},
SetTransform: function(t, e) {
r(0 == this.m_world.IsLocked());
if (1 != this.m_world.IsLocked()) {
this.m_xf.q.Set(e);
this.m_xf.p.Assign(t);
this.m_sweep.c.Assign(J(this.m_xf, this.m_sweep.localCenter));
this.m_sweep.a = e;
this.m_sweep.c0.Assign(this.m_sweep.c);
this.m_sweep.a0 = e;
for (var i = this.m_world.m_contactManager.m_broadPhase, n = this.m_fixtureList; n; n = n.m_next) n.Synchronize(i, this.m_xf, this.m_xf);
}
},
GetTransform: function() {
return this.m_xf;
},
GetPosition: function() {
return this.m_xf.p;
},
GetAngle: function() {
return this.m_sweep.a;
},
GetWorldCenter: function() {
return this.m_sweep.c;
},
GetLocalCenter: function() {
return this.m_sweep.localCenter;
},
SetLinearVelocity: function(t) {
if (this.m_type != ae.b2_staticBody) {
L(t, t) > 0 && this.SetAwake(!0);
this.m_linearVelocity = t;
}
},
GetLinearVelocity: function() {
return this.m_linearVelocity;
},
SetAngularVelocity: function(t) {
if (this.m_type != ae.b2_staticBody) {
t * t > 0 && this.SetAwake(!0);
this.m_angularVelocity = t;
}
},
GetAngularVelocity: function() {
return this.m_angularVelocity;
},
ApplyForce: function(t, e, i) {
if (this.m_type == ae.b2_dynamicBody) {
i && 0 == (this.m_flags & ae.e_awakeFlag) && this.SetAwake(!0);
if (this.m_flags & ae.e_awakeFlag) {
this.m_force.Add(t);
this.m_torque += O(E.Subtract(e, this.m_sweep.c), t);
}
}
},
ApplyForceToCenter: function(t, e) {
if (this.m_type == ae.b2_dynamicBody) {
e && 0 == (this.m_flags & ae.e_awakeFlag) && this.SetAwake(!0);
this.m_flags & ae.e_awakeFlag && this.m_force.Add(t);
}
},
ApplyTorque: function(t, e) {
if (this.m_type == ae.b2_dynamicBody) {
e && 0 == (this.m_flags & ae.e_awakeFlag) && this.SetAwake(!0);
this.m_flags & ae.e_awakeFlag && (this.m_torque += t);
}
},
ApplyLinearImpulse: function(t, e, i) {
if (this.m_type == ae.b2_dynamicBody) {
i && 0 == (this.m_flags & ae.e_awakeFlag) && this.SetAwake(!0);
if (this.m_flags & ae.e_awakeFlag) {
this.m_linearVelocity.Add(E.Multiply(this.m_invMass, t));
this.m_angularVelocity += this.m_invI * O(E.Subtract(e, this.m_sweep.c), t);
}
}
},
ApplyAngularImpulse: function(t, e) {
if (this.m_type == ae.b2_dynamicBody) {
e && 0 == (this.m_flags & ae.e_awakeFlag) && this.SetAwake(!0);
this.m_flags & ae.e_awakeFlag && (this.m_angularVelocity += this.m_invI * t);
}
},
GetMass: function() {
return this.m_mass;
},
GetInertia: function() {
return this.m_I + this.m_mass * L(this.m_sweep.localCenter, this.m_sweep.localCenter);
},
GetMassData: function(t) {
t.mass = this.m_mass;
t.I = this.m_I + this.m_mass * L(this.m_sweep.localCenter, this.m_sweep.localCenter);
t.center = this.m_sweep.localCenter;
},
SetMassData: function(t) {
r(0 == this.m_world.IsLocked());
if (1 != this.m_world.IsLocked() && this.m_type == ae.b2_dynamicBody) {
this.m_invMass = 0;
this.m_I = 0;
this.m_invI = 0;
this.m_mass = t.mass;
this.m_mass <= 0 && (this.m_mass = 1);
this.m_invMass = 1 / this.m_mass;
if (t.I > 0 && 0 == (this.m_flags & ae.e_fixedRotationFlag)) {
this.m_I = t.I - this.m_mass * L(t.center, t.center);
r(this.m_I > 0);
this.m_invI = 1 / this.m_I;
}
ae.m_local_oldCenter.Assign(this.m_sweep.c);
this.m_sweep.localCenter.Assign(t.center);
this.m_sweep.c0.Assign(J(this.m_xf, this.m_sweep.localCenter));
this.m_sweep.c.Assign(this.m_sweep.c0);
this.m_linearVelocity.Add(N(this.m_angularVelocity, E.Subtract(this.m_sweep.c, ae.m_local_oldCenter)));
}
},
ResetMassData: function() {
this.m_mass = 0;
this.m_invMass = 0;
this.m_I = 0;
this.m_invI = 0;
this.m_sweep.localCenter.SetZero();
if (this.m_type != ae.b2_staticBody && this.m_type != ae.b2_kinematicBody) {
r(this.m_type == ae.b2_dynamicBody);
for (var t = new E(0, 0), e = this.m_fixtureList; e; e = e.m_next) if (0 != e.m_density) {
var i = new ht();
e.GetMassData(i);
this.m_mass += i.mass;
t.Add(E.Multiply(i.mass, i.center));
this.m_I += i.I;
}
if (this.m_mass > 0) {
this.m_invMass = 1 / this.m_mass;
t.Multiply(this.m_invMass);
} else {
this.m_mass = 1;
this.m_invMass = 1;
}
if (this.m_I > 0 && 0 == (this.m_flags & ae.e_fixedRotationFlag)) {
this.m_I -= this.m_mass * L(t, t);
r(this.m_I > 0);
this.m_invI = 1 / this.m_I;
} else {
this.m_I = 0;
this.m_invI = 0;
}
ae.m_local_oldCenter.Assign(this.m_sweep.c);
this.m_sweep.localCenter.Assign(t);
this.m_sweep.c0.Assign(J(this.m_xf, this.m_sweep.localCenter));
this.m_sweep.c.Assign(this.m_sweep.c0);
this.m_linearVelocity.Add(N(this.m_angularVelocity, E.Subtract(this.m_sweep.c, ae.m_local_oldCenter)));
} else {
this.m_sweep.c0.Assign(this.m_xf.p);
this.m_sweep.c.Assign(this.m_xf.p);
this.m_sweep.a0 = this.m_sweep.a;
}
},
GetWorldPoint: function(t) {
return J(this.m_xf, t);
},
GetWorldVector: function(t) {
return X(this.m_xf.q, t);
},
GetLocalPoint: function(t) {
return Z(this.m_xf, t);
},
GetLocalVector: function(t) {
return Y(this.m_xf.q, t);
},
GetLinearVelocityFromWorldPoint: function(t) {
return E.Add(this.m_linearVelocity, N(this.m_angularVelocity, E.Subtract(t, this.m_sweep.c)));
},
GetLinearVelocityFromLocalPoint: function(t) {
return this.GetLinearVelocityFromWorldPoint(this.GetWorldPoint(t));
},
GetLinearDamping: function() {
return this.m_linearDamping;
},
SetLinearDamping: function(t) {
this.m_linearDamping = t;
},
GetAngularDamping: function() {
return this.m_angularDamping;
},
SetAngularDamping: function(t) {
this.m_angularDamping = t;
},
GetGravityScale: function() {
return this.m_gravityScale;
},
SetGravityScale: function(t) {
this.m_gravityScale = t;
},
SetType: function(t) {
r(0 == this.m_world.IsLocked());
if (1 != this.m_world.IsLocked() && this.m_type != t) {
this.m_type = t;
this.ResetMassData();
if (this.m_type == ae.b2_staticBody) {
this.m_linearVelocity.SetZero();
this.m_angularVelocity = 0;
this.m_sweep.a0 = this.m_sweep.a;
this.m_sweep.c0.Assign(this.m_sweep.c);
this.SynchronizeFixtures();
}
this.SetAwake(!0);
this.m_force.SetZero();
this.m_torque = 0;
for (var e = this.m_contactList; e; ) {
var i = e;
e = e.next;
this.m_world.m_contactManager.Destroy(i.contact);
}
this.m_contactList = null;
for (var n = this.m_world.m_contactManager.m_broadPhase, s = this.m_fixtureList; s; s = s.m_next) for (var a = s.m_proxyCount, o = 0; o < a; ++o) n.TouchProxy(s.m_proxies[o].proxyId);
}
},
GetType: function() {
return this.m_type;
},
SetBullet: function(t) {
t ? this.m_flags |= ae.e_bulletFlag : this.m_flags &= ~ae.e_bulletFlag;
},
IsBullet: function() {
return (this.m_flags & ae.e_bulletFlag) == ae.e_bulletFlag;
},
SetSleepingAllowed: function(t) {
if (t) this.m_flags |= ae.e_autoSleepFlag; else {
this.m_flags &= ~ae.e_autoSleepFlag;
this.SetAwake(!0);
}
},
IsSleepingAllowed: function() {
return (this.m_flags & ae.e_autoSleepFlag) == ae.e_autoSleepFlag;
},
SetAwake: function(t) {
if (t) {
if (0 == (this.m_flags & ae.e_awakeFlag)) {
this.m_flags |= ae.e_awakeFlag;
this.m_sleepTime = 0;
}
} else {
this.m_flags &= ~ae.e_awakeFlag;
this.m_sleepTime = 0;
this.m_linearVelocity.SetZero();
this.m_angularVelocity = 0;
this.m_force.SetZero();
this.m_torque = 0;
}
},
IsAwake: function() {
return (this.m_flags & ae.e_awakeFlag) == ae.e_awakeFlag;
},
SetActive: function(t) {
r(0 == this.m_world.IsLocked());
if (t != this.IsActive()) if (t) {
this.m_flags |= ae.e_activeFlag;
for (var e = this.m_world.m_contactManager.m_broadPhase, i = this.m_fixtureList; i; i = i.m_next) i.CreateProxies(e, this.m_xf);
} else {
this.m_flags &= ~ae.e_activeFlag;
for (e = this.m_world.m_contactManager.m_broadPhase, i = this.m_fixtureList; i; i = i.m_next) i.DestroyProxies(e);
for (var n = this.m_contactList; n; ) {
var s = n;
n = n.next;
this.m_world.m_contactManager.Destroy(s.contact);
}
this.m_contactList = null;
}
},
IsActive: function() {
return (this.m_flags & ae.e_activeFlag) == ae.e_activeFlag;
},
SetFixedRotation: function(t) {
if ((this.m_flags & ae.e_fixedRotationFlag) == ae.e_fixedRotationFlag != t) {
t ? this.m_flags |= ae.e_fixedRotationFlag : this.m_flags &= ~ae.e_fixedRotationFlag;
this.m_angularVelocity = 0;
this.ResetMassData();
}
},
IsFixedRotation: function() {
return (this.m_flags & ae.e_fixedRotationFlag) == ae.e_fixedRotationFlag;
},
GetFixtureList: function() {
return this.m_fixtureList;
},
GetJointList: function() {
return this.m_jointList;
},
GetContactList: function() {
return this.m_contactList;
},
GetNext: function() {
return this.m_next;
},
GetUserData: function() {
return this.m_userData;
},
SetUserData: function(t) {
this.m_userData = t;
},
GetWorld: function() {
return this.m_world;
},
SynchronizeFixtures: function() {
ae.m_local_xf1.q.Set(this.m_sweep.a0);
ae.m_local_xf1.p.Assign(E.Subtract(this.m_sweep.c0, X(ae.m_local_xf1.q, this.m_sweep.localCenter)));
for (var t = this.m_world.m_contactManager.m_broadPhase, e = this.m_fixtureList; e; e = e.m_next) e.Synchronize(t, ae.m_local_xf1, this.m_xf);
},
SynchronizeTransform: function() {
this.m_xf.q.Set(this.m_sweep.a);
this.m_xf.p.Assign(E.Subtract(this.m_sweep.c, X(this.m_xf.q, this.m_sweep.localCenter)));
},
ShouldCollide: function(t) {
if (this.m_type != ae.b2_dynamicBody && t.m_type != ae.b2_dynamicBody) return !1;
for (var e = this.m_jointList; e; e = e.next) if (e.other == t && 0 == e.joint.m_collideConnected) return !1;
return !0;
},
Advance: function(t) {
this.m_sweep.Advance(t);
this.m_sweep.c.Assign(this.m_sweep.c0);
this.m_sweep.a = this.m_sweep.a0;
this.m_xf.q.Set(this.m_sweep.a);
this.m_xf.p.Assign(E.Subtract(this.m_sweep.c, X(this.m_xf.q, this.m_sweep.localCenter)));
},
_serialize: function(t) {
var e = t || {};
e.fixtures = null;
e.type = this.m_type;
e.position = this.GetPosition()._serialize();
e.angle = this.GetAngle();
e.linearVelocity = this.GetLinearVelocity()._serialize();
e.angularVelocity = this.GetAngularVelocity();
e.linearDamping = this.GetLinearDamping();
e.angularDamping = this.GetAngularDamping();
e.allowSleep = this.IsSleepingAllowed();
e.awake = this.IsAwake();
e.fixedRotation = this.IsFixedRotation();
e.bullet = this.IsBullet();
e.active = this.IsActive();
e.gravityScale = this.GetGravityScale();
return e;
}
};
function oe() {
this.categoryBits = 1;
this.maskBits = 65535;
this.groupIndex = 0;
}
oe.prototype = {
Clone: function() {
var t = new oe();
t.categoryBits = this.categoryBits;
t.maskBits = this.maskBits;
t.groupIndex = this.groupIndex;
return t;
},
Assign: function(t) {
this.categoryBits = t.categoryBits;
this.maskBits = t.maskBits;
this.groupIndex = t.groupIndex;
},
_serialize: function(t) {
var e = t || {};
e.categoryBits = this.categoryBits;
e.maskBits = this.maskBits;
e.groupIndex = this.groupIndex;
return e;
},
_deserialize: function(t) {
this.categoryBits = t.categoryBits;
this.maskBits = t.maskBits;
this.groupIndex = t.groupIndex;
}
};
function he() {
this.shape = null;
this.userData = null;
this.friction = .2;
this.restitution = 0;
this.density = 0;
this.isSensor = !1;
this.filter = new oe();
Object.seal(this);
}
he.prototype = {
_deserialize: function(t) {
this.friction = t.friction;
this.restitution = t.restitution;
this.density = t.density;
this.isSensor = t.isSensor;
this.filter._deserialize(t.filter);
}
};
function le() {
this.aabb = new Lt();
this.fixture = null;
this.childIndex = 0;
this.proxyId = 0;
}
function ce() {
this.m_userData = null;
this.m_body = null;
this.m_next = null;
this.m_proxies = null;
this.m_proxyCount = 0;
this.m_shape = null;
this.m_density = 0;
this.m_filter = new oe();
this.m_isSensor = !1;
this.m_friction = 0;
this.m_restitution = 0;
}
ce.prototype = {
GetType: function() {
return this.m_shape.GetType();
},
GetShape: function() {
return this.m_shape;
},
SetSensor: function(t) {
if (t != this.m_isSensor) {
this.m_body.SetAwake(!0);
this.m_isSensor = t;
}
},
IsSensor: function() {
return this.m_isSensor;
},
SetFilterData: function(t) {
this.m_filter = t;
this.Refilter();
},
GetFilterData: function() {
return this.m_filter;
},
Refilter: function() {
if (null != this.m_body) {
for (var t = this.m_body.GetContactList(); t; ) {
var e = t.contact, i = e.GetFixtureA(), n = e.GetFixtureB();
i != this && n != this || e.FlagForFiltering();
t = t.next;
}
var r = this.m_body.GetWorld();
if (null != r) for (var s = r.m_contactManager.m_broadPhase, a = 0; a < this.m_proxyCount; ++a) s.TouchProxy(this.m_proxies[a].proxyId);
}
},
GetBody: function() {
return this.m_body;
},
GetNext: function() {
return this.m_next;
},
GetUserData: function() {
return this.m_userData;
},
SetUserData: function(t) {
this.m_userData = t;
},
TestPoint: function(t) {
return this.m_shape.TestPoint(this.m_body.GetTransform(), t);
},
RayCast: function(t, e, i) {
return this.m_shape.RayCast(t, e, this.m_body.GetTransform(), i);
},
GetMassData: function(t) {
this.m_shape.ComputeMass(t, this.m_density);
},
SetDensity: function(t) {
r(v(t) && t >= 0);
this.m_density = t;
},
GetDensity: function() {
return this.m_density;
},
GetFriction: function() {
return this.m_friction;
},
SetFriction: function(t) {
this.m_friction = t;
},
GetRestitution: function() {
return this.m_restitution;
},
SetRestitution: function(t) {
this.m_restitution = t;
},
GetAABB: function(t) {
r(0 <= t && t < this.m_proxyCount);
return this.m_proxies[t].aabb;
},
Create: function(t, e) {
this.m_userData = e.userData;
this.m_friction = e.friction;
this.m_restitution = e.restitution;
this.m_body = t;
this.m_next = null;
this.m_filter.Assign(e.filter);
this.m_isSensor = e.isSensor;
this.m_shape = e.shape.Clone();
var i = this.m_shape.GetChildCount();
this.m_proxies = new Array(i);
for (var n = 0; n < i; ++n) {
this.m_proxies[n] = new le();
this.m_proxies[n].fixture = null;
this.m_proxies[n].proxyId = pt.e_nullProxy;
}
this.m_proxyCount = 0;
this.m_density = e.density;
},
Destroy: function() {
r(0 == this.m_proxyCount);
this.m_proxies = null;
this.m_shape = null;
},
CreateProxies: function(t, e) {
r(0 == this.m_proxyCount);
this.m_proxyCount = this.m_shape.GetChildCount();
for (var i = 0; i < this.m_proxyCount; ++i) {
var n = this.m_proxies[i];
this.m_shape.ComputeAABB(n.aabb, e, i);
n.proxyId = t.CreateProxy(n.aabb, n);
n.fixture = this;
n.childIndex = i;
}
},
DestroyProxies: function(t) {
for (var e = 0; e < this.m_proxyCount; ++e) {
var i = this.m_proxies[e];
t.DestroyProxy(i.proxyId);
i.proxyId = pt.e_nullProxy;
}
this.m_proxyCount = 0;
},
Synchronize: function(t, e, i) {
if (0 != this.m_proxyCount) for (var n = 0; n < this.m_proxyCount; ++n) {
var r = this.m_proxies[n], s = new Lt(), a = new Lt();
this.m_shape.ComputeAABB(s, e, r.childIndex);
this.m_shape.ComputeAABB(a, i, r.childIndex);
r.aabb.Combine(s, a);
var o = E.Subtract(i.p, e.p);
t.MoveProxy(r.proxyId, r.aabb, o);
}
},
_serialize: function(t) {
var e = t || {};
e.shape = null;
e.friction = this.m_friction;
e.restitution = this.m_restitution;
e.density = this.m_density;
e.isSensor = this.m_isSensor;
e.filter = this.m_filter._serialize();
return e;
}
};
function ue() {}
ue.prototype = {
SayGoodbyeJoint: function(t) {},
SayGoodbyeFixture: function(t) {}
};
function _e() {}
_e.prototype = {
ShouldCollide: function(t, e) {
var i = t.GetFilterData(), n = e.GetFilterData();
return i.groupIndex == n.groupIndex && 0 != i.groupIndex ? i.groupIndex > 0 : 0 != (i.maskBits & n.categoryBits) && 0 != (i.categoryBits & n.maskBits);
}
};
function me() {
this.normalImpulses = new Array(h);
this.tangentImpulses = new Array(h);
this.count = 0;
}
function fe() {}
fe.prototype = {
BeginContact: function(t) {},
EndContact: function(t) {},
PreSolve: function(t, e) {},
PostSolve: function(t, e) {}
};
function de() {}
de.prototype = {
ReportFixture: function(t) {
return !1;
}
};
function pe() {}
pe.prototype = {
ReportFixture: function(t, e, i, n) {}
};
function ge() {
this.dt = 0;
this.inv_dt = 0;
this.dtRatio = 0;
this.velocityIterations = 0;
this.positionIterations = 0;
this.warmStarting = !1;
}
function ye() {
this.c = new E();
this.a = 0;
}
function ve() {
this.v = new E();
this.w = 0;
}
function xe() {
this.step = new ge();
this.positions = null;
this.velocities = null;
}
var Ae = i.create("step"), be = i.create("collide", "step"), Te = i.create("solve", "step"), Ce = i.create("solveTOI", "step"), we = i.create("broadphase", "step");
function Se(t) {
this.m_contactManager = new We();
this.m_destructionListener = null;
this.g_debugDraw = null;
this.m_bodyList = null;
this.m_jointList = null;
this.m_bodyCount = 0;
this.m_jointCount = 0;
this.m_warmStarting = !0;
this.m_continuousPhysics = !0;
this.m_subStepping = !1;
this.m_stepComplete = !0;
this.m_allowSleep = !0;
this.m_gravity = t;
this.m_flags = Se.e_clearForces;
this.m_inv_dt0 = 0;
this.p_step = new ge();
this.p_island = new Ke();
}
function Ee() {
this.broadPhase = null;
this.callback = null;
}
Ee.prototype = {
QueryCallback: function(t) {
var e = this.broadPhase.GetUserData(t);
return this.callback.ReportFixture(e.fixture);
}
};
function De() {
this.broadPhase = null;
this.callback = null;
}
De.prototype = {
RayCastCallback: function(t, e) {
var i = this.broadPhase.GetUserData(e), n = i.fixture, r = i.childIndex, s = new Rt();
if (n.RayCast(s, t, r)) {
var a = s.fraction, o = E.Add(E.Multiply(1 - a, t.p1), E.Multiply(a, t.p2));
return this.callback.ReportFixture(n, o, s.normal, a);
}
return t.maxFraction;
}
};
Se.m_local_sweep_backupA = new R();
Se.m_local_sweep_backupB = new R();
Se.m_local_sweep_backupC = new R();
Se.prototype = {
Destroy: function() {
for (var t = this.m_bodyList; t; ) {
for (var e = t.m_next, i = t.m_fixtureList; i; ) {
var n = i.m_next;
i.m_proxyCount = 0;
i.Destroy();
i = n;
}
t = e;
}
},
SetDestructionListener: function(t) {
this.m_destructionListener = t;
},
SetContactFilter: function(t) {
this.m_contactManager.m_contactFilter = t;
},
SetContactListener: function(t) {
this.m_contactManager.m_contactListener = t;
},
SetDebugDraw: function(t) {
this.g_debugDraw = t;
},
CreateBody: function(t) {
r(0 == this.IsLocked());
if (this.IsLocked()) return null;
var e = new ae(t, this);
e.m_prev = null;
e.m_next = this.m_bodyList;
this.m_bodyList && (this.m_bodyList.m_prev = e);
this.m_bodyList = e;
++this.m_bodyCount;
return e;
},
DestroyBody: function(t) {
r(this.m_bodyCount > 0);
r(0 == this.IsLocked());
if (!this.IsLocked()) {
for (var e = t.m_jointList; e; ) {
var i = e;
e = e.next;
this.m_destructionListener && this.m_destructionListener.SayGoodbyeJoint(i.joint);
this.DestroyJoint(i.joint);
t.m_jointList = e;
}
t.m_jointList = null;
for (var n = t.m_contactList; n; ) {
var s = n;
n = n.next;
this.m_contactManager.Destroy(s.contact);
}
t.m_contactList = null;
for (var a = t.m_fixtureList; a; ) {
var o = a;
a = a.m_next;
this.m_destructionListener && this.m_destructionListener.SayGoodbyeFixture(o);
o.DestroyProxies(this.m_contactManager.m_broadPhase);
o.Destroy();
t.m_fixtureList = a;
t.m_fixtureCount -= 1;
}
t.m_fixtureList = null;
t.m_fixtureCount = 0;
t.m_prev && (t.m_prev.m_next = t.m_next);
t.m_next && (t.m_next.m_prev = t.m_prev);
t == this.m_bodyList && (this.m_bodyList = t.m_next);
t.m_destroyed = !0;
--this.m_bodyCount;
}
},
CreateJoint: function(t) {
r(0 == this.IsLocked());
if (this.IsLocked()) return null;
var e = ri.Create(t);
e.m_prev = null;
e.m_next = this.m_jointList;
this.m_jointList && (this.m_jointList.m_prev = e);
this.m_jointList = e;
++this.m_jointCount;
e.m_edgeA.joint = e;
e.m_edgeA.other = e.m_bodyB;
e.m_edgeA.prev = null;
e.m_edgeA.next = e.m_bodyA.m_jointList;
e.m_bodyA.m_jointList && (e.m_bodyA.m_jointList.prev = e.m_edgeA);
e.m_bodyA.m_jointList = e.m_edgeA;
e.m_edgeB.joint = e;
e.m_edgeB.other = e.m_bodyA;
e.m_edgeB.prev = null;
e.m_edgeB.next = e.m_bodyB.m_jointList;
e.m_bodyB.m_jointList && (e.m_bodyB.m_jointList.prev = e.m_edgeB);
e.m_bodyB.m_jointList = e.m_edgeB;
var i = t.bodyA, n = t.bodyB;
if (0 == t.collideConnected) for (var s = n.GetContactList(); s; ) {
s.other == i && s.contact.FlagForFiltering();
s = s.next;
}
return e;
},
DestroyJoint: function(t) {
r(0 == this.IsLocked());
if (!this.IsLocked()) {
var e = t.m_collideConnected;
t.m_prev && (t.m_prev.m_next = t.m_next);
t.m_next && (t.m_next.m_prev = t.m_prev);
t == this.m_jointList && (this.m_jointList = t.m_next);
var i = t.m_bodyA, n = t.m_bodyB;
i.SetAwake(!0);
n.SetAwake(!0);
t.m_edgeA.prev && (t.m_edgeA.prev.next = t.m_edgeA.next);
t.m_edgeA.next && (t.m_edgeA.next.prev = t.m_edgeA.prev);
t.m_edgeA == i.m_jointList && (i.m_jointList = t.m_edgeA.next);
t.m_edgeA.prev = null;
t.m_edgeA.next = null;
t.m_edgeB.prev && (t.m_edgeB.prev.next = t.m_edgeB.next);
t.m_edgeB.next && (t.m_edgeB.next.prev = t.m_edgeB.prev);
t.m_edgeB == n.m_jointList && (n.m_jointList = t.m_edgeB.next);
t.m_edgeB.prev = null;
t.m_edgeB.next = null;
ri.Destroy(t);
r(this.m_jointCount > 0);
--this.m_jointCount;
if (0 == e) for (var s = n.GetContactList(); s; ) {
s.other == i && s.contact.FlagForFiltering();
s = s.next;
}
}
},
Step: function(t, e, i) {
Ae.start();
if (this.m_flags & Se.e_newFixture) {
this.m_contactManager.FindNewContacts();
this.m_flags &= ~Se.e_newFixture;
}
this.m_flags |= Se.e_locked;
this.p_step.dt = t;
this.p_step.velocityIterations = e;
this.p_step.positionIterations = i;
this.p_step.inv_dt = t > 0 ? 1 / t : 0;
this.p_step.dtRatio = this.m_inv_dt0 * t;
this.p_step.warmStarting = this.m_warmStarting;
be.start();
this.m_contactManager.Collide();
be.stop();
if (this.m_stepComplete && this.p_step.dt > 0) {
Te.start();
this.Solve(this.p_step);
Te.stop();
}
if (this.m_continuousPhysics && this.p_step.dt > 0) {
Ce.start();
this.SolveTOI(this.p_step);
Ce.stop();
}
this.p_step.dt > 0 && (this.m_inv_dt0 = this.p_step.inv_dt);
this.m_flags & Se.e_clearForces && this.ClearForces();
this.m_flags &= ~Se.e_locked;
Ae.stop();
},
ClearForces: function() {
for (var t = this.m_bodyList; t; t = t.GetNext()) {
t.m_force.x = t.m_force.y = 0;
t.m_torque = 0;
}
},
DrawDebugData: function() {
if (null != this.g_debugDraw) {
this.g_debugDraw.ClearDraw();
var t = this.g_debugDraw.GetFlags();
if (t & at.e_shapeBit) for (var e = this.m_bodyList; e; e = e.GetNext()) for (var i = e.GetTransform(), n = e.GetFixtureList(); n; n = n.GetNext()) 0 == e.IsActive() ? this.DrawShape(n, i, new st(.5, .5, .3)) : e.GetType() == ae.b2_staticBody ? this.DrawShape(n, i, new st(.5, .9, .5)) : e.GetType() == ae.b2_kinematicBody ? this.DrawShape(n, i, new st(.5, .5, .9)) : 0 == e.IsAwake() ? this.DrawShape(n, i, new st(.6, .6, .6)) : this.DrawShape(n, i, new st(.9, .7, .7));
if (t & at.e_jointBit) for (var r = this.m_jointList; r; r = r.GetNext()) this.DrawJoint(r);
if (t & at.e_pairBit) for (var s = new st(.3, .9, .9), a = this.m_contactManager.m_contactList; a; a = a.GetNext()) {
var o = a.GetFixtureA(), h = a.GetFixtureB(), l = o.GetAABB(a.GetChildIndexA()).GetCenter(), c = h.GetAABB(a.GetChildIndexB()).GetCenter();
this.g_debugDraw.DrawSegment(l, c, s);
}
if (t & at.e_aabbBit) {
s = new st(.9, .3, .9);
var u = new st(.3, .3, .9), _ = this.m_contactManager.m_broadPhase;
for (e = this.m_bodyList; e; e = e.GetNext()) if (0 != e.IsActive()) for (n = e.GetFixtureList(); n; n = n.GetNext()) for (var m = 0; m < n.m_proxyCount; ++m) {
var f = n.m_proxies[m], d = _.GetFatAABB(f.proxyId);
(p = [])[0] = new E(d.lowerBound.x, d.lowerBound.y);
p[1] = new E(d.upperBound.x, d.lowerBound.y);
p[2] = new E(d.upperBound.x, d.upperBound.y);
p[3] = new E(d.lowerBound.x, d.upperBound.y);
this.g_debugDraw.DrawPolygon(p, 4, s);
var p, g = new Lt();
n.GetShape().ComputeAABB(g, e.GetTransform(), 0);
(p = [])[0] = new E(g.lowerBound.x, g.lowerBound.y);
p[1] = new E(g.upperBound.x, g.lowerBound.y);
p[2] = new E(g.upperBound.x, g.upperBound.y);
p[3] = new E(g.lowerBound.x, g.upperBound.y);
this.g_debugDraw.DrawPolygon(p, 4, u);
}
}
if (t & at.e_centerOfMassBit) for (e = this.m_bodyList; e; e = e.GetNext()) {
(i = e.GetTransform().Clone()).p = e.GetWorldCenter();
this.g_debugDraw.DrawTransform(i);
}
}
},
QueryAABB: function(t, e) {
var i = new Ee();
i.broadPhase = this.m_contactManager.m_broadPhase;
i.callback = t;
this.m_contactManager.m_broadPhase.Query(i, e);
},
RayCast: function(t, e, i) {
var n = new De();
n.broadPhase = this.m_contactManager.m_broadPhase;
n.callback = t;
var r = new Bt();
r.maxFraction = 1;
r.p1 = e;
r.p2 = i;
this.m_contactManager.m_broadPhase.RayCast(n, r);
},
GetBodyList: function() {
return this.m_bodyList;
},
GetJointList: function() {
return this.m_jointList;
},
GetContactList: function() {
return this.m_contactManager.m_contactList;
},
SetAllowSleeping: function(t) {
if (t != this.m_allowSleep) {
this.m_allowSleep = t;
if (0 == this.m_allowSleep) for (var e = this.m_bodyList; e; e = e.m_next) e.SetAwake(!0);
}
},
GetAllowSleeping: function() {
return this.m_allowSleep;
},
SetWarmStarting: function(t) {
this.m_warmStarting = t;
},
GetWarmStarting: function() {
return this.m_warmStarting;
},
SetContinuousPhysics: function(t) {
this.m_continuousPhysics = t;
},
GetContinuousPhysics: function() {
return this.m_continuousPhysics;
},
SetSubStepping: function(t) {
this.m_subStepping = t;
},
GetSubStepping: function() {
return this.m_subStepping;
},
GetProxyCount: function() {
return this.m_contactManager.m_broadPhase.GetProxyCount();
},
GetBodyCount: function() {
return this.m_bodyCount;
},
GetJointCount: function() {
return this.m_jointCount;
},
GetContactCount: function() {
return this.m_contactManager.m_contactCount;
},
GetTreeHeight: function() {
return this.m_contactManager.m_broadPhase.GetTreeHeight();
},
GetTreeBalance: function() {
return this.m_contactManager.m_broadPhase.GetTreeBalance();
},
GetTreeQuality: function() {
return this.m_contactManager.m_broadPhase.GetTreeQuality();
},
SetGravity: function(t) {
this.m_gravity = t;
},
GetGravity: function() {
return this.m_gravity;
},
IsLocked: function() {
return (this.m_flags & Se.e_locked) == Se.e_locked;
},
SetAutoClearForces: function(t) {
t ? this.m_flags |= Se.e_clearForces : this.m_flags &= ~Se.e_clearForces;
},
GetAutoClearForces: function() {
return (this.m_flags & Se.e_clearForces) == Se.e_clearForces;
},
ShiftOrigin: function(t) {
r(0 == (this.m_flags & Se.e_locked));
if ((this.m_flags & Se.e_locked) != Se.e_locked) {
for (var e = this.m_bodyList; e; e = e.m_next) {
e.m_xf.p.Subtract(t);
e.m_sweep.c0.Subtract(t);
e.m_sweep.c.Subtract(t);
}
for (var i = this.m_jointList; i; i = i.m_next) i.ShiftOrigin(t);
this.m_contactManager.m_broadPhase.ShiftOrigin(t);
}
},
GetContactManager: function() {
return this.m_contactManager;
},
Solve: function(t) {
this.p_island.Initialize(this.m_bodyCount, this.m_contactManager.m_contactCount, this.m_jointCount, this.m_contactManager.m_contactListener);
for (var e = this.m_bodyList; e; e = e.m_next) e.m_flags &= ~ae.e_islandFlag;
for (var i = this.m_contactManager.m_contactList; i; i = i.m_next) i.m_flags &= ~Re.e_islandFlag;
for (var n = this.m_jointList; n; n = n.m_next) n.m_islandFlag = !1;
for (var s = this.m_bodyCount, a = new Array(s), o = this.m_bodyList; o; o = o.m_next) if (!(o.m_flags & ae.e_islandFlag) && 0 != o.IsAwake() && 0 != o.IsActive() && o.GetType() != ae.b2_staticBody) {
this.p_island.Clear();
var h = 0;
a[h++] = o;
o.m_flags |= ae.e_islandFlag;
for (;h > 0; ) {
r(1 == (e = a[--h]).IsActive());
this.p_island.AddBody(e);
e.SetAwake(!0);
if (e.GetType() != ae.b2_staticBody) {
for (var l = e.m_contactList; l; l = l.next) {
var c = l.contact;
if (!(c.m_flags & Re.e_islandFlag) && (0 != c.IsEnabled() && 0 != c.IsTouching())) {
var u = c.m_fixtureA.m_isSensor, _ = c.m_fixtureB.m_isSensor;
if (!u && !_) {
this.p_island.AddContact(c);
c.m_flags |= Re.e_islandFlag;
if (!((f = l.other).m_flags & ae.e_islandFlag)) {
r(h < s);
a[h++] = f;
f.m_flags |= ae.e_islandFlag;
}
}
}
}
for (var m = e.m_jointList; m; m = m.next) if (1 != m.joint.m_islandFlag) {
var f;
if (0 != (f = m.other).IsActive()) {
this.p_island.AddJoint(m.joint);
m.joint.m_islandFlag = !0;
if (!(f.m_flags & ae.e_islandFlag)) {
r(h < s);
a[h++] = f;
f.m_flags |= ae.e_islandFlag;
}
}
}
}
}
this.p_island.Solve(t, this.m_gravity, this.m_allowSleep);
for (var d = 0; d < this.p_island.m_bodyCount; ++d) {
(e = this.p_island.m_bodies[d]).GetType() == ae.b2_staticBody && (e.m_flags &= ~ae.e_islandFlag);
}
}
we.start();
for (e = this.m_bodyList; e; e = e.GetNext()) 0 != (e.m_flags & ae.e_islandFlag) && e.GetType() != ae.b2_staticBody && e.SynchronizeFixtures();
this.m_contactManager.FindNewContacts();
we.stop();
},
SolveTOI: function(t) {
this.p_island.Initialize(64, 32, 0, this.m_contactManager.m_contactListener);
if (this.m_stepComplete) {
for (var e = this.m_bodyList; e; e = e.m_next) {
e.m_flags &= ~ae.e_islandFlag;
e.m_sweep.alpha0 = 0;
}
for (var i = this.m_contactManager.m_contactList; i; i = i.m_next) {
i.m_flags &= ~(Re.e_toiFlag | Re.e_islandFlag);
i.m_toiCount = 0;
i.m_toi = 1;
}
}
for (;;) {
var n = null, s = 1;
for (i = this.m_contactManager.m_contactList; i; i = i.m_next) if (0 != i.IsEnabled() && !(i.m_toiCount > 8)) {
var o = 1;
if (i.m_flags & Re.e_toiFlag) o = i.m_toi; else {
var h = i.GetFixtureA(), l = i.GetFixtureB();
if (h.IsSensor() || l.IsSensor()) continue;
var c = h.GetBody(), u = l.GetBody(), _ = c.m_type, m = u.m_type;
r(_ == ae.b2_dynamicBody || m == ae.b2_dynamicBody);
var f = c.IsAwake() && _ != ae.b2_staticBody, d = u.IsAwake() && m != ae.b2_staticBody;
if (0 == f && 0 == d) continue;
var p = c.IsBullet() || _ != ae.b2_dynamicBody, g = u.IsBullet() || m != ae.b2_dynamicBody;
if (0 == p && 0 == g) continue;
var y = c.m_sweep.alpha0;
if (c.m_sweep.alpha0 < u.m_sweep.alpha0) {
y = u.m_sweep.alpha0;
c.m_sweep.Advance(y);
} else if (u.m_sweep.alpha0 < c.m_sweep.alpha0) {
y = c.m_sweep.alpha0;
u.m_sweep.Advance(y);
}
r(y < 1);
var v = i.GetChildIndexA(), x = i.GetChildIndexB(), A = new Qt();
A.proxyA.Set(h.GetShape(), v);
A.proxyB.Set(l.GetShape(), x);
A.sweepA.Assign(c.m_sweep);
A.sweepB.Assign(u.m_sweep);
A.tMax = 1;
var b = new $t();
re(b, A);
var T = b.t;
o = b.state == $t.e_touching ? tt(y + (1 - y) * T, 1) : 1;
i.m_toi = o;
i.m_flags |= Re.e_toiFlag;
}
if (o < s) {
n = i;
s = o;
}
}
if (null == n || 1 - 10 * a < s) {
this.m_stepComplete = !0;
break;
}
h = n.GetFixtureA(), l = n.GetFixtureB(), c = h.GetBody(), u = l.GetBody();
Se.m_local_sweep_backupA.Assign(c.m_sweep);
Se.m_local_sweep_backupB.Assign(u.m_sweep);
c.Advance(s);
u.Advance(s);
n.Update(this.m_contactManager.m_contactListener);
n.m_flags &= ~Re.e_toiFlag;
++n.m_toiCount;
if (0 != n.IsEnabled() && 0 != n.IsTouching()) {
c.SetAwake(!0);
u.SetAwake(!0);
this.p_island.Clear();
this.p_island.AddBody(c);
this.p_island.AddBody(u);
this.p_island.AddContact(n);
c.m_flags |= ae.e_islandFlag;
u.m_flags |= ae.e_islandFlag;
n.m_flags |= Re.e_islandFlag;
for (var C = [ c, u ], w = 0; w < 2; ++w) {
if ((B = C[w]).m_type == ae.b2_dynamicBody) for (var S = B.m_contactList; S && this.p_island.m_bodyCount != this.p_island.m_bodyCapacity && this.p_island.m_contactCount != this.p_island.m_contactCapacity; S = S.next) {
var E = S.contact;
if (!(E.m_flags & Re.e_islandFlag)) {
var D = S.other;
if (D.m_type != ae.b2_dynamicBody || 0 != B.IsBullet() || 0 != D.IsBullet()) {
var M = E.m_fixtureA.m_isSensor, I = E.m_fixtureB.m_isSensor;
if (!M && !I) {
Se.m_local_sweep_backupC.Assign(D.m_sweep);
0 == (D.m_flags & ae.e_islandFlag) && D.Advance(s);
E.Update(this.m_contactManager.m_contactListener);
if (0 != E.IsEnabled()) if (0 != E.IsTouching()) {
E.m_flags |= Re.e_islandFlag;
this.p_island.AddContact(E);
if (!(D.m_flags & ae.e_islandFlag)) {
D.m_flags |= ae.e_islandFlag;
D.m_type != ae.b2_staticBody && D.SetAwake(!0);
this.p_island.AddBody(D);
}
} else {
D.m_sweep.Assign(Se.m_local_sweep_backupC);
D.SynchronizeTransform();
} else {
D.m_sweep.Assign(Se.m_local_sweep_backupC);
D.SynchronizeTransform();
}
}
}
}
}
}
var P = new ge();
P.dt = (1 - s) * t.dt;
P.inv_dt = 1 / P.dt;
P.dtRatio = 1;
P.positionIterations = 20;
P.velocityIterations = t.velocityIterations;
P.warmStarting = !1;
this.p_island.SolveTOI(P, c.m_islandIndex, u.m_islandIndex);
for (w = 0; w < this.p_island.m_bodyCount; ++w) {
var B;
(B = this.p_island.m_bodies[w]).m_flags &= ~ae.e_islandFlag;
if (B.m_type == ae.b2_dynamicBody) {
B.SynchronizeFixtures();
for (S = B.m_contactList; S; S = S.next) S.contact.m_flags &= ~(Re.e_toiFlag | Re.e_islandFlag);
}
}
this.m_contactManager.FindNewContacts();
if (this.m_subStepping) {
this.m_stepComplete = !1;
break;
}
} else {
n.SetEnabled(!1);
c.m_sweep.Assign(Se.m_local_sweep_backupA);
u.m_sweep.Assign(Se.m_local_sweep_backupB);
c.SynchronizeTransform();
u.SynchronizeTransform();
}
}
},
DrawJoint: function(t) {
var e = t.GetBodyA(), i = t.GetBodyB(), n = e.GetTransform(), r = i.GetTransform(), s = n.p, a = r.p, o = t.GetAnchorA(), h = t.GetAnchorB(), l = new st(.5, .8, .8);
switch (t.GetType()) {
case ri.e_distanceJoint:
this.g_debugDraw.DrawSegment(o, h, l);
break;

case ri.e_pulleyJoint:
var c = t, u = c.GetGroundAnchorA(), _ = c.GetGroundAnchorB();
this.g_debugDraw.DrawSegment(u, o, l);
this.g_debugDraw.DrawSegment(_, h, l);
this.g_debugDraw.DrawSegment(u, _, l);
break;

case ri.e_mouseJoint:
break;

case ri.e_motorJoint:
this.g_debugDraw.DrawPoint(t.GetLinearOffset(), 5, l);

default:
this.g_debugDraw.DrawSegment(s, o, l);
this.g_debugDraw.DrawSegment(o, h, l);
this.g_debugDraw.DrawSegment(a, h, l);
}
},
DrawShape: function(t, e, i) {
switch (t.GetType()) {
case lt.e_circle:
var n = t.GetShape(), s = J(e, n.m_p), a = n.m_radius, o = X(e.q, new E(1, 0));
this.g_debugDraw.DrawSolidCircle(s, a, o, i);
break;

case lt.e_edge:
var h = t.GetShape(), c = J(e, h.m_vertex1), u = J(e, h.m_vertex2);
this.g_debugDraw.DrawSegment(c, u, i);
break;

case lt.e_chain:
for (var _ = t.GetShape(), m = _.m_count, f = (c = J(e, (g = _.m_vertices)[0]), 
1); f < m; ++f) {
u = J(e, g[f]);
this.g_debugDraw.DrawSegment(c, u, i);
c = u;
}
break;

case lt.e_polygon:
var d = t.GetShape(), p = d.m_count;
r(p <= l);
var g = new Array(l);
for (f = 0; f < p; ++f) g[f] = J(e, d.m_vertices[f]);
this.g_debugDraw.DrawSolidPolygon(g, p, i);
}
}
};
Se.e_newFixture = 1;
Se.e_locked = 2;
Se.e_clearForces = 4;
function Me(t, e) {
return w(t * e);
}
function Ie(t, e) {
return t > e ? t : e;
}
function Pe() {
this.fcn = null;
this.primary = !1;
}
function Be() {
this.other = null;
this.contact = null;
this.prev = null;
this.next = null;
}
Be.prototype = {
Clear: function() {
this.other = this.prev = this.next = null;
}
};
function Re() {
this.m_nodeA = new Be();
this.m_nodeB = new Be();
this.m_manifold = new Mt();
}
Re.m_local_tempManifold = new Mt();
Re.prototype = {
Create: function(t, e, i, n) {
this.m_toi = 0;
this.m_flags = Re.e_enabledFlag;
this.m_fixtureA = t || null;
this.m_fixtureB = i || null;
this.m_indexA = e || 0;
this.m_indexB = n || 0;
this.m_manifold.pointCount = 0;
this.m_prev = null;
this.m_next = null;
this.m_nodeA.contact = null;
this.m_nodeA.prev = null;
this.m_nodeA.next = null;
this.m_nodeA.other = null;
this.m_nodeB.contact = null;
this.m_nodeB.prev = null;
this.m_nodeB.next = null;
this.m_nodeB.other = null;
this.m_toiCount = 0;
if (t) {
this.m_friction = Me(this.m_fixtureA.m_friction, this.m_fixtureB.m_friction);
this.m_restitution = Ie(this.m_fixtureA.m_restitution, this.m_fixtureB.m_restitution);
} else {
this.m_friction = 0;
this.m_restitution = 0;
}
this.m_tangentSpeed = 0;
},
GetManifold: function() {
return this.m_manifold;
},
GetWorldManifold: function(t) {
var e = this.m_fixtureA.GetBody(), i = this.m_fixtureB.GetBody(), n = this.m_fixtureA.GetShape(), r = this.m_fixtureB.GetShape();
t.Initialize(this.m_manifold, e.GetTransform(), n.m_radius, i.GetTransform(), r.m_radius);
},
IsTouching: function() {
return (this.m_flags & Re.e_touchingFlag) == Re.e_touchingFlag;
},
SetEnabled: function(t) {
t ? this.m_flags |= Re.e_enabledFlag : this.m_flags &= ~Re.e_enabledFlag;
},
IsEnabled: function() {
return (this.m_flags & Re.e_enabledFlag) == Re.e_enabledFlag;
},
GetNext: function() {
return this.m_next;
},
GetFixtureA: function() {
return this.m_fixtureA;
},
GetChildIndexA: function() {
return this.m_indexA;
},
GetFixtureB: function() {
return this.m_fixtureB;
},
GetChildIndexB: function() {
return this.m_indexB;
},
SetFriction: function(t) {
this.m_friction = t;
},
GetFriction: function() {
return this.m_friction;
},
ResetFriction: function() {
this.m_friction = Me(this.m_fixtureA.m_friction, this.m_fixtureB.m_friction);
},
SetRestitution: function(t) {
this.m_restitution = t;
},
GetRestitution: function() {
return this.m_restitution;
},
ResetRestitution: function() {
this.m_restitution = Ie(this.m_fixtureA.m_restitution, this.m_fixtureB.m_restitution);
},
SetTangentSpeed: function(t) {
this.m_tangentSpeed = t;
},
GetTangentSpeed: function() {
return this.m_tangentSpeed;
},
Evaluate: function(t, e, i) {},
FlagForFiltering: function() {
this.m_flags |= Re.e_filterFlag;
},
m_oldManifold: null,
Update: function(t) {
Re.m_local_tempManifold.Assign(this.m_manifold);
this.m_flags |= Re.e_enabledFlag;
var e = !1, i = (this.m_flags & Re.e_touchingFlag) == Re.e_touchingFlag, n = this.m_fixtureA.IsSensor(), r = this.m_fixtureB.IsSensor(), s = n || r, a = this.m_fixtureA.GetBody(), o = this.m_fixtureB.GetBody(), h = a.GetTransform(), l = o.GetTransform();
if (s) {
var c = this.m_fixtureA.GetShape(), u = this.m_fixtureB.GetShape();
e = Xt(c, this.m_indexA, u, this.m_indexB, h, l);
this.m_manifold.pointCount = 0;
} else {
this.Evaluate(this.m_manifold, h, l);
e = this.m_manifold.pointCount > 0;
for (var _ = 0; _ < this.m_manifold.pointCount; ++_) {
var m = this.m_manifold.points[_];
m.normalImpulse = 0;
m.tangentImpulse = 0;
for (var f = m.id, d = 0; d < Re.m_local_tempManifold.pointCount; ++d) {
var p = Re.m_local_tempManifold.points[d];
if (p.id.Get() == f.Get()) {
m.normalImpulse = p.normalImpulse;
m.tangentImpulse = p.tangentImpulse;
break;
}
}
}
if (e != i) {
a.SetAwake(!0);
o.SetAwake(!0);
}
}
e ? this.m_flags |= Re.e_touchingFlag : this.m_flags &= ~Re.e_touchingFlag;
0 == i && 1 == e && t && t.BeginContact(this);
1 == i && 0 == e && t && t.EndContact(this);
0 == s && e && t && t.PreSolve(this, Re.m_local_tempManifold);
}
};
Re.e_islandFlag = 1;
Re.e_touchingFlag = 2;
Re.e_enabledFlag = 4;
Re.e_filterFlag = 8;
Re.e_bulletHitFlag = 16;
Re.e_toiFlag = 32;
function Le() {
this.parent.call(this);
}
Le.prototype = {
Evaluate: function(t, e, i) {
Ot(t, this.m_fixtureA.GetShape(), e, this.m_fixtureB.GetShape(), i);
},
Create: function(t, e, i, n) {
this.parent.prototype.Create.call(this, t, 0, i, 0);
r(this.m_fixtureA.GetType() == lt.e_circle);
r(this.m_fixtureB.GetType() == lt.e_circle);
}
};
Le._extend(Re);
var Oe = new ut();
function Fe() {
this.parent.call(this);
}
Fe.prototype = {
Evaluate: function(t, e, i) {
this.m_fixtureA.GetShape().GetChildEdge(Oe, this.m_indexA);
Gt(t, Oe, e, this.m_fixtureB.GetShape(), i);
},
Create: function(t, e, i, n) {
this.parent.prototype.Create.call(this, t, e, i, n);
r(this.m_fixtureA.GetType() == lt.e_chain);
r(this.m_fixtureB.GetType() == lt.e_circle);
}
};
Fe._extend(Re);
function Ne() {
this.parent.call(this);
}
Ne.prototype = {
Evaluate: function(t, e, i) {
this.m_fixtureA.GetShape().GetChildEdge(Oe, this.m_indexA);
Ht(t, Oe, e, this.m_fixtureB.GetShape(), i);
},
Create: function(t, e, i, n) {
this.parent.prototype.Create.call(this, t, e, i, n);
r(this.m_fixtureA.GetType() == lt.e_chain);
r(this.m_fixtureB.GetType() == lt.e_polygon);
}
};
Ne.Create = function(t, e, i, n) {
return new Ne(t, e, i, n);
};
Ne._extend(Re);
function ke() {
this.parent.call(this);
}
ke.prototype = {
Evaluate: function(t, e, i) {
Gt(t, this.m_fixtureA.GetShape(), e, this.m_fixtureB.GetShape(), i);
},
Create: function(t, e, i, n) {
this.parent.prototype.Create.call(this, t, 0, i, 0);
r(this.m_fixtureA.GetType() == lt.e_edge);
r(this.m_fixtureB.GetType() == lt.e_circle);
}
};
ke.Create = function(t, e, i, n) {
return new ke(t, i);
};
ke._extend(Re);
function ze() {
this.parent.call(this);
}
ze.prototype = {
Evaluate: function(t, e, i) {
Ht(t, this.m_fixtureA.GetShape(), e, this.m_fixtureB.GetShape(), i);
},
Create: function(t, e, i, n) {
this.parent.prototype.Create.call(this, t, 0, i, 0);
r(this.m_fixtureA.GetType() == lt.e_edge);
r(this.m_fixtureB.GetType() == lt.e_polygon);
}
};
ze.Create = function(t, e, i, n) {
return new ze(t, i);
};
ze._extend(Re);
function Ge() {
this.parent.call(this);
}
Ge.prototype = {
Evaluate: function(t, e, i) {
Ft(t, this.m_fixtureA.GetShape(), e, this.m_fixtureB.GetShape(), i);
},
Create: function(t, e, i, n) {
this.parent.prototype.Create.call(this, t, 0, i, 0);
r(this.m_fixtureA.GetType() == lt.e_polygon);
r(this.m_fixtureB.GetType() == lt.e_circle);
}
};
Ge.Create = function(t, e, i, n) {
return new Ge(t, i);
};
Ge._extend(Re);
function Ue() {
this.parent.call(this);
}
Ue.prototype = {
Evaluate: function(t, e, i) {
zt(t, this.m_fixtureA.GetShape(), e, this.m_fixtureB.GetShape(), i);
},
Create: function(t, e, i, n) {
this.parent.prototype.Create.call(this, t, 0, i, 0);
r(this.m_fixtureA.GetType() == lt.e_polygon);
r(this.m_fixtureB.GetType() == lt.e_polygon);
}
};
Ue.Create = function(t, e, i, n) {
return new Ue(t, i);
};
Ue._extend(Re);
Re.AddType = function(t, e, i) {
r(0 <= e && e < lt.e_typeCount);
r(0 <= i && i < lt.e_typeCount);
Re.s_registers[e] || (Re.s_registers[e] = []);
Re.s_registers[e][i] = new Pe();
Re.s_registers[e][i].fcn = t;
Re.s_registers[e][i].primary = !0;
if (e != i) {
Re.s_registers[i] || (Re.s_registers[i] = []);
Re.s_registers[i][e] = new Pe();
Re.s_registers[i][e].fcn = t;
Re.s_registers[i][e].primary = !1;
}
t.garbage = [];
t.alloc = 2;
};
Re.InitializeRegisters = function() {
Re.AddType(Le, lt.e_circle, lt.e_circle);
Re.AddType(Ge, lt.e_polygon, lt.e_circle);
Re.AddType(Ue, lt.e_polygon, lt.e_polygon);
Re.AddType(ke, lt.e_edge, lt.e_circle);
Re.AddType(ze, lt.e_edge, lt.e_polygon);
Re.AddType(Fe, lt.e_chain, lt.e_circle);
Re.AddType(Ne, lt.e_chain, lt.e_polygon);
};
Re.RetrieveGarbage = function(t) {
var e;
if (e = t.garbage.pop()) return e;
for (var i = 0; i < t.alloc - 1; ++i) t.garbage.push(new t());
t.alloc += 32;
return new t();
};
Re.Create = function(t, e, i, n) {
if (0 == Re.s_initialized) {
Re.InitializeRegisters();
Re.s_initialized = !0;
}
var s = t.GetType(), a = i.GetType();
r(0 <= s && s < lt.e_typeCount);
r(0 <= a && a < lt.e_typeCount);
var o = Re.s_registers[s] && Re.s_registers[s][a] ? Re.s_registers[s][a].fcn : null;
if (o) {
var h = Re.RetrieveGarbage(o);
Re.s_registers[s][a].primary ? h.Create(t, e, i, n) : h.Create(i, n, t, e);
return h;
}
return null;
};
Re.Destroy = function(t) {
r(1 == Re.s_initialized);
var e = t.m_fixtureA, i = t.m_fixtureB;
if (t.m_manifold.pointCount > 0 && 0 == e.IsSensor() && 0 == i.IsSensor()) {
e.GetBody().SetAwake(!0);
i.GetBody().SetAwake(!0);
}
var n = e.GetType(), s = i.GetType();
r(0 <= n && s < lt.e_typeCount);
r(0 <= n && s < lt.e_typeCount);
t.m_nodeA.Clear();
t.m_nodeB.Clear();
Re.s_registers[n][s].fcn.garbage.push(t);
};
Re.s_registers = [];
Re.s_initialized = !1;
var Ve = new _e(), je = new fe();
function We() {
this.m_broadPhase = new pt();
this.m_contactList = null;
this.m_contactCount = 0;
this.m_contactFilter = Ve;
this.m_contactListener = je;
}
We.prototype = {
AddPair: function(t, e) {
var i = t, n = e, r = i.fixture, s = n.fixture, a = i.childIndex, o = n.childIndex, h = r.GetBody(), l = s.GetBody();
if (h != l) {
for (var c = l.GetContactList(); c; ) {
if (c.other == h) {
var u = c.contact.GetFixtureA(), _ = c.contact.GetFixtureB(), m = c.contact.GetChildIndexA(), f = c.contact.GetChildIndexB();
if (u == r && _ == s && m == a && f == o) return;
if (u == s && _ == r && m == o && f == a) return;
}
c = c.next;
}
if (0 != l.ShouldCollide(h) && (!this.m_contactFilter || 0 != this.m_contactFilter.ShouldCollide(r, s))) {
var d = Re.Create(r, a, s, o);
if (null != d) {
r = d.GetFixtureA();
s = d.GetFixtureB();
a = d.GetChildIndexA();
o = d.GetChildIndexB();
h = r.GetBody();
l = s.GetBody();
d.m_prev = null;
d.m_next = this.m_contactList;
null != this.m_contactList && (this.m_contactList.m_prev = d);
this.m_contactList = d;
d.m_nodeA.contact = d;
d.m_nodeA.other = l;
d.m_nodeA.prev = null;
d.m_nodeA.next = h.m_contactList;
null != h.m_contactList && (h.m_contactList.prev = d.m_nodeA);
h.m_contactList = d.m_nodeA;
d.m_nodeB.contact = d;
d.m_nodeB.other = h;
d.m_nodeB.prev = null;
d.m_nodeB.next = l.m_contactList;
null != l.m_contactList && (l.m_contactList.prev = d.m_nodeB);
l.m_contactList = d.m_nodeB;
if (0 == r.IsSensor() && 0 == s.IsSensor()) {
h.SetAwake(!0);
l.SetAwake(!0);
}
++this.m_contactCount;
}
}
}
},
FindNewContacts: function() {
this.m_broadPhase.UpdatePairs(this);
},
Destroy: function(t) {
var e = t.GetFixtureA(), i = t.GetFixtureB(), n = e.GetBody(), r = i.GetBody();
this.m_contactListener && t.IsTouching() && this.m_contactListener.EndContact(t);
t.m_prev && (t.m_prev.m_next = t.m_next);
t.m_next && (t.m_next.m_prev = t.m_prev);
t == this.m_contactList && (this.m_contactList = t.m_next);
t.m_nodeA.prev && (t.m_nodeA.prev.next = t.m_nodeA.next);
t.m_nodeA.next && (t.m_nodeA.next.prev = t.m_nodeA.prev);
t.m_nodeA == n.m_contactList && (n.m_contactList = t.m_nodeA.next);
t.m_nodeB.prev && (t.m_nodeB.prev.next = t.m_nodeB.next);
t.m_nodeB.next && (t.m_nodeB.next.prev = t.m_nodeB.prev);
t.m_nodeB == r.m_contactList && (r.m_contactList = t.m_nodeB.next);
Re.Destroy(t);
--this.m_contactCount;
},
Collide: function() {
for (var t = this.m_contactList; t; ) {
var e = t.GetFixtureA(), i = t.GetFixtureB(), n = t.GetChildIndexA(), r = t.GetChildIndexB(), s = e.GetBody(), a = i.GetBody();
if (t.m_flags & Re.e_filterFlag) {
if (0 == a.ShouldCollide(s)) {
t = (u = t).GetNext();
this.Destroy(u);
continue;
}
if (this.m_contactFilter && 0 == this.m_contactFilter.ShouldCollide(e, i)) {
t = (u = t).GetNext();
this.Destroy(u);
continue;
}
t.m_flags &= ~Re.e_filterFlag;
}
var o = s.IsAwake() && s.m_type != ae.b2_staticBody, h = a.IsAwake() && a.m_type != ae.b2_staticBody;
if (0 != o || 0 != h) {
var l = e.m_proxies[n].proxyId, c = i.m_proxies[r].proxyId;
if (0 != this.m_broadPhase.TestOverlap(l, c)) {
t.Update(this.m_contactListener);
t = t.GetNext();
} else {
var u;
t = (u = t).GetNext();
this.Destroy(u);
}
} else t = t.GetNext();
}
}
};
function He() {
this.rA = new E();
this.rB = new E();
this.normalImpulse = 0;
this.tangentImpulse = 0;
this.normalMass = 0;
this.tangentMass = 0;
this.velocityBias = 0;
}
function qe() {
this.localPoints = new Array(h);
this.localNormal = new E();
this.localPoint = new E();
this.indexA = 0;
this.indexB = 0;
this.invMassA = 0, this.invMassB = 0;
this.localCenterA = new E(), this.localCenterB = new E();
this.invIA = 0, this.invIB = 0;
this.type = 0;
this.radiusA = 0, this.radiusB = 0;
this.pointCount = 0;
}
function Xe() {
this.points = new Array(h);
for (var t = 0; t < this.points.length; ++t) this.points[t] = new He();
this.normal = new E();
this.normalMass = new M();
this.K = new M();
this.indexA = 0;
this.indexB = 0;
this.invMassA = 0, this.invMassB = 0;
this.invIA = 0, this.invIB = 0;
this.friction = 0;
this.restitution = 0;
this.tangentSpeed = 0;
this.pointCount = 0;
this.contactIndex = 0;
}
function Ye() {
this.normal = new E();
this.point = new E();
this.separation = 0;
}
Ye.prototype = {
Initialize: function(t, e, i, n) {
r(t.pointCount > 0);
switch (t.type) {
case Mt.e_circles:
var s = e.q.c * t.localPoint.x - e.q.s * t.localPoint.y + e.p.x, a = e.q.s * t.localPoint.x + e.q.c * t.localPoint.y + e.p.y, o = i.q.c * t.localPoints[0].x - i.q.s * t.localPoints[0].y + i.p.x, h = i.q.s * t.localPoints[0].x + i.q.c * t.localPoints[0].y + i.p.y;
this.point.x = .5 * (s + o);
this.point.y = .5 * (a + h);
this.normal.x = o - s;
this.normal.y = h - a;
var l = this.normal.x, c = this.normal.y;
this.normal.Normalize();
this.separation = l * this.normal.x + c * this.normal.y - t.radiusA - t.radiusB;
break;

case Mt.e_faceA:
this.normal.x = e.q.c * t.localNormal.x - e.q.s * t.localNormal.y;
this.normal.y = e.q.s * t.localNormal.x + e.q.c * t.localNormal.y;
var u = e.q.c * t.localPoint.x - e.q.s * t.localPoint.y + e.p.x, _ = e.q.s * t.localPoint.x + e.q.c * t.localPoint.y + e.p.y, m = i.q.c * t.localPoints[n].x - i.q.s * t.localPoints[n].y + i.p.x, f = i.q.s * t.localPoints[n].x + i.q.c * t.localPoints[n].y + i.p.y;
this.separation = (m - u) * this.normal.x + (f - _) * this.normal.y - t.radiusA - t.radiusB;
this.point.x = m;
this.point.y = f;
break;

case Mt.e_faceB:
this.normal.x = i.q.c * t.localNormal.x - i.q.s * t.localNormal.y;
this.normal.y = i.q.s * t.localNormal.x + i.q.c * t.localNormal.y;
u = i.q.c * t.localPoint.x - i.q.s * t.localPoint.y + i.p.x, _ = i.q.s * t.localPoint.x + i.q.c * t.localPoint.y + i.p.y, 
m = e.q.c * t.localPoints[n].x - e.q.s * t.localPoints[n].y + e.p.x, f = e.q.s * t.localPoints[n].x + e.q.c * t.localPoints[n].y + e.p.y;
this.separation = (m - u) * this.normal.x + (f - _) * this.normal.y - t.radiusA - t.radiusB;
this.point.x = m;
this.point.y = f;
this.normal.x = -this.normal.x;
this.normal.y = -this.normal.y;
}
}
};
function Je() {
this.step = new ge();
this.contacts = null;
this.count = 0;
this.positions = null;
this.velocities = null;
}
function Ze() {
this.m_positionConstraints = [];
this.m_velocityConstraints = [];
}
Ze.cs_xfA = new B();
Ze.cs_xfB = new B();
Ze.temp_solver_manifold = new Ye();
Ze.prototype = {
Init: function(t) {
this.m_step = t.step;
this.m_count = t.count;
this.m_positionConstraints.length = this.m_count;
this.m_velocityConstraints.length = this.m_count;
this.m_positions = t.positions;
this.m_velocities = t.velocities;
this.m_contacts = t.contacts;
for (var e = 0; e < this.m_count; ++e) {
var i = this.m_contacts[e], n = i.m_fixtureA, s = i.m_fixtureB, a = n.GetShape(), o = s.GetShape(), h = a.m_radius, l = o.m_radius, c = n.GetBody(), u = s.GetBody(), _ = i.GetManifold(), m = _.pointCount;
r(m > 0);
var f = this.m_velocityConstraints[e] || new Xe();
f.friction = i.m_friction;
f.restitution = i.m_restitution;
f.tangentSpeed = i.m_tangentSpeed;
f.indexA = c.m_islandIndex;
f.indexB = u.m_islandIndex;
f.invMassA = c.m_invMass;
f.invMassB = u.m_invMass;
f.invIA = c.m_invI;
f.invIB = u.m_invI;
f.contactIndex = e;
f.pointCount = m;
f.K.SetZero();
f.normalMass.SetZero();
this.m_velocityConstraints[e] = f;
var d = this.m_positionConstraints[e] || new qe();
d.indexA = c.m_islandIndex;
d.indexB = u.m_islandIndex;
d.invMassA = c.m_invMass;
d.invMassB = u.m_invMass;
d.localCenterA.x = c.m_sweep.localCenter.x;
d.localCenterA.y = c.m_sweep.localCenter.y;
d.localCenterB.x = u.m_sweep.localCenter.x;
d.localCenterB.y = u.m_sweep.localCenter.y;
d.invIA = c.m_invI;
d.invIB = u.m_invI;
d.localNormal.x = _.localNormal.x;
d.localNormal.y = _.localNormal.y;
d.localPoint.x = _.localPoint.x;
d.localPoint.y = _.localPoint.y;
d.pointCount = m;
d.radiusA = h;
d.radiusB = l;
d.type = _.type;
this.m_positionConstraints[e] = d;
for (var p = 0; p < m; ++p) {
var g = _.points[p], y = f.points[p];
if (this.m_step.warmStarting) {
y.normalImpulse = this.m_step.dtRatio * g.normalImpulse;
y.tangentImpulse = this.m_step.dtRatio * g.tangentImpulse;
} else {
y.normalImpulse = 0;
y.tangentImpulse = 0;
}
y.rA.SetZero();
y.rB.SetZero();
y.normalMass = 0;
y.tangentMass = 0;
y.velocityBias = 0;
d.localPoints[p] = g.localPoint;
}
}
},
InitializeVelocityConstraints: function() {
for (var t = 0; t < this.m_count; ++t) {
var e = this.m_velocityConstraints[t], i = this.m_positionConstraints[t], n = i.radiusA, s = i.radiusB, a = this.m_contacts[e.contactIndex].GetManifold(), o = e.indexA, h = e.indexB, l = e.invMassA, c = e.invMassB, u = e.invIA, _ = e.invIB, m = i.localCenterA, f = i.localCenterB, d = this.m_positions[o].c, p = this.m_positions[o].a, g = this.m_velocities[o].v, y = this.m_velocities[o].w, v = this.m_positions[h].c, x = this.m_positions[h].a, A = this.m_velocities[h].v, b = this.m_velocities[h].w;
r(a.pointCount > 0);
Ze.cs_xfA.q.Set(p);
Ze.cs_xfB.q.Set(x);
Ze.cs_xfA.p.x = d.x - (Ze.cs_xfA.q.c * m.x - Ze.cs_xfA.q.s * m.y);
Ze.cs_xfA.p.y = d.y - (Ze.cs_xfA.q.s * m.x + Ze.cs_xfA.q.c * m.y);
Ze.cs_xfB.p.x = v.x - (Ze.cs_xfB.q.c * f.x - Ze.cs_xfB.q.s * f.y);
Ze.cs_xfB.p.y = v.y - (Ze.cs_xfB.q.s * f.x + Ze.cs_xfB.q.c * f.y);
var T = new It();
T.Initialize(a, Ze.cs_xfA, n, Ze.cs_xfB, s);
e.normal.x = T.normal.x;
e.normal.y = T.normal.y;
for (var C = e.pointCount, w = 0; w < C; ++w) {
var S = e.points[w];
S.rA.x = T.points[w].x - d.x;
S.rA.y = T.points[w].y - d.y;
S.rB.x = T.points[w].x - v.x;
S.rB.y = T.points[w].y - v.y;
var E = S.rA.x * e.normal.y - S.rA.y * e.normal.x, D = S.rB.x * e.normal.y - S.rB.y * e.normal.x, M = l + c + u * E * E + _ * D * D;
S.normalMass = M > 0 ? 1 / M : 0;
var I = 1 * e.normal.y, P = -1 * e.normal.x, B = S.rA.x * P - S.rA.y * I, R = S.rB.x * P - S.rB.y * I, L = l + c + u * B * B + _ * R * R;
S.tangentMass = L > 0 ? 1 / L : 0;
S.velocityBias = 0;
var O = e.normal.x * (A.x + -b * S.rB.y - g.x - -y * S.rA.y) + e.normal.y * (A.y + b * S.rB.x - g.y - y * S.rA.x);
O < -1 && (S.velocityBias = -e.restitution * O);
}
if (2 == e.pointCount) {
var F = e.points[0], N = e.points[1], k = F.rA.x * e.normal.y - F.rA.y * e.normal.x, z = F.rB.x * e.normal.y - F.rB.y * e.normal.x, G = N.rA.x * e.normal.y - N.rA.y * e.normal.x, U = N.rB.x * e.normal.y - N.rB.y * e.normal.x, V = l + c + u * k * k + _ * z * z, j = l + c + u * G * G + _ * U * U, W = l + c + u * k * G + _ * z * U;
if (V * V < 1e3 * (V * j - W * W)) {
e.K.ex.x = V;
e.K.ex.y = W;
e.K.ey.x = W;
e.K.ey.y = j;
e.normalMass.Assign(e.K.GetInverse());
} else e.pointCount = 1;
}
}
},
WarmStart: function() {
for (var t = 0; t < this.m_count; ++t) {
for (var e = this.m_velocityConstraints[t], i = e.indexA, n = e.indexB, r = e.invMassA, s = e.invIA, a = e.invMassB, o = e.invIB, h = e.pointCount, l = this.m_velocities[i].v, c = this.m_velocities[i].w, u = this.m_velocities[n].v, _ = this.m_velocities[n].w, m = e.normal, f = 1 * m.y, d = -1 * m.x, p = 0; p < h; ++p) {
var g = e.points[p], y = g.normalImpulse * m.x + g.tangentImpulse * f, v = g.normalImpulse * m.y + g.tangentImpulse * d;
c -= s * (g.rA.x * v - g.rA.y * y);
l.x -= r * y;
l.y -= r * v;
_ += o * (g.rB.x * v - g.rB.y * y);
u.x += a * y;
u.y += a * v;
}
this.m_velocities[i].w = c;
this.m_velocities[n].w = _;
}
},
SolveVelocityConstraints: function() {
for (var t = 0; t < this.m_count; ++t) {
var e = this.m_velocityConstraints[t], i = e.indexA, n = e.indexB, s = e.invMassA, a = e.invIA, o = e.invMassB, h = e.invIB, l = e.pointCount, c = this.m_velocities[i].v, u = this.m_velocities[i].w, _ = this.m_velocities[n].v, m = this.m_velocities[n].w, f = e.normal, d = 1 * f.y, p = -1 * f.x, g = e.friction;
r(1 == l || 2 == l);
for (var y = 0; y < l; ++y) {
var v = e.points[y], x = _.x + -m * v.rB.y - c.x - -u * v.rA.y, A = _.y + m * v.rB.x - c.y - u * v.rA.x, b = x * d + A * p - e.tangentSpeed, T = v.tangentMass * -b, C = g * v.normalImpulse;
T = (E = rt(v.tangentImpulse + T, -C, C)) - v.tangentImpulse;
v.tangentImpulse = E;
var w = T * d, S = T * p;
c.x -= s * w;
c.y -= s * S;
u -= a * (v.rA.x * S - v.rA.y * w);
_.x += o * w;
_.y += o * S;
m += h * (v.rB.x * S - v.rB.y * w);
}
if (1 == e.pointCount) {
v = e.points[0];
x = _.x + -m * v.rB.y - c.x - -u * v.rA.y;
A = _.y + m * v.rB.x - c.y - u * v.rA.x;
var E, D = x * f.x + A * f.y;
T = -v.normalMass * (D - v.velocityBias);
T = (E = it(v.normalImpulse + T, 0)) - v.normalImpulse;
v.normalImpulse = E;
w = T * f.x;
S = T * f.y;
c.x -= s * w;
c.y -= s * S;
u -= a * (v.rA.x * S - v.rA.y * w);
_.x += o * w;
_.y += o * S;
m += h * (v.rB.x * S - v.rB.y * w);
} else {
var M = e.points[0], I = e.points[1], P = M.normalImpulse, B = I.normalImpulse;
r(P >= 0 && B >= 0);
var R = _.x + -m * M.rB.y - c.x - -u * M.rA.y, L = _.y + m * M.rB.x - c.y - u * M.rA.x, O = _.x + -m * I.rB.y - c.x - -u * I.rA.y, F = _.y + m * I.rB.x - c.y - u * I.rA.x, N = R * f.x + L * f.y, k = O * f.x + F * f.y, z = N - M.velocityBias, G = k - I.velocityBias;
z -= e.K.ex.x * P + e.K.ey.x * B;
G -= e.K.ex.y * P + e.K.ey.y * B;
for (;;) {
var U = -(e.normalMass.ex.x * z + e.normalMass.ey.x * G), V = -(e.normalMass.ex.y * z + e.normalMass.ey.y * G);
if (U >= 0 && V >= 0) {
var j = U - P, W = V - B, H = j * f.x, q = j * f.y, X = W * f.x, Y = W * f.y;
c.x -= s * (H + X);
c.y -= s * (q + Y);
u -= a * (M.rA.x * q - M.rA.y * H + (I.rA.x * Y - I.rA.y * X));
_.x += o * (H + X);
_.y += o * (q + Y);
m += h * (M.rB.x * q - M.rB.y * H + (I.rB.x * Y - I.rB.y * X));
M.normalImpulse = U;
I.normalImpulse = V;
break;
}
U = -M.normalMass * z;
V = 0;
N = 0;
k = e.K.ex.y * U + G;
if (U >= 0 && k >= 0) {
W = V - B;
H = (j = U - P) * f.x;
q = j * f.y;
X = W * f.x;
Y = W * f.y;
c.x -= s * (H + X);
c.y -= s * (q + Y);
u -= a * (M.rA.x * q - M.rA.y * H + (I.rA.x * Y - I.rA.y * X));
_.x += o * (H + X);
_.y += o * (q + Y);
m += h * (M.rB.x * q - M.rB.y * H + (I.rB.x * Y - I.rB.y * X));
M.normalImpulse = U;
I.normalImpulse = V;
break;
}
U = 0;
V = -I.normalMass * G;
N = e.K.ey.x * V + z;
k = 0;
if (V >= 0 && N >= 0) {
W = V - B;
H = (j = U - P) * f.x;
q = j * f.y;
X = W * f.x;
Y = W * f.y;
c.x -= s * (H + X);
c.y -= s * (q + Y);
u -= a * (M.rA.x * q - M.rA.y * H + (I.rA.x * Y - I.rA.y * X));
_.x += o * (H + X);
_.y += o * (q + Y);
m += h * (M.rB.x * q - M.rB.y * H + (I.rB.x * Y - I.rB.y * X));
M.normalImpulse = U;
I.normalImpulse = V;
break;
}
U = 0;
V = 0;
k = G;
if ((N = z) >= 0 && k >= 0) {
W = V - B;
H = (j = U - P) * f.x;
q = j * f.y;
X = W * f.x;
Y = W * f.y;
c.x -= s * (H + X);
c.y -= s * (q + Y);
u -= a * (M.rA.x * q - M.rA.y * H + (I.rA.x * Y - I.rA.y * X));
_.x += o * (H + X);
_.y += o * (q + Y);
m += h * (M.rB.x * q - M.rB.y * H + (I.rB.x * Y - I.rB.y * X));
M.normalImpulse = U;
I.normalImpulse = V;
break;
}
break;
}
}
this.m_velocities[i].w = u;
this.m_velocities[n].w = m;
}
},
StoreImpulses: function() {
for (var t = 0; t < this.m_count; ++t) for (var e = this.m_velocityConstraints[t], i = this.m_contacts[e.contactIndex].GetManifold(), n = 0; n < e.pointCount; ++n) {
i.points[n].normalImpulse = e.points[n].normalImpulse;
i.points[n].tangentImpulse = e.points[n].tangentImpulse;
}
},
SolvePositionConstraints: function() {
for (var t = 0, e = 0; e < this.m_count; ++e) {
for (var i = this.m_positionConstraints[e], n = i.indexA, r = i.indexB, s = i.localCenterA, a = i.invMassA, o = i.invIA, h = i.localCenterB, l = i.invMassB, u = i.invIB, _ = i.pointCount, m = this.m_positions[n].c, f = this.m_positions[n].a, d = this.m_positions[r].c, p = this.m_positions[r].a, g = 0; g < _; ++g) {
Ze.cs_xfA.q.Set(f);
Ze.cs_xfB.q.Set(p);
Ze.cs_xfA.p.x = m.x - (Ze.cs_xfA.q.c * s.x - Ze.cs_xfA.q.s * s.y);
Ze.cs_xfA.p.y = m.y - (Ze.cs_xfA.q.s * s.x + Ze.cs_xfA.q.c * s.y);
Ze.cs_xfB.p.x = d.x - (Ze.cs_xfB.q.c * h.x - Ze.cs_xfB.q.s * h.y);
Ze.cs_xfB.p.y = d.y - (Ze.cs_xfB.q.s * h.x + Ze.cs_xfB.q.c * h.y);
Ze.temp_solver_manifold.Initialize(i, Ze.cs_xfA, Ze.cs_xfB, g);
var y = Ze.temp_solver_manifold.normal, v = Ze.temp_solver_manifold.point, x = Ze.temp_solver_manifold.separation, A = v.x - m.x, b = v.y - m.y, T = v.x - d.x, C = v.y - d.y;
t = tt(t, x);
var w = rt(.2 * (x + c), -.2, 0), S = A * y.y - b * y.x, E = T * y.y - C * y.x, D = a + l + o * S * S + u * E * E, M = D > 0 ? -w / D : 0, I = M * y.x, P = M * y.y;
m.x -= a * I;
m.y -= a * P;
f -= o * (A * P - b * I);
d.x += l * I;
d.y += l * P;
p += u * (T * P - C * I);
}
this.m_positions[n].a = f;
this.m_positions[r].a = p;
}
return t >= -3 * c;
},
SolveTOIPositionConstraints: function(t, e) {
for (var i = 0, n = 0; n < this.m_count; ++n) {
var r = this.m_positionConstraints[n], s = r.indexA, a = r.indexB, o = r.localCenterA, h = r.localCenterB, l = r.pointCount, u = 0, _ = 0;
if (s == t || s == e) {
u = r.invMassA;
_ = r.invIA;
}
var m = 0, f = 0;
if (a == t || a == e) {
m = r.invMassB;
f = r.invIB;
}
for (var d = this.m_positions[s].c, p = this.m_positions[s].a, g = this.m_positions[a].c, y = this.m_positions[a].a, v = 0; v < l; ++v) {
Ze.cs_xfA.q.Set(p);
Ze.cs_xfB.q.Set(y);
Ze.cs_xfA.p.Assign(E.Subtract(d, X(Ze.cs_xfA.q, o)));
Ze.cs_xfB.p.Assign(E.Subtract(g, X(Ze.cs_xfB.q, h)));
Ze.temp_solver_manifold.Initialize(r, Ze.cs_xfA, Ze.cs_xfB, v);
var x = Ze.temp_solver_manifold.normal, A = Ze.temp_solver_manifold.point, b = Ze.temp_solver_manifold.separation, T = E.Subtract(A, d), C = E.Subtract(A, g);
i = tt(i, b);
var w = rt(.75 * (b + c), -.2, 0), S = O(T, x), D = O(C, x), M = u + m + _ * S * S + f * D * D, I = M > 0 ? -w / M : 0, P = E.Multiply(I, x);
d.Subtract(E.Multiply(u, P));
p -= _ * O(T, P);
g.Add(E.Multiply(m, P));
y += f * O(C, P);
}
this.m_positions[s].a = p;
this.m_positions[a].a = y;
}
return i >= -1.5 * c;
}
};
function Ke() {
this.m_bodies = [];
this.m_contacts = [];
this.m_joints = [];
this.m_velocities = [];
this.m_positions = [];
}
var Qe = i.create("solve initialization", "solve"), $e = i.create("warm starting", "solve initialization"), ti = i.create("solve velocities", "solve"), ei = i.create("solve positions", "solve");
Ke._solverData = new xe();
Ke._solverDef = new Je();
Ke._solver = new Ze();
Ke.prototype = {
Clear: function() {
this.m_bodyCount = 0;
this.m_contactCount = 0;
this.m_jointCount = 0;
},
Initialize: function(t, e, i, n) {
this.m_listener = n;
this.m_bodyCapacity = t;
this.m_contactCapacity = e;
this.m_jointCapacity = i;
this.m_bodyCount = 0;
this.m_contactCount = 0;
this.m_jointCount = 0;
this.m_bodies.length = t;
this.m_contacts.length = e;
this.m_joints.length = i;
this.m_velocities.length = t;
this.m_positions.length = t;
},
Solve: function(t, e, i) {
Qe.start();
for (var n = t.dt, r = 0; r < this.m_bodyCount; ++r) {
var a = this.m_bodies[r];
this.m_positions[r].c.Assign(a.m_sweep.c);
var o = a.m_sweep.a;
this.m_velocities[r].v.Assign(a.m_linearVelocity);
var h = a.m_angularVelocity;
a.m_sweep.c0.Assign(a.m_sweep.c);
a.m_sweep.a0 = a.m_sweep.a;
if (a.m_type == ae.b2_dynamicBody) {
this.m_velocities[r].v.x += n * (a.m_gravityScale * e.x + a.m_invMass * a.m_force.x);
this.m_velocities[r].v.y += n * (a.m_gravityScale * e.y + a.m_invMass * a.m_force.y);
h += n * a.m_invI * a.m_torque;
this.m_velocities[r].v.x *= 1 / (1 + n * a.m_linearDamping);
this.m_velocities[r].v.y *= 1 / (1 + n * a.m_linearDamping);
h *= 1 / (1 + n * a.m_angularDamping);
}
this.m_positions[r].a = o;
this.m_velocities[r].w = h;
}
Ke._solverData.step = t;
Ke._solverData.positions = this.m_positions;
Ke._solverData.velocities = this.m_velocities;
Ke._solverDef.step = t;
Ke._solverDef.contacts = this.m_contacts;
Ke._solverDef.count = this.m_contactCount;
Ke._solverDef.positions = this.m_positions;
Ke._solverDef.velocities = this.m_velocities;
Ke._solverDef.allocator = this.m_allocator;
Ke._solver.Init(Ke._solverDef);
Ke._solver.InitializeVelocityConstraints();
if (t.warmStarting) {
$e.start();
Ke._solver.WarmStart();
$e.stop();
}
for (r = 0; r < this.m_jointCount; ++r) this.m_joints[r].InitVelocityConstraints(Ke._solverData);
Qe.stop();
ti.start();
for (r = 0; r < t.velocityIterations; ++r) {
for (var l = 0; l < this.m_jointCount; ++l) this.m_joints[l].SolveVelocityConstraints(Ke._solverData);
Ke._solver.SolveVelocityConstraints();
}
Ke._solver.StoreImpulses();
ti.stop();
ei.start();
for (r = 0; r < this.m_bodyCount; ++r) {
var c = this.m_positions[r].c, u = (o = this.m_positions[r].a, this.m_velocities[r].v), _ = (h = this.m_velocities[r].w, 
n * u.x), m = n * u.y, g = _ * _ + m * m;
if (g > 4) {
var y = 2 / w(g);
u.x *= y;
u.y *= y;
}
var v = n * h;
if (v * v > d) {
h *= y = f / Q(v);
}
c.x += n * u.x;
c.y += n * u.y;
o += n * h;
this.m_positions[r].a = o;
this.m_velocities[r].w = h;
}
var x = !1;
for (r = 0; r < t.positionIterations; ++r) {
var A = Ke._solver.SolvePositionConstraints(), b = !0;
for (l = 0; l < this.m_jointCount; ++l) {
var T = this.m_joints[l].SolvePositionConstraints(Ke._solverData);
b = b && T;
}
if (A && b) {
x = !0;
break;
}
}
for (r = 0; r < this.m_bodyCount; ++r) {
var C = this.m_bodies[r];
C.m_sweep.c.Assign(this.m_positions[r].c);
C.m_sweep.a = this.m_positions[r].a;
C.m_linearVelocity.Assign(this.m_velocities[r].v);
C.m_angularVelocity = this.m_velocities[r].w;
C.SynchronizeTransform();
}
ei.stop();
this.Report(Ke._solver.m_velocityConstraints);
if (i) {
var S = s, E = p * p;
for (r = 0; r < this.m_bodyCount; ++r) {
if ((a = this.m_bodies[r]).GetType() != ae.b2_staticBody) if (0 == (a.m_flags & ae.e_autoSleepFlag) || a.m_angularVelocity * a.m_angularVelocity > E || L(a.m_linearVelocity, a.m_linearVelocity) > 1e-4) {
a.m_sleepTime = 0;
S = 0;
} else {
a.m_sleepTime += n;
S = tt(S, a.m_sleepTime);
}
}
if (S >= .5 && x) for (r = 0; r < this.m_bodyCount; ++r) {
(a = this.m_bodies[r]).SetAwake(!1);
}
}
},
SolveTOI: function(t, e, i) {
r(e < this.m_bodyCount);
r(i < this.m_bodyCount);
for (var n = 0; n < this.m_bodyCount; ++n) {
var s = this.m_bodies[n];
this.m_positions[n].c.Assign(s.m_sweep.c);
this.m_positions[n].a = s.m_sweep.a;
this.m_velocities[n].v.Assign(s.m_linearVelocity);
this.m_velocities[n].w = s.m_angularVelocity;
}
Ke._solverDef.contacts = this.m_contacts;
Ke._solverDef.count = this.m_contactCount;
Ke._solverDef.step = t;
Ke._solverDef.positions = this.m_positions;
Ke._solverDef.velocities = this.m_velocities;
Ke._solver.Init(Ke._solverDef);
for (n = 0; n < t.positionIterations; ++n) {
if (Ke._solver.SolveTOIPositionConstraints(e, i)) break;
}
this.m_bodies[e].m_sweep.c0.Assign(this.m_positions[e].c);
this.m_bodies[e].m_sweep.a0 = this.m_positions[e].a;
this.m_bodies[i].m_sweep.c0.Assign(this.m_positions[i].c);
this.m_bodies[i].m_sweep.a0 = this.m_positions[i].a;
Ke._solver.InitializeVelocityConstraints();
for (n = 0; n < t.velocityIterations; ++n) Ke._solver.SolveVelocityConstraints();
var a = t.dt;
for (n = 0; n < this.m_bodyCount; ++n) {
var o = this.m_positions[n].c, h = this.m_positions[n].a, l = this.m_velocities[n].v, c = this.m_velocities[n].w, u = E.Multiply(a, l);
if (L(u, u) > 4) {
var _ = 2 / u.Length();
l.Multiply(_);
}
var m = a * c;
if (m * m > d) {
c *= _ = f / Q(m);
}
o.Add(E.Multiply(a, l));
h += a * c;
this.m_positions[n].a = h;
this.m_velocities[n].w = c;
var p = this.m_bodies[n];
p.m_sweep.c.Assign(o);
p.m_sweep.a = h;
p.m_linearVelocity.Assign(l);
p.m_angularVelocity = c;
p.SynchronizeTransform();
}
this.Report(Ke._solver.m_velocityConstraints);
},
AddBody: function(t) {
r(this.m_bodyCount < this.m_bodyCapacity);
t.m_islandIndex = this.m_bodyCount;
this.m_bodies[this.m_bodyCount] = t;
if (!this.m_positions[this.m_bodyCount]) {
this.m_positions[this.m_bodyCount] = new ye();
this.m_velocities[this.m_bodyCount] = new ve();
}
++this.m_bodyCount;
},
AddContact: function(t) {
r(this.m_contactCount < this.m_contactCapacity);
this.m_contacts[this.m_contactCount++] = t;
},
AddJoint: function(t) {
r(this.m_jointCount < this.m_jointCapacity);
this.m_joints[this.m_jointCount++] = t;
},
Report: function(t) {
if (null != this.m_listener) for (var e = 0; e < this.m_contactCount; ++e) {
var i = this.m_contacts[e], n = t[e], r = new me();
r.count = n.pointCount;
for (var s = 0; s < n.pointCount; ++s) {
r.normalImpulses[s] = n.points[s].normalImpulse;
r.tangentImpulses[s] = n.points[s].tangentImpulse;
}
this.m_listener.PostSolve(i, r);
}
}
};
function ii() {
this.other = null;
this.joint = null;
this.prev = null;
this.next = null;
}
function ni() {
this.type = ri.e_unknownJoint;
this.userData = null;
this.bodyA = null;
this.bodyB = null;
this.collideConnected = !1;
}
ni.prototype = {
_deserialize: function(t, e, i) {
this.bodyA = e[t.bodyA];
this.bodyB = e[t.bodyB];
this.collideConnected = t.collideConnected;
}
};
function ri(t) {
r(t.bodyA != t.bodyB);
this.m_type = t.type;
this.m_prev = null;
this.m_next = null;
this.m_bodyA = t.bodyA;
this.m_bodyB = t.bodyB;
this.m_index = 0;
this.m_collideConnected = t.collideConnected;
this.m_islandFlag = !1;
this.m_userData = t.userData;
this.m_edgeA = new ii();
this.m_edgeA.joint = null;
this.m_edgeA.other = null;
this.m_edgeA.prev = null;
this.m_edgeA.next = null;
this.m_edgeB = new ii();
this.m_edgeB.joint = null;
this.m_edgeB.other = null;
this.m_edgeB.prev = null;
this.m_edgeB.next = null;
}
ri.prototype = {
GetType: function() {
return this.m_type;
},
GetBodyA: function() {
return this.m_bodyA;
},
GetBodyB: function() {
return this.m_bodyB;
},
GetAnchorA: function() {},
GetAnchorB: function() {},
GetReactionForce: function(t) {},
GetReactionTorque: function(t) {},
GetNext: function() {
return this.m_next;
},
GetUserData: function() {
return this.m_userData;
},
SetUserData: function(t) {
this.m_userData = t;
},
IsActive: function() {
return this.m_bodyA.IsActive() && this.m_bodyB.IsActive();
},
GetCollideConnected: function() {
return this.m_collideConnected;
},
ShiftOrigin: function(t) {},
InitVelocityConstraints: function(t) {},
SolveVelocityConstraints: function(t) {},
SolvePositionConstraints: function(t) {},
_serialize: function(t) {
var e = t || {};
e.bodyA = null;
e.bodyB = null;
e.type = this.m_type;
e.collideConnected = this.m_collideConnected;
return e;
}
};
ri.e_inactiveLimit = 0;
ri.e_atLowerLimit = 1;
ri.e_atUpperLimit = 2;
ri.e_equalLimits = 3;
ri.e_unknownJoint = 0;
ri.e_revoluteJoint = 1;
ri.e_prismaticJoint = 2;
ri.e_distanceJoint = 3;
ri.e_pulleyJoint = 4;
ri.e_mouseJoint = 5;
ri.e_gearJoint = 6;
ri.e_wheelJoint = 7;
ri.e_weldJoint = 8;
ri.e_frictionJoint = 9;
ri.e_ropeJoint = 10;
ri.e_motorJoint = 11;
ri.Create = function(t) {
var e = null;
switch (t.type) {
case ri.e_distanceJoint:
e = new ci(t);
break;

case ri.e_mouseJoint:
e = new hi(t);
break;

case ri.e_prismaticJoint:
e = new _i(t);
break;

case ri.e_revoluteJoint:
e = new ai(t);
break;

case ri.e_pulleyJoint:
e = new Ci(t);
break;

case ri.e_gearJoint:
e = new xi(t);
break;

case ri.e_wheelJoint:
e = new yi(t);
break;

case ri.e_weldJoint:
e = new pi(t);
break;

case ri.e_frictionJoint:
e = new fi(t);
break;

case ri.e_ropeJoint:
e = new Si(t);
break;

case ri.e_motorJoint:
e = new bi(t);
break;

default:
r(!1);
}
return e;
};
ri.Destroy = function(t) {};
function si() {
this.parent.call(this);
this.type = ri.e_revoluteJoint;
this.localAnchorA = new E();
this.localAnchorB = new E();
this.referenceAngle = 0;
this.lowerAngle = 0;
this.upperAngle = 0;
this.maxMotorTorque = 0;
this.motorSpeed = 0;
this.enableLimit = !1;
this.enableMotor = !1;
Object.seal(this);
}
si.prototype = {
Initialize: function(t, e, i) {
this.bodyA = t;
this.bodyB = e;
this.localAnchorA = this.bodyA.GetLocalPoint(i);
this.localAnchorB = this.bodyB.GetLocalPoint(i);
this.referenceAngle = this.bodyB.GetAngle() - this.bodyA.GetAngle();
},
_deserialize: function(t, e, i) {
this.parent.prototype._deserialize.call(this, t, e, i);
this.localAnchorA._deserialize(t.localAnchorA);
this.localAnchorB._deserialize(t.localAnchorB);
this.referenceAngle = t.referenceAngle;
this.lowerAngle = t.lowerAngle;
this.upperAngle = t.upperAngle;
this.maxMotorTorque = t.maxMotorTorque;
this.motorSpeed = t.motorSpeed;
this.enableLimit = t.enableLimit;
this.enableMotor = t.enableMotor;
}
};
si._extend(ni);
function ai(t) {
this.parent.call(this, t);
this.m_localAnchorA = t.localAnchorA.Clone();
this.m_localAnchorB = t.localAnchorB.Clone();
this.m_referenceAngle = t.referenceAngle;
this.m_impulse = new D();
this.m_motorImpulse = 0;
this.m_lowerAngle = t.lowerAngle;
this.m_upperAngle = t.upperAngle;
this.m_maxMotorTorque = t.maxMotorTorque;
this.m_motorSpeed = t.motorSpeed;
this.m_enableLimit = t.enableLimit;
this.m_enableMotor = t.enableMotor;
this.m_limitState = ri.e_inactiveLimit;
this.m_indexA = 0;
this.m_indexB = 0;
this.m_rA = new E();
this.m_rB = new E();
this.m_localCenterA = new E();
this.m_localCenterB = new E();
this.m_invMassA = 0;
this.m_invMassB = 0;
this.m_invIA = 0;
this.m_invIB = 0;
this.m_mass = new I();
this.m_motorMass = 0;
}
ai.prototype = {
GetAnchorA: function() {
return this.m_bodyA.GetWorldPoint(this.m_localAnchorA);
},
GetAnchorB: function() {
return this.m_bodyB.GetWorldPoint(this.m_localAnchorB);
},
GetLocalAnchorA: function() {
return this.m_localAnchorA;
},
GetLocalAnchorB: function() {
return this.m_localAnchorB;
},
GetReferenceAngle: function() {
return this.m_referenceAngle;
},
GetJointAngle: function() {
var t = this.m_bodyA;
return this.m_bodyB.m_sweep.a - t.m_sweep.a - this.m_referenceAngle;
},
GetJointSpeed: function() {
var t = this.m_bodyA;
return this.m_bodyB.m_angularVelocity - t.m_angularVelocity;
},
IsLimitEnabled: function() {
return this.m_enableLimit;
},
EnableLimit: function(t) {
if (t != this.m_enableLimit) {
this.m_bodyA.SetAwake(!0);
this.m_bodyB.SetAwake(!0);
this.m_enableLimit = t;
this.m_impulse.z = 0;
}
},
GetLowerLimit: function() {
return this.m_lowerAngle;
},
GetUpperLimit: function() {
return this.m_upperAngle;
},
SetLimits: function(t, e) {
r(t <= e);
if (t != this.m_lowerAngle || e != this.m_upperAngle) {
this.m_bodyA.SetAwake(!0);
this.m_bodyB.SetAwake(!0);
this.m_impulse.z = 0;
this.m_lowerAngle = t;
this.m_upperAngle = e;
}
},
IsMotorEnabled: function() {
return this.m_enableMotor;
},
EnableMotor: function(t) {
this.m_bodyA.SetAwake(!0);
this.m_bodyB.SetAwake(!0);
this.m_enableMotor = t;
},
SetMotorSpeed: function(t) {
this.m_bodyA.SetAwake(!0);
this.m_bodyB.SetAwake(!0);
this.m_motorSpeed = t;
},
GetMotorSpeed: function() {
return this.m_motorSpeed;
},
SetMaxMotorTorque: function(t) {
this.m_bodyA.SetAwake(!0);
this.m_bodyB.SetAwake(!0);
this.m_maxMotorTorque = t;
},
GetMaxMotorTorque: function() {
return this.m_maxMotorTorque;
},
GetReactionForce: function(t) {
var e = new E(this.m_impulse.x, this.m_impulse.y);
return E.Multiply(t, e);
},
GetReactionTorque: function(t) {
return t * this.m_impulse.z;
},
GetMotorTorque: function(t) {
return t * this.m_motorImpulse;
},
InitVelocityConstraints: function(t) {
this.m_indexA = this.m_bodyA.m_islandIndex;
this.m_indexB = this.m_bodyB.m_islandIndex;
this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;
this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;
this.m_invMassA = this.m_bodyA.m_invMass;
this.m_invMassB = this.m_bodyB.m_invMass;
this.m_invIA = this.m_bodyA.m_invI;
this.m_invIB = this.m_bodyB.m_invI;
var e = t.positions[this.m_indexA].a, i = t.velocities[this.m_indexA].v.Clone(), n = t.velocities[this.m_indexA].w, r = t.positions[this.m_indexB].a, s = t.velocities[this.m_indexB].v.Clone(), a = t.velocities[this.m_indexB].w, o = new P(e), h = new P(r);
this.m_rA = X(o, E.Subtract(this.m_localAnchorA, this.m_localCenterA));
this.m_rB = X(h, E.Subtract(this.m_localAnchorB, this.m_localCenterB));
var l = this.m_invMassA, c = this.m_invMassB, _ = this.m_invIA, m = this.m_invIB, f = _ + m == 0;
this.m_mass.ex.x = l + c + this.m_rA.y * this.m_rA.y * _ + this.m_rB.y * this.m_rB.y * m;
this.m_mass.ey.x = -this.m_rA.y * this.m_rA.x * _ - this.m_rB.y * this.m_rB.x * m;
this.m_mass.ez.x = -this.m_rA.y * _ - this.m_rB.y * m;
this.m_mass.ex.y = this.m_mass.ey.x;
this.m_mass.ey.y = l + c + this.m_rA.x * this.m_rA.x * _ + this.m_rB.x * this.m_rB.x * m;
this.m_mass.ez.y = this.m_rA.x * _ + this.m_rB.x * m;
this.m_mass.ex.z = this.m_mass.ez.x;
this.m_mass.ey.z = this.m_mass.ez.y;
this.m_mass.ez.z = _ + m;
this.m_motorMass = _ + m;
this.m_motorMass > 0 && (this.m_motorMass = 1 / this.m_motorMass);
(0 == this.m_enableMotor || f) && (this.m_motorImpulse = 0);
if (this.m_enableLimit && 0 == f) {
var d = r - e - this.m_referenceAngle;
if (Q(this.m_upperAngle - this.m_lowerAngle) < 2 * u) this.m_limitState = ri.e_equalLimits; else if (d <= this.m_lowerAngle) {
this.m_limitState != ri.e_atLowerLimit && (this.m_impulse.z = 0);
this.m_limitState = ri.e_atLowerLimit;
} else if (d >= this.m_upperAngle) {
this.m_limitState != ri.e_atUpperLimit && (this.m_impulse.z = 0);
this.m_limitState = ri.e_atUpperLimit;
} else {
this.m_limitState = ri.e_inactiveLimit;
this.m_impulse.z = 0;
}
} else this.m_limitState = ri.e_inactiveLimit;
if (t.step.warmStarting) {
this.m_impulse.Multiply(t.step.dtRatio);
this.m_motorImpulse *= t.step.dtRatio;
var p = new E(this.m_impulse.x, this.m_impulse.y);
i.Subtract(E.Multiply(l, p));
n -= _ * (O(this.m_rA, p) + this.m_motorImpulse + this.m_impulse.z);
s.Add(E.Multiply(c, p));
a += m * (O(this.m_rB, p) + this.m_motorImpulse + this.m_impulse.z);
} else {
this.m_impulse.SetZero();
this.m_motorImpulse = 0;
}
t.velocities[this.m_indexA].v.Assign(i);
t.velocities[this.m_indexA].w = n;
t.velocities[this.m_indexB].v.Assign(s);
t.velocities[this.m_indexB].w = a;
},
SolveVelocityConstraints: function(t) {
var e = t.velocities[this.m_indexA].v.Clone(), i = t.velocities[this.m_indexA].w, n = t.velocities[this.m_indexB].v.Clone(), r = t.velocities[this.m_indexB].w, s = this.m_invMassA, a = this.m_invMassB, o = this.m_invIA, h = this.m_invIB, l = o + h == 0;
if (this.m_enableMotor && this.m_limitState != ri.e_equalLimits && 0 == l) {
var c = r - i - this.m_motorSpeed, u = -this.m_motorMass * c, _ = this.m_motorImpulse, m = t.step.dt * this.m_maxMotorTorque;
this.m_motorImpulse = rt(this.m_motorImpulse + u, -m, m);
i -= o * (u = this.m_motorImpulse - _);
r += h * u;
}
if (this.m_enableLimit && this.m_limitState != ri.e_inactiveLimit && 0 == l) {
var f = E.Subtract(E.Subtract(E.Add(n, N(r, this.m_rB)), e), N(i, this.m_rA)), d = r - i;
c = new D(f.x, f.y, d), u = this.m_mass.Solve33(c).Negate();
if (this.m_limitState == ri.e_equalLimits) this.m_impulse.Add(u); else if (this.m_limitState == ri.e_atLowerLimit) {
if (this.m_impulse.z + u.z < 0) {
var p = E.Add(f.Negate(), E.Multiply(this.m_impulse.z, new E(this.m_mass.ez.x, this.m_mass.ez.y))), g = this.m_mass.Solve22(p);
u.x = g.x;
u.y = g.y;
u.z = -this.m_impulse.z;
this.m_impulse.x += g.x;
this.m_impulse.y += g.y;
this.m_impulse.z = 0;
} else this.m_impulse.Add(u);
} else if (this.m_limitState == ri.e_atUpperLimit) {
if (this.m_impulse.z + u.z > 0) {
p = E.Add(f.Negate(), E.Multiply(this.m_impulse.z, new E(this.m_mass.ez.x, this.m_mass.ez.y))), 
g = this.m_mass.Solve22(p);
u.x = g.x;
u.y = g.y;
u.z = -this.m_impulse.z;
this.m_impulse.x += g.x;
this.m_impulse.y += g.y;
this.m_impulse.z = 0;
} else this.m_impulse.Add(u);
}
var y = new E(u.x, u.y);
e.Subtract(E.Multiply(s, y));
i -= o * (O(this.m_rA, y) + u.z);
n.Add(E.Multiply(a, y));
r += h * (O(this.m_rB, y) + u.z);
} else {
c = E.Subtract(E.Subtract(E.Add(n, N(r, this.m_rB)), e), N(i, this.m_rA)), u = this.m_mass.Solve22(c.Negate());
this.m_impulse.x += u.x;
this.m_impulse.y += u.y;
e.Subtract(E.Multiply(s, u));
i -= o * O(this.m_rA, u);
n.Add(E.Multiply(a, u));
r += h * O(this.m_rB, u);
}
t.velocities[this.m_indexA].v.Assign(e);
t.velocities[this.m_indexA].w = i;
t.velocities[this.m_indexB].v.Assign(n);
t.velocities[this.m_indexB].w = r;
},
SolvePositionConstraints: function(t) {
var e, i = t.positions[this.m_indexA].c.Clone(), n = t.positions[this.m_indexA].a, r = t.positions[this.m_indexB].c.Clone(), s = t.positions[this.m_indexB].a, a = new P(n), o = new P(s), h = 0, l = this.m_invIA + this.m_invIB == 0;
if (this.m_enableLimit && this.m_limitState != ri.e_inactiveLimit && 0 == l) {
var _ = s - n - this.m_referenceAngle, f = 0;
if (this.m_limitState == ri.e_equalLimits) {
var d = rt(_ - this.m_lowerAngle, -m, m);
f = -this.m_motorMass * d;
h = Q(d);
} else if (this.m_limitState == ri.e_atLowerLimit) {
h = -(d = _ - this.m_lowerAngle);
d = rt(d + u, -m, 0);
f = -this.m_motorMass * d;
} else if (this.m_limitState == ri.e_atUpperLimit) {
h = d = _ - this.m_upperAngle;
d = rt(d - u, 0, m);
f = -this.m_motorMass * d;
}
n -= this.m_invIA * f;
s += this.m_invIB * f;
}
a.Set(n);
o.Set(s);
var p = X(a, E.Subtract(this.m_localAnchorA, this.m_localCenterA)), g = X(o, E.Subtract(this.m_localAnchorB, this.m_localCenterB));
e = (d = E.Subtract(E.Subtract(E.Add(r, g), i), p)).Length();
var y = this.m_invMassA, v = this.m_invMassB, x = this.m_invIA, A = this.m_invIB, b = new M();
b.ex.x = y + v + x * p.y * p.y + A * g.y * g.y;
b.ex.y = -x * p.x * p.y - A * g.x * g.y;
b.ey.x = b.ex.y;
b.ey.y = y + v + x * p.x * p.x + A * g.x * g.x;
var T = b.Solve(d).Negate();
i.Subtract(E.Multiply(y, T));
n -= x * O(p, T);
r.Add(E.Multiply(v, T));
s += A * O(g, T);
t.positions[this.m_indexA].c.Assign(i);
t.positions[this.m_indexA].a = n;
t.positions[this.m_indexB].c.Assign(r);
t.positions[this.m_indexB].a = s;
return e <= c && h <= u;
},
_serialize: function(t) {
var e = t || {};
this.parent.prototype._serialize.call(this, e);
e.localAnchorA = this.m_localAnchorA._serialize();
e.localAnchorB = this.m_localAnchorB._serialize();
e.referenceAngle = this.m_referenceAngle;
e.lowerAngle = this.m_lowerAngle;
e.upperAngle = this.m_upperAngle;
e.maxMotorTorque = this.m_maxMotorTorque;
e.motorSpeed = this.m_motorSpeed;
e.enableLimit = this.m_enableLimit;
e.enableMotor = this.m_enableMotor;
return e;
}
};
ai._extend(ri);
function oi() {
this.parent.call(this);
this.type = ri.e_mouseJoint;
this.target = new E(0, 0);
this.maxForce = 0;
this.frequencyHz = 5;
this.dampingRatio = .7;
Object.seal(this);
}
oi._extend(ni);
function hi(t) {
this.parent.call(this, t);
r(t.target.IsValid());
r(v(t.maxForce) && t.maxForce >= 0);
r(v(t.frequencyHz) && t.frequencyHz >= 0);
r(v(t.dampingRatio) && t.dampingRatio >= 0);
this.m_targetA = t.target.Clone();
this.m_localAnchorB = Z(this.m_bodyB.GetTransform(), this.m_targetA);
this.m_maxForce = t.maxForce;
this.m_impulse = new E();
this.m_frequencyHz = t.frequencyHz;
this.m_dampingRatio = t.dampingRatio;
this.m_beta = 0;
this.m_gamma = 0;
this.m_indexA = 0;
this.m_indexB = 0;
this.m_rB = new E();
this.m_localCenterB = new E();
this.m_invMassB = 0;
this.m_invIB = 0;
this.m_mass = new M();
this.m_C = new E();
}
hi.prototype = {
GetAnchorA: function() {
return this.m_targetA;
},
GetAnchorB: function() {
return this.m_bodyB.GetWorldPoint(this.m_localAnchorB);
},
GetReactionForce: function(t) {
return E.Multiply(t, this.m_impulse);
},
GetReactionTorque: function(t) {
return 0 * t;
},
SetTarget: function(t) {
0 == this.m_bodyB.IsAwake() && this.m_bodyB.SetAwake(!0);
this.m_targetA.Assign(t);
},
GetTarget: function() {
return this.m_targetA;
},
SetMaxForce: function(t) {
this.m_maxForce = t;
},
GetMaxForce: function() {
return this.m_maxForce;
},
SetFrequency: function(t) {
this.m_frequencyHz = t;
},
GetFrequency: function() {
return this.m_frequencyHz;
},
SetDampingRatio: function(t) {
this.m_dampingRatio = t;
},
GetDampingRatio: function() {
return this.m_dampingRatio;
},
ShiftOrigin: function(t) {
this.m_targetA.Subtract(t);
},
InitVelocityConstraints: function(t) {
this.m_indexB = this.m_bodyB.m_islandIndex;
this.m_localCenterB.Assign(this.m_bodyB.m_sweep.localCenter);
this.m_invMassB = this.m_bodyB.m_invMass;
this.m_invIB = this.m_bodyB.m_invI;
var e = t.positions[this.m_indexB].c.Clone(), i = t.positions[this.m_indexB].a, n = t.velocities[this.m_indexB].v.Clone(), s = t.velocities[this.m_indexB].w, h = new P(i), l = this.m_bodyB.GetMass(), c = 2 * o * this.m_frequencyHz, u = 2 * l * this.m_dampingRatio * c, _ = l * (c * c), m = t.step.dt;
r(u + m * _ > a);
this.m_gamma = m * (u + m * _);
0 != this.m_gamma && (this.m_gamma = 1 / this.m_gamma);
this.m_beta = m * _ * this.m_gamma;
this.m_rB.Assign(X(h, E.Subtract(this.m_localAnchorB, this.m_localCenterB)));
var f = new M();
f.ex.x = this.m_invMassB + this.m_invIB * this.m_rB.y * this.m_rB.y + this.m_gamma;
f.ex.y = -this.m_invIB * this.m_rB.x * this.m_rB.y;
f.ey.x = f.ex.y;
f.ey.y = this.m_invMassB + this.m_invIB * this.m_rB.x * this.m_rB.x + this.m_gamma;
this.m_mass.Assign(f.GetInverse());
this.m_C.Assign(E.Subtract(E.Add(e, this.m_rB), this.m_targetA));
this.m_C.Multiply(this.m_beta);
s *= .98;
if (t.step.warmStarting) {
this.m_impulse.Multiply(t.step.dtRatio);
n.Add(E.Multiply(this.m_invMassB, this.m_impulse));
s += this.m_invIB * O(this.m_rB, this.m_impulse);
} else this.m_impulse.SetZero();
t.velocities[this.m_indexB].v.Assign(n);
t.velocities[this.m_indexB].w = s;
},
SolveVelocityConstraints: function(t) {
var e = t.velocities[this.m_indexB].v.Clone(), i = t.velocities[this.m_indexB].w, n = E.Add(e, N(i, this.m_rB)), r = k(this.m_mass, E.Add(E.Add(n, this.m_C), E.Multiply(this.m_gamma, this.m_impulse)).Negate()), s = this.m_impulse.Clone();
this.m_impulse.Add(r);
var a = t.step.dt * this.m_maxForce;
this.m_impulse.LengthSquared() > a * a && this.m_impulse.Multiply(a / this.m_impulse.Length());
r.Assign(E.Subtract(this.m_impulse, s));
e.Add(E.Multiply(this.m_invMassB, r));
i += this.m_invIB * O(this.m_rB, r);
t.velocities[this.m_indexB].v.Assign(e);
t.velocities[this.m_indexB].w = i;
},
SolvePositionConstraints: function(t) {
return !0;
}
};
hi._extend(ri);
function li() {
this.parent.call(this);
this.type = ri.e_distanceJoint;
this.localAnchorA = new E(0, 0);
this.localAnchorB = new E(0, 0);
this.length = 1;
this.frequencyHz = 0;
this.dampingRatio = 0;
Object.seal(this);
}
li.prototype = {
Initialize: function(t, e, i, n) {
this.bodyA = t;
this.bodyB = e;
this.localAnchorA = this.bodyA.GetLocalPoint(i);
this.localAnchorB = this.bodyB.GetLocalPoint(n);
var r = E.Subtract(n, i);
this.length = r.Length();
},
_deserialize: function(t, e, i) {
this.parent.prototype._deserialize.call(this, t, e, i);
this.localAnchorA._deserialize(t.localAnchorA);
this.localAnchorB._deserialize(t.localAnchorB);
this.length = t.length;
this.frequencyHz = t.frequencyHz;
this.dampingRatio = t.dampingRatio;
}
};
li._extend(ni);
function ci(t) {
this.parent.call(this, t);
this.m_localAnchorA = t.localAnchorA.Clone();
this.m_localAnchorB = t.localAnchorB.Clone();
this.m_length = t.length;
this.m_frequencyHz = t.frequencyHz;
this.m_dampingRatio = t.dampingRatio;
this.m_impulse = 0;
this.m_gamma = 0;
this.m_bias = 0;
this.m_indexA = 0;
this.m_indexB = 0;
this.m_u = new E();
this.m_rA = new E();
this.m_rB = new E();
this.m_localCenterA = new E();
this.m_localCenterB = new E();
this.m_invMassA = 0;
this.m_invMassB = 0;
this.m_invIA = 0;
this.m_invIB = 0;
this.m_mass = 0;
}
ci.prototype = {
GetAnchorA: function() {
return this.m_bodyA.GetWorldPoint(this.m_localAnchorA);
},
GetAnchorB: function() {
return this.m_bodyB.GetWorldPoint(this.m_localAnchorB);
},
GetReactionForce: function(t) {
return E.Multiply(t * this.m_impulse, this.m_u);
},
GetReactionTorque: function(t) {
return 0;
},
GetLocalAnchorA: function() {
return this.m_localAnchorA;
},
GetLocalAnchorB: function() {
return this.m_localAnchorB;
},
SetLength: function(t) {
this.m_length = t;
},
GetLength: function() {
return this.m_length;
},
SetFrequency: function(t) {
this.m_frequencyHz = t;
},
GetFrequency: function() {
return this.m_frequencyHz;
},
SetDampingRatio: function(t) {
this.m_dampingRatio = t;
},
GetDampingRatio: function() {
return this.m_dampingRatio;
},
InitVelocityConstraints: function(t) {
this.m_indexA = this.m_bodyA.m_islandIndex;
this.m_indexB = this.m_bodyB.m_islandIndex;
this.m_localCenterA.Assign(this.m_bodyA.m_sweep.localCenter);
this.m_localCenterB.Assign(this.m_bodyB.m_sweep.localCenter);
this.m_invMassA = this.m_bodyA.m_invMass;
this.m_invMassB = this.m_bodyB.m_invMass;
this.m_invIA = this.m_bodyA.m_invI;
this.m_invIB = this.m_bodyB.m_invI;
var e = t.positions[this.m_indexA].c.Clone(), i = t.positions[this.m_indexA].a, n = t.velocities[this.m_indexA].v.Clone(), r = t.velocities[this.m_indexA].w, s = t.positions[this.m_indexB].c.Clone(), a = t.positions[this.m_indexB].a, h = t.velocities[this.m_indexB].v.Clone(), l = t.velocities[this.m_indexB].w, u = new P(i), _ = new P(a);
this.m_rA = X(u, E.Subtract(this.m_localAnchorA, this.m_localCenterA));
this.m_rB = X(_, E.Subtract(this.m_localAnchorB, this.m_localCenterB));
this.m_u = E.Subtract(E.Subtract(E.Add(s, this.m_rB), e), this.m_rA);
var m = this.m_u.Length();
m > c ? this.m_u.Multiply(1 / m) : this.m_u.Set(0, 0);
var f = O(this.m_rA, this.m_u), d = O(this.m_rB, this.m_u), p = this.m_invMassA + this.m_invIA * f * f + this.m_invMassB + this.m_invIB * d * d;
this.m_mass = 0 != p ? 1 / p : 0;
if (this.m_frequencyHz > 0) {
var g = m - this.m_length, y = 2 * o * this.m_frequencyHz, v = 2 * this.m_mass * this.m_dampingRatio * y, x = this.m_mass * y * y, A = t.step.dt;
this.m_gamma = A * (v + A * x);
this.m_gamma = 0 != this.m_gamma ? 1 / this.m_gamma : 0;
this.m_bias = g * A * x * this.m_gamma;
p += this.m_gamma;
this.m_mass = 0 != p ? 1 / p : 0;
} else {
this.m_gamma = 0;
this.m_bias = 0;
}
if (t.step.warmStarting) {
this.m_impulse *= t.step.dtRatio;
var b = E.Multiply(this.m_impulse, this.m_u);
n.Subtract(E.Multiply(this.m_invMassA, b));
r -= this.m_invIA * O(this.m_rA, b);
h.Add(E.Multiply(this.m_invMassB, b));
l += this.m_invIB * O(this.m_rB, b);
} else this.m_impulse = 0;
t.velocities[this.m_indexA].v.Assign(n);
t.velocities[this.m_indexA].w = r;
t.velocities[this.m_indexB].v.Assign(h);
t.velocities[this.m_indexB].w = l;
},
SolveVelocityConstraints: function(t) {
var e = t.velocities[this.m_indexA].v.Clone(), i = t.velocities[this.m_indexA].w, n = t.velocities[this.m_indexB].v.Clone(), r = t.velocities[this.m_indexB].w, s = E.Add(e, N(i, this.m_rA)), a = E.Add(n, N(r, this.m_rB)), o = L(this.m_u, E.Subtract(a, s)), h = -this.m_mass * (o + this.m_bias + this.m_gamma * this.m_impulse);
this.m_impulse += h;
var l = E.Multiply(h, this.m_u);
e.Subtract(E.Multiply(this.m_invMassA, l));
i -= this.m_invIA * O(this.m_rA, l);
n.Add(E.Multiply(this.m_invMassB, l));
r += this.m_invIB * O(this.m_rB, l);
t.velocities[this.m_indexA].v.Assign(e);
t.velocities[this.m_indexA].w = i;
t.velocities[this.m_indexB].v.Assign(n);
t.velocities[this.m_indexB].w = r;
},
SolvePositionConstraints: function(t) {
if (this.m_frequencyHz > 0) return !0;
var e = t.positions[this.m_indexA].c.Clone(), i = t.positions[this.m_indexA].a, n = t.positions[this.m_indexB].c.Clone(), r = t.positions[this.m_indexB].a, s = new P(i), a = new P(r), o = X(s, E.Subtract(this.m_localAnchorA, this.m_localCenterA)), h = X(a, E.Subtract(this.m_localAnchorB, this.m_localCenterB)), l = E.Subtract(E.Subtract(E.Add(n, h), e), o), u = l.Normalize() - this.m_length;
u = rt(u, -.2, .2);
var _ = -this.m_mass * u, m = E.Multiply(_, l);
e.Subtract(E.Multiply(this.m_invMassA, m));
i -= this.m_invIA * O(o, m);
n.Add(E.Multiply(this.m_invMassB, m));
r += this.m_invIB * O(h, m);
t.positions[this.m_indexA].c.Assign(e);
t.positions[this.m_indexA].a = i;
t.positions[this.m_indexB].c.Assign(n);
t.positions[this.m_indexB].a = r;
return Q(u) < c;
},
_serialize: function(t) {
var e = t || {};
this.parent.prototype._serialize.call(this, e);
e.localAnchorA = this.m_localAnchorA._serialize();
e.localAnchorB = this.m_localAnchorB._serialize();
e.length = this.m_length;
e.frequencyHz = this.m_frequencyHz;
e.dampingRatio = this.m_dampingRatio;
return e;
}
};
ci._extend(ri);
function ui() {
this.parent.call(this);
this.type = ri.e_prismaticJoint;
this.localAnchorA = new E();
this.localAnchorB = new E();
this.localAxisA = new E(1, 0);
this.referenceAngle = 0;
this.enableLimit = !1;
this.lowerTranslation = 0;
this.upperTranslation = 0;
this.enableMotor = !1;
this.maxMotorForce = 0;
this.motorSpeed = 0;
Object.seal(this);
}
ui.prototype = {
Initialize: function(t, e, i, n) {
this.bodyA = t;
this.bodyB = e;
this.localAnchorA = this.bodyA.GetLocalPoint(i);
this.localAnchorB = this.bodyB.GetLocalPoint(i);
this.localAxisA = this.bodyA.GetLocalVector(n);
this.referenceAngle = this.bodyB.GetAngle() - this.bodyA.GetAngle();
},
_deserialize: function(t, e, i) {
this.parent.prototype._deserialize.call(this, t, e, i);
this.localAnchorA._deserialize(t.localAnchorA);
this.localAnchorB._deserialize(t.localAnchorB);
this.localAxisA._deserialize(t.localAxisA);
this.referenceAngle = t.referenceAngle;
this.enableLimit = t.enableLimit;
this.lowerTranslation = t.lowerTranslation;
this.upperTranslation = t.upperTranslation;
this.enableMotor = t.enableMotor;
this.maxMotorForce = t.maxMotorForce;
this.motorSpeed = t.motorSpeed;
}
};
ui._extend(ni);
function _i(t) {
this.parent.call(this, t);
this.m_localAnchorA = t.localAnchorA.Clone();
this.m_localAnchorB = t.localAnchorB.Clone();
this.m_localXAxisA = t.localAxisA.Clone();
this.m_localXAxisA.Normalize();
this.m_localYAxisA = N(1, this.m_localXAxisA);
this.m_referenceAngle = t.referenceAngle;
this.m_impulse = new D();
this.m_motorMass = 0;
this.m_motorImpulse = 0;
this.m_lowerTranslation = t.lowerTranslation;
this.m_upperTranslation = t.upperTranslation;
this.m_maxMotorForce = t.maxMotorForce;
this.m_motorSpeed = t.motorSpeed;
this.m_enableLimit = t.enableLimit;
this.m_enableMotor = t.enableMotor;
this.m_limitState = ri.e_inactiveLimit;
this.m_axis = new E();
this.m_perp = new E();
this.m_indexA = 0;
this.m_indexB = 0;
this.m_localCenterA = new E();
this.m_localCenterB = new E();
this.m_invMassA = 0;
this.m_invMassB = 0;
this.m_invIA = 0;
this.m_invIB = 0;
this.m_s1 = 0, this.m_s2 = 0;
this.m_a1 = 0, this.m_a2 = 0;
this.m_K = new I();
this.m_motorMass = 0;
}
_i.prototype = {
GetAnchorA: function() {
return this.m_bodyA.GetWorldPoint(this.m_localAnchorA);
},
GetAnchorB: function() {
return this.m_bodyB.GetWorldPoint(this.m_localAnchorB);
},
GetReactionForce: function(t) {
return E.Multiply(t, E.Add(E.Multiply(this.m_impulse.x, this.m_perp), E.Multiply(this.m_motorImpulse + this.m_impulse.z, this.m_axis)));
},
GetReactionTorque: function(t) {
return t * this.m_impulse.y;
},
GetLocalAnchorA: function() {
return this.m_localAnchorA;
},
GetLocalAnchorB: function() {
return this.m_localAnchorB;
},
GetLocalAxisA: function() {
return this.m_localXAxisA;
},
GetReferenceAngle: function() {
return this.m_referenceAngle;
},
GetJointTranslation: function() {
var t = this.m_bodyA.GetWorldPoint(this.m_localAnchorA), e = this.m_bodyB.GetWorldPoint(this.m_localAnchorB);
return L(E.Subtract(e, t), this.m_bodyA.GetWorldVector(this.m_localXAxisA));
},
GetJointSpeed: function() {
var t = this.m_bodyA, e = this.m_bodyB, i = X(t.m_xf.q, E.Subtract(this.m_localAnchorA, t.m_sweep.localCenter)), n = X(e.m_xf.q, E.Subtract(this.m_localAnchorB, e.m_sweep.localCenter)), r = E.Add(t.m_sweep.c, i), s = E.Add(e.m_sweep.c, n), a = E.Subtract(s, r), o = X(t.m_xf.q, this.m_localXAxisA), h = t.m_linearVelocity, l = e.m_linearVelocity, c = t.m_angularVelocity, u = e.m_angularVelocity;
return L(a, N(c, o)) + L(o, E.Subtract(E.Subtract(E.Add(l, N(u, n)), h), N(c, i)));
},
IsLimitEnabled: function() {
return this.m_enableLimit;
},
EnableLimit: function(t) {
if (t != this.m_enableLimit) {
this.m_bodyA.SetAwake(!0);
this.m_bodyB.SetAwake(!0);
this.m_enableLimit = t;
this.m_impulse.z = 0;
}
},
GetLowerLimit: function() {
return this.m_lowerTranslation;
},
GetUpperLimit: function() {
return this.m_upperTranslation;
},
SetLimits: function(t, e) {
r(t <= e);
if (t != this.m_lowerTranslation || e != this.m_upperTranslation) {
this.m_bodyA.SetAwake(!0);
this.m_bodyB.SetAwake(!0);
this.m_lowerTranslation = t;
this.m_upperTranslation = e;
this.m_impulse.z = 0;
}
},
IsMotorEnabled: function() {
return this.m_enableMotor;
},
EnableMotor: function(t) {
this.m_bodyA.SetAwake(!0);
this.m_bodyB.SetAwake(!0);
this.m_enableMotor = t;
},
SetMotorSpeed: function(t) {
this.m_bodyA.SetAwake(!0);
this.m_bodyB.SetAwake(!0);
this.m_motorSpeed = t;
},
GetMotorSpeed: function() {
return this.m_motorSpeed;
},
SetMaxMotorForce: function(t) {
this.m_bodyA.SetAwake(!0);
this.m_bodyB.SetAwake(!0);
this.m_maxMotorForce = t;
},
GetMaxMotorForce: function() {
return this.m_maxMotorForce;
},
GetMotorForce: function(t) {
return t * this.m_motorImpulse;
},
InitVelocityConstraints: function(t) {
this.m_indexA = this.m_bodyA.m_islandIndex;
this.m_indexB = this.m_bodyB.m_islandIndex;
this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;
this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;
this.m_invMassA = this.m_bodyA.m_invMass;
this.m_invMassB = this.m_bodyB.m_invMass;
this.m_invIA = this.m_bodyA.m_invI;
this.m_invIB = this.m_bodyB.m_invI;
var e = t.positions[this.m_indexA].c.Clone(), i = t.positions[this.m_indexA].a, n = t.velocities[this.m_indexA].v.Clone(), r = t.velocities[this.m_indexA].w, s = t.positions[this.m_indexB].c.Clone(), a = t.positions[this.m_indexB].a, o = t.velocities[this.m_indexB].v.Clone(), h = t.velocities[this.m_indexB].w, l = new P(i), u = new P(a), _ = X(l, E.Subtract(this.m_localAnchorA, this.m_localCenterA)), m = X(u, E.Subtract(this.m_localAnchorB, this.m_localCenterB)), f = E.Add(E.Subtract(s, e), E.Subtract(m, _)), d = this.m_invMassA, p = this.m_invMassB, g = this.m_invIA, y = this.m_invIB;
this.m_axis = X(l, this.m_localXAxisA);
this.m_a1 = O(E.Add(f, _), this.m_axis);
this.m_a2 = O(m, this.m_axis);
this.m_motorMass = d + p + g * this.m_a1 * this.m_a1 + y * this.m_a2 * this.m_a2;
this.m_motorMass > 0 && (this.m_motorMass = 1 / this.m_motorMass);
this.m_perp = X(l, this.m_localYAxisA);
this.m_s1 = O(E.Add(f, _), this.m_perp);
this.m_s2 = O(m, this.m_perp);
var v = d + p + g * this.m_s1 * this.m_s1 + y * this.m_s2 * this.m_s2, x = g * this.m_s1 + y * this.m_s2, A = g * this.m_s1 * this.m_a1 + y * this.m_s2 * this.m_a2, b = g + y;
0 == b && (b = 1);
var T = g * this.m_a1 + y * this.m_a2, C = d + p + g * this.m_a1 * this.m_a1 + y * this.m_a2 * this.m_a2;
this.m_K.ex.Set(v, x, A);
this.m_K.ey.Set(x, b, T);
this.m_K.ez.Set(A, T, C);
if (this.m_enableLimit) {
var w = L(this.m_axis, f);
if (Q(this.m_upperTranslation - this.m_lowerTranslation) < 2 * c) this.m_limitState = ri.e_equalLimits; else if (w <= this.m_lowerTranslation) {
if (this.m_limitState != ri.e_atLowerLimit) {
this.m_limitState = ri.e_atLowerLimit;
this.m_impulse.z = 0;
}
} else if (w >= this.m_upperTranslation) {
if (this.m_limitState != ri.e_atUpperLimit) {
this.m_limitState = ri.e_atUpperLimit;
this.m_impulse.z = 0;
}
} else {
this.m_limitState = ri.e_inactiveLimit;
this.m_impulse.z = 0;
}
} else {
this.m_limitState = ri.e_inactiveLimit;
this.m_impulse.z = 0;
}
0 == this.m_enableMotor && (this.m_motorImpulse = 0);
if (t.step.warmStarting) {
this.m_impulse.Multiply(t.step.dtRatio);
this.m_motorImpulse *= t.step.dtRatio;
var S = E.Add(E.Multiply(this.m_impulse.x, this.m_perp), E.Multiply(this.m_motorImpulse + this.m_impulse.z, this.m_axis)), D = this.m_impulse.x * this.m_s1 + this.m_impulse.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_a1, M = this.m_impulse.x * this.m_s2 + this.m_impulse.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_a2;
n.Subtract(E.Multiply(d, S));
r -= g * D;
o.Add(E.Multiply(p, S));
h += y * M;
} else {
this.m_impulse.SetZero();
this.m_motorImpulse = 0;
}
t.velocities[this.m_indexA].v.Assign(n);
t.velocities[this.m_indexA].w = r;
t.velocities[this.m_indexB].v.Assign(o);
t.velocities[this.m_indexB].w = h;
},
SolveVelocityConstraints: function(t) {
var e = t.velocities[this.m_indexA].v.Clone(), i = t.velocities[this.m_indexA].w, n = t.velocities[this.m_indexB].v.Clone(), r = t.velocities[this.m_indexB].w, s = this.m_invMassA, a = this.m_invMassB, o = this.m_invIA, h = this.m_invIB;
if (this.m_enableMotor && this.m_limitState != ri.e_equalLimits) {
var l = L(this.m_axis, E.Subtract(n, e)) + this.m_a2 * r - this.m_a1 * i, c = this.m_motorMass * (this.m_motorSpeed - l), u = this.m_motorImpulse, _ = t.step.dt * this.m_maxMotorForce;
this.m_motorImpulse = rt(this.m_motorImpulse + c, -_, _);
c = this.m_motorImpulse - u;
var m = E.Multiply(c, this.m_axis), f = c * this.m_a1, d = c * this.m_a2;
e.Subtract(E.Multiply(s, m));
i -= o * f;
n.Add(E.Multiply(a, m));
r += h * d;
}
var p = new E();
p.x = L(this.m_perp, E.Subtract(n, e)) + this.m_s2 * r - this.m_s1 * i;
p.y = r - i;
if (this.m_enableLimit && this.m_limitState != ri.e_inactiveLimit) {
var g;
g = L(this.m_axis, E.Subtract(n, e)) + this.m_a2 * r - this.m_a1 * i;
l = new D(p.x, p.y, g);
var y = this.m_impulse.Clone(), v = this.m_K.Solve33(l.Negate());
this.m_impulse.Add(v);
this.m_limitState == ri.e_atLowerLimit ? this.m_impulse.z = it(this.m_impulse.z, 0) : this.m_limitState == ri.e_atUpperLimit && (this.m_impulse.z = tt(this.m_impulse.z, 0));
var x = E.Subtract(p.Negate(), E.Multiply(this.m_impulse.z - y.z, new E(this.m_K.ez.x, this.m_K.ez.y))), A = E.Add(this.m_K.Solve22(x), new E(y.x, y.y));
this.m_impulse.x = A.x;
this.m_impulse.y = A.y;
v = D.Subtract(this.m_impulse, y);
m = E.Add(E.Multiply(v.x, this.m_perp), E.Multiply(v.z, this.m_axis)), f = v.x * this.m_s1 + v.y + v.z * this.m_a1, 
d = v.x * this.m_s2 + v.y + v.z * this.m_a2;
e.Subtract(E.Multiply(s, m));
i -= o * f;
n.Add(E.Multiply(a, m));
r += h * d;
} else {
v = this.m_K.Solve22(p.Negate());
this.m_impulse.x += v.x;
this.m_impulse.y += v.y;
m = E.Multiply(v.x, this.m_perp), f = v.x * this.m_s1 + v.y, d = v.x * this.m_s2 + v.y;
e.Subtract(E.Multiply(s, m));
i -= o * f;
n.Add(E.Multiply(a, m));
r += h * d;
}
t.velocities[this.m_indexA].v.Assign(e);
t.velocities[this.m_indexA].w = i;
t.velocities[this.m_indexB].v.Assign(n);
t.velocities[this.m_indexB].w = r;
},
SolvePositionConstraints: function(t) {
var e = t.positions[this.m_indexA].c.Clone(), i = t.positions[this.m_indexA].a, n = t.positions[this.m_indexB].c.Clone(), r = t.positions[this.m_indexB].a, s = new P(i), a = new P(r), o = this.m_invMassA, h = this.m_invMassB, l = this.m_invIA, _ = this.m_invIB, m = X(s, E.Subtract(this.m_localAnchorA, this.m_localCenterA)), f = X(a, E.Subtract(this.m_localAnchorB, this.m_localCenterB)), d = E.Subtract(E.Subtract(E.Add(n, f), e), m), p = X(s, this.m_localXAxisA), g = O(E.Add(d, m), p), y = O(f, p), v = X(s, this.m_localYAxisA), x = O(E.Add(d, m), v), A = O(f, v), b = new D(), T = new E();
T.x = L(v, d);
T.y = r - i - this.m_referenceAngle;
var C = Q(T.x), w = Q(T.y), S = !1, B = 0;
if (this.m_enableLimit) {
var R = L(p, d);
if (Q(this.m_upperTranslation - this.m_lowerTranslation) < 2 * c) {
B = rt(R, -.2, .2);
C = it(C, Q(R));
S = !0;
} else if (R <= this.m_lowerTranslation) {
B = rt(R - this.m_lowerTranslation + c, -.2, 0);
C = it(C, this.m_lowerTranslation - R);
S = !0;
} else if (R >= this.m_upperTranslation) {
B = rt(R - this.m_upperTranslation - c, 0, .2);
C = it(C, R - this.m_upperTranslation);
S = !0;
}
}
if (S) {
var F = o + h + l * x * x + _ * A * A, N = l * x + _ * A, k = l * x * g + _ * A * y;
0 == (V = l + _) && (V = 1);
var z = l * g + _ * y, G = o + h + l * g * g + _ * y * y;
(j = new I()).ex.Set(F, N, k);
j.ey.Set(N, V, z);
j.ez.Set(k, z, G);
var U = new D();
U.x = T.x;
U.y = T.y;
U.z = B;
b = j.Solve33(U.Negate());
} else {
var V, j;
F = o + h + l * x * x + _ * A * A, N = l * x + _ * A;
0 == (V = l + _) && (V = 1);
(j = new M()).ex.Set(F, N);
j.ey.Set(N, V);
var W = j.Solve(T.Negate());
b.x = W.x;
b.y = W.y;
b.z = 0;
}
var H = E.Add(E.Multiply(b.x, v), E.Multiply(b.z, p)), q = b.x * x + b.y + b.z * g, Y = b.x * A + b.y + b.z * y;
e.Subtract(E.Multiply(o, H));
i -= l * q;
n.Add(E.Multiply(h, H));
r += _ * Y;
t.positions[this.m_indexA].c.Assign(e);
t.positions[this.m_indexA].a = i;
t.positions[this.m_indexB].c.Assign(n);
t.positions[this.m_indexB].a = r;
return C <= c && w <= u;
},
_serialize: function(t) {
var e = t || {};
this.parent.prototype._serialize.call(this, e);
e.localAnchorA = this.m_localAnchorA._serialize();
e.localAnchorB = this.m_localAnchorB._serialize();
e.localAxisA = this.m_localXAxisA._serialize();
e.referenceAngle = this.m_referenceAngle;
e.enableLimit = this.m_enableLimit;
e.lowerTranslation = this.m_lowerTranslation;
e.upperTranslation = this.m_upperTranslation;
e.enableMotor = this.m_enableMotor;
e.maxMotorForce = this.m_maxMotorForce;
e.motorSpeed = this.m_motorSpeed;
return e;
}
};
_i._extend(ri);
function mi() {
this.parent.call(this);
this.type = ri.e_frictionJoint;
this.localAnchorA = new E();
this.localAnchorB = new E();
this.maxForce = 0;
this.maxTorque = 0;
Object.seal(this);
}
mi.prototype = {
Initialize: function(t, e, i) {
this.bodyA = t;
this.bodyB = e;
this.localAnchorA.Assign(this.bodyA.GetLocalPoint(i));
this.localAnchorB.Assign(this.bodyB.GetLocalPoint(i));
},
_deserialize: function(t, e, i) {
this.parent.prototype._deserialize.call(this, t, e, i);
this.localAnchorA._deserialize(t.localAnchorA);
this.localAnchorB._deserialize(t.localAnchorB);
this.maxForce = t.maxForce;
this.maxTorque = t.maxTorque;
}
};
mi._extend(ni);
function fi(t) {
this.parent.call(this, t);
this.m_localAnchorA = t.localAnchorA.Clone();
this.m_localAnchorB = t.localAnchorB.Clone();
this.m_linearImpulse = new E();
this.m_angularImpulse = 0;
this.m_maxForce = t.maxForce;
this.m_maxTorque = t.maxTorque;
this.m_indexA = 0;
this.m_indexB = 0;
this.m_rA = new E();
this.m_rB = new E();
this.m_localCenterA = new E();
this.m_localCenterB = new E();
this.m_invMassA = 0;
this.m_invMassB = 0;
this.m_invIA = 0;
this.m_invIB = 0;
this.m_linearMass = new M();
this.m_angularMass = 0;
}
fi.prototype = {
GetAnchorA: function() {
return this.m_bodyA.GetWorldPoint(this.m_localAnchorA);
},
GetAnchorB: function() {
return this.m_bodyB.GetWorldPoint(this.m_localAnchorB);
},
GetReactionForce: function(t) {
return E.Multiply(t, this.m_linearImpulse);
},
GetReactionTorque: function(t) {
return t * this.m_angularImpulse;
},
GetLocalAnchorA: function() {
return this.m_localAnchorA;
},
GetLocalAnchorB: function() {
return this.m_localAnchorB;
},
SetMaxForce: function(t) {
r(v(t) && t >= 0);
this.m_maxForce = t;
},
GetMaxForce: function() {
return this.m_maxForce;
},
SetMaxTorque: function(t) {
r(v(t) && t >= 0);
this.m_maxTorque = t;
},
GetMaxTorque: function() {
return this.m_maxTorque;
},
InitVelocityConstraints: function(t) {
this.m_indexA = this.m_bodyA.m_islandIndex;
this.m_indexB = this.m_bodyB.m_islandIndex;
this.m_localCenterA.Assign(this.m_bodyA.m_sweep.localCenter);
this.m_localCenterB.Assign(this.m_bodyB.m_sweep.localCenter);
this.m_invMassA = this.m_bodyA.m_invMass;
this.m_invMassB = this.m_bodyB.m_invMass;
this.m_invIA = this.m_bodyA.m_invI;
this.m_invIB = this.m_bodyB.m_invI;
var e = t.positions[this.m_indexA].a, i = t.velocities[this.m_indexA].v.Clone(), n = t.velocities[this.m_indexA].w, r = t.positions[this.m_indexB].a, s = t.velocities[this.m_indexB].v.Clone(), a = t.velocities[this.m_indexB].w, o = new P(e), h = new P(r);
this.m_rA = X(o, E.Subtract(this.m_localAnchorA, this.m_localCenterA));
this.m_rB = X(h, E.Subtract(this.m_localAnchorB, this.m_localCenterB));
var l = this.m_invMassA, c = this.m_invMassB, u = this.m_invIA, _ = this.m_invIB, m = new M();
m.ex.x = l + c + u * this.m_rA.y * this.m_rA.y + _ * this.m_rB.y * this.m_rB.y;
m.ex.y = -u * this.m_rA.x * this.m_rA.y - _ * this.m_rB.x * this.m_rB.y;
m.ey.x = m.ex.y;
m.ey.y = l + c + u * this.m_rA.x * this.m_rA.x + _ * this.m_rB.x * this.m_rB.x;
this.m_linearMass = m.GetInverse();
this.m_angularMass = u + _;
this.m_angularMass > 0 && (this.m_angularMass = 1 / this.m_angularMass);
if (t.step.warmStarting) {
this.m_linearImpulse.Multiply(t.step.dtRatio);
this.m_angularImpulse *= t.step.dtRatio;
var f = new E(this.m_linearImpulse.x, this.m_linearImpulse.y);
i.Subtract(E.Multiply(l, f));
n -= u * (O(this.m_rA, f) + this.m_angularImpulse);
s.Add(E.Multiply(c, f));
a += _ * (O(this.m_rB, f) + this.m_angularImpulse);
} else {
this.m_linearImpulse.SetZero();
this.m_angularImpulse = 0;
}
t.velocities[this.m_indexA].v.Assign(i);
t.velocities[this.m_indexA].w = n;
t.velocities[this.m_indexB].v.Assign(s);
t.velocities[this.m_indexB].w = a;
},
SolveVelocityConstraints: function(t) {
var e = t.velocities[this.m_indexA].v.Clone(), i = t.velocities[this.m_indexA].w, n = t.velocities[this.m_indexB].v.Clone(), r = t.velocities[this.m_indexB].w, s = this.m_invMassA, a = this.m_invMassB, o = this.m_invIA, h = this.m_invIB, l = t.step.dt, c = r - i, u = -this.m_angularMass * c, _ = this.m_angularImpulse, m = l * this.m_maxTorque;
this.m_angularImpulse = rt(this.m_angularImpulse + u, -m, m);
i -= o * (u = this.m_angularImpulse - _);
r += h * u;
c = E.Add(n, E.Subtract(N(r, this.m_rB), E.Subtract(e, N(i, this.m_rA)))), u = k(this.m_linearMass, c).Negate(), 
_ = this.m_linearImpulse.Clone();
this.m_linearImpulse.Add(u);
m = l * this.m_maxForce;
if (this.m_linearImpulse.LengthSquared() > m * m) {
this.m_linearImpulse.Normalize();
this.m_linearImpulse.Multiply(m);
}
u = E.Subtract(this.m_linearImpulse, _);
e.Subtract(E.Multiply(s, u));
i -= o * O(this.m_rA, u);
n.Add(E.Multiply(a, u));
r += h * O(this.m_rB, u);
t.velocities[this.m_indexA].v.Assign(e);
t.velocities[this.m_indexA].w = i;
t.velocities[this.m_indexB].v.Assign(n);
t.velocities[this.m_indexB].w = r;
},
SolvePositionConstraints: function(t) {
return !0;
},
_serialize: function(t) {
var e = t || {};
this.parent.prototype._serialize.call(this, e);
e.localAnchorA = this.m_localAnchorA._serialize();
e.localAnchorB = this.m_localAnchorB._serialize();
e.maxForce = this.m_maxForce;
e.maxTorque = this.m_maxTorque;
return e;
}
};
fi._extend(ri);
function di() {
this.parent.call(this);
this.type = ri.e_weldJoint;
this.localAnchorA = new E(0, 0);
this.localAnchorB = new E(0, 0);
this.referenceAngle = 0;
this.frequencyHz = 0;
this.dampingRatio = 0;
Object.seal(this);
}
di.prototype = {
Initialize: function(t, e, i) {
this.bodyA = t;
this.bodyB = e;
this.localAnchorA.Assign(this.bodyA.GetLocalPoint(i));
this.localAnchorB.Assign(this.bodyB.GetLocalPoint(i));
this.referenceAngle = this.bodyB.GetAngle() - this.bodyA.GetAngle();
},
_deserialize: function(t, e, i) {
this.parent.prototype._deserialize.call(this, t, e, i);
this.localAnchorA._deserialize(t.localAnchorA);
this.localAnchorB._deserialize(t.localAnchorB);
this.referenceAngle = t.referenceAngle;
this.frequencyHz = t.frequencyHz;
this.dampingRatio = t.dampingRatio;
}
};
di._extend(ni);
function pi(t) {
this.parent.call(this, t);
this.m_bias = 0;
this.m_gamma = 0;
this.m_indexA = 0;
this.m_indexB = 0;
this.m_rA = new E();
this.m_rB = new E();
this.m_localCenterA = new E();
this.m_localCenterB = new E();
this.m_invMassA = 0;
this.m_invMassB = 0;
this.m_invIA = 0;
this.m_invIB = 0;
this.m_mass = new I();
this.m_localAnchorA = t.localAnchorA.Clone();
this.m_localAnchorB = t.localAnchorB.Clone();
this.m_referenceAngle = t.referenceAngle;
this.m_frequencyHz = t.frequencyHz;
this.m_dampingRatio = t.dampingRatio;
this.m_impulse = new D();
}
pi.prototype = {
GetAnchorA: function() {
return this.m_bodyA.GetWorldPoint(this.m_localAnchorA);
},
GetAnchorB: function() {
return this.m_bodyB.GetWorldPoint(this.m_localAnchorB);
},
GetReactionForce: function(t) {
var e = new E(this.m_impulse.x, this.m_impulse.y);
return E.Multiply(t, e);
},
GetReactionTorque: function(t) {
return t * this.m_impulse.z;
},
GetLocalAnchorA: function() {
return this.m_localAnchorA;
},
GetLocalAnchorB: function() {
return this.m_localAnchorB;
},
GetReferenceAngle: function() {
return this.m_referenceAngle;
},
SetFrequency: function(t) {
this.m_frequencyHz = t;
},
GetFrequency: function() {
return this.m_frequencyHz;
},
SetDampingRatio: function(t) {
this.m_dampingRatio = t;
},
GetDampingRatio: function() {
return this.m_dampingRatio;
},
InitVelocityConstraints: function(t) {
this.m_indexA = this.m_bodyA.m_islandIndex;
this.m_indexB = this.m_bodyB.m_islandIndex;
this.m_localCenterA.Assign(this.m_bodyA.m_sweep.localCenter);
this.m_localCenterB.Assign(this.m_bodyB.m_sweep.localCenter);
this.m_invMassA = this.m_bodyA.m_invMass;
this.m_invMassB = this.m_bodyB.m_invMass;
this.m_invIA = this.m_bodyA.m_invI;
this.m_invIB = this.m_bodyB.m_invI;
var e = t.positions[this.m_indexA].a, i = t.velocities[this.m_indexA].v.Clone(), n = t.velocities[this.m_indexA].w, r = t.positions[this.m_indexB].a, s = t.velocities[this.m_indexB].v.Clone(), a = t.velocities[this.m_indexB].w, h = new P(e), l = new P(r);
this.m_rA.Assign(X(h, E.Subtract(this.m_localAnchorA, this.m_localCenterA)));
this.m_rB.Assign(X(l, E.Subtract(this.m_localAnchorB, this.m_localCenterB)));
var c = this.m_invMassA, u = this.m_invMassB, _ = this.m_invIA, m = this.m_invIB, f = new I();
f.ex.x = c + u + this.m_rA.y * this.m_rA.y * _ + this.m_rB.y * this.m_rB.y * m;
f.ey.x = -this.m_rA.y * this.m_rA.x * _ - this.m_rB.y * this.m_rB.x * m;
f.ez.x = -this.m_rA.y * _ - this.m_rB.y * m;
f.ex.y = f.ey.x;
f.ey.y = c + u + this.m_rA.x * this.m_rA.x * _ + this.m_rB.x * this.m_rB.x * m;
f.ez.y = this.m_rA.x * _ + this.m_rB.x * m;
f.ex.z = f.ez.x;
f.ey.z = f.ez.y;
f.ez.z = _ + m;
if (this.m_frequencyHz > 0) {
f.GetInverse22(this.m_mass);
var d = _ + m, p = d > 0 ? 1 / d : 0, g = r - e - this.m_referenceAngle, y = 2 * o * this.m_frequencyHz, v = 2 * p * this.m_dampingRatio * y, x = p * y * y, A = t.step.dt;
this.m_gamma = A * (v + A * x);
this.m_gamma = 0 != this.m_gamma ? 1 / this.m_gamma : 0;
this.m_bias = g * A * x * this.m_gamma;
d += this.m_gamma;
this.m_mass.ez.z = 0 != d ? 1 / d : 0;
} else if (0 == f.ez.z) {
f.GetInverse22(this.m_mass);
this.m_gamma = 0;
this.m_bias = 0;
} else {
f.GetSymInverse33(this.m_mass);
this.m_gamma = 0;
this.m_bias = 0;
}
if (t.step.warmStarting) {
this.m_impulse.Multiply(t.step.dtRatio);
var b = new E(this.m_impulse.x, this.m_impulse.y);
i.Subtract(E.Multiply(c, b));
n -= _ * (O(this.m_rA, b) + this.m_impulse.z);
s.Add(E.Multiply(u, b));
a += m * (O(this.m_rB, b) + this.m_impulse.z);
} else this.m_impulse.SetZero();
t.velocities[this.m_indexA].v.Assign(i);
t.velocities[this.m_indexA].w = n;
t.velocities[this.m_indexB].v.Assign(s);
t.velocities[this.m_indexB].w = a;
},
SolveVelocityConstraints: function(t) {
var e = t.velocities[this.m_indexA].v.Clone(), i = t.velocities[this.m_indexA].w, n = t.velocities[this.m_indexB].v.Clone(), r = t.velocities[this.m_indexB].w, s = this.m_invMassA, a = this.m_invMassB, o = this.m_invIA, h = this.m_invIB;
if (this.m_frequencyHz > 0) {
var l = r - i, c = -this.m_mass.ez.z * (l + this.m_bias + this.m_gamma * this.m_impulse.z);
this.m_impulse.z += c;
i -= o * c;
r += h * c;
var u = E.Subtract(E.Subtract(E.Add(n, N(r, this.m_rB)), e), N(i, this.m_rA)), _ = W(this.m_mass, u).Negate();
this.m_impulse.x += _.x;
this.m_impulse.y += _.y;
var m = _.Clone();
e.Subtract(E.Multiply(s, m));
i -= o * O(this.m_rA, m);
n.Add(E.Multiply(a, m));
r += h * O(this.m_rB, m);
} else {
l = r - i;
var f = new D((u = E.Subtract(E.Subtract(E.Add(n, N(r, this.m_rB)), e), N(i, this.m_rA))).x, u.y, l), d = j(this.m_mass, f).Negate();
this.m_impulse.Add(d);
m = new E(d.x, d.y);
e.Subtract(E.Multiply(s, m));
i -= o * (O(this.m_rA, m) + d.z);
n.Add(E.Multiply(a, m));
r += h * (O(this.m_rB, m) + d.z);
}
t.velocities[this.m_indexA].v.Assign(e);
t.velocities[this.m_indexA].w = i;
t.velocities[this.m_indexB].v.Assign(n);
t.velocities[this.m_indexB].w = r;
},
SolvePositionConstraints: function(t) {
var e, i, n = t.positions[this.m_indexA].c.Clone(), r = t.positions[this.m_indexA].a, s = t.positions[this.m_indexB].c.Clone(), a = t.positions[this.m_indexB].a, o = new P(r), h = new P(a), l = this.m_invMassA, _ = this.m_invMassB, m = this.m_invIA, f = this.m_invIB, d = X(o, E.Subtract(this.m_localAnchorA, this.m_localCenterA)), p = X(h, E.Subtract(this.m_localAnchorB, this.m_localCenterB)), g = new I();
g.ex.x = l + _ + d.y * d.y * m + p.y * p.y * f;
g.ey.x = -d.y * d.x * m - p.y * p.x * f;
g.ez.x = -d.y * m - p.y * f;
g.ex.y = g.ey.x;
g.ey.y = l + _ + d.x * d.x * m + p.x * p.x * f;
g.ez.y = d.x * m + p.x * f;
g.ex.z = g.ez.x;
g.ey.z = g.ez.y;
g.ez.z = m + f;
if (this.m_frequencyHz > 0) {
e = (v = E.Subtract(E.Subtract(E.Add(s, p), n), d)).Length();
i = 0;
var y = g.Solve22(v).Negate();
n.Subtract(E.Multiply(l, y));
r -= m * O(d, y);
s.Add(E.Multiply(_, y));
a += f * O(p, y);
} else {
var v = E.Subtract(E.Subtract(E.Add(s, p), n), d), x = a - r - this.m_referenceAngle;
e = v.Length();
i = Q(x);
var A, b = new D(v.x, v.y, x);
if (g.ez.z > 0) A = g.Solve33(b).Invert(); else {
var T = g.Solve22(v).Invert();
A = new D(T.x, T.y, 0);
}
y = new E(A.x, A.y);
n.Subtract(E.Multiply(l, y));
r -= m * (O(d, y) + A.z);
s.Add(E.Multiply(_, y));
a += f * (O(p, y) + A.z);
}
t.positions[this.m_indexA].c.Assign(n);
t.positions[this.m_indexA].a = r;
t.positions[this.m_indexB].c.Assign(s);
t.positions[this.m_indexB].a = a;
return e <= c && i <= u;
},
_serialize: function(t) {
var e = t || {};
this.parent.prototype._serialize.call(this, e);
e.localAnchorA = this.m_localAnchorA._serialize();
e.localAnchorB = this.m_localAnchorB._serialize();
e.referenceAngle = this.m_referenceAngle;
e.frequencyHz = this.m_frequencyHz;
e.dampingRatio = this.m_dampingRatio;
return e;
}
};
pi._extend(ri);
function gi() {
this.parent.call(this);
this.type = ri.e_wheelJoint;
this.localAnchorA = new E();
this.localAnchorB = new E();
this.localAxisA = new E(1, 0);
this.enableMotor = !1;
this.maxMotorTorque = 0;
this.motorSpeed = 0;
this.frequencyHz = 2;
this.dampingRatio = .7;
Object.seal(this);
}
gi.prototype = {
Initialize: function(t, e, i, n) {
this.bodyA = t;
this.bodyB = e;
this.localAnchorA.Assign(this.bodyA.GetLocalPoint(i));
this.localAnchorB.Assign(this.bodyB.GetLocalPoint(i));
this.localAxisA.Assign(this.bodyA.GetLocalVector(n));
},
_deserialize: function(t, e, i) {
this.parent.prototype._deserialize.call(this, t, e, i);
this.localAnchorA._deserialize(t.localAnchorA);
this.localAnchorB._deserialize(t.localAnchorB);
this.localAxisA._deserialize(t.localAxisA);
this.enableMotor = t.enableMotor;
this.maxMotorTorque = t.maxMotorTorque;
this.motorSpeed = t.motorSpeed;
this.frequencyHz = t.frequencyHz;
this.dampingRatio = t.dampingRatio;
}
};
gi._extend(ni);
function yi(t) {
this.parent.call(this, t);
this.m_indexA = 0;
this.m_indexB = 0;
this.m_localCenterA = new E();
this.m_localCenterB = new E();
this.m_invMassA = 0;
this.m_invMassB = 0;
this.m_invIA = 0;
this.m_invIB = 0;
this.m_localAnchorA = t.localAnchorA.Clone();
this.m_localAnchorB = t.localAnchorB.Clone();
this.m_localXAxisA = t.localAxisA.Clone();
this.m_localYAxisA = N(1, this.m_localXAxisA);
this.m_mass = 0;
this.m_impulse = 0;
this.m_motorMass = 0;
this.m_motorImpulse = 0;
this.m_springMass = 0;
this.m_springImpulse = 0;
this.m_maxMotorTorque = t.maxMotorTorque;
this.m_motorSpeed = t.motorSpeed;
this.m_enableMotor = t.enableMotor;
this.m_frequencyHz = t.frequencyHz;
this.m_dampingRatio = t.dampingRatio;
this.m_bias = 0;
this.m_gamma = 0;
this.m_ax = new E();
this.m_ay = new E();
this.m_sAx = this.m_sBx = 0;
this.m_sAy = this.m_sBy = 0;
}
yi.prototype = {
GetAnchorA: function() {
return this.m_bodyA.GetWorldPoint(this.m_localAnchorA);
},
GetAnchorB: function() {
return this.m_bodyB.GetWorldPoint(this.m_localAnchorB);
},
GetReactionForce: function(t) {
return E.Multiply(t, E.Add(E.Multiply(this.m_impulse, this.m_ay), E.Multiply(this.m_springImpulse, this.m_ax)));
},
GetReactionTorque: function(t) {
return t * this.m_motorImpulse;
},
GetLocalAnchorA: function() {
return this.m_localAnchorA;
},
GetLocalAnchorB: function() {
return this.m_localAnchorB;
},
GetLocalAxisA: function() {
return this.m_localXAxisA;
},
GetJointTranslation: function() {
var t = this.m_bodyA, e = this.m_bodyB, i = t.GetWorldPoint(this.m_localAnchorA), n = e.GetWorldPoint(this.m_localAnchorB);
return L(E.Subtract(n, i), t.GetWorldVector(this.m_localXAxisA));
},
GetJointSpeed: function() {
var t = this.m_bodyA.m_angularVelocity;
return this.m_bodyB.m_angularVelocity - t;
},
IsMotorEnabled: function() {
return this.m_enableMotor;
},
EnableMotor: function(t) {
this.m_bodyA.SetAwake(!0);
this.m_bodyB.SetAwake(!0);
this.m_enableMotor = t;
},
SetMotorSpeed: function(t) {
this.m_bodyA.SetAwake(!0);
this.m_bodyB.SetAwake(!0);
this.m_motorSpeed = t;
},
GetMotorSpeed: function() {
return this.m_motorSpeed;
},
SetMaxMotorTorque: function(t) {
this.m_bodyA.SetAwake(!0);
this.m_bodyB.SetAwake(!0);
this.m_maxMotorTorque = t;
},
GetMaxMotorTorque: function() {
return this.m_maxMotorTorque;
},
GetMotorTorque: function(t) {
return t * this.m_motorImpulse;
},
SetSpringFrequencyHz: function(t) {
this.m_frequencyHz = t;
},
GetSpringFrequencyHz: function() {
return this.m_frequencyHz;
},
SetSpringDampingRatio: function(t) {
this.m_dampingRatio = t;
},
GetSpringDampingRatio: function() {
return this.m_dampingRatio;
},
InitVelocityConstraints: function(t) {
this.m_indexA = this.m_bodyA.m_islandIndex;
this.m_indexB = this.m_bodyB.m_islandIndex;
this.m_localCenterA.Assign(this.m_bodyA.m_sweep.localCenter);
this.m_localCenterB.Assign(this.m_bodyB.m_sweep.localCenter);
this.m_invMassA = this.m_bodyA.m_invMass;
this.m_invMassB = this.m_bodyB.m_invMass;
this.m_invIA = this.m_bodyA.m_invI;
this.m_invIB = this.m_bodyB.m_invI;
var e = this.m_invMassA, i = this.m_invMassB, n = this.m_invIA, r = this.m_invIB, s = t.positions[this.m_indexA].c.Clone(), a = t.positions[this.m_indexA].a, h = t.velocities[this.m_indexA].v.Clone(), l = t.velocities[this.m_indexA].w, c = t.positions[this.m_indexB].c.Clone(), u = t.positions[this.m_indexB].a, _ = t.velocities[this.m_indexB].v.Clone(), m = t.velocities[this.m_indexB].w, f = new P(a), d = new P(u), p = X(f, E.Subtract(this.m_localAnchorA, this.m_localCenterA)), g = X(d, E.Subtract(this.m_localAnchorB, this.m_localCenterB)), y = E.Subtract(E.Subtract(E.Add(c, g), s), p);
this.m_ay.Assign(X(f, this.m_localYAxisA));
this.m_sAy = O(E.Add(y, p), this.m_ay);
this.m_sBy = O(g, this.m_ay);
this.m_mass = e + i + n * this.m_sAy * this.m_sAy + r * this.m_sBy * this.m_sBy;
this.m_mass > 0 && (this.m_mass = 1 / this.m_mass);
this.m_springMass = 0;
this.m_bias = 0;
this.m_gamma = 0;
if (this.m_frequencyHz > 0) {
this.m_ax.Assign(X(f, this.m_localXAxisA));
this.m_sAx = O(E.Add(y, p), this.m_ax);
this.m_sBx = O(g, this.m_ax);
var v = e + i + n * this.m_sAx * this.m_sAx + r * this.m_sBx * this.m_sBx;
if (v > 0) {
this.m_springMass = 1 / v;
var x = L(y, this.m_ax), A = 2 * o * this.m_frequencyHz, b = (y = 2 * this.m_springMass * this.m_dampingRatio * A, 
this.m_springMass * A * A), T = t.step.dt;
this.m_gamma = T * (y + T * b);
this.m_gamma > 0 && (this.m_gamma = 1 / this.m_gamma);
this.m_bias = x * T * b * this.m_gamma;
this.m_springMass = v + this.m_gamma;
this.m_springMass > 0 && (this.m_springMass = 1 / this.m_springMass);
}
} else this.m_springImpulse = 0;
if (this.m_enableMotor) {
this.m_motorMass = n + r;
this.m_motorMass > 0 && (this.m_motorMass = 1 / this.m_motorMass);
} else {
this.m_motorMass = 0;
this.m_motorImpulse = 0;
}
if (t.step.warmStarting) {
this.m_impulse *= t.step.dtRatio;
this.m_springImpulse *= t.step.dtRatio;
this.m_motorImpulse *= t.step.dtRatio;
var C = E.Add(E.Multiply(this.m_impulse, this.m_ay), E.Multiply(this.m_springImpulse, this.m_ax)), w = this.m_impulse * this.m_sAy + this.m_springImpulse * this.m_sAx + this.m_motorImpulse, S = this.m_impulse * this.m_sBy + this.m_springImpulse * this.m_sBx + this.m_motorImpulse;
h.Subtract(E.Multiply(this.m_invMassA, C));
l -= this.m_invIA * w;
_.Add(E.Multiply(this.m_invMassB, C));
m += this.m_invIB * S;
} else {
this.m_impulse = 0;
this.m_springImpulse = 0;
this.m_motorImpulse = 0;
}
t.velocities[this.m_indexA].v.Assign(h);
t.velocities[this.m_indexA].w = l;
t.velocities[this.m_indexB].v.Assign(_);
t.velocities[this.m_indexB].w = m;
},
SolveVelocityConstraints: function(t) {
var e = this.m_invMassA, i = this.m_invMassB, n = this.m_invIA, r = this.m_invIB, s = t.velocities[this.m_indexA].v.Clone(), a = t.velocities[this.m_indexA].w, o = t.velocities[this.m_indexB].v.Clone(), h = t.velocities[this.m_indexB].w, l = L(this.m_ax, E.Subtract(o, s)) + this.m_sBx * h - this.m_sAx * a, c = -this.m_springMass * (l + this.m_bias + this.m_gamma * this.m_springImpulse);
this.m_springImpulse += c;
var u = E.Multiply(c, this.m_ax), _ = c * this.m_sAx, m = c * this.m_sBx;
s.Subtract(E.Multiply(e, u));
a -= n * _;
o.Add(E.Multiply(i, u));
l = (h += r * m) - a - this.m_motorSpeed, c = -this.m_motorMass * l;
var f = this.m_motorImpulse, d = t.step.dt * this.m_maxMotorTorque;
this.m_motorImpulse = rt(this.m_motorImpulse + c, -d, d);
a -= n * (c = this.m_motorImpulse - f);
h += r * c;
l = L(this.m_ay, E.Subtract(o, s)) + this.m_sBy * h - this.m_sAy * a, c = -this.m_mass * l;
this.m_impulse += c;
u = E.Multiply(c, this.m_ay), _ = c * this.m_sAy, m = c * this.m_sBy;
s.Subtract(E.Multiply(e, u));
a -= n * _;
o.Add(E.Multiply(i, u));
h += r * m;
t.velocities[this.m_indexA].v.Assign(s);
t.velocities[this.m_indexA].w = a;
t.velocities[this.m_indexB].v.Assign(o);
t.velocities[this.m_indexB].w = h;
},
SolvePositionConstraints: function(t) {
var e, i = t.positions[this.m_indexA].c.Clone(), n = t.positions[this.m_indexA].a, r = t.positions[this.m_indexB].c.Clone(), s = t.positions[this.m_indexB].a, a = new P(n), o = new P(s), h = X(a, E.Subtract(this.m_localAnchorA, this.m_localCenterA)), l = X(o, E.Subtract(this.m_localAnchorB, this.m_localCenterB)), u = E.Add(E.Subtract(r, i), E.Subtract(l, h)), _ = X(a, this.m_localYAxisA), m = O(E.Add(u, h), _), f = O(l, _), d = L(u, _), p = this.m_invMassA + this.m_invMassB + this.m_invIA * this.m_sAy * this.m_sAy + this.m_invIB * this.m_sBy * this.m_sBy;
e = 0 != p ? -d / p : 0;
var g = E.Multiply(e, _), y = e * m, v = e * f;
i.Subtract(E.Multiply(this.m_invMassA, g));
n -= this.m_invIA * y;
r.Add(E.Multiply(this.m_invMassB, g));
s += this.m_invIB * v;
t.positions[this.m_indexA].c.Assign(i);
t.positions[this.m_indexA].a = n;
t.positions[this.m_indexB].c.Assign(r);
t.positions[this.m_indexB].a = s;
return Q(d) <= c;
},
_serialize: function(t) {
var e = t || {};
this.parent.prototype._serialize.call(this, e);
e.localAnchorA = this.m_localAnchorA._serialize();
e.localAnchorB = this.m_localAnchorB._serialize();
e.localAxisA = this.m_localAxisA._serialize();
e.enableMotor = this.m_enableMotor;
e.maxMotorTorque = this.m_maxMotorTorque;
e.motorSpeed = this.m_motorSpeed;
e.frequencyHz = this.m_frequencyHz;
e.dampingRatio = this.m_dampingRatio;
return e;
}
};
yi._extend(ri);
function vi() {
this.parent.call(this);
this.type = ri.e_gearJoint;
this.joint1 = null;
this.joint2 = null;
this.ratio = 1;
Object.seal(this);
}
vi.prototype = {
_deserialize: function(t, e, i) {
this.parent.prototype._deserialize.call(this, t, e, i);
this.joint1 = t.joint1;
this.joint2 = t.joint2;
this.ratio = t.ratio;
}
};
vi._extend(ni);
function xi(t) {
this.parent.call(this, t);
this.m_joint1 = t.joint1;
this.m_joint2 = t.joint2;
this.m_typeA = this.m_joint1.GetType();
this.m_typeB = this.m_joint2.GetType();
r(this.m_typeA == ri.e_revoluteJoint || this.m_typeA == ri.e_prismaticJoint);
r(this.m_typeB == ri.e_revoluteJoint || this.m_typeB == ri.e_prismaticJoint);
var e, i;
this.m_bodyC = this.m_joint1.GetBodyA();
this.m_bodyA = this.m_joint1.GetBodyB();
var n = this.m_bodyA.m_xf, s = this.m_bodyA.m_sweep.a, a = this.m_bodyC.m_xf, o = this.m_bodyC.m_sweep.a;
this.m_localAnchorA = new E();
this.m_localAnchorB = new E();
this.m_localAnchorC = new E();
this.m_localAnchorD = new E();
this.m_localAxisC = new E();
this.m_localAxisD = new E();
if (this.m_typeA == ri.e_revoluteJoint) {
var h = t.joint1;
this.m_localAnchorC.Assign(h.m_localAnchorA);
this.m_localAnchorA.Assign(h.m_localAnchorB);
this.m_referenceAngleA = h.m_referenceAngle;
this.m_localAxisC.SetZero();
e = s - o - this.m_referenceAngleA;
} else {
var l = t.joint1;
this.m_localAnchorC.Assign(l.m_localAnchorA);
this.m_localAnchorA.Assign(l.m_localAnchorB);
this.m_referenceAngleA = l.m_referenceAngle;
this.m_localAxisC.Assign(l.m_localXAxisA);
var c = this.m_localAnchorC, u = Y(a.q, E.Add(X(n.q, this.m_localAnchorA), E.Subtract(n.p, a.p)));
e = L(E.Subtract(u, c), this.m_localAxisC);
}
this.m_bodyD = this.m_joint2.GetBodyA();
this.m_bodyB = this.m_joint2.GetBodyB();
var _ = this.m_bodyB.m_xf, m = this.m_bodyB.m_sweep.a, f = this.m_bodyD.m_xf, d = this.m_bodyD.m_sweep.a;
if (this.m_typeB == ri.e_revoluteJoint) {
h = t.joint2;
this.m_localAnchorD.Assign(h.m_localAnchorA);
this.m_localAnchorB.Assign(h.m_localAnchorB);
this.m_referenceAngleB = h.m_referenceAngle;
this.m_localAxisD.SetZero();
i = m - d - this.m_referenceAngleB;
} else {
l = t.joint2;
this.m_localAnchorD.Assign(l.m_localAnchorA);
this.m_localAnchorB.Assign(l.m_localAnchorB);
this.m_referenceAngleB = l.m_referenceAngle;
this.m_localAxisD.Assign(l.m_localXAxisA);
var p = this.m_localAnchorD, g = Y(f.q, E.Add(X(_.q, this.m_localAnchorB), E.Subtract(_.p, f.p)));
i = L(E.Subtract(g, p), this.m_localAxisD);
}
this.m_ratio = t.ratio;
this.m_constant = e + this.m_ratio * i;
this.m_impulse = 0;
this.m_indexA = this.m_indexB = this.m_indexC = this.m_indexD = 0;
this.m_lcA = new E();
this.m_lcB = new E();
this.m_lcC = new E();
this.m_lcD = new E();
this.m_mA = this.m_mB = this.m_mC = this.m_mD = 0;
this.m_iA = this.m_iB = this.m_iC = this.m_iD = 0;
this.m_JvAC = new E(), this.m_JvBD = new E();
this.m_JwA = this.m_JwB = this.m_JwC = this.m_JwD = 0;
this.m_mass = 0;
}
xi.prototype = {
GetAnchorA: function() {
return this.m_bodyA.GetWorldPoint(this.m_localAnchorA);
},
GetAnchorB: function() {
return this.m_bodyB.GetWorldPoint(this.m_localAnchorB);
},
GetReactionForce: function(t) {
var e = E.Multiply(this.m_impulse, this.m_JvAC);
return E.Multiply(t, e);
},
GetReactionTorque: function(t) {
return t * (this.m_impulse * this.m_JwA);
},
GetJoint1: function() {
return this.m_joint1;
},
GetJoint2: function() {
return this.m_joint2;
},
SetRatio: function(t) {
r(v(t));
this.m_ratio = t;
},
GetRatio: function() {
return this.m_ratio;
},
InitVelocityConstraints: function(t) {
this.m_indexA = this.m_bodyA.m_islandIndex;
this.m_indexB = this.m_bodyB.m_islandIndex;
this.m_indexC = this.m_bodyC.m_islandIndex;
this.m_indexD = this.m_bodyD.m_islandIndex;
this.m_lcA.Assign(this.m_bodyA.m_sweep.localCenter);
this.m_lcB.Assign(this.m_bodyB.m_sweep.localCenter);
this.m_lcC.Assign(this.m_bodyC.m_sweep.localCenter);
this.m_lcD.Assign(this.m_bodyD.m_sweep.localCenter);
this.m_mA = this.m_bodyA.m_invMass;
this.m_mB = this.m_bodyB.m_invMass;
this.m_mC = this.m_bodyC.m_invMass;
this.m_mD = this.m_bodyD.m_invMass;
this.m_iA = this.m_bodyA.m_invI;
this.m_iB = this.m_bodyB.m_invI;
this.m_iC = this.m_bodyC.m_invI;
this.m_iD = this.m_bodyD.m_invI;
var e = t.positions[this.m_indexA].a, i = t.velocities[this.m_indexA].v.Clone(), n = t.velocities[this.m_indexA].w, r = t.positions[this.m_indexB].a, s = t.velocities[this.m_indexB].v.Clone(), a = t.velocities[this.m_indexB].w, o = t.positions[this.m_indexC].a, h = t.velocities[this.m_indexC].v.Clone(), l = t.velocities[this.m_indexC].w, c = t.positions[this.m_indexD].a, u = t.velocities[this.m_indexD].v.Clone(), _ = t.velocities[this.m_indexD].w, m = new P(e), f = new P(r), d = new P(o), p = new P(c);
this.m_mass = 0;
if (this.m_typeA == ri.e_revoluteJoint) {
this.m_JvAC.SetZero();
this.m_JwA = 1;
this.m_JwC = 1;
this.m_mass += this.m_iA + this.m_iC;
} else {
var g = X(d, this.m_localAxisC), y = X(d, E.Subtract(this.m_localAnchorC, this.m_lcC)), v = X(m, E.Subtract(this.m_localAnchorA, this.m_lcA));
this.m_JvAC.Assign(g);
this.m_JwC = O(y, g);
this.m_JwA = O(v, g);
this.m_mass += this.m_mC + this.m_mA + this.m_iC * this.m_JwC * this.m_JwC + this.m_iA * this.m_JwA * this.m_JwA;
}
if (this.m_typeB == ri.e_revoluteJoint) {
this.m_JvBD.SetZero();
this.m_JwB = this.m_ratio;
this.m_JwD = this.m_ratio;
this.m_mass += this.m_ratio * this.m_ratio * (this.m_iB + this.m_iD);
} else {
g = X(p, this.m_localAxisD);
var x = X(p, E.Subtract(this.m_localAnchorD, this.m_lcD)), A = X(f, E.Subtract(this.m_localAnchorB, this.m_lcB));
this.m_JvBD.Assign(E.Multiply(this.m_ratio, g));
this.m_JwD = this.m_ratio * O(x, g);
this.m_JwB = this.m_ratio * O(A, g);
this.m_mass += this.m_ratio * this.m_ratio * (this.m_mD + this.m_mB) + this.m_iD * this.m_JwD * this.m_JwD + this.m_iB * this.m_JwB * this.m_JwB;
}
this.m_mass = this.m_mass > 0 ? 1 / this.m_mass : 0;
if (t.step.warmStarting) {
i.Add(E.Multiply(this.m_mA * this.m_impulse, this.m_JvAC));
n += this.m_iA * this.m_impulse * this.m_JwA;
s.Add(E.Multiply(this.m_mB * this.m_impulse, this.m_JvBD));
a += this.m_iB * this.m_impulse * this.m_JwB;
h.Subtract(E.Multiply(this.m_mC * this.m_impulse, this.m_JvAC));
l -= this.m_iC * this.m_impulse * this.m_JwC;
u.Subtract(E.Multiply(this.m_mD * this.m_impulse, this.m_JvBD));
_ -= this.m_iD * this.m_impulse * this.m_JwD;
} else this.m_impulse = 0;
t.velocities[this.m_indexA].v.Assign(i);
t.velocities[this.m_indexA].w = n;
t.velocities[this.m_indexB].v.Assign(s);
t.velocities[this.m_indexB].w = a;
t.velocities[this.m_indexC].v.Assign(h);
t.velocities[this.m_indexC].w = l;
t.velocities[this.m_indexD].v.Assign(u);
t.velocities[this.m_indexD].w = _;
},
SolveVelocityConstraints: function(t) {
var e = t.velocities[this.m_indexA].v.Clone(), i = t.velocities[this.m_indexA].w, n = t.velocities[this.m_indexB].v.Clone(), r = t.velocities[this.m_indexB].w, s = t.velocities[this.m_indexC].v.Clone(), a = t.velocities[this.m_indexC].w, o = t.velocities[this.m_indexD].v.Clone(), h = t.velocities[this.m_indexD].w, l = L(this.m_JvAC, E.Subtract(e, s)) + L(this.m_JvBD, E.Subtract(n, o));
l += this.m_JwA * i - this.m_JwC * a + (this.m_JwB * r - this.m_JwD * h);
var c = -this.m_mass * l;
this.m_impulse += c;
e.Add(E.Multiply(this.m_mA * c, this.m_JvAC));
i += this.m_iA * c * this.m_JwA;
n.Add(E.Multiply(this.m_mB * c, this.m_JvBD));
r += this.m_iB * c * this.m_JwB;
s.Subtract(E.Multiply(this.m_mC * c, this.m_JvAC));
a -= this.m_iC * c * this.m_JwC;
o.Subtract(E.Multiply(this.m_mD * c, this.m_JvBD));
h -= this.m_iD * c * this.m_JwD;
t.velocities[this.m_indexA].v.Assign(e);
t.velocities[this.m_indexA].w = i;
t.velocities[this.m_indexB].v.Assign(n);
t.velocities[this.m_indexB].w = r;
t.velocities[this.m_indexC].v.Assign(s);
t.velocities[this.m_indexC].w = a;
t.velocities[this.m_indexD].v.Assign(o);
t.velocities[this.m_indexD].w = h;
},
SolvePositionConstraints: function(t) {
var e, i, n, r, s, a, o = t.positions[this.m_indexA].c.Clone(), h = t.positions[this.m_indexA].a, l = t.positions[this.m_indexB].c.Clone(), u = t.positions[this.m_indexB].a, _ = t.positions[this.m_indexC].c.Clone(), m = t.positions[this.m_indexC].a, f = t.positions[this.m_indexD].c.Clone(), d = t.positions[this.m_indexD].a, p = new P(h), g = new P(u), y = new P(m), v = new P(d), x = new E(), A = new E(), b = 0;
if (this.m_typeA == ri.e_revoluteJoint) {
x.SetZero();
n = 1;
s = 1;
b += this.m_iA + this.m_iC;
e = h - m - this.m_referenceAngleA;
} else {
var T = X(y, this.m_localAxisC), C = X(y, E.Subtract(this.m_localAnchorC, this.m_lcC)), w = X(p, E.Subtract(this.m_localAnchorA, this.m_lcA));
x.Assign(T);
s = O(C, T);
n = O(w, T);
b += this.m_mC + this.m_mA + this.m_iC * s * s + this.m_iA * n * n;
var S = E.Subtract(this.m_localAnchorC, this.m_lcC), D = Y(y, E.Add(w, E.Subtract(o, _)));
e = L(E.Subtract(D, S), this.m_localAxisC);
}
if (this.m_typeB == ri.e_revoluteJoint) {
A.SetZero();
r = this.m_ratio;
a = this.m_ratio;
b += this.m_ratio * this.m_ratio * (this.m_iB + this.m_iD);
i = u - d - this.m_referenceAngleB;
} else {
T = X(v, this.m_localAxisD);
var M = X(v, E.Subtract(this.m_localAnchorD, this.m_lcD)), I = X(g, E.Subtract(this.m_localAnchorB, this.m_lcB));
A.Assign(E.Multiply(this.m_ratio, T));
a = this.m_ratio * O(M, T);
r = this.m_ratio * O(I, T);
b += this.m_ratio * this.m_ratio * (this.m_mD + this.m_mB) + this.m_iD * a * a + this.m_iB * r * r;
var B = E.Subtract(this.m_localAnchorD, this.m_lcD), R = Y(v, E.Add(I, E.Subtract(l, f)));
i = L(E.Subtract(R, B), this.m_localAxisD);
}
var F = e + this.m_ratio * i - this.m_constant, N = 0;
b > 0 && (N = -F / b);
o.Add(E.Multiply(this.m_mA, E.Multiply(N, x)));
h += this.m_iA * N * n;
l.Add(E.Multiply(this.m_mB, E.Multiply(N, A)));
u += this.m_iB * N * r;
_.Subtract(E.Multiply(this.m_mC, E.Multiply(N, x)));
m -= this.m_iC * N * s;
f.Subtract(E.Multiply(this.m_mD, E.Multiply(N, A)));
d -= this.m_iD * N * a;
t.positions[this.m_indexA].c.Assign(o);
t.positions[this.m_indexA].a = h;
t.positions[this.m_indexB].c.Assign(l);
t.positions[this.m_indexB].a = u;
t.positions[this.m_indexC].c.Assign(_);
t.positions[this.m_indexC].a = m;
t.positions[this.m_indexD].c.Assign(f);
t.positions[this.m_indexD].a = d;
return 0 < c;
},
_serialize: function(t) {
var e = t || {};
this.parent.prototype._serialize.call(this, e);
e.joint1 = this.m_joint1.__temp_joint_id;
e.joint2 = this.m_joint2.__temp_joint_id;
e.ratio = this.m_ratio;
return e;
}
};
xi._extend(ri);
function Ai() {
this.parent.call(this);
this.type = ri.e_motorJoint;
this.linearOffset = new E();
this.angularOffset = 0;
this.maxForce = 1;
this.maxTorque = 1;
this.correctionFactor = .3;
Object.seal(this);
}
Ai.prototype = {
Initialize: function(t, e) {
this.bodyA = t;
this.bodyB = e;
var i = this.bodyB.GetPosition();
this.linearOffset.Assign(this.bodyA.GetLocalPoint(i));
var n = this.bodyA.GetAngle(), r = this.bodyB.GetAngle();
this.angularOffset = r - n;
},
_deserialize: function(t, e, i) {
this.parent.prototype._deserialize.call(this, t, e, i);
this.linearOffset._deserialize(t.linearOffset);
this.angularOffset = t.angularOffset;
this.maxForce = t.maxForce;
this.maxTorque = t.maxTorque;
this.correctionFactor = t.correctionFactor;
}
};
Ai._extend(ni);
function bi(t) {
this.parent.call(this, t);
this.m_linearOffset = t.linearOffset.Clone();
this.m_angularOffset = t.angularOffset;
this.m_linearImpulse = new E();
this.m_angularImpulse = 0;
this.m_maxForce = t.maxForce;
this.m_maxTorque = t.maxTorque;
this.m_correctionFactor = t.correctionFactor;
this.m_indexA = 0;
this.m_indexB = 0;
this.m_rA = new E();
this.m_rB = new E();
this.m_localCenterA = new E();
this.m_localCenterB = new E();
this.m_linearError = new E();
this.m_angularError = 0;
this.m_invMassA = 0;
this.m_invMassB = 0;
this.m_invIA = 0;
this.m_invIB = 0;
this.m_linearMass = new M();
this.m_angularMass = 0;
}
bi.prototype = {
GetAnchorA: function() {
return this.m_bodyA.GetPosition();
},
GetAnchorB: function() {
return this.m_bodyB.GetPosition();
},
GetReactionForce: function(t) {
return E.Multiply(t, this.m_linearImpulse);
},
GetReactionTorque: function(t) {
return t * this.m_angularImpulse;
},
SetLinearOffset: function(t) {
if (t.x != this.m_linearOffset.x || t.y != this.m_linearOffset.y) {
this.m_bodyA.SetAwake(!0);
this.m_bodyB.SetAwake(!0);
this.m_linearOffset.Assign(t);
}
},
GetLinearOffset: function() {
return this.m_linearOffset;
},
SetAngularOffset: function(t) {
if (t != this.m_angularOffset) {
this.m_bodyA.SetAwake(!0);
this.m_bodyB.SetAwake(!0);
this.m_angularOffset = t;
}
},
GetAngularOffset: function() {
return this.m_angularOffset;
},
SetMaxForce: function(t) {
r(v(t) && t >= 0);
this.m_maxForce = t;
},
GetMaxForce: function() {
return this.m_maxForce;
},
SetMaxTorque: function(t) {
r(v(t) && t >= 0);
this.m_maxTorque = t;
},
GetMaxTorque: function() {
return this.m_maxTorque;
},
SetCorrectionFactor: function(t) {
r(v(t) && 0 <= t && t <= 1);
this.m_correctionFactor = t;
},
GetCorrectionFactor: function() {
return this.m_correctionFactor;
},
InitVelocityConstraints: function(t) {
this.m_indexA = this.m_bodyA.m_islandIndex;
this.m_indexB = this.m_bodyB.m_islandIndex;
this.m_localCenterA.Assign(this.m_bodyA.m_sweep.localCenter);
this.m_localCenterB.Assign(this.m_bodyB.m_sweep.localCenter);
this.m_invMassA = this.m_bodyA.m_invMass;
this.m_invMassB = this.m_bodyB.m_invMass;
this.m_invIA = this.m_bodyA.m_invI;
this.m_invIB = this.m_bodyB.m_invI;
var e = t.positions[this.m_indexA].c.Clone(), i = t.positions[this.m_indexA].a, n = t.velocities[this.m_indexA].v.Clone(), r = t.velocities[this.m_indexA].w, s = t.positions[this.m_indexB].c.Clone(), a = t.positions[this.m_indexB].a, o = t.velocities[this.m_indexB].v.Clone(), h = t.velocities[this.m_indexB].w, l = new P(i), c = new P(a);
this.m_rA.Assign(X(l, this.m_localCenterA.Negate()));
this.m_rB.Assign(X(c, this.m_localCenterB.Negate()));
var u = this.m_invMassA, _ = this.m_invMassB, m = this.m_invIA, f = this.m_invIB, d = new M();
d.ex.x = u + _ + m * this.m_rA.y * this.m_rA.y + f * this.m_rB.y * this.m_rB.y;
d.ex.y = -m * this.m_rA.x * this.m_rA.y - f * this.m_rB.x * this.m_rB.y;
d.ey.x = d.ex.y;
d.ey.y = u + _ + m * this.m_rA.x * this.m_rA.x + f * this.m_rB.x * this.m_rB.x;
this.m_linearMass.Assign(d.GetInverse());
this.m_angularMass = m + f;
this.m_angularMass > 0 && (this.m_angularMass = 1 / this.m_angularMass);
this.m_linearError.x = s.x + this.m_rB.x - e.x - this.m_rA.x - (l.c * this.m_linearOffset.x - l.s * this.m_linearOffset.y);
this.m_linearError.y = s.y + this.m_rB.y - e.y - this.m_rA.y - (l.s * this.m_linearOffset.x + l.c * this.m_linearOffset.y);
this.m_angularError = a - i - this.m_angularOffset;
if (t.step.warmStarting) {
this.m_linearImpulse.Multiply(t.step.dtRatio);
this.m_angularImpulse *= t.step.dtRatio;
var p = new E(this.m_linearImpulse.x, this.m_linearImpulse.y);
n.Subtract(E.Multiply(u, p));
r -= m * (O(this.m_rA, p) + this.m_angularImpulse);
o.Add(E.Multiply(_, p));
h += f * (O(this.m_rB, p) + this.m_angularImpulse);
} else {
this.m_linearImpulse.SetZero();
this.m_angularImpulse = 0;
}
t.velocities[this.m_indexA].v.Assign(n);
t.velocities[this.m_indexA].w = r;
t.velocities[this.m_indexB].v.Assign(o);
t.velocities[this.m_indexB].w = h;
},
SolveVelocityConstraints: function(t) {
var e = t.velocities[this.m_indexA].v.Clone(), i = t.velocities[this.m_indexA].w, n = t.velocities[this.m_indexB].v.Clone(), r = t.velocities[this.m_indexB].w, s = this.m_invMassA, a = this.m_invMassB, o = this.m_invIA, h = this.m_invIB, l = t.step.dt, c = t.step.inv_dt, u = r - i + c * this.m_correctionFactor * this.m_angularError, _ = -this.m_angularMass * u, m = this.m_angularImpulse, f = l * this.m_maxTorque;
this.m_angularImpulse = rt(this.m_angularImpulse + _, -f, f);
i -= o * (_ = this.m_angularImpulse - m);
r += h * _;
u = new E(n.x + -r * this.m_rB.x - e.x - -i * this.m_rA.x + c * this.m_correctionFactor * this.m_linearError.x, n.y + r * this.m_rB.y - e.y - i * this.m_rA.y + c * this.m_correctionFactor * this.m_linearError.y), 
_ = k(this.m_linearMass, u).Negate(), m = this.m_linearImpulse.Clone();
this.m_linearImpulse.Add(_);
f = l * this.m_maxForce;
if (this.m_linearImpulse.LengthSquared() > f * f) {
this.m_linearImpulse.Normalize();
this.m_linearImpulse.Multiply(f);
}
_.Assign(E.Subtract(this.m_linearImpulse, m));
e.Subtract(E.Multiply(s, _));
i -= o * O(this.m_rA, _);
n.Add(E.Multiply(a, _));
r += h * O(this.m_rB, _);
t.velocities[this.m_indexA].v.Assign(e);
t.velocities[this.m_indexA].w = i;
t.velocities[this.m_indexB].v.Assign(n);
t.velocities[this.m_indexB].w = r;
},
SolvePositionConstraints: function(t) {
return !0;
},
_serialize: function(t) {
var e = t || {};
this.parent.prototype._serialize.call(this, e);
e.linearOffset = this.m_linearOffset._serialize();
e.angularOffset = this.m_angularOffset;
e.maxForce = this.m_maxForce;
e.maxTorque = this.m_maxTorque;
e.correctionFactor = this.m_correctionFactor;
return e;
}
};
bi._extend(ri);
function Ti() {
this.parent.call(this);
this.type = ri.e_pulleyJoint;
this.groundAnchorA = new E(-1, 1);
this.groundAnchorB = new E(1, 1);
this.localAnchorA = new E(-1, 0);
this.localAnchorB = new E(1, 0);
this.lengthA = 0;
this.lengthB = 0;
this.ratio = 1;
this.collideConnected = !0;
Object.seal(this);
}
Ti.prototype = {
Initialize: function(t, e, i, n, s, o, h) {
this.bodyA = t;
this.bodyB = e;
this.groundAnchorA.Assign(i);
this.groundAnchorB.Assign(n);
this.localAnchorA.Assign(this.bodyA.GetLocalPoint(s));
this.localAnchorB.Assign(this.bodyB.GetLocalPoint(o));
var l = E.Subtract(s, i);
this.lengthA = l.Length();
var c = E.Subtract(o, n);
this.lengthB = c.Length();
this.ratio = h;
r(this.ratio > a);
},
_deserialize: function(t, e, i) {
this.parent.prototype._deserialize.call(this, t, e, i);
this.groundAnchorA._deserialize(t.groundAnchorA);
this.groundAnchorB._deserialize(t.groundAnchorB);
this.localAnchorA._deserialize(t.localAnchorA);
this.localAnchorB._deserialize(t.localAnchorB);
this.lengthA = t.lengthA;
this.lengthB = t.lengthB;
this.ratio = t.ratio;
}
};
Ti._extend(ni);
function Ci(t) {
this.parent.call(this, t);
this.m_indexA = 0;
this.m_indexB = 0;
this.m_uA = new E();
this.m_uB = new E();
this.m_rA = new E();
this.m_rB = new E();
this.m_localCenterA = new E();
this.m_localCenterB = new E();
this.m_invMassA = 0;
this.m_invMassB = 0;
this.m_invIA = 0;
this.m_invIB = 0;
this.m_mass = 0;
this.m_groundAnchorA = t.groundAnchorA.Clone();
this.m_groundAnchorB = t.groundAnchorB.Clone();
this.m_localAnchorA = t.localAnchorA.Clone();
this.m_localAnchorB = t.localAnchorB.Clone();
this.m_lengthA = t.lengthA;
this.m_lengthB = t.lengthB;
r(0 != t.ratio);
this.m_ratio = t.ratio;
this.m_constant = t.lengthA + this.m_ratio * t.lengthB;
this.m_impulse = 0;
}
Ci.prototype = {
GetAnchorA: function() {
return this.m_bodyA.GetWorldPoint(this.m_localAnchorA);
},
GetAnchorB: function() {
return this.m_bodyB.GetWorldPoint(this.m_localAnchorB);
},
GetReactionForce: function(t) {
var e = E.Multiply(this.m_impulse, this.m_uB);
return E.Multiply(t, e);
},
GetReactionTorque: function(t) {
return 0;
},
GetGroundAnchorA: function() {
return this.m_groundAnchorA;
},
GetGroundAnchorB: function() {
return this.m_groundAnchorB;
},
GetLengthA: function() {
return this.m_lengthA;
},
GetLengthB: function() {
return this.m_lengthB;
},
GetRatio: function() {
return this.m_ratio;
},
GetCurrentLengthA: function() {
var t = this.m_bodyA.GetWorldPoint(this.m_localAnchorA), e = this.m_groundAnchorA;
return E.Subtract(t, e).Length();
},
GetCurrentLengthB: function() {
var t = this.m_bodyB.GetWorldPoint(this.m_localAnchorB), e = this.m_groundAnchorB;
return E.Subtract(t, e).Length();
},
ShiftOrigin: function(t) {
this.m_groundAnchorA.Subtract(t);
this.m_groundAnchorB.Subtract(t);
},
InitVelocityConstraints: function(t) {
this.m_indexA = this.m_bodyA.m_islandIndex;
this.m_indexB = this.m_bodyB.m_islandIndex;
this.m_localCenterA.Assign(this.m_bodyA.m_sweep.localCenter);
this.m_localCenterB.Assign(this.m_bodyB.m_sweep.localCenter);
this.m_invMassA = this.m_bodyA.m_invMass;
this.m_invMassB = this.m_bodyB.m_invMass;
this.m_invIA = this.m_bodyA.m_invI;
this.m_invIB = this.m_bodyB.m_invI;
var e = t.positions[this.m_indexA].c.Clone(), i = t.positions[this.m_indexA].a, n = t.velocities[this.m_indexA].v.Clone(), r = t.velocities[this.m_indexA].w, s = t.positions[this.m_indexB].c.Clone(), a = t.positions[this.m_indexB].a, o = t.velocities[this.m_indexB].v.Clone(), h = t.velocities[this.m_indexB].w, l = new P(i), u = new P(a);
this.m_rA.Assign(X(l, E.Subtract(this.m_localAnchorA, this.m_localCenterA)));
this.m_rB.Assign(X(u, E.Subtract(this.m_localAnchorB, this.m_localCenterB)));
this.m_uA.Assign(E.Add(e, E.Subtract(this.m_rA, this.m_groundAnchorA)));
this.m_uB.Assign(E.Add(s, E.Subtract(this.m_rB, this.m_groundAnchorB)));
var _ = this.m_uA.Length(), m = this.m_uB.Length();
_ > 10 * c ? this.m_uA.Multiply(1 / _) : this.m_uA.SetZero();
m > 10 * c ? this.m_uB.Multiply(1 / m) : this.m_uB.SetZero();
var f = O(this.m_rA, this.m_uA), d = O(this.m_rB, this.m_uB), p = this.m_invMassA + this.m_invIA * f * f, g = this.m_invMassB + this.m_invIB * d * d;
this.m_mass = p + this.m_ratio * this.m_ratio * g;
this.m_mass > 0 && (this.m_mass = 1 / this.m_mass);
if (t.step.warmStarting) {
this.m_impulse *= t.step.dtRatio;
var y = E.Multiply(-this.m_impulse, this.m_uA), v = E.Multiply(-this.m_ratio * this.m_impulse, this.m_uB);
n.Add(E.Multiply(this.m_invMassA, y));
r += this.m_invIA * O(this.m_rA, y);
o.Add(E.Multiply(this.m_invMassB, v));
h += this.m_invIB * O(this.m_rB, v);
} else this.m_impulse = 0;
t.velocities[this.m_indexA].v.Assign(n);
t.velocities[this.m_indexA].w = r;
t.velocities[this.m_indexB].v.Assign(o);
t.velocities[this.m_indexB].w = h;
},
SolveVelocityConstraints: function(t) {
var e = t.velocities[this.m_indexA].v.Clone(), i = t.velocities[this.m_indexA].w, n = t.velocities[this.m_indexB].v.Clone(), r = t.velocities[this.m_indexB].w, s = E.Add(e, N(i, this.m_rA)), a = E.Add(n, N(r, this.m_rB)), o = -L(this.m_uA, s) - this.m_ratio * L(this.m_uB, a), h = -this.m_mass * o;
this.m_impulse += h;
var l = E.Multiply(-h, this.m_uA), c = E.Multiply(-this.m_ratio, E.Multiply(h, this.m_uB));
e.Add(E.Multiply(this.m_invMassA, l));
i += this.m_invIA * O(this.m_rA, l);
n.Add(E.Multiply(this.m_invMassB, c));
r += this.m_invIB * O(this.m_rB, c);
t.velocities[this.m_indexA].v.Assign(e);
t.velocities[this.m_indexA].w = i;
t.velocities[this.m_indexB].v.Assign(n);
t.velocities[this.m_indexB].w = r;
},
SolvePositionConstraints: function(t) {
var e = t.positions[this.m_indexA].c.Clone(), i = t.positions[this.m_indexA].a, n = t.positions[this.m_indexB].c.Clone(), r = t.positions[this.m_indexB].a, s = new P(i), a = new P(r), o = X(s, E.Subtract(this.m_localAnchorA, this.m_localCenterA)), h = X(a, E.Subtract(this.m_localAnchorB, this.m_localCenterB)), l = E.Add(e, E.Subtract(o, this.m_groundAnchorA)), u = E.Add(n, E.Subtract(h, this.m_groundAnchorB)), _ = l.Length(), m = u.Length();
_ > 10 * c ? l.Multiply(1 / _) : l.SetZero();
m > 10 * c ? u.Multiply(1 / m) : u.SetZero();
var f = O(o, l), d = O(h, u), p = this.m_invMassA + this.m_invIA * f * f, g = this.m_invMassB + this.m_invIB * d * d, y = p + this.m_ratio * this.m_ratio * g;
y > 0 && (y = 1 / y);
var v = this.m_constant - _ - this.m_ratio * m, x = Q(v), A = -y * v, b = E.Multiply(-A, l), T = E.Multiply(-this.m_ratio, E.Multiply(A, u));
e.Add(E.Multiply(this.m_invMassA, b));
i += this.m_invIA * O(o, b);
n.Add(E.Multiply(this.m_invMassB, T));
r += this.m_invIB * O(h, T);
t.positions[this.m_indexA].c.Assign(e);
t.positions[this.m_indexA].a = i;
t.positions[this.m_indexB].c.Assign(n);
t.positions[this.m_indexB].a = r;
return x < c;
},
_serialize: function(t) {
var e = t || {};
this.parent.prototype._serialize.call(this, e);
e.groundAnchorA = this.m_groundAnchorA._serialize();
e.groundAnchorB = this.m_groundAnchorB._serialize();
e.localAnchorA = this.m_localAnchorA._serialize();
e.localAnchorB = this.m_localAnchorB._serialize();
e.lengthA = this.m_lengthA;
e.lengthB = this.m_lengthB;
e.ratio = this.m_ratio;
return e;
}
};
Ci._extend(ri);
function wi() {
this.parent.call(this);
this.type = ri.e_ropeJoint;
this.localAnchorA = new E(-1, 0);
this.localAnchorB = new E(1, 0);
this.maxLength = 0;
Object.seal(this);
}
wi.prototype = {
_deserialize: function(t, e, i) {
this.parent.prototype._deserialize.call(this, t, e, i);
this.localAnchorA._deserialize(t.localAnchorA);
this.localAnchorB._deserialize(t.localAnchorB);
this.maxLength = t.maxLength;
}
};
wi._extend(ni);
function Si(t) {
this.parent.call(this, t);
this.m_localAnchorA = t.localAnchorA.Clone();
this.m_localAnchorB = t.localAnchorB.Clone();
this.m_maxLength = t.maxLength;
this.m_mass = 0;
this.m_impulse = 0;
this.m_state = ri.e_inactiveLimit;
this.m_length = 0;
this.m_indexA = 0;
this.m_indexB = 0;
this.m_u = new E();
this.m_rA = new E();
this.m_rB = new E();
this.m_localCenterA = new E();
this.m_localCenterB = new E();
this.m_invMassA = 0;
this.m_invMassB = 0;
this.m_invIA = 0;
this.m_invIB = 0;
}
Si.prototype = {
GetAnchorA: function() {
return this.m_bodyA.GetWorldPoint(this.m_localAnchorA);
},
GetAnchorB: function() {
return this.m_bodyB.GetWorldPoint(this.m_localAnchorB);
},
GetReactionForce: function(t) {
return E.Multiply(t * this.m_impulse, this.m_u);
},
GetReactionTorque: function(t) {
return 0;
},
GetLocalAnchorA: function() {
return this.m_localAnchorA;
},
GetLocalAnchorB: function() {
return this.m_localAnchorB;
},
SetMaxLength: function(t) {
this.m_maxLength = t;
},
GetMaxLength: function() {
return this.m_maxLength;
},
GetLimitState: function() {
return this.m_state;
},
InitVelocityConstraints: function(t) {
this.m_indexA = this.m_bodyA.m_islandIndex;
this.m_indexB = this.m_bodyB.m_islandIndex;
this.m_localCenterA.Assign(this.m_bodyA.m_sweep.localCenter);
this.m_localCenterB.Assign(this.m_bodyB.m_sweep.localCenter);
this.m_invMassA = this.m_bodyA.m_invMass;
this.m_invMassB = this.m_bodyB.m_invMass;
this.m_invIA = this.m_bodyA.m_invI;
this.m_invIB = this.m_bodyB.m_invI;
var e = t.positions[this.m_indexA].c.Clone(), i = t.positions[this.m_indexA].a, n = t.velocities[this.m_indexA].v.Clone(), r = t.velocities[this.m_indexA].w, s = t.positions[this.m_indexB].c.Clone(), a = t.positions[this.m_indexB].a, o = t.velocities[this.m_indexB].v.Clone(), h = t.velocities[this.m_indexB].w, l = new P(i), u = new P(a);
this.m_rA.Assign(X(l, E.Subtract(this.m_localAnchorA, this.m_localCenterA)));
this.m_rB.Assign(X(u, E.Subtract(this.m_localAnchorB, this.m_localCenterB)));
this.m_u.Assign(E.Subtract(E.Subtract(E.Add(s, this.m_rB), e), this.m_rA));
this.m_length = this.m_u.Length();
var _ = this.m_length - this.m_maxLength;
this.m_state = _ > 0 ? ri.e_atUpperLimit : ri.e_inactiveLimit;
if (this.m_length > c) {
this.m_u.Multiply(1 / this.m_length);
var m = O(this.m_rA, this.m_u), f = O(this.m_rB, this.m_u), d = this.m_invMassA + this.m_invIA * m * m + this.m_invMassB + this.m_invIB * f * f;
this.m_mass = 0 != d ? 1 / d : 0;
if (t.step.warmStarting) {
this.m_impulse *= t.step.dtRatio;
var p = E.Multiply(this.m_impulse, this.m_u);
n.Subtract(E.Multiply(this.m_invMassA, p));
r -= this.m_invIA * O(this.m_rA, p);
o.Add(E.Multiply(this.m_invMassB, p));
h += this.m_invIB * O(this.m_rB, p);
} else this.m_impulse = 0;
t.velocities[this.m_indexA].v.Assign(n);
t.velocities[this.m_indexA].w = r;
t.velocities[this.m_indexB].v.Assign(o);
t.velocities[this.m_indexB].w = h;
} else {
this.m_u.SetZero();
this.m_mass = 0;
this.m_impulse = 0;
}
},
SolveVelocityConstraints: function(t) {
var e = t.velocities[this.m_indexA].v.Clone(), i = t.velocities[this.m_indexA].w, n = t.velocities[this.m_indexB].v.Clone(), r = t.velocities[this.m_indexB].w, s = E.Add(e, N(i, this.m_rA)), a = E.Add(n, N(r, this.m_rB)), o = this.m_length - this.m_maxLength, h = L(this.m_u, E.Subtract(a, s));
o < 0 && (h += t.step.inv_dt * o);
var l = -this.m_mass * h, c = this.m_impulse;
this.m_impulse = tt(0, this.m_impulse + l);
l = this.m_impulse - c;
var u = E.Multiply(l, this.m_u);
e.Subtract(E.Multiply(this.m_invMassA, u));
i -= this.m_invIA * O(this.m_rA, u);
n.Add(E.Multiply(this.m_invMassB, u));
r += this.m_invIB * O(this.m_rB, u);
t.velocities[this.m_indexA].v.Assign(e);
t.velocities[this.m_indexA].w = i;
t.velocities[this.m_indexB].v.Assign(n);
t.velocities[this.m_indexB].w = r;
},
SolvePositionConstraints: function(t) {
var e = t.positions[this.m_indexA].c.Clone(), i = t.positions[this.m_indexA].a, n = t.positions[this.m_indexB].c.Clone(), r = t.positions[this.m_indexB].a, s = new P(i), a = new P(r), o = X(s, E.Subtract(this.m_localAnchorA, this.m_localCenterA)), h = X(a, E.Subtract(this.m_localAnchorB, this.m_localCenterB)), l = E.Subtract(E.Subtract(E.Add(n, h), e), o), u = l.Normalize(), _ = u - this.m_maxLength;
_ = rt(_, 0, .2);
var m = -this.m_mass * _, f = E.Multiply(m, l);
e.Subtract(E.Multiply(this.m_invMassA, f));
i -= this.m_invIA * O(o, f);
n.Add(E.Multiply(this.m_invMassB, f));
r += this.m_invIB * O(h, f);
t.positions[this.m_indexA].c.Assign(e);
t.positions[this.m_indexA].a = i;
t.positions[this.m_indexB].c.Assign(n);
t.positions[this.m_indexB].a = r;
return u - this.m_maxLength < c;
},
_serialize: function(t) {
var e = t || {};
this.parent.prototype._serialize.call(this, e);
e.localAnchorA = this.m_localAnchorA._serialize();
e.localAnchorB = this.m_localAnchorB._serialize();
e.maxLength = this.m_maxLength;
return e;
}
};
Si._extend(ri);
var Ei = Math.exp;
function Di() {
this.m_count = 0;
this.m_ps = null;
this.m_p0s = null;
this.m_vs = null;
this.m_ims = null;
this.m_Ls = null;
this.m_as = null;
this.m_damping = 0;
this.m_gravity = new E();
this.m_k2 = 1;
this.m_k3 = .1;
}
Di.prototype = {
Initialize: function(t) {
r(t.count >= 3);
this.m_count = t.count;
this.m_ps = new Array(this.m_count);
this.m_p0s = new Array(this.m_count);
this.m_vs = new Array(this.m_count);
this.m_ims = new Array(this.m_count);
for (var e = 0; e < this.m_count; ++e) {
this.m_ps[e] = t.vertices[e].Clone();
this.m_p0s[e] = t.vertices[e].Clone();
this.m_vs[e] = new E();
var i = t.masses[e];
this.m_ims[e] = i > 0 ? 1 / i : 0;
}
var n = this.m_count - 1, s = this.m_count - 2;
this.m_Ls = new Array(n);
this.m_as = new Array(s);
for (e = 0; e < n; ++e) {
var a = this.m_ps[e], o = this.m_ps[e + 1];
this.m_Ls[e] = z(a, o);
}
for (e = 0; e < s; ++e) {
a = this.m_ps[e], o = this.m_ps[e + 1];
var h = this.m_ps[e + 2], l = E.Subtract(o, a), c = E.Subtract(h, o), u = O(l, c), _ = L(l, c);
this.m_as[e] = S(u, _);
}
this.m_gravity = t.gravity.Clone();
this.m_damping = t.damping;
this.m_k2 = t.k2;
this.m_k3 = t.k3;
},
Step: function(t, e) {
if (0 != t) {
for (var i = Ei(-t * this.m_damping), n = 0; n < this.m_count; ++n) {
this.m_p0s[n].Assign(this.m_ps[n]);
this.m_ims[n] > 0 && this.m_vs[n].Add(E.Multiply(t, this.m_gravity));
this.m_vs[n].Multiply(i);
this.m_ps[n].Add(E.Multiply(t, this.m_vs[n]));
}
for (n = 0; n < e; ++n) {
this.SolveC2();
this.SolveC3();
this.SolveC2();
}
var r = 1 / t;
for (n = 0; n < this.m_count; ++n) this.m_vs[n] = E.Multiply(r, E.Subtract(this.m_ps[n], this.m_p0s[n]));
}
},
GetVertexCount: function() {
return this.m_count;
},
GetVertices: function() {
return this.m_ps;
},
Draw: function(t) {
for (var e = new st(.4, .5, .7), i = 0; i < this.m_count - 1; ++i) t.DrawSegment(this.m_ps[i], this.m_ps[i + 1], e);
},
SetAngle: function(t) {
for (var e = this.m_count - 2, i = 0; i < e; ++i) this.m_as[i] = t;
},
SolveC2: function() {
for (var t = this.m_count - 1, e = 0; e < t; ++e) {
var i = this.m_ps[e], n = this.m_ps[e + 1], r = E.Subtract(n, i), s = r.Normalize(), a = this.m_ims[e], o = this.m_ims[e + 1];
if (a + o != 0) {
var h = a / (a + o), l = o / (a + o);
i.Subtract(E.Multiply(this.m_k2 * h * (this.m_Ls[e] - s), r));
n.Add(E.Multiply(this.m_k2 * l * (this.m_Ls[e] - s), r));
}
}
},
SolveC3: function() {
for (var t = this.m_count - 2, e = 0; e < t; ++e) {
var i = this.m_ps[e], n = this.m_ps[e + 1], r = this.m_ps[e + 2], s = this.m_ims[e], a = this.m_ims[e + 1], h = this.m_ims[e + 2], l = E.Subtract(n, i), c = E.Subtract(r, n), u = l.LengthSquared(), _ = c.LengthSquared();
if (u * _ != 0) {
var m = O(l, c), f = L(l, c), d = S(m, f), p = E.Multiply(-1 / u, l.Skew()), g = E.Multiply(1 / _, c.Skew()), y = E.Negate(p), v = E.Subtract(p, g), x = g, A = s * L(y, y) + a * L(v, v) + h * L(x, x);
if (0 != A) {
A = 1 / A;
for (var b = d - this.m_as[e]; b > o; ) b = (d -= 2 * o) - this.m_as[e];
for (;b < -o; ) b = (d += 2 * o) - this.m_as[e];
var T = -this.m_k3 * A * b;
i.Add(E.Multiply(s * T, y));
n.Add(E.Multiply(a * T, v));
r.Add(E.Multiply(h * T, x));
}
}
}
}
};
var Mi = {
serialize: function(t) {
var e, i, n, r, s, a = [];
for (n = t.GetBodyList(); n; n = n.GetNext()) for (r = n.GetFixtureList(); r; r = r.GetNext()) {
s = r.GetShape();
r.__temp_shape_id = a.length;
a.push(s._serialize());
}
var o = [];
for (n = t.GetBodyList(); n; n = n.GetNext()) {
n.__temp_fixture_ids = [];
for (r = n.GetFixtureList(); r; r = r.GetNext()) {
(i = r._serialize()).shape = r.__temp_shape_id;
delete r.__temp_shape_id;
n.__temp_fixture_ids.push(o.length);
o.push(i);
}
}
var h = [];
for (n = t.GetBodyList(); n; n = n.GetNext()) {
(i = n._serialize()).fixtures = [];
for (e = 0; e < n.__temp_fixture_ids.length; ++e) i.fixtures.push(n.__temp_fixture_ids[e]);
delete n.__temp_fixture_ids;
n.__temp_body_id = h.length;
h.push(i);
}
var l, c = [];
for (l = t.GetJointList(), e = 0; l; l = l.GetNext(), ++e) l.__temp_joint_id = e;
for (l = t.GetJointList(); l; l = l.GetNext()) if (l.GetType() !== ri.e_mouseJoint) {
(i = l._serialize()).bodyA = l.GetBodyA().__temp_body_id;
i.bodyB = l.GetBodyB().__temp_body_id;
c.push(i);
}
for (l = t.GetJointList(); l; l = l.GetNext()) delete l.__temp_joint_id;
for (n = t.GetBodyList(); n; n = n.GetNext()) delete n.__temp_body_id;
return {
shapes: a,
fixtures: o,
bodies: h,
joints: c
};
},
deserialize: function(t, e, i) {
var n = JSON.parse(t);
if (i) {
for (var r = e.GetBodyList(); r; ) {
var s = r.GetNext();
e.DestroyBody(r);
r = s;
}
for (var a = e.GetJointList(); a; ) {
s = a.GetNext();
e.DestroyJoint(a);
a = s;
}
}
for (var o = [], h = 0; h < n.shapes.length; ++h) {
var l, c = n.shapes[h];
switch (c.m_type) {
case lt.e_circle:
l = new ct();
break;

case lt.e_edge:
l = new ut();
break;

case lt.e_chain:
l = new _t();
break;

case lt.e_polygon:
l = new mt();
}
l._deserialize(c);
o.push(l);
}
var u = [];
for (h = 0; h < n.fixtures.length; ++h) {
var _ = n.fixtures[h], m = new he();
m._deserialize(_);
m.shape = o[_.shape];
u.push(m);
}
var f = [];
for (h = 0; h < n.bodies.length; ++h) {
var d = n.bodies[h], p = new se();
p._deserialize(d);
for (var g = e.CreateBody(p), y = 0; y < d.fixtures.length; ++y) g.CreateFixture(u[d.fixtures[y]]);
f.push(g);
}
var v = [], x = [];
for (h = 0; h < n.joints.length; ++h) {
var A, b = n.joints[h];
switch (b.type) {
case ri.e_revoluteJoint:
A = new si();
break;

case ri.e_prismaticJoint:
A = new ui();
break;

case ri.e_distanceJoint:
A = new li();
break;

case ri.e_pulleyJoint:
A = new Ti();
break;

case ri.e_gearJoint:
A = new vi();
break;

case ri.e_wheelJoint:
A = new gi();
break;

case ri.e_weldJoint:
A = new di();
break;

case ri.e_frictionJoint:
A = new mi();
break;

case ri.e_ropeJoint:
A = new wi();
break;

case ri.e_motorJoint:
A = new Ai();
break;

default:
throw new Error("unknown joint");
}
A._deserialize(b, f);
if (b.type === ri.e_gearJoint) {
x.push([ A, v.length ]);
v.push(null);
} else {
var T = e.CreateJoint(A);
v.push(T);
}
}
for (h = 0; h < x.length; ++h) {
x[h][0].joint1 = v[x[h][0].joint1];
x[h][0].joint2 = v[x[h][0].joint2];
T = e.CreateJoint(x[h][0]);
v[x[h][1]] = T;
}
}
}, Ii = (function() {
function i(t) {
return new E(t && t.x || 0, t && t.y || 0);
}
function n(t) {
for (var e = new Array(t.x.length), i = 0; i < e.length; ++i) e[i] = new E(t.x[i], t.y[i]);
return e;
}
function r(n, r) {
var s, a = n.name;
if ("undefined" != typeof n.int) s = n.int; else if ("undefined" != typeof n.float) s = n.float; else if ("undefined" != typeof n.string) s = n.string; else if ("undefined" != typeof n.bool) s = n.bool; else {
if ("undefined" === ("object" === (e = typeof n.vec2) ? t(n.vec2) : e)) throw new Error("unknown property type");
s = i(n.vec2);
}
if (r.hasOwnProperty(a)) throw new Error("custom property possibly overwriting an existing one");
r[a] = s;
}
function s(s, a) {
var o, h = new he();
h.density = s.density || 0;
h.filter.categoryBits = "undefined" == typeof s["filter-categoryBits"] ? 1 : s["filter-categoryBits"];
h.filter.maskBits = "undefined" == typeof s["filter-maskBits"] ? 65535 : s["filter-maskBits"];
h.filter.groupIndex = "undefined" == typeof s["filter-groupIndex"] ? 0 : s["filter-groupIndex"];
h.friction = s.friction || 0;
h.restitution = s.restitution || 0;
h.isSensor = s.sensor || 0;
if ("undefined" !== ("object" === (e = typeof s.circle) ? t(s.circle) : e)) {
(o = new ct()).m_p = i(s.circle.center);
o.m_radius = s.circle.radius || 0;
} else if ("undefined" !== (e = typeof s.polygon, "object" === e ? t(s.polygon) : e)) {
var l = n(s.polygon.vertices);
(o = new mt()).Set(l, l.length);
} else {
if ("undefined" === ("object" === (e = typeof s.chain) ? t(s.chain) : e)) throw new Error("unknown shape type");
l = n(s.chain.vertices);
(o = new _t()).m_count = l.length;
o.m_vertices = l;
(o.m_hasNextVertex = s.chain.hasNextVertex) && (o.m_nextVertex = i(s.chain.nextVertex));
(o.m_hasPrevVertex = s.chain.hasPrevVertex) && (o.m_prevVertex = i(s.chain.prevVertex));
}
h.shape = o;
var c = a.CreateFixture(h);
c.name = s.name;
if (s.customProperties) for (var u = 0; u < s.customProperties.length; ++u) r(s, c);
}
function a(n, a) {
var o = new se();
o.type = n.type || ae.b2_staticBody;
o.angle = n.angle || 0;
o.angularDamping = n.angularDamping || 0;
o.angularVelocity = n.angularVelocity || 0;
o.awake = n.awake || !1;
o.bullet = n.bullet || !1;
o.fixedRotation = n.fixedRotation || !1;
o.linearDamping = n.linearDamping || !1;
o.linearVelocity = i(n.linearVelocity);
o.gravityScale = "undefined" !== ("object" === (e = typeof n.gravityScale) ? t(n.gravityScale) : e) ? n.gravityScale : 1;
var h = new ht();
h.mass = n["massData-mass"] || 0;
h.center = i(n["massData-center"]);
h.I = n["massData-I"] || 0;
o.position = i(n.position);
var l = a.CreateBody(o);
l.name = n.name;
l.SetMassData(h);
if (n.fixture) for (var c = 0; c < n.fixture.length; ++c) s(n.fixture[c], l);
if (n.customProperties) for (c = 0; c < n.customProperties.length; ++c) r(n, l);
return l;
}
var o = {
revolute: si,
distance: li,
prismatic: ui,
wheel: gi,
rope: wi,
motor: Ai,
weld: di,
friction: mi
};
function h(t, e, n) {
if (!o[t.type]) throw new Error("unknown joint type");
var s = new o[t.type]();
switch (s.type) {
case ri.e_revoluteJoint:
s.localAnchorA = i(t.anchorA);
s.localAnchorB = i(t.anchorB);
s.enableLimit = t.enableLimit || !1;
s.enableMotor = t.enableMotor || !1;
s.lowerAngle = t.lowerLimit || 0;
s.maxMotorTorque = t.maxMotorTorque || 0;
s.motorSpeed = t.motorSpeed || 0;
s.referenceAngle = t.refAngle || 0;
s.upperAngle = t.upperLimit || 0;
break;

case ri.e_distanceJoint:
s.localAnchorA = i(t.anchorA);
s.localAnchorB = i(t.anchorB);
s.dampingRatio = t.dampingRatio || 0;
s.frequencyHz = t.frequency || 0;
s.length = t.length || 0;
break;

case ri.e_prismaticJoint:
s.localAnchorA = i(t.anchorA);
s.localAnchorB = i(t.anchorB);
s.enableLimit = t.enableLimit || !1;
s.enableMotor = t.enableMotor || !1;
s.localAxisA = i(t.localAxisA);
s.lowerTranslation = t.lowerLimit || 0;
s.maxMotorForce = t.maxMotorForce || 0;
s.motorSpeed = t.motorSpeed || 0;
s.referenceAngle = t.refAngle || 0;
s.upperTranslation = t.upperLimit || 0;
break;

case ri.e_wheelJoint:
s.localAnchorA = i(t.anchorA);
s.localAnchorB = i(t.anchorB);
s.enableMotor = t.enableMotor || !1;
s.localAxisA = i(t.localAxisA);
s.maxMotorTorque = t.maxMotorTorque || 0;
s.motorSpeed = t.motorSpeed || 0;
s.dampingRatio = t.springDampingRatio || 0;
s.frequencyHz = t.springFrequency || 0;
break;

case ri.e_ropeJoint:
s.localAnchorA = i(t.anchorA);
s.localAnchorB = i(t.anchorB);
s.maxLength = t.maxLength || 0;
break;

case ri.e_motorJoint:
s.linearOffset = i(t.anchorA);
s.angularOffset = t.refAngle || 0;
s.maxForce = t.maxForce || 0;
s.maxTorque = t.maxTorque || 0;
s.correctionFactor = t.correctionFactor || 0;
break;

case ri.e_weldJoint:
s.localAnchorA = i(t.anchorA);
s.localAnchorB = i(t.anchorB);
s.referenceAngle = t.refAngle || 0;
s.dampingRatio = t.dampingRatio || 0;
s.frequencyHz = t.frequencyHz || 0;
break;

case ri.e_frictionJoint:
s.localAnchorA = i(t.anchorA);
s.localAnchorB = i(t.anchorB);
s.maxForce = t.maxForce || 0;
s.maxTorque = t.maxTorque || 0;
break;

default:
throw new Error("wat?");
}
s.bodyA = n[t.bodyA || 0];
s.bodyB = n[t.bodyB || 0];
s.collideConnected = t.collideConnected || !1;
var a = e.CreateJoint(s);
a.name = t.name;
if (t.customProperties) for (var h = 0; h < t.customProperties.length; ++h) r(t, a);
return a;
}
return {
parseWorld: function(t, e) {
var n = new function() {
this.world = null;
this.positionIterations = 0;
this.velocityIterations = 0;
this.stepsPerSecond = 0;
this.fixtures = {};
this.bodies = {};
this.joints = {};
Object.seal(this);
}();
n.world = e = e || new Se(new E(0, 0));
n.positionIterations = t.positionIterations || 0;
n.velocityIterations = t.velocityIterations || 0;
n.stepsPerSecond = t.stepsPerSecond || 0;
t.gravity && e.SetGravity(i(t.gravity));
e.SetAllowSleeping(t.allowSleep || !1);
e.SetAutoClearForces(t.autoClearForces || !1);
e.SetWarmStarting(t.warmStarting || !1);
e.SetContinuousPhysics(t.continuousPhysics || !1);
e.SetSubStepping(t.subStepping || !1);
var r = [], s = t.body;
if (s) for (var o = 0; o < s.length; ++o) {
var l = a(s[o], e);
r.push(l);
for (var c = l.GetFixtureList(); c; c = c.GetNext()) {
n.fixtures[c.name] || (n.fixtures[c.name] = []);
n.fixtures[c.name].push(c);
}
n.bodies[l.name] || (n.bodies[l.name] = []);
n.bodies[l.name].push(l);
}
var u = [], _ = t.joint;
if (_) for (o = 0; o < _.length; ++o) {
var m = h(_[o], e, r);
u.push(m);
n.joints[m.name] || (n.joints[m.name] = []);
n.joints[m.name].push(m);
}
return n;
}
};
})(), Pi = [ {
trimmed: "version",
name: "b2_version",
def: y
}, {
trimmed: "Vec2",
name: "b2Vec2",
def: E
}, {
trimmed: "Vec3",
name: "b2Vec3",
def: D
}, {
trimmed: "Mat22",
name: "b2Mat22",
def: M
}, {
trimmed: "Mat33",
name: "b2Mat33",
def: I
}, {
trimmed: "Rot",
name: "b2Rot",
def: P
}, {
trimmed: "Transform",
name: "b2Transform",
def: B
}, {
trimmed: "Sweep",
name: "b2Sweep",
def: R
}, {
trimmed: "Dot_v2_v2",
name: "b2Dot_v2_v2",
def: L
}, {
trimmed: "Cross_v2_v2",
name: "b2Cross_v2_v2",
def: O
}, {
trimmed: "Cross_v2_f",
name: "b2Cross_v2_f",
def: F
}, {
trimmed: "Cross_f_v2",
name: "b2Cross_f_v2",
def: N
}, {
trimmed: "Mul_m22_v2",
name: "b2Mul_m22_v2",
def: k
}, {
trimmed: "MulT_m22_v2",
name: "b2MulT_m22_v2",
def: function(t, e) {
return new E(L(e, t.ex), L(e, t.ey));
}
}, {
trimmed: "Distance",
name: "b2Distance",
def: z
}, {
trimmed: "DistanceSquared",
name: "b2DistanceSquared",
def: G
}, {
trimmed: "Dot_v3_v3",
name: "b2Dot_v3_v3",
def: U
}, {
trimmed: "Cross_v3_v3",
name: "b2Cross_v3_v3",
def: V
}, {
trimmed: "Mul_m22_m22",
name: "b2Mul_m22_m22",
def: function(t, e) {
return new M(k(t, e.ex), k(t, e.ey));
}
}, {
trimmed: "MulT_m22_m22",
name: "b2MulT_m22_m22",
def: function(t, e) {
return new M(new E(L(t.ex, e.ex), L(t.ey, e.ex)), new E(L(t.ex, e.ey), L(t.ey, e.ey)));
}
}, {
trimmed: "Mul_m33_v3",
name: "b2Mul_m33_v3",
def: j
}, {
trimmed: "Mul22_m33_v2",
name: "b2Mul22_m33_v2",
def: W
}, {
trimmed: "Mul_r_r",
name: "b2Mul_r_r",
def: H
}, {
trimmed: "MulT_r_r",
name: "b2MulT_r_r",
def: q
}, {
trimmed: "Mul_r_v2",
name: "b2Mul_r_v2",
def: X
}, {
trimmed: "MulT_r_v2",
name: "b2MulT_r_v2",
def: Y
}, {
trimmed: "Mul_t_v2",
name: "b2Mul_t_v2",
def: J
}, {
trimmed: "Min_v2",
name: "b2Min_v2",
def: et
}, {
trimmed: "Max_v2",
name: "b2Max_v2",
def: nt
}, {
trimmed: "Clamp",
name: "b2Clamp",
def: rt
}, {
trimmed: "MulT_t_v2",
name: "b2MulT_t_v2",
def: Z
}, {
trimmed: "Mul_t_t",
name: "b2Mul_t_t",
def: function(t, e) {
var i = new B();
i.q = H(t.q, e.q);
i.p = E.Add(X(t.q, e.p), t.p);
return i;
}
}, {
trimmed: "MulT_t_t",
name: "b2MulT_t_t",
def: K
}, {
trimmed: "Clamp_v2",
name: "b2Clamp_v2",
def: function(t, e, i) {
return nt(e, et(t, i));
}
}, {
trimmed: "NextPowerOfTwo",
name: "b2NextPowerOfTwo",
def: function(t) {
t |= t >> 1;
t |= t >> 2;
t |= t >> 4;
t |= t >> 8;
return 1 + (t |= t >> 16);
}
}, {
trimmed: "Abs_v2",
name: "b2Abs_v2",
def: $
}, {
trimmed: "Abs_m22",
name: "b2Abs_m22",
def: function(t) {
return new M($(t.ex), $(t.ey));
}
}, {
trimmed: "IsPowerOfTwo",
name: "b2IsPowerOfTwo",
def: function(t) {
return t > 0 && 0 == (t & t - 1);
}
}, {
trimmed: "RandomFloat",
name: "b2RandomFloat",
def: function(i, n) {
var r = Math.random();
return r = "undefined" !== ("object" == (e = typeof i) ? t(i) : e) ? (n - i) * r + i : 2 * r - 1;
}
}, {
trimmed: "Timer",
name: "b2Timer",
def: ot
}, {
trimmed: "Color",
name: "b2Color",
def: st
}, {
trimmed: "Draw",
name: "b2Draw",
def: at
}, {
trimmed: "ContactID",
name: "b2ContactID",
def: Et
}, {
trimmed: "ManifoldPoint",
name: "b2ManifoldPoint",
def: Dt
}, {
trimmed: "Manifold",
name: "b2Manifold",
def: Mt
}, {
trimmed: "WorldManifold",
name: "b2WorldManifold",
def: It
}, {
trimmed: "GetPointStates",
name: "b2GetPointStates",
def: function(t, e, i, n) {
for (var r = 0; r < h; ++r) {
t[r] = Mt.b2_nullState;
e[r] = Mt.b2_nullState;
}
for (r = 0; r < i.pointCount; ++r) {
var s = i.points[r].id;
t[r] = Mt.b2_removeState;
for (var a = 0; a < n.pointCount; ++a) if (n.points[a].id.Get() == s.Get()) {
t[r] = Mt.b2_persistState;
break;
}
}
for (r = 0; r < n.pointCount; ++r) {
s = n.points[r].id;
e[r] = Mt.b2_addState;
for (a = 0; a < i.pointCount; ++a) if (i.points[a].id.Get() == s.Get()) {
e[r] = Mt.b2_persistState;
break;
}
}
}
}, {
trimmed: "ClipVertex",
name: "b2ClipVertex",
def: Pt
}, {
trimmed: "RayCastInput",
name: "b2RayCastInput",
def: Bt
}, {
trimmed: "RayCastOutput",
name: "b2RayCastOutput",
def: Rt
}, {
trimmed: "AABB",
name: "b2AABB",
def: Lt
}, {
trimmed: "CollideCircles",
name: "b2CollideCircles",
def: Ot
}, {
trimmed: "CollidePolygonAndCircle",
name: "b2CollidePolygonAndCircle",
def: Ft
}, {
trimmed: "FindMaxSeparation",
name: "b2FindMaxSeparation",
def: Nt
}, {
trimmed: "FindIncidentEdge",
name: "b2FindIncidentEdge",
def: kt
}, {
trimmed: "CollidePolygons",
name: "b2CollidePolygons",
def: zt
}, {
trimmed: "CollideEdgeAndCircle",
name: "b2CollideEdgeAndCircle",
def: Gt
}, {
trimmed: "EPAxis",
name: "b2EPAxis",
def: Ut
}, {
trimmed: "TempPolygon",
name: "b2TempPolygon",
def: Vt
}, {
trimmed: "ReferenceFace",
name: "b2ReferenceFace",
def: jt
}, {
trimmed: "EPCollider",
name: "b2EPCollider",
def: Wt
}, {
trimmed: "CollideEdgeAndPolygon",
name: "b2CollideEdgeAndPolygon",
def: Ht
}, {
trimmed: "ClipSegmentToLine",
name: "b2ClipSegmentToLine",
def: qt
}, {
trimmed: "TestShapeOverlap",
name: "b2TestShapeOverlap",
def: Xt
}, {
trimmed: "TestOverlap",
name: "b2TestOverlap",
def: Yt
}, {
trimmed: "Shape",
name: "b2Shape",
def: lt
}, {
trimmed: "CircleShape",
name: "b2CircleShape",
def: ct
}, {
trimmed: "EdgeShape",
name: "b2EdgeShape",
def: ut
}, {
trimmed: "ChainShape",
name: "b2ChainShape",
def: _t
}, {
trimmed: "PolygonShape",
name: "b2PolygonShape",
def: mt
}, {
trimmed: "Pair",
name: "b2Pair",
def: ft
}, {
trimmed: "PairLessThan",
name: "b2PairLessThan",
def: dt
}, {
trimmed: "BroadPhase",
name: "b2BroadPhase",
def: pt
}, {
trimmed: "DistanceProxy",
name: "b2DistanceProxy",
def: gt
}, {
trimmed: "SimplexCache",
name: "b2SimplexCache",
def: yt
}, {
trimmed: "DistanceInput",
name: "b2DistanceInput",
def: vt
}, {
trimmed: "DistanceOutput",
name: "b2DistanceOutput",
def: xt
}, {
trimmed: "SimplexVertex",
name: "b2SimplexVertex",
def: At
}, {
trimmed: "Simplex",
name: "b2Simplex",
def: bt
}, {
trimmed: "DistanceFunc",
name: "b2DistanceFunc",
def: St
}, {
trimmed: "TreeNode",
name: "b2TreeNode",
def: Zt
}, {
trimmed: "DynamicTree",
name: "b2DynamicTree",
def: Kt
}, {
trimmed: "TOIInput",
name: "b2TOIInput",
def: Qt
}, {
trimmed: "TOIOutput",
name: "b2TOIOutput",
def: $t
}, {
trimmed: "SeparationFunction",
name: "b2SeparationFunction",
def: te
}, {
trimmed: "TimeOfImpact",
name: "b2TimeOfImpact",
def: re
}, {
trimmed: "BodyDef",
name: "b2BodyDef",
def: se
}, {
trimmed: "Body",
name: "b2Body",
def: ae
}, {
trimmed: "Filter",
name: "b2Filter",
def: oe
}, {
trimmed: "FixtureDef",
name: "b2FixtureDef",
def: he
}, {
trimmed: "Fixture",
name: "b2Fixture",
def: ce
}, {
trimmed: "DestructionListener",
name: "b2DestructionListener",
def: ue
}, {
trimmed: "ContactFilter",
name: "b2ContactFilter",
def: _e
}, {
trimmed: "ContactImpulse",
name: "b2ContactImpulse",
def: me
}, {
trimmed: "ContactListener",
name: "b2ContactListener",
def: fe
}, {
trimmed: "QueryCallback",
name: "b2QueryCallback",
def: de
}, {
trimmed: "RayCastCallback",
name: "b2RayCastCallback",
def: pe
}, {
trimmed: "TimeStep",
name: "b2TimeStep",
def: ge
}, {
trimmed: "Position",
name: "b2Position",
def: ye
}, {
trimmed: "Velocity",
name: "b2Velocity",
def: ve
}, {
trimmed: "SolverData",
name: "b2SolverData",
def: xe
}, {
trimmed: "World",
name: "b2World",
def: Se
}, {
trimmed: "MixFriction",
name: "b2MixFriction",
def: Me
}, {
trimmed: "MixRestitution",
name: "b2MixRestitution",
def: Ie
}, {
trimmed: "ContactRegister",
name: "b2ContactRegister",
def: Pe
}, {
trimmed: "ContactEdge",
name: "b2ContactEdge",
def: Be
}, {
trimmed: "Contact",
name: "b2Contact",
def: Re
}, {
trimmed: "CircleContact",
name: "b2CircleContact",
def: Le
}, {
trimmed: "PolygonContact",
name: "b2PolygonContact",
def: Ue
}, {
trimmed: "ChainAndCircleContact",
name: "b2ChainAndCircleContact",
def: Fe
}, {
trimmed: "ChainAndPolygonContact",
name: "b2ChainAndPolygonContact",
def: Ne
}, {
trimmed: "EdgeAndCircleContact",
name: "b2EdgeAndCircleContact",
def: ke
}, {
trimmed: "EdgeAndPolygonContact",
name: "b2EdgeAndPolygonContact",
def: ze
}, {
trimmed: "PolygonAndCircleContact",
name: "b2PolygonAndCircleContact",
def: Ge
}, {
trimmed: "defaultFilter",
name: "b2_defaultFilter",
def: Ve
}, {
trimmed: "defaultListener",
name: "b2_defaultListener",
def: je
}, {
trimmed: "ContactManager",
name: "b2ContactManager",
def: We
}, {
trimmed: "VelocityConstraintPoint",
name: "b2VelocityConstraintPoint",
def: He
}, {
trimmed: "ContactPositionConstraint",
name: "b2ContactPositionConstraint",
def: qe
}, {
trimmed: "ContactVelocityConstraint",
name: "b2ContactVelocityConstraint",
def: Xe
}, {
trimmed: "PositionSolverManifold",
name: "b2PositionSolverManifold",
def: Ye
}, {
trimmed: "ContactSolverDef",
name: "b2ContactSolverDef",
def: Je
}, {
trimmed: "ContactSolver",
name: "b2ContactSolver",
def: Ze
}, {
trimmed: "Island",
name: "b2Island",
def: Ke
}, {
trimmed: "Jacobian",
name: "b2Jacobian",
def: function() {
this.linear = new E();
this.angularA = 0;
this.angularB = 0;
}
}, {
trimmed: "JointEdge",
name: "b2JointEdge",
def: ii
}, {
trimmed: "JointDef",
name: "b2JointDef",
def: ni
}, {
trimmed: "Joint",
name: "b2Joint",
def: ri
}, {
trimmed: "RevoluteJointDef",
name: "b2RevoluteJointDef",
def: si
}, {
trimmed: "RevoluteJoint",
name: "b2RevoluteJoint",
def: ai
}, {
trimmed: "MouseJointDef",
name: "b2MouseJointDef",
def: oi
}, {
trimmed: "MouseJoint",
name: "b2MouseJoint",
def: hi
}, {
trimmed: "DistanceJointDef",
name: "b2DistanceJointDef",
def: li
}, {
trimmed: "DistanceJoint",
name: "b2DistanceJoint",
def: ci
}, {
trimmed: "PrismaticJointDef",
name: "b2PrismaticJointDef",
def: ui
}, {
trimmed: "PrismaticJoint",
name: "b2PrismaticJoint",
def: _i
}, {
trimmed: "FrictionJointDef",
name: "b2FrictionJointDef",
def: mi
}, {
trimmed: "FrictionJoint",
name: "b2FrictionJoint",
def: fi
}, {
trimmed: "WeldJointDef",
name: "b2WeldJointDef",
def: di
}, {
trimmed: "WeldJoint",
name: "b2WeldJoint",
def: pi
}, {
trimmed: "WheelJointDef",
name: "b2WheelJointDef",
def: gi
}, {
trimmed: "WheelJoint",
name: "b2WheelJoint",
def: yi
}, {
trimmed: "GearJointDef",
name: "b2GearJointDef",
def: vi
}, {
trimmed: "GearJoint",
name: "b2GearJoint",
def: xi
}, {
trimmed: "MotorJointDef",
name: "b2MotorJointDef",
def: Ai
}, {
trimmed: "MotorJoint",
name: "b2MotorJoint",
def: bi
}, {
trimmed: "PulleyJointDef",
name: "b2PulleyJointDef",
def: Ti
}, {
trimmed: "PulleyJoint",
name: "b2PulleyJoint",
def: Ci
}, {
trimmed: "RopeJointDef",
name: "b2RopeJointDef",
def: wi
}, {
trimmed: "RopeJoint",
name: "b2RopeJoint",
def: Si
}, {
trimmed: "RopeDef",
name: "b2RopeDef",
def: function() {
this.vertices = null;
this.count = 0;
this.masses = null;
this.gravity = new E();
this.damping = .1;
this.k2 = .9;
this.k3 = .1;
}
}, {
trimmed: "Rope",
name: "b2Rope",
def: Di
}, {
trimmed: "maxManifoldPoints",
name: "b2_maxManifoldPoints",
def: h
}, {
trimmed: "maxPolygonVertices",
name: "b2_maxPolygonVertices",
def: l
}, {
trimmed: "aabbExtension",
name: "b2_aabbExtension",
def: .1
}, {
trimmed: "aabbMultiplier",
name: "b2_aabbMultiplier",
def: 2
}, {
trimmed: "linearSlop",
name: "b2_linearSlop",
def: c
}, {
trimmed: "angularSlop",
name: "b2_angularSlop",
def: u
}, {
trimmed: "polygonRadius",
name: "b2_polygonRadius",
def: _
}, {
trimmed: "maxSubSteps",
name: "b2_maxSubSteps",
def: 8
}, {
trimmed: "maxTOIContacts",
name: "b2_maxTOIContacts",
def: 32
}, {
trimmed: "velocityThreshold",
name: "b2_velocityThreshold",
def: 1
}, {
trimmed: "maxLinearCorrection",
name: "b2_maxLinearCorrection",
def: .2
}, {
trimmed: "maxAngularCorrection",
name: "b2_maxAngularCorrection",
def: m
}, {
trimmed: "maxTranslation",
name: "b2_maxTranslation",
def: 2
}, {
trimmed: "maxTranslationSquared",
name: "b2_maxTranslationSquared",
def: 4
}, {
trimmed: "maxRotation",
name: "b2_maxRotation",
def: f
}, {
trimmed: "maxRotationSquared",
name: "b2_maxRotationSquared",
def: d
}, {
trimmed: "baumgarte",
name: "b2_baumgarte",
def: .2
}, {
trimmed: "toiBaugarte",
name: "b2_toiBaugarte",
def: .75
}, {
trimmed: "timeToSleep",
name: "b2_timeToSleep",
def: .5
}, {
trimmed: "linearSleepTolerance",
name: "b2_linearSleepTolerance",
def: .01
}, {
trimmed: "angularSleepTolerance",
name: "b2_angularSleepTolerance",
def: p
}, {
trimmed: "epsilon",
name: "b2_epsilon",
def: a
}, {
trimmed: "JsonSerializer",
name: "b2JsonSerializer",
def: Mi
}, {
trimmed: "RUBELoader",
name: "b2RUBELoader",
def: Ii
}, {
trimmed: "Profiler",
name: "b2Profiler",
def: i
} ];
if ("undefined" !== ("object" === (e = typeof b2_compatibility) ? t(b2_compatibility) : e) && "undefined" !== ("object" === (e = typeof window) ? t(window) : e)) for (var Bi = 0; Bi < Pi.length; ++Bi) window[Pi[Bi].name] = Pi[Bi].def; else {
var Ri = {};
for (Bi = 0; Bi < Pi.length; ++Bi) Ri[Pi[Bi].trimmed] = Pi[Bi].def;
"undefined" !== ("object" === (e = typeof n) ? t(n) : e) ? n.exports = Ri : window.b2 = Ri;
}
})();
}), {} ],
289: [ (function(i, n, r) {
var s = "undefined" === ("object" === (e = typeof window) ? t(window) : e) ? global : window;
cc = s.cc || {};
_cc = s._cc || {};
_cc = {};
i("./predefine");
i("./polyfill/string");
i("./polyfill/misc");
i("./polyfill/array");
i("./polyfill/typescript");
i("./cocos2d/core/predefine");
i("./cocos2d");
i("./extends");
0;
i("./jsb/jsb-loader.js");
n.exports = cc;
}), {
"./cocos2d": 249,
"./cocos2d/core/predefine": 178,
"./extends": 269,
"./jsb/jsb-loader.js": 293,
"./package": void 0,
"./polyfill/array": 297,
"./polyfill/misc": 298,
"./polyfill/string": 299,
"./polyfill/typescript": 300,
"./predefine": 301
} ],
290: [ (function(t, e, i) {
t("../index");
t("./jsb-node");
t("./jsb-audio");
t("./jsb-loader");
t("./jsb-reflection");
t("./jsb-editbox");
}), {
"../index": 289,
"./jsb-audio": 291,
"./jsb-editbox": 292,
"./jsb-loader": 293,
"./jsb-node": 294,
"./jsb-reflection": 295
} ],
291: [ (function(i, n, r) {
cc.Audio = function(t) {
this.src = t;
this.volume = 1;
this.loop = !1;
this.id = -1;
};
(function(i, n) {
cc.audioEngine = n;
n.setMaxWebAudioSize = function() {};
i.State = n.AudioState;
i.play = function() {
n.stop(this.id);
this.id = n.play(this.src, this.loop, this.volume);
};
i.pause = function() {
n.pause(this.id);
};
i.resume = function() {
n.resume(this.id);
};
i.stop = function() {
n.stop(this.id);
};
i.destroy = function() {};
i.setLoop = function(t) {
this.loop = t;
n.setLoop(this.id, t);
};
i.getLoop = function() {
return this.loop;
};
i.setVolume = function(t) {
this.volume = t;
return n.setVolume(this.id, t);
};
i.getVolume = function() {
return this.volume;
};
i.setCurrentTime = function(t) {
n.setCurrentTime(this.id, t);
};
i.getCurrentTime = function() {
return n.getCurrentTime(this.id);
};
i.getDuration = function() {
return n.getDuration(this.id);
};
i.getState = function() {
return n.getState(this.id);
};
var r = {
id: -1,
clip: "",
loop: !1,
volume: 1
}, s = {
volume: 1
};
n.play = function(i, r, s) {
"number" !== ("object" === (e = typeof s) ? t(s) : e) && (s = 1);
var a;
if ("string" === ("object" === (e = typeof i) ? t(i) : e)) {
cc.warnID(8401, "cc.audioEngine", "cc.AudioClip", "AudioClip", "cc.AudioClip", "audio");
a = i;
} else {
if (!i) return;
a = i._nativeAsset;
}
var o = cc.loader.md5Pipe;
o && (a = o.transformURL(a));
return n.play2d(a, r, s);
};
n.playMusic = function(t, e) {
n.stop(r.id);
r.id = n.play(t, e, r.volume);
r.loop = e;
r.clip = t;
return r.id;
};
n.stopMusic = function() {
n.stop(r.id);
};
n.pauseMusic = function() {
n.pause(r.id);
return r.id;
};
n.resumeMusic = function() {
n.resume(r.id);
return r.id;
};
n.getMusicVolume = function() {
return r.volume;
};
n.setMusicVolume = function(t) {
r.volume = t;
n.setVolume(r.id, r.volume);
return t;
};
n.isMusicPlaying = function() {
return n.getState(r.id) === n.AudioState.PLAYING;
};
n.playEffect = function(t, e) {
return n.play(t, e || !1, s.volume);
};
n.setEffectsVolume = function(t) {
s.volume = t;
};
n.getEffectsVolume = function() {
return s.volume;
};
n.pauseEffect = function(t) {
return n.pause(t);
};
n.pauseAllEffects = function() {
var t = n.getState(r.id) === n.AudioState.PLAYING;
n.pauseAll();
t && n.resume(r.id);
};
n.resumeEffect = function(t) {
n.resume(t);
};
n.resumeAllEffects = function() {
var t = n.getState(r.id) === n.AudioState.PAUSED;
n.resumeAll();
t && n.getState(r.id) === n.AudioState.PLAYING && n.pause(r.id);
};
n.stopEffect = function(t) {
return n.stop(t);
};
n.stopAllEffects = function() {
var t = n.getState(r.id) === n.AudioState.PLAYING, e = n.getCurrentTime(r.id);
n.stopAll();
if (t) {
r.id = n.play(r.clip, r.loop);
n.setCurrentTime(r.id, e);
}
};
n._uncache = n.uncache;
n.uncache = function(i) {
var r;
if ("string" === ("object" === (e = typeof i) ? t(i) : e)) {
cc.warnID(8401, "cc.audioEngine", "cc.AudioClip", "AudioClip", "cc.AudioClip", "audio");
r = i;
} else {
if (!i) return;
r = i._nativeAsset;
}
n._uncache(r);
};
n._preload = n.preload;
n.preload = function(t, e) {
cc.warn("`cc.audioEngine.preload` is deprecated, use `cc.loader.loadRes(url, cc.AudioClip)` instead please.");
n._preload(t, e);
};
})(cc.Audio.prototype, jsb.AudioEngine);
}), {} ],
292: [ (function(t, e, i) {
(function() {
if (cc && cc.EditBox) {
var t = cc.EditBox.KeyboardReturnType, e = cc.EditBox.InputMode, i = cc.EditBox.InputFlag, n = cc.EditBox._EditBoxImpl.prototype;
n.createInput = function() {
var n = this, s = this._inputMode === e.ANY, a = (function(t) {
switch (t) {
case e.EMAIL_ADDR:
return "email";

case e.NUMERIC:
case e.DECIMAL:
return "number";

case e.PHONE_NUMBER:
return "phone";

case e.URL:
return "url";

case e.SINGLE_LINE:
case e.ANY:
default:
return "text";
}
})(n._inputMode);
n._inputFlag === i.PASSWORD && (a = "password");
var o = this._getRect();
jsb.inputBox.show({
defaultValue: n._text,
maxLength: n._maxLength,
multiple: s,
confirmHold: !1,
confirmType: (function(e) {
switch (e) {
case t.DEFAULT:
case t.DONE:
return "done";

case t.SEND:
return "send";

case t.SEARCH:
return "search";

case t.GO:
return "go";

case t.NEXT:
return "next";
}
return "done";
})(n._returnType),
inputType: a,
originX: o.x,
originY: o.y,
width: o.width,
height: o.height
});
if (this._delegate) {
var h = this._delegate;
cc.Component.EventHandler.emitEvents(h.editingDidBegan, h);
h.node.emit("editing-did-began", h);
r(h);
}
function l(t) {
n._delegate && n._delegate.editBoxEditingReturn && n._delegate.editBoxEditingReturn();
}
jsb.inputBox.onConfirm(l);
function c(t) {
t.value.length > n._maxLength && (t.value = t.value.slice(0, n._maxLength));
if (n._delegate && n._delegate.editBoxTextChanged && n._text !== t.value) {
n._text = t.value;
n._delegate.editBoxTextChanged(n._text);
}
}
jsb.inputBox.onInput(c);
jsb.inputBox.onComplete((function t(e) {
n._endEditing();
jsb.inputBox.offConfirm(l);
jsb.inputBox.offInput(c);
jsb.inputBox.offComplete(t);
}));
};
n.setTabIndex = function(t) {};
n.setFocus = function() {};
n.isFocused = function() {}, n.stayOnTop = function(t) {};
n._updateMatrix = function() {};
n._updateSize = function(t, e) {};
n._getRect = function() {
var t = this._node, e = cc.view._scaleX, i = cc.view._scaleY, n = cc.view._devicePixelRatio, r = cc.vmath, s = r.mat4.create();
t.getWorldMatrix(s);
var a = t._contentSize, o = cc.v3();
o.x = -t._anchorPoint.x * a.width;
o.y = -t._anchorPoint.y * a.height;
r.mat4.translate(s, s, o);
e /= n;
i /= n;
var h = s.m00 * e, l = s.m05 * i;
return {
x: s.m12 * h,
y: s.m13 * l,
width: a.width * h,
height: a.height * l
};
};
n.setMaxLength = function(t) {
if (!isNaN(t)) {
t < 0 && (t = 65535);
this._maxLength = t;
}
};
n.setString = function(t) {
this._text = t;
this._updateInput();
r(this._delegate);
};
n._updateInput = function() {
var t = this._text;
this._inputFlag === i.PASSWORD && (t = t.replace(/./g, "*"));
this._delegate._textLabel.string = t;
};
n.setFontSize = function(t) {
this._edFontSize = t || this._edFontSize;
this._delegate._textLabel.fontSize = this._edFontSize;
};
n.setFontColor = function(t) {
this._textColor = t;
this._delegate._textLabel.fontColor = this._textColor;
};
n.setInputMode = function(t) {
this._inputMode = t;
};
n.setInputFlag = function(t) {
this._inputFlag = t;
};
n.setReturnType = function(t) {
this._returnType = t;
};
n._onTouchEnded = function() {
this.createInput();
};
n._endEditing = function() {
if (this._editing) {
this._endEditingOnMobile();
this._delegate && this._delegate.editBoxEditingDidEnded && this._delegate.editBoxEditingDidEnded();
}
this._editing = !1;
};
n.clear = function() {
this._node = null;
this.setDelegate(null);
};
}
function r(t) {
var e = t._placeholderLabel, i = t._textLabel, n = t._impl._text;
e.node.active = "" === n;
i.node.active = "" !== n;
}
})();
}), {} ],
293: [ (function(t, e, i) {
"use strict";
t("../cocos2d/core/load-pipeline");
function n(t, e) {
return null;
}
function r(e, i) {
t(e.url);
return null;
}
function s(t, e) {
if (t._owner instanceof cc.AudioClip) return t.url;
var i = new cc.AudioClip();
i._setRawAsset(t.rawUrl, !1);
i._nativeAsset = t.url;
return i;
}
function a(t, e) {
var i = new Image();
i.src = t.url;
i.onload = function(t) {
e(null, i);
};
}
cc.loader.addDownloadHandlers({
js: r,
jsc: r,
png: a,
jpg: a,
bmp: a,
jpeg: a,
gif: a,
ico: a,
tiff: a,
webp: a,
image: a,
mp3: s,
ogg: s,
wav: s,
mp4: s,
m4a: s,
font: n,
eot: n,
ttf: n,
woff: n,
svg: n,
ttc: n
});
}), {
"../cocos2d/core/load-pipeline": 114
} ],
294: [ (function(t, e, i) {
"use strict";
var n = t("../cocos2d/core/CCNode"), r = t("../cocos2d/core/renderer/render-engine").math, s = new Float32Array(16), a = r.mat4.create();
function o(t, e) {
t[0] = e.m00;
t[1] = e.m01;
t[2] = e.m02;
t[3] = e.m03;
t[4] = e.m04;
t[5] = e.m05;
t[6] = e.m06;
t[7] = e.m07;
t[8] = e.m08;
t[9] = e.m09;
t[10] = e.m10;
t[11] = e.m11;
t[12] = e.m12;
t[13] = e.m13;
t[14] = e.m14;
t[15] = e.m15;
}
n.prototype.getWorldRTInAB = function() {
this.getWorldRT(a);
o(s, a);
return s;
};
n.prototype.getWorldMatrixInAB = function() {
this._updateWorldMatrix();
o(s, this._worldMatrix);
return s;
};
}), {
"../cocos2d/core/CCNode": 28,
"../cocos2d/core/renderer/render-engine": 195
} ],
295: [ (function(t, e, i) {
if (window.JavascriptJavaBridge && cc.sys.os == cc.sys.OS_ANDROID) {
jsb.reflection = new JavascriptJavaBridge();
cc.sys.capabilities.keyboard = !0;
} else !window.JavaScriptObjCBridge || cc.sys.os != cc.sys.OS_IOS && cc.sys.os != cc.sys.OS_OSX || (jsb.reflection = new JavaScriptObjCBridge());
}), {} ],
296: [ (function(t, e, i) {}), {} ],
297: [ (function(t, e, i) {
Array.isArray || (Array.isArray = function(t) {
return "[object Array]" === Object.prototype.toString.call(t);
});
}), {} ],
298: [ (function(i, n, r) {
Math.sign || (Math.sign = function(t) {
return 0 === (t = +t) || isNaN(t) ? t : t > 0 ? 1 : -1;
});
Number.isInteger || (Number.isInteger = function(i) {
return "number" === ("object" === (e = typeof i) ? t(i) : e) && isFinite(i) && Math.floor(i) === i;
});
var s = window.performance || Date, a = Object.create(null);
console.time = function(t) {
a[t] = s.now();
};
console.timeEnd = function(t) {
var e = a[t], i = s.now() - e;
console.log(t + ": " + i + "ms");
};
}), {} ],
299: [ (function(i, n, r) {
String.prototype.startsWith || (String.prototype.startsWith = function(t, e) {
e = e || 0;
return this.lastIndexOf(t, e) === e;
});
String.prototype.endsWith || (String.prototype.endsWith = function(i, n) {
("undefined" === ("object" === (e = typeof n) ? t(n) : e) || n > this.length) && (n = this.length);
n -= i.length;
var r = this.indexOf(i, n);
return -1 !== r && r === n;
});
}), {} ],
300: [ (function(i, n, r) {
var s = Object.setPrototypeOf || {
__proto__: []
} instanceof Array && function(t, e) {
t.__proto__ = e;
} || function(t, e) {
for (var i in e) e.hasOwnProperty(i) && (t[i] = e[i]);
};
window.__extends = function(t, e) {
s(t, e);
function i() {
this.constructor = t;
}
t.prototype = null === e ? Object.create(e) : (i.prototype = e.prototype, new i());
};
window.__assign = Object.assign || function(t) {
for (var e, i = 1, n = arguments.length; i < n; i++) {
e = arguments[i];
for (var r in e) Object.prototype.hasOwnProperty.call(e, r) && (t[r] = e[r]);
}
return t;
};
window.__rest = function(i, n) {
var r = {};
for (var s in i) Object.prototype.hasOwnProperty.call(i, s) && n.indexOf(s) < 0 && (r[s] = i[s]);
if (null != i && "function" === ("object" === (e = typeof Object.getOwnPropertySymbols) ? t(Object.getOwnPropertySymbols) : e)) {
var a = 0;
for (s = Object.getOwnPropertySymbols(i); a < s.length; a++) n.indexOf(s[a]) < 0 && (r[s[a]] = i[s[a]]);
}
return r;
};
window.__decorate = function(i, n, r, s) {
var a, o = arguments.length, h = o < 3 ? n : null === s ? s = Object.getOwnPropertyDescriptor(n, r) : s;
if ("object" === ("object" === (e = typeof Reflect) ? t(Reflect) : e) && "function" === ("object" === (e = typeof Reflect.decorate) ? t(Reflect.decorate) : e)) h = Reflect.decorate(i, n, r, s); else for (var l = i.length - 1; l >= 0; l--) (a = i[l]) && (h = (o < 3 ? a(h) : o > 3 ? a(n, r, h) : a(n, r)) || h);
return o > 3 && h && Object.defineProperty(n, r, h), h;
};
window.__param = function(t, e) {
return function(i, n) {
e(i, n, t);
};
};
window.__metadata = function(i, n) {
if ("object" === ("object" === (e = typeof Reflect) ? t(Reflect) : e) && "function" === ("object" === (e = typeof Reflect.metadata) ? t(Reflect.metadata) : e)) return Reflect.metadata(i, n);
};
window.__awaiter = function(t, e, i, n) {
return new (i || (i = Promise))(function(r, s) {
function a(t) {
try {
h(n.next(t));
} catch (t) {
s(t);
}
}
function o(t) {
try {
h(n.throw(t));
} catch (t) {
s(t);
}
}
function h(t) {
t.done ? r(t.value) : new i(function(e) {
e(t.value);
}).then(a, o);
}
h((n = n.apply(t, e || [])).next());
});
};
window.__generator = function(i, n) {
var r, s, a, o, h = {
label: 0,
sent: function() {
if (1 & a[0]) throw a[1];
return a[1];
},
trys: [],
ops: []
};
return o = {
next: l(0),
throw: l(1),
return: l(2)
}, "function" === ("object" === (e = typeof Symbol) ? t(Symbol) : e) && (o[Symbol.iterator] = function() {
return this;
}), o;
function l(t) {
return function(e) {
return (function(t) {
if (r) throw new TypeError("Generator is already executing.");
for (;h; ) try {
if (r = 1, s && (a = s[2 & t[0] ? "return" : t[0] ? "throw" : "next"]) && !(a = a.call(s, t[1])).done) return a;
(s = 0, a) && (t = [ 0, a.value ]);
switch (t[0]) {
case 0:
case 1:
a = t;
break;

case 4:
h.label++;
return {
value: t[1],
done: !1
};

case 5:
h.label++;
s = t[1];
t = [ 0 ];
continue;

case 7:
t = h.ops.pop();
h.trys.pop();
continue;

default:
if (!(a = h.trys, a = a.length > 0 && a[a.length - 1]) && (6 === t[0] || 2 === t[0])) {
h = 0;
continue;
}
if (3 === t[0] && (!a || t[1] > a[0] && t[1] < a[3])) {
h.label = t[1];
break;
}
if (6 === t[0] && h.label < a[1]) {
h.label = a[1];
a = t;
break;
}
if (a && h.label < a[2]) {
h.label = a[2];
h.ops.push(t);
break;
}
a[2] && h.ops.pop();
h.trys.pop();
continue;
}
t = n.call(i, h);
} catch (e) {
t = [ 6, e ];
s = 0;
} finally {
r = a = 0;
}
if (5 & t[0]) throw t[1];
return {
value: t[0] ? t[1] : void 0,
done: !0
};
})([ t, e ]);
};
}
};
window.__exportStar = function(t, e) {
for (var i in t) e.hasOwnProperty(i) || (e[i] = t[i]);
};
window.__values = function(i) {
var n = "function" === ("object" === (e = typeof Symbol) ? t(Symbol) : e) && i[Symbol.iterator], r = 0;
return n ? n.call(i) : {
next: function() {
i && r >= i.length && (i = void 0);
return {
value: i && i[r++],
done: !i
};
}
};
};
window.__read = function(i, n) {
var r = "function" === ("object" === (e = typeof Symbol) ? t(Symbol) : e) && i[Symbol.iterator];
if (!r) return i;
var s, a, o = r.call(i), h = [];
try {
for (;(void 0 === n || n-- > 0) && !(s = o.next()).done; ) h.push(s.value);
} catch (t) {
a = {
error: t
};
} finally {
try {
s && !s.done && (r = o.return) && r.call(o);
} finally {
if (a) throw a.error;
}
}
return h;
};
window.__spread = function() {
for (var t = [], e = 0; e < arguments.length; e++) t = t.concat(__read(arguments[e]));
return t;
};
window.__await = function(t) {
return this instanceof __await ? (this.v = t, this) : new __await(t);
};
window.__asyncGenerator = function(t, e, i) {
if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
var n, r = i.apply(t, e || []), s = [];
return n = {}, a("next"), a("throw"), a("return"), n[Symbol.asyncIterator] = function() {
return this;
}, n;
function a(t) {
r[t] && (n[t] = function(e) {
return new Promise(function(i, n) {
s.push([ t, e, i, n ]) > 1 || o(t, e);
});
});
}
function o(t, e) {
try {
(function(t) {
t.value instanceof __await ? Promise.resolve(t.value.v).then(h, l) : c(s[0][2], t);
})(r[t](e));
} catch (t) {
c(s[0][3], t);
}
}
function h(t) {
o("next", t);
}
function l(t) {
o("throw", t);
}
function c(t, e) {
(t(e), s.shift(), s.length) && o(s[0][0], s[0][1]);
}
};
window.__asyncDelegator = function(t) {
var e, i;
return e = {}, n("next"), n("throw", (function(t) {
throw t;
})), n("return"), e[Symbol.iterator] = function() {
return this;
}, e;
function n(n, r) {
t[n] && (e[n] = function(e) {
return (i = !i) ? {
value: __await(t[n](e)),
done: "return" === n
} : r ? r(e) : e;
});
}
};
window.__asyncValues = function(i) {
if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
var n = i[Symbol.asyncIterator];
return n ? n.call(i) : "function" === ("object" === (e = typeof __values) ? t(__values) : e) ? __values(i) : i[Symbol.iterator]();
};
}), {} ],
301: [ (function(i, n, r) {
var s = "undefined" === ("object" === (e = typeof window) ? t(window) : e) ? global : window;
function a(i, n) {
"undefined" === ("object" === (e = typeof s[i]) ? t(s[i]) : e) && (s[i] = n);
}
function o(i) {
return "object" === ("object" === (e = typeof s[i]) ? t(s[i]) : e);
}
a("CC_TEST", o("tap") || o("QUnit"));
a("CC_EDITOR", o("Editor") && o("process") && "electron" in process.versions);
a("CC_PREVIEW", !0);
a("CC_DEV", !0);
a("CC_DEBUG", !0);
a("CC_JSB", o("jsb"));
a("CC_BUILD", !1);
a("CC_WECHATGAME", o("wx") && wx.getSystemInfoSync);
a("CC_QQPLAY", o("bk"));
a("CC_SUPPORT_JIT", !0);
0;
s.CocosEngine = cc.ENGINE_VERSION = "2.0.0 alpha";
}), {} ]
}, {}, [ 290 ]);
function t(t) {
return t && t.toString && "[object CallbackConstructor]" === t.toString() ? "function" : "object";
}
var e = "";
})();